{"version":3,"file":"index.js","names":["Object","defineProperty","exports","value","createFileSystemAdapter","FILE_SYSTEM_ADAPTER","fs","__webpack_require__","lstat","stat","lstatSync","statSync","readdir","readdirSync","fsMethods","undefined","assign","IS_SUPPORT_READDIR_WITH_FILE_TYPES","NODE_PROCESS_VERSION_PARTS","process","versions","node","split","Error","MAJOR_VERSION","Number","parseInt","MINOR_VERSION","SUPPORTED_MAJOR_VERSION","SUPPORTED_MINOR_VERSION","IS_MATCHED_BY_MAJOR","IS_MATCHED_BY_MAJOR_AND_MINOR","Settings","scandirSync","scandir","async","sync","settings_1","default","path","optionsOrSettingsOrCallback","callback","read","getSettings","optionsOrSettings","settings","settingsOrOptions","readdirWithFileTypes","fsStat","rpl","constants_1","utils","common","directory","stats","withFileTypes","readdirError","dirents","callFailureCallback","entries","map","dirent","name","joinPathSegments","pathSegmentSeparator","followSymbolicLinks","callSuccessCallback","tasks","entry","makeRplTaskEntry","rplError","rplEntries","done","isSymbolicLink","statError","throwErrorOnBrokenSymbolicLink","createDirentFromStats","names","fsStatSettings","error","result","a","b","separator","endsWith","entryPath","constructor","_options","this","_getValue","sep","followSymbolicLink","option","DirentFromStats","isBlockDevice","bind","isCharacterDevice","isDirectory","isFIFO","isFile","isSocket","lstatError","markSymbolicLink","walkStream","walkSync","walk","async_1","stream_1","sync_1","provider","AsyncProvider","_root","_settings","_reader","_storage","onError","onEntry","push","onEnd","StreamProvider","_stream","Readable","objectMode","destroy","isDestroyed","emit","SyncProvider","events_1","fsScandir","fastq","reader_1","AsyncReader","super","_scandir","_emitter","EventEmitter","_queue","_worker","concurrency","_isFatalError","_isDestroyed","drain","setImmediate","_pushToQueue","basePath","killAndDrain","on","once","base","queueItem","_handleError","item","fsScandirSettings","_handleEntry","isFatalError","fullpath","isAppliedFilter","entryFilter","_emitEntry","deepFilter","replacePathSegmentSeparator","errorFilter","filter","filepath","join","Reader","SyncReader","arguments","Set","_handleQueue","add","values","_handleDirectory","_pushToStorage","POSITIVE_INFINITY","ts","minimatch","fastGlob","fs$1","mkdirp","os","path$2","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","ts__namespace","minimatch__default","fastGlob__default","fs__namespace","mkdirp__default","os__namespace","path__namespace","KeyValueCache","cacheItems","Map","getSize","size","getValues","getValuesAsArray","Array","from","getKeys","getEntries","getOrCreate","key","createFunc","set","has","replaceKey","newKey","delete","removeByKey","clear","ComparerToStoredComparer","comparer","storedValue","compareTo","LocaleStringComparer","comparisonResult","localeCompare","instance","PropertyComparer","getProperty","PropertyStoredComparer","ArrayUtils","isReadonlyArray","isNullOrEmpty","length","getUniqueItems","index","indexOf","removeFirst","splice","removeAll","isMatch","removedItems","i","flatten","items","reduce","concat","toIterator","sortByProperty","getProp","sort","groupBy","getGroup","groups","group","toString","binaryInsertWithOverwrite","newItem","top","bottom","mid","Math","floor","binarySearch","storedComparer","containsSubArray","subArray","findIndex","deepClone","objToClone","clone","obj","newObj","prototype","propName","cloneItem","cloneArray","array","EventContainer","subscriptions","subscribe","subscription","getIndex","unsubscribe","fire","arg","IterableUtils","find","condition","nameof","key1","key2","ObjectUtils","c","es5Assign","to","nextSource","nextKey","hasOwnProperty","call","matchFiles","extensions","excludes","includes","useCaseSensitiveFileNames","currentDirectory","depth","realpath","directoryExists","apply","getFileMatcherPatterns","getEmitModuleResolutionKind","compilerOptions","getSyntaxKindName","kind","getKindCache","kindCache","SyntaxKind","isNaN","errors","BaseError","message","ArgumentError","argName","ArgumentNullOrWhitespaceError","ArgumentOutOfRangeError","range","ArgumentTypeError","expectedType","actualType","PathNotFoundError","prefix","code","DirectoryNotFoundError","dirPath","FileNotFoundError","filePath","InvalidOperationError","NotImplementedError","NotSupportedError","throwIfNotType","throwIfNotString","throwIfWhitespaceOrNotString","trim","throwIfOutOfRange","throwIfRangeOutOfRange","actualRange","throwNotImplementedForSyntaxKindError","throwIfNegative","throwIfNullOrUndefined","errorMessage","throwNotImplementedForNeverValueError","JSON","stringify","throwIfNotEqual","actual","expected","description","throwIfTrue","CharCodes","ASTERISK","charCodeAt","NEWLINE","CARRIAGE_RETURN","SPACE","TAB","CLOSE_BRACE","regExWhitespaceSet","StringUtils","isWhitespaceCharCode","charCode","isSpaces","text","hasBom","stripBom","slice","stripQuotes","isQuoted","substring","startsWith","isNullOrWhitespace","str","isWhitespace","startsWithNewLine","endsWithNewLine","insertAtLastNonWhitespace","insertText","getLineNumberAtPos","pos","count","getLengthFromLineStartAtPos","getLineStartFromPos","previousCharCode","getLineEndFromPos","currentChar","escapeForWithinString","quoteKind","escapeChar","replace","char","removeIndentation","opts","isInStringAtPos","indentSizeInSpaces","startPositions","endPositions","minIndentWidth","analyze","buildString","isAtStartOfLine","spacesCount","tabsCount","indentWidth","ceil","deindentWidth","lastEndPos","startPosition","endPosition","indentCount","indent","times","options","indentText","fullIndentationText","repeat","totalIndentSpaces","abs","lineStart","lineEnd","appendLine","start","indentSpaces","SortedKeyValueArray","getKey","removeByValue","getArrayCopy","hasItems","WeakCache","WeakMap","createCompilerSourceFile","scriptSnapshot","scriptTarget","version","setParentNodes","scriptKind","createLanguageServiceSourceFile","ScriptTarget","Latest","createDocumentCache","files","cache","InternalDocumentCache","_addFiles","FileSystemDocumentCache","fileSystem","documentCache","absoluteToOriginalPath","_getFilePaths","getStandardizedAbsolutePath","getDocumentIfMatch","originalFilePath","_getDocumentIfMatch","_fileTexts","_documents","file","fileName","_getCacheForFileSystem","absoluteFilePath","fileText","getText","getLength","_getDocument","documentKey","_getKey","document","_a","_b","libFiles","getLibFiles","libFolderInMemoryPath","getLibFolderPath","libFolderPath","skipLoadingLibFiles","path$1","BrowserRuntime","BrowserRuntimeFileSystem","BrowserRuntimePath","getEnvVar","_name","getEndOfLine","getPathMatchesPattern","pattern","paths","normalize","pathToNormalize","relative","_errorMessage","_path","Promise","reject","deleteSync","readDirSync","_dirPath","readFile","_filePath","_encoding","readFileSync","writeFile","_fileText","writeFileSync","mkdir","mkdirSync","move","_srcPath","_destPath","moveSync","copy","copySync","realpathSync","getCurrentDirectory","glob","_patterns","globSync","isCaseSensitive","NodeRuntime","NodeRuntimeFileSystem","NodeRuntimePath","env","EOL","resolve","rm","recursive","err","rmSync","isSymlink","encoding","data","srcPath","destPath","rename","renameSync","copyFile","copyFileSync","patterns","cwd","absolute","platform","runtime","getRuntime","isNodeJs","globalThis","createHosts","transactionalFileSystem","sourceFileContainer","getNewLine","resolutionHost","getProjectVersion","isKnownTypesPackageName","fileExistsSync","containsSourceFileAtPath","languageServiceHost","getCompilationSettings","getScriptFileNames","getSourceFilePaths","getScriptVersion","sourceFile","getSourceFileFromCacheFromFilePath","getSourceFileVersion","getScriptSnapshot","addOrGetSourceFileFromFilePathSync","markInProject","ScriptSnapshot","fromString","getFullText","getDefaultLibFileName","standardizedPath","fileExists","standardizedFilePath","dirName","containsDirectoryAtPath","directoryExistsSync","resolveModuleNames","resolveTypeReferenceDirectives","getResolvedModuleWithFailedLookupLocationsFromCache","compilerHost","getSourceFile","languageVersion","writeByteOrderMark","sourceFiles","getDirectories","getCanonicalFileName","getEnvironmentVariable","isWindowsRootDirRegex","FileUtils","isNotExistsError","ENOENT","pathJoin","pathIsAbsolute","standardizeSlashes","fileOrDirPath","isAbsolutePath","relativeBase","getAbsolutePath","getDirPath","lastIndexOfSlash","lastIndexOf","getBaseName","getExtension","baseName","lastDotIndex","lastExt","lastExtLowerCase","toLowerCase","standardizeSlashesRegex","isRootDirPath","pathEndsWith","endsWithPath","pathItems","splitPathBySlashes","endsWithItems","pathStartsWith","startsWithPath","isfileOrDirPathEmpty","isStartsWithPathEmpty","startsWithItems","trimSlashStartRegex","trimSlashEndRegex","getParentMostPaths","finalPaths","p","every","readFileOrNotExists","readFileOrNotExistsSync","getTextWithByteOrderMark","getRelativePathTo","absoluteDirPathFrom","absolutePathTo","relativePath","dirOrFilePath","test","getDescendantDirectories","fileSystemWrapper","toAbsoluteGlob","suffix","isNegated","isNegatedGlob","globJoin","dir","charAt","isWindowsAbsolutePath","isWindowsAbsolutePathRegex","isAzureAbsolutePath","isUncPath","uncPathRegex","matchGlobs","addArray","removeArray","removeItem","InMemoryFileSystemHost","directories","getOrCreateDir","descendantDirPath","parentDir","standardizedDirPath","dirPaths","_writeFileSync","standardizedSrcPath","standardizedDestPath","moveDirectory","_copyDirInternal","newDir","toDir","allFilePaths","getAllFilePaths","parentDirPath","directoryPaths","RealFileSystemHost","getFileNotFoundErrorIfNecessary","info","getDirectoryNotFoundErrorIfNecessary","backSlashesToForward","Directory","operations","inboundOperations","isDeleted","wasEverDeleted","childDirs","getExternalOperations","getAncestors","getMoveCopyOrDeleteOperations","o","isAncestorAffectedOperation","getDescendants","getMoveOrCopyOperations","isInternalOperation","thisDir","operation","oldDir","isDescendantOrEqual","isDescendant","getIsDeleted","getWasEverDeleted","ancestor","getAncestorsIterator","setIsDeleted","child","parent","getParent","setParent","removeParent","getChildrenEntriesIterator","childDir","descendants","isFileQueuedForDelete","hasOperation","operationMatches","dequeueFileDelete","removeMatchingOperations","dequeueDirDelete","isRootDir","TransactionalFileSystem","operationIndex","pathCasingMaintainer","PathCasingMaintainer","libFileMap","libFile","queueFileDelete","throwIfLibFile","getOrCreateParentDirectory","getNextOperationIndex","removePath","removeFileDelete","queueMkdir","getOrCreateDirectory","queueDirectoryDelete","queueMoveDirectory","moveDir","destinationDir","moveOperation","queueCopyDirectory","copyDir","copyOperation","flush","getAndClearOperations","executeOperation","flushSync","executeOperationSync","saveForDirectory","throwIfHasExternalOperations","getAndClearOperationsForDir","ensureDirectoryExists","saveForDirectorySync","ensureDirectoryExistsSync","getAndClearParentMkDirOperations","currentDir","removeDirAndSubDirs","parentOperations","deleteSuppressNotFound","deleteSuppressNotFoundSync","moveFileImmediately","oldFilePath","newFilePath","deleteFileImmediately","moveFileImmediatelySync","deleteFileImmediatelySync","copyDirectoryImmediately","srcDirPath","destDirPath","srcDir","destDir","saveTask","all","copyDirectoryImmediatelySync","moveDirectoryImmediately","moveDirectoryImmediatelySync","deleteDirectoryImmediately","addBackDirAndSubDirs","clearDirectoryImmediately","clearDirectoryImmediatelySync","deleteDirectoryImmediatelySync","libFileExists","_fileDeletedInMemory","isPathQueuedForDeletion","getParentDirectoryIfExists","isPathDirectoryInQueueThatExists","getDirectoryIfExists","readFileIfExistsSync","libFileText","readLibFile","_verifyCanReadFile","readFileIfExists","catch","uniqueDirPaths","runtimeDirEntry","standardizedChildDirOrFilePath","filePaths","getFileSystem","standardizedFileOrDirPath","getPath","pathDir","originalParent","dirToRemove","dirToAdd","creatingDirPath","currentDirPath","nextDirPath","hadNextDir","nextDir","commandName","getErrorText","hasCopy","errorText","removeMkDirOperationsForDir","caseInsensitiveMappings","createModuleResolutionHost","getEncoding","dirs","childDirPath","getChildDirectoriesOfDirectory","DocumentRegistry","sourceFileCacheByFilePath","createOrUpdateSourceFile","compilationSettings","updateSourceFile","initialVersion","getNextSourceFileVersion","removeSourceFile","acquireDocument","acquireDocumentWithKey","updateDocument","updateDocumentWithKey","getKeyForCompilationSettings","releaseDocument","releaseDocumentWithKey","reportStats","currentVersion","newSourceFile","target","denoResolutionHostFactory","moduleResolutionHost","getCompilerOptions","moduleNames","containingFile","resolvedModules","moduleName","removeTsExtension","resolveModuleName","resolvedModule","ResolutionHosts","deno","Memoize","propertyName","descriptor","getNewFunction","weakMap","counter","originalFunction","identifier","decorator","args","propertyValues","returnedValue","SettingsContainer","defaultSettings","_defaultSettings","reset","_fireModified","onModified","action","_modifiedEventContainer","CompilerOptionsContainer","charset","__decorate","decorators","desc","r","Reflect","decorate","readDirectory","rootDir","regexFlag","includeDirectoryRegex","includeDirectoryPattern","RegExp","excludeRegex","excludePattern","includeDir","dirPathMatches","getFileSystemEntries","absoluteName","getTsParseConfigHost","host","clearDirectories","TsConfigResolver","tsConfigFilePath","tsConfigDirPath","parseJsonConfigFileContent","getErrors","getPaths","configFileContent","fileNames","getTsConfigFileJson","parseResult","parseConfigFileTextToJson","messageText","config","getCompilerOptionsFromTsConfig","tsConfigResolver","DiagnosticCategory","EmitHint","LanguageVariant","ModuleKind","ModuleResolutionKind","NewLineKind","NodeFlags","ObjectFlags","ScriptKind","SymbolFlags","TypeFlags","TypeFormatFlags","etwModule","require","etwModulePath","module","modulePath","ab","directorySeparator","balanced","maybeMatch","end","pre","body","post","reg","m","match","begs","beg","left","right","ai","bi","pop","expandTop","escSlash","random","escOpen","escClose","escComma","escPeriod","numeric","escapeBraces","unescapeBraces","parseCommaParts","parts","postParts","shift","substr","expand","embrace","isPadded","el","lte","y","gte","isTop","expansions","expansion","isNumericSequence","isAlphaSequence","isSequence","isOptions","N","x","width","max","incr","reverse","pad","some","String","fromCharCode","need","z","j","compile","parse","braces","input","output","isArray","nodupes","noempty","Boolean","fill","ast","invalidBlock","isInvalidBrace","invalidNode","invalid","escapeInvalid","isOpen","isClose","console","log","type","prev","nodes","ranges","wrap","toRegex","strictZeros","MAX_LENGTH","CHAR_0","CHAR_9","CHAR_UPPERCASE_A","CHAR_LOWERCASE_A","CHAR_UPPERCASE_Z","CHAR_LOWERCASE_Z","CHAR_LEFT_PARENTHESES","CHAR_RIGHT_PARENTHESES","CHAR_ASTERISK","CHAR_AMPERSAND","CHAR_AT","CHAR_BACKSLASH","CHAR_BACKTICK","CHAR_CARRIAGE_RETURN","CHAR_CIRCUMFLEX_ACCENT","CHAR_COLON","CHAR_COMMA","CHAR_DOLLAR","CHAR_DOT","CHAR_DOUBLE_QUOTE","CHAR_EQUAL","CHAR_EXCLAMATION_MARK","CHAR_FORM_FEED","CHAR_FORWARD_SLASH","CHAR_HASH","CHAR_HYPHEN_MINUS","CHAR_LEFT_ANGLE_BRACKET","CHAR_LEFT_CURLY_BRACE","CHAR_LEFT_SQUARE_BRACKET","CHAR_LINE_FEED","CHAR_NO_BREAK_SPACE","CHAR_PERCENT","CHAR_PLUS","CHAR_QUESTION_MARK","CHAR_RIGHT_ANGLE_BRACKET","CHAR_RIGHT_CURLY_BRACE","CHAR_RIGHT_SQUARE_BRACKET","CHAR_SEMICOLON","CHAR_SINGLE_QUOTE","CHAR_SPACE","CHAR_TAB","CHAR_UNDERSCORE","CHAR_VERTICAL_LINE","CHAR_ZERO_WIDTH_NOBREAK_SPACE","append","queue","stash","enclose","ele","rangeLimit","q","dollar","exceedsLimit","step","RangeError","encloseBrace","block","TypeError","maxLength","min","SyntaxError","stack","brackets","advance","keepEscaping","next","open","keepQuotes","brace","close","commas","siblings","before","isOpenOrClose","isInteger","num","limit","escapeNode","escaped","acc","flat","arr","taskManager","FastGlob","source","assertPatternsInput","works","getWorks","globStream","stream","merge","generateTasks","generate","isDynamicPattern","escapePath","escape","convertPathToPattern","posix","escapePosixPath","convertPosixPathToPattern","win32","escapeWindowsPath","convertWindowsPathToPattern","_Provider","isValidSource","string","isString","isEmpty","convertPatternGroupToTask","convertPatternGroupsToTasks","groupPatternsByBaseDirectory","getNegativePatternsAsPositive","getPositivePatterns","convertPatternsToTasks","processPatterns","ignore","positivePatterns","negativePatterns","staticPatterns","isStaticPattern","dynamicPatterns","staticTasks","dynamicTasks","braceExpansion","expandPatternsWithBraceExpansion","baseNameMatch","removeDuplicateSlashes","positive","negative","dynamic","patternsOutsideCurrentDirectory","getPatternsOutsideCurrentDirectory","patternsInsideCurrentDirectory","getPatternsInsideCurrentDirectory","outsideCurrentDirectoryGroup","insideCurrentDirectoryGroup","getNegativePatterns","convertToPositivePattern","collection","getBaseDirectory","convertToNegativePattern","provider_1","ProviderAsync","task","root","_getRootDirectory","_getReaderOptions","api","transform","static","partial_1","DeepFilter","_micromatchOptions","getFilter","matcher","_getMatcher","negativeRe","_getNegativePatternsRe","_filter","affectDepthOfReadingPatterns","isAffectDepthOfReadingPattern","convertPatternsToRe","_isSkippedByDeep","_isSkippedSymbolicLink","removeLeadingDotSegment","_isSkippedByPositivePatterns","_isSkippedByNegativePatterns","deep","Infinity","_getEntryLevel","entryPathDepth","basePathDepth","patternsRe","matchAny","EntryFilter","absoluteNegative","relativeNegative","partitionAbsoluteAndRelative","dot","unique","_isDuplicateEntry","_onlyFileFilter","_onlyDirectoryFilter","isMatched","_isMatchToPatternsSet","_createIndexRecord","onlyFiles","onlyDirectories","_isMatchToPatterns","isMatchedByRelativeNegative","isMatchedByAbsoluteNegative","_isMatchToAbsoluteNegative","makeAbsolute","ErrorFilter","_isNonFatalError","errno","isEnoentCodeError","suppressErrors","Matcher","_fillStorage","segments","_getPatternSegments","sections","_splitSegmentsIntoSections","complete","getPatternParts","part","patternRe","makeRe","splitWhen","segment","hasGlobStar","matcher_1","PartialMatcher","levels","section","deep_1","entry_1","error_1","entry_2","Provider","_getMicromatchOptions","entryTransformer","getTransformer","matchBase","nobrace","nocase","caseSensitiveMatch","noext","extglob","noglobstar","globstar","strictSlashes","stream_2","ProviderStream","destination","ProviderSync","EntryTransformer","_transform","unixify","markDirectories","fsWalk","ReaderAsync","_walkAsync","_readerStream","_fsStatSettings","_getFullEntryPath","_makeEntry","ReaderStream","_walkStream","_stat","filepaths","PassThrough","_write","_enc","_getEntry","then","write","_getStat","ReaderSync","_walkSync","_statSync","DEFAULT_FILE_SYSTEM_ADAPTER","CPU_COUNT","cpus","_getFileSystemMethods","methods","predicate","groupIndex","IS_WINDOWS_PLATFORM","LEADING_DOT_SEGMENT_CHARACTERS_COUNT","POSIX_UNESCAPED_GLOB_SYMBOLS_RE","WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE","DOS_DEVICE_PATH_RE","WINDOWS_BACKSLASHES_RE","secondCharactery","isAbsolute","expandBraceExpansion","endsWithSlashGlobStar","isPatternRelatedToParentDirectory","isPositivePattern","isNegativePattern","globParent","micromatch","GLOBSTAR","ESCAPE_SYMBOL","COMMON_GLOB_SYMBOLS_RE","REGEX_CHARACTER_CLASS_SYMBOLS_RE","REGEX_GROUP_SYMBOLS_RE","GLOB_EXTENSION_SYMBOLS_RE","BRACE_EXPANSION_SEPARATORS_RE","DOUBLE_SLASH_RE","hasBraceExpansion","openingBraceIndex","closingBraceIndex","braceContent","flipBackslashes","basename","scan","unshift","merge2","streams","mergedStream","propagateCloseEventToSources","reusify","fastqueue","context","worker","_concurrency","Task","queueHead","queueTail","_running","errorHandler","self","noop","saturated","pause","paused","release","running","resume","idle","getQueue","empty","kill","current","worked","holder","handler","val","queueAsPromised","asyncWrapper","cb","res","pushCb","unshiftCb","drained","nextTick","previousDrain","promise","util","toRegexRange","isObject","toNumber","isValidValue","isNumber","zeros","dash","padStart","toMaxLen","toSequence","maxLen","negatives","positives","capture","v","toRange","isNumbers","stop","rangeError","inspect","invalidRange","strictRanges","invalidStep","fillNumbers","descending","startString","endString","stepString","padded","format","fillLetters","isGlob","pathPosixDirname","dirname","isWin32","slash","backslash","enclosure","globby","isExtglob","exec","chars","strictCheck","pipeIndex","closeSquareIndex","closeCurlyIndex","closeParenIndex","backSlashIndex","relaxedCheck","check","strict","isFinite","Stream","streamsQueue","merging","pipe","doEnd","doPipeError","pipeError","highWaterMark","addStream","len","pauseStreams","mergeStream","endStream","pipesCount","onend","removeListener","onerror","_readableState","endEmitted","setMaxListeners","picomatch","isEmptyString","hasBraces","list","omit","keep","onResult","state","negated","negatedExtglob","matched","matches","failglob","nonull","nullglob","unescape","any","not","contains","matchKeys","isWindows","regex","toPosixSlashes","braceExpand","assertValidPattern","nocomment","Minimatch","Symbol","plTypes","qmark","star","twoStarDot","twoStarNoDot","charSet","s","reSpecials","addPatternStartSet","slashSplit","ext","t","defaults","def","orig","MAX_PATTERN_LENGTH","SUBPARSE","mm","f","globUnescape","charUnescape","regExpEscape","braExpEscape","windowsPathsNoEscape","allowWindowsEscape","regexp","negate","comment","partial","make","debug","parseNegate","globSet","globParts","si","nonegate","negateOffset","matchOne","fi","pi","fl","pl","fr","pr","swallowee","hit","isSub","re","hasMagic","escaping","patternListStack","negativeLists","stateChar","inClass","reClassStart","classStart","cs","sp","dotTravAllowed","dotFileAllowed","patternStart","subPatternStart","clearStateChar","plEntry","reStart","reEnd","er","tail","_","$1","$2","addPatternStart","nl","nlBefore","nlFirst","nlAfter","nlLast","closeParensBefore","openParensBefore","cleanAfter","toUpperCase","flags","_glob","_src","twoStar","ex","filename","flipNegate","optsArg","pathArg","mkdirpNative","mkdirpNativeSync","mkdirpManual","mkdirpManualSync","useNative","useNativeSync","mkdirpSync","native","manual","nativeSync","manualSync","findMade","statAsync","st","findMadeSync","made","mkdirAsync","promisify","mode","__TESTING_MKDIRP_PLATFORM__","badWinChars","__TESTING_MKDIRP_NODE_VERSION__","versArr","hasNative","assertPath","normalizeStringPosix","allowAboveRoot","lastSegmentLength","lastSlash","dots","lastSlashIndex","_format","pathObject","resolvedPath","resolvedAbsolute","trailingSeparator","joined","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","lastCommonSep","fromCode","toCode","out","_makeLong","hasRoot","matchedSlash","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","ret","delimiter","WIN_SLASH","WIN_NO_SLASH","DOT_LITERAL","PLUS_LITERAL","QMARK_LITERAL","SLASH_LITERAL","ONE_CHAR","QMARK","END_ANCHOR","START_ANCHOR","DOTS_SLASH","NO_DOT","NO_DOTS","NO_DOT_SLASH","NO_DOTS_SLASH","QMARK_NO_DOT","STAR","POSIX_CHARS","WINDOWS_CHARS","POSIX_REGEX_SOURCE","alnum","alpha","ascii","blank","cntrl","digit","graph","lower","print","punct","space","upper","word","xdigit","REGEX_BACKSLASH","REGEX_NON_SPECIAL_CHARS","REGEX_SPECIAL_CHARS","REGEX_SPECIAL_CHARS_BACKREF","REGEX_SPECIAL_CHARS_GLOBAL","REGEX_REMOVE_BACKSLASH","REPLACEMENTS","CHAR_BACKWARD_SLASH","CHAR_GRAVE_ACCENT","SEP","extglobChars","globChars","constants","expandRange","escapeRegex","syntaxError","bos","prepend","tokens","PLATFORM_CHARS","EXTGLOB_CHARS","nodot","qmarkNoDot","bash","noextglob","consumed","backtrack","parens","quotes","removePrefix","extglobs","eos","peek","remaining","consume","token","increment","decrement","tok","isBrace","inner","extglobOpen","conditions","extglobClose","rest","extglobStar","expression","fastpaths","backslashes","esc","first","wrapOutput","slashes","idx","strictBrackets","nobracket","prevValue","literalBrackets","hasRegexChars","outputIndex","tokensIndex","comma","toks","isGroup","supportsLookbehinds","prior","isStart","afterStar","after","escapeLast","slashDot","returnState","fns","arrayMatcher","isState","compileRe","isIgnored","ignoreOpts","onMatch","returnObject","onIgnore","returnOutput","parsed","isPathSeparator","isPrefix","isGlobstar","scanToEnd","lastIndex","isBracket","braceEscaped","finished","isExtglobChar","noparen","removeBackslashes","maxDepth","prevIndex","isRegexChar","segs","windows","lastIdx","queueMicrotask","window","global","setTimeout","Constructor","head","runParallel","results","pending","isSync","each","relaxZeros","relax","shorthand","cacheKey","hasPadding","newMin","splitToPatterns","collatePatterns","neg","onlyNegative","filterPatterns","onlyPositive","intersected","subpatterns","splitToRanges","nines","countNines","stops","countZeros","compare","rangeToPattern","digits","zipped","zip","startDigit","stopDigit","toCharacterClass","toQuantifier","padZeros","comparison","intersection","integer","pow","diff","clearCache","CodeBlockWriter","CodeBlockWriter__default","AdvancedIterator","iterator","buffer","bufferIndex","isDone","nextCount","previous","getNextBufferIndex","getNodeByNameOrFindFunction","nameOrFindFunc","findFunc","dec","nodeHasName","getNameNode","nameNode","Node","isArrayBindingPattern","isObjectBindingPattern","getElements","element","nodeName","getName","getNotFoundErrorMessageForNameOrFindFunction","findName","nameOrFindFunction","getParentSyntaxList","EndOfFileToken","getChildren","SyntaxList","getSymbolByNameOrFindFunction","isNodeAmbientOrInAmbientContext","checkNodeIsAmbient","_sourceFile","isDeclarationFile","_getAncestorsIterator","isThisAmbient","getCombinedModifierFlags","ModifierFlags","Ambient","isInterfaceDeclaration","isTypeAliasDeclaration","isStringKind","StringLiteral","NoSubstitutionTemplateLiteral","TemplateHead","TemplateMiddle","TemplateTail","ModuleUtils","isModuleSpecifierRelative","getReferencedSourceFileFromSymbol","symbol","declarations","getDeclarations","getKind","SourceFile","printNode","sourceFileOrOptions","secondOverloadOptions","isFirstOverload","getOptions","printer","createPrinter","newLine","newLineKind","LineFeed","removeComments","printFile","emitHint","Unspecified","topParent","getNodeSourceFile","getScriptKind","createSourceFile","getFileExt","TSX","JSX","topNode","IndentationText","ManipulationSettingsContainer","indentationText","FourSpaces","QuoteKind","Double","insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces","usePrefixAndSuffixTextForRename","useTrailingCommas","getEditorSettings","_editorSettings","fillDefaultEditorSettings","getFormatCodeSettings","_formatCodeSettings","getUserPreferences","_userPreferences","quotePreference","getQuoteKind","providePrefixAndSuffixTextForRename","getUsePrefixAndSuffixTextForRename","getNewLineKind","getNewLineKindAsString","newLineKindToString","getIndentationText","getUseTrailingCommas","_getIndentSizeInSpaces","EightSpaces","TwoSpaces","Tab","setValueIfUndefined","defaultValue","manipulationSettings","IndentStyle","Smart","fillDefaultFormatCodeSettings","getTextFromStringOrWriter","writer","textOrWriterFunction","printTextFromStringOrWriter","Function","newLineIfLastNot","EnableableLogger","enabled","setEnabled","logInternal","warn","warnInternal","ConsoleLogger","isValidVariableName","variableName","CarriageReturnLineFeed","LazyReferenceCoordinator","factory","dirtySourceFiles","onSourceFileModified","wasForgotten","onSourceFileAdded","onSourceFileRemoved","_referenceContainer","refreshDirtySourceFiles","refresh","clearDirtySourceFiles","refreshSourceFileIfDirty","clearDirtyForSourceFile","addDirtySourceFile","SourceFileReferenceContainer","nodesInThis","nodesInOther","unresolvedLiterals","resolveUnresolved","literal","getSourceFileForLiteral","addNodeInThis","_context","compilerFactory","getDependentSourceFiles","lazyReferenceCoordinator","hashSet","nodeInOther","getLiteralsReferencingOtherSourceFilesEntries","getReferencingLiteralsInOtherSourceFiles","populateReferences","forgetNodesCreatedInBlock","remember","getImportStringLiterals","getParentOrThrow","grandParent","isImportDeclaration","isExportDeclaration","getModuleSpecifierSourceFile","isImportEqualsDeclaration","getExternalModuleReferenceSourceFile","isCallExpression","literalSymbol","getSymbol","logger","getKindName","Diagnostic","WriterUtils","getLastCharactersToPos","writerLength","charCount","iterateLastChars","insertPos","callBaseGetStructure","basePrototype","structure","newStructure","getStructure","callBaseSet","AmbientableNode","Base","hasDeclareKeyword","getDeclareKeyword","getDeclareKeywordOrThrow","getFirstModifierByKind","DeclareKeyword","isAmbient","setHasDeclareKeyword","toggleModifier","FormattingKind","getClassMemberFormatting","member","isAmbientable","Newline","hasBody$1","Blankline","isBodyable","getBody","isBodied","getFormattingKindText","formattingKind","Space","None","getInterfaceMemberFormatting","hasBody","isClassDeclaration","isEnumDeclaration","getStatementedNodeChildFormatting","getClausedNodeChildFormatting","getGeneralFormatting","getTextFromTextChanges","textChanges","editResult","edit","getSortedTextChanges","span","getSpan","beforeEdit","getStart","getEnd","getNewText","toWrappedTextChange","aStart","bStart","difference","change","TextChange","getNewInsertCode","structures","newCodes","getSeparator","previousFormattingKind","nextFormattingKind","getChildIndentationText","getFormattingKindTextWithIndent","getChildCode","scanner","createScanner","appendCommaToText","getAppendCommaPos","setText","getStartPos","getEndIndexFromArray","getNextMatchingPos","getPreviousMatchingPos","getNextNonWhitespacePos","isNotWhitespace","getPreviousNonWhitespacePos","getPosAtEndOfPreviousLine","fullText","getPosAtNextNonBlankLine","newPos","getPosAtStartOfLineOrNonWhitespace","getInsertPosFromIndex","syntaxList","children","isSourceFile","isCaseClause","isDefaultClause","colonToken","getFirstChildByKindOrThrow","ColonToken","isInline","getChildSyntaxList","parentContainer","getParentContainerOrThrow","openBraceToken","OpenBraceToken","getEndPosFromIndex","endPos","closeBraceToken","getLastChildByKind","CloseBraceToken","getNonWhitespaceStart","isModuleDeclaration","innerBody","_getInnerBody","getBodyOrThrow","fromAbstractableNode","isAbstract","fromAmbientableNode","fromExportableNode","isDefaultExport","hasDefaultKeyword","isExported","hasExportKeyword","fromStaticableNode","isStatic","fromScopedNode","scope","hasScopeKeyword","getScope","fromOverrideableNode","hasOverrideKeyword","fromQuestionTokenableNode","hasQuestionToken","getNodesToReturn","oldChildren","newChildren","allowCommentNodes","oldChildCount","newLength","currentChild","isCommentNode","getRangeWithoutCommentsFromArray","expectedKind","childKind","SingleLineCommentTrivia","MultiLineCommentTrivia","fromConstructorDeclarationOverload","fromFunctionDeclarationOverload","fromMethodDeclarationOverload","verifyAndGetIndex","newIndex","CommentNodeKind","CompilerCommentNode","fullStart","_fullStart","_start","getChildCount","getChildAt","includeJsDocComment","getFullStart","getWidth","getFullWidth","getLeadingTriviaWidth","getFirstToken","getLastToken","forEachChild","cbNode","cbNodeArray","CompilerCommentStatement","_commentKind","Statement","CompilerCommentClassElement","ClassElement","CompilerCommentTypeElement","TypeElement","CompilerCommentObjectLiteralElement","ObjectLiteralElement","CompilerCommentEnumMember","EnumMember","CommentKind","childrenSaver","commentNodeParserKinds","Block","ModuleBlock","CaseClause","DefaultClause","ClassDeclaration","InterfaceDeclaration","EnumDeclaration","ClassExpression","TypeLiteral","ObjectLiteralExpression","CommentNodeParser","getOrParseChildren","container","isSyntaxList","getNodes","shouldParseChildren","hasParsedChildren","isCommentStatement","isCommentClassElement","isCommentTypeElement","isCommentObjectLiteralElement","isCommentEnumMember","getContainerBodyPos","isTypeLiteralNode","isClassExpression","isBlock","isModuleBlock","isObjectLiteralExpression","getTokenEnd","sourceFileText","childNodes","getContainerChildren","createComment","getCreationFunction","bodyStartPos","getCommentNodes","childNode","lastChild","stopAtJsDoc","skipTrailingLine","leadingComments","getLeadingComments","maxEnd","leadingComment","commentKind","getCommentKind","parseForComment","isJsDoc","JsDoc","SingleLine","parseSingleLineComment","parseMultiLineComment","nextChar","nextNextChar","MultiLine","skipSingleLineComment","skipSlashStarComment","statements","members","properties","ctor","getCtor","isStatementContainerNode","isClassLike","getStatementContainerNode","hasParsedTokens","_children","forEachChildSaver","getChildrenSaver","ExtendedParser","getContainerArray","getCompilerChildrenFast","getCompilerChildren","getCompilerForEachChildren","getForEachChildren","mergeInComments","isStatementMemberOrPropertyHoldingSyntaxList","otherNodes","currentIndex","isComment","NodeHandlerHelper","handleForValues","currentNode","newNode","hasCompilerNode","handleNode","getExistingNodeFromCompilerNode","getNodeFromCompilerNode","forgetNodeIfNecessary","forget","getCompilerChildrenAsIterators","currentCompilerNode","compilerNode","currentSourceFile","getChildrenFast","StraightReplacementNodeHandler","helper","kinds","Identifier","PrivateIdentifier","_hasWrappedChildren","handleChildren","replaceCompilerNode","currentChildren","ChangeChildOrderParentHandler","straightReplacementNodeHandler","oldIndex","currentChildrenInNewOrder","getChildrenInNewOrder","movingNode","DefaultParentHandler","childCount","isFirstChild","replacingNodes","customMappings","handleCustomMappings","tryReplaceNode","newParentNode","mapping","ForgetChangedNodeHandler","currentNodeChildren","newNodeChildrenArray","newNodeChildren","currentNodeChild","nextNodeChildResult","existingNode","ParentFinderReplacementNodeHandler","parentNodeHandler","changingParent","foundParent","changingParentParent","parentsAtSamePos","getPos","isParentNode","positionsAndKindsEqual","areNodesEqual","getAncestorLength","nodeToCheck","RangeHandler","straightReplace","rangeHandlerReplace","nextNode","RangeParentHandler","replacingLength","newNodes","getRealEnd","replacingEnd","oldNodes","forgetDescendants","FirstJSDocNode","LastJSDocNode","RenameNodeHandler","currentNodeKind","newNodeKind","ShorthandPropertyAssignment","PropertyAssignment","currentIdentifier","newIdentifier","initializer","ExportSpecifier","handleImportOrExportSpecifier","ImportSpecifier","newSpecifier","newPropertyName","newName","escapedText","TryOrForgetNodeHandler","getChildSyntaxListOrThrow","UnwrapParentHandler","childIndex","childSyntaxList","forgetNodes","_forgetOnlyThis","_getChildrenInCacheIterator","NodeHandlerFactory","getDefault","parentHandler","getForParentRange","getForRange","getForChildIndex","parentChildren","getForStraightReplacement","getForForgetChanged","getForRename","getForTryOrForget","getForChangingChildOrder","changeChildOrderParentHandler","getForUnwrappingNode","unwrappingNode","getChildIndex","unwrapParentHandler","getSpacingBetweenNodes","previousSibling","nextSibling","getSiblingFormatting","previousSiblingFormatting","nextSiblingFormatting","ChangingChildOrderTextManipulator","inputText","movingNodeStart","movingNodeText","lowerIndex","upperIndex","childrenInNewOrder","isParentSourceFile","finalText","fillPrefixText","fillTextForIndex","fillMiddleText","fillSuffixText","startPos","fillSpacingForRemoval","fillSpacingBeforeInsertion","fillSpacingAfterInsertion","fillSpacingCommon","spacingOpts","spacing","twoNewLines","getTextForError","newText","FullReplacementTextManipulator","InsertionTextManipulator","RemoveChildrenTextManipulator","removePrecedingSpaces","removeFollowingSpaces","removePrecedingNewLines","removeFollowingNewLines","replaceTrivia","removalPos","getRemovalPos","getPrefix","getSuffix","getRemovalEnd","customRemovalPos","getCharRemovalFunction","customRemovalEnd","removeSpaces","removeNewLines","charNotSpaceOrTab","isNewLineAtPos","hasNewLineInRange","RemoveChildrenWithFormattingTextManipulator","firstChild","getPreviousSibling","getNextSibling","getSpacing","trailingEnd","getTrailingTriviaEnd","firstPos","isFirstNodeOnLine","triviaEnd","RenameLocationTextManipulator","renameLocations","getTextSpan","currentPos","renameLocation","textSpan","getPrefixText","getSuffixText","UnchangedTextManipulator","UnwrapTextManipulator","getReplacementText","getInnerBraceRange","bodyNode","getBodyNodeOrThrow","ManipulationError","oldText","doManipulation","textManipulator","nodeHandler","_firePreModified","oldFileText","newFileText","replacementSourceFile","createCompilerSourceFileFromText","getFilePath","diagnostics","getSyntacticDiagnostics","errorDetails","throwError","project","formatDiagnosticsWithColorAndContext","newLineChar","projectOptions","useInMemoryFileSystem","newFile","getProgram","insertIntoParentTextRange","_c","replacing","textLength","insertIntoTextRange","insertIntoCommaSeparatedNodes","currentNodes","insertIndex","previousNode","previousNonCommentNode","getPreviousNonCommentNode","nextNonCommentNode","getNextNonCommentNode","useNewLines","parentNextSibling","isContained","CloseBracketToken","prependCommaAndSeparator","appendCommaAndSeparator","surroundWithSpaces","appendSeparator","appendIndentation","nextEndStart","prependSeparator","getNextSiblingOrThrow","originalSourceFileText","previousNodeNextSibling","CommaToken","appendNodeTrailingCommentRanges","appendCommentNodeTexts","lastCommentRangeEnd","getLastCommentRangeEnd","commentRanges","getTrailingCommentRanges","lastCommentRange","insertIntoBracesOrSourceFile","_getWriterWithChildIndentation","previousMember","getChild","nextMember","isStartOfFile","isOverloadable","getImplementation","insertIntoBracesOrSourceFileWithGetChildren","startChildren","getIndexedChildren","parentSyntaxList","previousJsDocCount","getPreviousJsDocCount","commentCount","insertIntoBracesOrSourceFileWithGetChildrenWithComments","changeChildOrder","removeChildren","removeChildrenWithFormattingFromCollapsibleSyntaxList","getParentSyntaxListOrThrow","removeChildrenWithFormatting","removeClassMember","classMember","isImplementation","removeClassMembers","getOverloads","classMembers","removeInterfaceMember","interfaceMember","removeInterfaceMembers","interfaceMembers","removeCommaSeparatedChild","childrenToRemove","isRemovingFirstChild","getFirstChild","addNextCommaIfAble","addPreviousCommaIfAble","commaToken","getNextSiblingIfKind","getLastChild","precedingComma","getPreviousSiblingIfKind","removeOverloadableStatementedNodeChild","isOverload","removeStatementedNodeChildren","removeStatementedNodeChild","removeClausedNodeChild","removeClausedNodeChildren","unwrapNode","replaceNodeText","replaceSourceFileTextForFormatting","replaceSourceFileTextStraight","replaceSourceFileTextForRename","nodeHandlerFactory","replaceTextPossiblyCreatingChildNodes","replacePos","replaceSourceFileForFilePathMove","replaceSourceFileForCacheUpdate","ArgumentedNode","getArguments","_getNodeFromCompilerNode","addArgument","argumentText","addArguments","argumentTexts","insertArguments","insertArgument","_addParensIfNecessary","originalArgs","_getWriterWithQueuedChildIndentation","conditionalWrite","OpenParenToken","getNextSiblingIfKindOrThrow","removeArgument","argOrIndex","argToRemove","getArgFromIndex","AsyncableNode","isAsync","hasModifier","AsyncKeyword","getAsyncKeyword","getAsyncKeywordOrThrow","setIsAsync","AwaitableNode","isAwaited","awaitModifier","getAwaitKeyword","_getNodeFromCompilerNodeIfExists","getAwaitKeywordOrThrow","setIsAwaited","isSet","getAwaitInsertPos","ForOfStatement","ForKeyword","getBodyText","getBodyTextWithoutLeadingIndentation","textArea","_getTrailingTriviaNonWhitespaceEnd","TextRange","compilerObject","_compilerObject","_throwIfForgotten","_forget","CommentRange","_wrappedChildCount","_compilerNode","__sourceFile","_forgottenText","_getParentSyntaxListIfWrapped","_storeTextForForgetting","removeNodeFromCache","_clearInternals","_replaceCompilerNodeFromFactory","sourceFileCompilerNode","trimmedLength","_childStringRanges","clearTextRanges","_leadingCommentRanges","_trailingCommentRanges","textRanges","getFlags","getSymbolOrThrow","boundSymbol","typeChecker","typeCheckerSymbol","getSymbolAtLocation","getSymbolsInScope","meaning","getLocalOrThrow","getLocal","locals","_getCompilerLocals","tsSymbol","escapeLeadingUnderscores","getLocals","_ensureBound","getType","getTypeAtLocation","containsRange","descendant","_getCompilerDescendantsIterator","InStringRangeComparer","asKindOrThrow","asKind","isKind","getFirstChildOrThrow","_getCompilerFirstChild","getWrappedCondition","getLastChildOrThrow","_getCompilerLastChild","getFirstDescendantOrThrow","getFirstDescendant","_getDescendantsIterator","getPreviousSiblingOrThrow","_getCompilerPreviousSibling","_getCompilerNextSibling","getPreviousSiblings","_getCompilerPreviousSiblings","getNextSiblings","_getCompilerNextSiblings","_getCompilerChildren","getChildAtIndex","_getCompilerChildAtIndex","_getChildrenIterator","compilerChild","_getCompilerChildrenFast","isCaseBlock","isJsxElement","getFirstChildByKind","passedBrace","snapshots","snapshot","filteredNodes","returnValue","forEachDescendant","stopReturnValue","upReturnValue","up","traversal","nodeCallback","skip","forEachChildForNode","arrayCallback","innerReturnValue","finalResult","innerNode","forEachChildAsArray","forEachDescendantAsArray","getDescendantStatements","thisNode","handleStatements","ArrowFunction","arrowFunction","statementedNode","statement","getStatements","getChildAtPos","getDescendantAtPos","getDescendantAtStartWithWidth","foundNode","includeJsDocComments","parentTakesPrecedence","startSearchPos","sourceFileFullText","getTrailingTriviaWidth","parentEnd","trailingComments","searchStart","getSearchStart","includeJsDocCommentOrOptions","trimLeadingIndentation","getProject","getNodeProperty","property","isNode","includeSyntaxLists","getParentWhileOrThrow","getParentWhile","getParentWhileKindOrThrow","getParentWhileKind","lastToken","isInSyntaxList","getIndentationLevel","languageService","getIdentationAtPosition","getChildIndentationLevel","offset","_getIndentationTextForLevel","level","getStartLinePos","getStartLineNumber","getEndLineNumber","endLinePos","replaceWithText","_getWriterWithQueuedIndentation","replaceText","prependWhitespace","insertWhiteSpaceTextAtPos","appendWhitespace","formatText","formattingEdits","getFormattingEditsForRange","visitNode","transformations","compilerSourceFile","transformerFactory","rootNode","innerVisit","getTransformedText","visitChildren","visitEachChild","resultNode","handleTransformation","oldNode","emitNode","lastTransformation","wrappedNode","replaceRange","lastPos","getLeadingCommentRanges","_getCommentsAtPos","comments","thisPos","getComments","getChildrenOfKind","_getCompilerChildrenOfKind","getFirstChildIfKindOrThrow","getFirstChildIfKind","getLastChildByKindOrThrow","getLastChildIfKindOrThrow","getLastChildIfKind","getChildAtIndexIfKindOrThrow","getChildAtIndexIfKind","getPreviousSiblingIfKindOrThrow","getParentIfOrThrow","getParentIf","getParentIfKindOrThrow","getParentIfKind","getFirstAncestorByKindOrThrow","getFirstAncestorByKind","getFirstAncestorOrThrow","getFirstAncestor","getDescendantsOfKind","_getCompilerDescendantsOfKindIterator","getFirstDescendantByKindOrThrow","getFirstDescendantByKind","_getCompilerForEachChildren","useParseTreeSearchForKind","getCompilerForEachDescendantsIterator","getCompilerDescendantsIterator","_getCompilerForEachDescendantsIterator","previousSiblings","foundChild","nextSiblings","sibling","_getWriterWithIndentation","_getWriter","setIndentationLevel","queueIndentationLevel","_getTextWithQueuedChildIndentation","textOrWriterFunc","createWriter","hasExpression","getExpression","hasName","hasStructure","is","isAbstractable","ConstructorType","GetAccessor","MethodDeclaration","PropertyDeclaration","SetAccessor","FunctionDeclaration","ModuleDeclaration","TypeAliasDeclaration","VariableStatement","isArgumented","CallExpression","NewExpression","isArrayTypeNode","ArrayType","isAssertionKeyNamed","AssertEntry","isAsyncable","FunctionExpression","isAwaitable","isBindingNamed","BindingElement","Parameter","VariableDeclaration","ClassStaticBlockDeclaration","isCallSignatureDeclaration","CallSignature","isChildOrderable","BreakStatement","ConstructSignature","ContinueStatement","DebuggerStatement","DoStatement","EmptyStatement","ExportAssignment","ExportDeclaration","ExpressionStatement","ForInStatement","ForStatement","IfStatement","ImportDeclaration","ImportEqualsDeclaration","IndexSignature","LabeledStatement","MethodSignature","NotEmittedStatement","PropertySignature","ReturnStatement","SwitchStatement","ThrowStatement","TryStatement","WhileStatement","WithStatement","isClassLikeDeclarationBase","isConditionalTypeNode","ConditionalType","isConstructorDeclaration","isConstructorTypeNode","isConstructSignatureDeclaration","isDecoratable","isDotDotDotTokenable","JsxExpression","NamedTupleMember","isExclamationTokenable","isExportable","isExportGetable","isExpression","AnyKeyword","BooleanKeyword","NumberKeyword","ObjectKeyword","StringKeyword","SymbolKeyword","UndefinedKeyword","ArrayLiteralExpression","AsExpression","AwaitExpression","BigIntLiteral","BinaryExpression","CommaListExpression","ConditionalExpression","DeleteExpression","ElementAccessExpression","FalseKeyword","ImportKeyword","JsxClosingFragment","JsxElement","JsxFragment","JsxOpeningElement","JsxOpeningFragment","JsxSelfClosingElement","MetaProperty","NonNullExpression","NullKeyword","NumericLiteral","OmittedExpression","ParenthesizedExpression","PartiallyEmittedExpression","PostfixUnaryExpression","PrefixUnaryExpression","PropertyAccessExpression","RegularExpressionLiteral","SpreadElement","SuperKeyword","TaggedTemplateExpression","TemplateExpression","ThisKeyword","TrueKeyword","TypeAssertionExpression","TypeOfExpression","VoidExpression","YieldExpression","isExpressionable","ExternalModuleReference","isExpressioned","ComputedPropertyName","JsxSpreadAttribute","SpreadAssignment","TemplateSpan","isExtendsClauseable","isFalseLiteral","isFunctionLikeDeclaration","isFunctionTypeNode","FunctionType","isGeneratorable","isGetAccessorDeclaration","isHeritageClauseable","isImplementsClauseable","isImportExpression","isImportTypeNode","ImportType","isIndexedAccessTypeNode","IndexedAccessType","isIndexSignatureDeclaration","isInferTypeNode","InferType","isInitializerExpressionable","isInitializerExpressionGetable","isIntersectionTypeNode","IntersectionType","isIterationStatement","isJSDoc","JSDoc","isJSDocable","isJSDocPropertyLikeTag","JSDocParameterTag","JSDocPropertyTag","isJSDocTag","JSDocAugmentsTag","JSDocAuthorTag","JSDocCallbackTag","JSDocClassTag","JSDocDeprecatedTag","JSDocEnumTag","JSDocImplementsTag","JSDocOverrideTag","JSDocPrivateTag","JSDocProtectedTag","JSDocPublicTag","JSDocReadonlyTag","JSDocReturnTag","JSDocSeeTag","JSDocTemplateTag","JSDocThisTag","JSDocTypedefTag","JSDocTypeTag","JSDocTag","isJSDocType","JSDocAllType","JSDocFunctionType","JSDocNamepathType","JSDocNonNullableType","JSDocNullableType","JSDocOptionalType","JSDocSignature","JSDocTypeLiteral","JSDocUnknownType","JSDocVariadicType","isJSDocTypeExpressionableTag","isJSDocTypeParameteredTag","isJSDocUnknownTag","isJsxAttributed","isJsxTagNamed","JsxClosingElement","isLeftHandSideExpression","isLeftHandSideExpressioned","Decorator","ExpressionWithTypeArguments","isLiteralExpression","isLiteralLike","JsxText","isLiteralTypeNode","LiteralType","isMappedTypeNode","MappedType","isMemberExpression","isModifierable","TypeParameter","VariableDeclarationList","isModuleChildable","isModuled","isModuleNamed","isNameable","isNamed","JsxAttribute","isNodeWithTypeArguments","TypeQuery","TypeReference","isNullLiteral","isOverrideable","isParameterDeclaration","isParametered","isParenthesizedTypeNode","ParenthesizedType","isPrimaryExpression","isPropertyNamed","isQuestionDotTokenable","isQuestionTokenable","isReadonlyable","isReferenceFindable","isRenameable","NamespaceExport","NamespaceImport","isReturnTyped","isScopeable","isScoped","isSetAccessorDeclaration","isSignaturedDeclaration","isStatement","isStatemented","isStaticable","isSuperExpression","isTemplateLiteralTypeNode","TemplateLiteralType","isTextInsertable","CaseBlock","isThisExpression","isThisTypeNode","ThisType","isTrueLiteral","isTupleTypeNode","TupleType","isTypeArgumented","isTypeAssertion","isTyped","isTypeElement","isTypeElementMembered","isTypeLiteral","isTypeNode","JSDocTypeExpression","TypeOperator","TypePredicate","UnionType","isTypeOperatorTypeNode","isTypeParameterDeclaration","isTypeParametered","isTypePredicate","isTypeQuery","isTypeReference","isUnaryExpression","isUnaryExpressioned","isUnionTypeNode","isUnwrappable","isUpdateExpression","_hasStructure","isAnyKeyword","ArrayBindingPattern","isArrayLiteralExpression","isArrowFunction","isAsExpression","isAssertClause","AssertClause","isAssertEntry","isAwaitExpression","isBigIntLiteral","isBinaryExpression","isBindingElement","isBooleanKeyword","isBreakStatement","isCatchClause","CatchClause","isClassStaticBlockDeclaration","isCommaListExpression","isComputedPropertyName","isConditionalExpression","isContinueStatement","isDebuggerStatement","isDecorator","isDeleteExpression","isDoStatement","isElementAccessExpression","isEmptyStatement","isEnumMember","isExportAssignment","isExportSpecifier","isExpressionStatement","isExpressionWithTypeArguments","isExternalModuleReference","isForInStatement","isForOfStatement","isForStatement","isFunctionDeclaration","isFunctionExpression","isHeritageClause","HeritageClause","isIdentifier","isIfStatement","isImportClause","ImportClause","isImportSpecifier","isImportTypeAssertionContainer","ImportTypeAssertionContainer","isInferKeyword","InferKeyword","isJSDocAllType","isJSDocAugmentsTag","isJSDocAuthorTag","isJSDocCallbackTag","isJSDocClassTag","isJSDocDeprecatedTag","isJSDocEnumTag","isJSDocFunctionType","isJSDocImplementsTag","isJSDocLink","JSDocLink","isJSDocLinkCode","JSDocLinkCode","isJSDocLinkPlain","JSDocLinkPlain","isJSDocMemberName","JSDocMemberName","isJSDocNamepathType","isJSDocNameReference","JSDocNameReference","isJSDocNonNullableType","isJSDocNullableType","isJSDocOptionalType","isJSDocOverrideTag","isJSDocParameterTag","isJSDocPrivateTag","isJSDocPropertyTag","isJSDocProtectedTag","isJSDocPublicTag","isJSDocReadonlyTag","isJSDocReturnTag","isJSDocSeeTag","isJSDocSignature","isJSDocTemplateTag","isJSDocText","JSDocText","isJSDocThisTag","isJSDocTypedefTag","isJSDocTypeExpression","isJSDocTypeLiteral","isJSDocTypeTag","isJSDocUnknownType","isJSDocVariadicType","isJsxAttribute","isJsxClosingElement","isJsxClosingFragment","isJsxExpression","isJsxFragment","isJsxOpeningElement","isJsxOpeningFragment","isJsxSelfClosingElement","isJsxSpreadAttribute","isJsxText","isLabeledStatement","isMetaProperty","isMethodDeclaration","isMethodSignature","isNamedExports","NamedExports","isNamedImports","NamedImports","isNamedTupleMember","isNamespaceExport","isNamespaceImport","isNeverKeyword","NeverKeyword","isNewExpression","isNonNullExpression","isNoSubstitutionTemplateLiteral","isNotEmittedStatement","isNumberKeyword","isNumericLiteral","ObjectBindingPattern","isObjectKeyword","isOmittedExpression","isParenthesizedExpression","isPartiallyEmittedExpression","isPostfixUnaryExpression","isPrefixUnaryExpression","isPrivateIdentifier","isPropertyAccessExpression","isPropertyAssignment","isPropertyDeclaration","isPropertySignature","isQualifiedName","QualifiedName","isRegularExpressionLiteral","isReturnStatement","isSemicolonToken","SemicolonToken","isShorthandPropertyAssignment","isSpreadAssignment","isSpreadElement","isStringKeyword","isStringLiteral","isSwitchStatement","isSymbolKeyword","isTaggedTemplateExpression","isTemplateExpression","isTemplateHead","isTemplateMiddle","isTemplateSpan","isTemplateTail","isThrowStatement","isTryStatement","isTypeOfExpression","isUndefinedKeyword","isVariableDeclaration","isVariableDeclarationList","isVariableStatement","isVoidExpression","isWhileStatement","isWithStatement","isYieldExpression","methodName","thisNodeOrSyntaxKind","searchingKind","FirstNode","getThisKind","Scope","addChildText","insertChildText","initialChildCount","finalChildren","renameNode","findRenameLocations","renameLocationsBySourceFile","locations","setBodyTextForNode","openBrace","closeBrace","BodiedNode","setBodyText","BodyableNode","addBody","semiColon","removeBody","ChildOrderableNode","setOrder","order","DecoratableNode","getDecorator","getDecorators","getDecoratorOrThrow","addDecorator","insertDecorator","addDecorators","insertDecorators","decoratorLines","getDecoratorLines","getDecoratorFormattingKind","previousDecorator","decoratorCode","remove","lines","structurePrinter","structurePrinterFactory","forDecorator","printText","currentDecorators","sameLine","areDecoratorsOnSameLine","startLinePos","DotDotDotTokenableNode","getDotDotDotTokenOrThrow","getDotDotDotToken","dotDotDotToken","ExclamationTokenableNode","hasExclamationToken","exclamationToken","getExclamationTokenNode","getExclamationTokenNodeOrThrow","setHasExclamationToken","exclamationTokenNode","setHasQuestionToken","colonNode","ExportGetableNode","getExportKeyword","variableStatement","getVariableStatement","throwForNotModifierableNode","ExportKeyword","getExportKeywordOrThrow","getDefaultKeyword","DefaultKeyword","getDefaultKeywordOrThrow","thisSymbol","sourceFileSymbol","getExports","getAliasedSymbol","defaultExportSymbol","getDefaultExportSymbol","aliasedSymbol","isNamedExport","getExport","ExportableNode","apply$1","setIsDefaultExport","fileDefaultExportSymbol","removeDefaultExport","shouldWriteAsSeparateStatement","addModifier","setIsExported","Printer","printTextOrWriterFunc","getNewWriter","getNewWriterWithQueuedChildIndentation","newWriter","getTextWithQueuedChildIndentation","queuedChildIndentationWriter","InitializerExpressionableNodeStructurePrinter","initializerText","hangingIndent","spaceIfLastNot","ModifierableNodeStructurePrinter","isReadonly","ReturnTypedNodeStructurePrinter","alwaysWrite","returnType","returnTypeText","TypedNodeStructurePrinter","typeText","BlankLineFormattingStructuresPrinter","conditionalBlankLine","CommaSeparatedStructuresPrinter","printTextWithSeparator","commaAppendPositions","foundFirst","unsafeInsert","CommaNewLineSeparatedStructuresPrinter","NewLineFormattingStructuresPrinter","conditionalNewLine","SpaceFormattingStructuresPrinter","NodePrinter","printTextWithoutTrivia","printTextInternal","printLeadingTrivia","closeComment","printTrailingTrivia","leadingTrivia","printTrivia","isInComment","trailingTrivia","trivia","ClassDeclarationStructurePrinter","multipleWriter","printTexts","forJSDoc","printDocs","docs","printHeader","inlineBlock","forPropertyDeclaration","printCtors","printGetAndSet","conditionalSeparator","forMethodDeclaration","forModifierableNode","forTypeParameterDeclaration","printTextsWithBrackets","typeParameters","extends","extendsText","implements","implementsText","ctors","forConstructorDeclaration","getAccessors","setAccessors","getAccessorWriter","forGetAccessorDeclaration","setAccessorWriter","forSetAccessorDeclaration","getAccessor","setAccessorIndex","setAccessor","isAtStartOfFirstLineOfBlock","blankLine","StructureKind","Structure","isCallSignature","Class","ClassStaticBlock","ConstructorOverload","Enum","FunctionOverload","Interface","MethodOverload","Method","Module","Property","TypeAlias","isSignatured","isClass","isClassStaticBlock","isConstructorDeclarationOverload","isConstructor","isFunctionLike","isConstructSignature","isEnum","isFunctionDeclarationOverload","isFunction","isGetAccessor","isIndexSignature","isInterface","isMethodDeclarationOverload","isMethod","isModule","isParameter","isProperty","isSetAccessor","isTypeAlias","isTypeParameter","forEachStructureChild","forCallSignatureDeclaration","forClassDeclaration","forClassStaticBlockDeclaration","forConstructorDeclarationOverload","forConstructSignatureDeclaration","forEnumDeclaration","forEnumMember","forExportDeclaration","forFunctionDeclarationOverload","forFunctionDeclaration","forImportDeclaration","forIndexSignatureDeclaration","forInterfaceDeclaration","forJsxElement","forJsxSelfClosingElement","forMethodDeclarationOverload","forMethodSignature","forModuleDeclaration","forParameterDeclaration","forPropertySignature","forSourceFile","forTypeAliasDeclaration","forVariableStatement","forJSDocableNode","forSignaturedDeclaration","forTypeParameteredNode","forAllIfStructure","forParameteredNode","forAll","parameters","forClassLikeDeclarationBase","forDecoratableNode","forStatementedNode","forAllUnknownKindIfStructure","forFunctionLikeDeclaration","overloads","namedExports","assertElements","namedImports","forTypeElementMemberedNode","callSignatures","constructSignatures","indexSignatures","tags","attributes","forJsxAttributedNode","ensureKind","isStructure","isLastNonWhitespaceCharCloseBrace","iterateLastCharCodes","ClassMemberStructurePrinter","blankLineIfLastNot","ensureBlankLine","ClassStaticBlockDeclarationStructurePrinter","ConstructorDeclarationStructurePrinter","printOverloads","getOverloadStructures","overload","printOverload","printTextsWithParenthesis","GetAccessorDeclarationStructurePrinter","blankLineWriter","forReturnTypedNode","MethodDeclarationStructurePrinter","PropertyDeclarationStructurePrinter","forTypedNode","forInitializerExpressionableNode","SetAccessorDeclarationStructurePrinter","StringStructurePrinter","DecoratorStructurePrinter","printMultiple","printTextsInline","printTypeArguments","printArguments","typeArguments","JSDocStructurePrinter","isSingleLine","startIndex","jsdocPrinter","tempWriter","forJSDocTag","printStarsOnNewLine","JSDocTagStructurePrinter","tagPrinter","currentText","tagName","EnumDeclarationStructurePrinter","isConst","EnumMemberStructurePrinter","quote","ObjectLiteralExpressionPropertyStructurePrinter","forPropertyAssignment","forShorthandPropertyAssignment","forSpreadAssignment","PropertyAssignmentStructurePrinter","ShorthandPropertyAssignmentStructurePrinter","SpreadAssignmentStructurePrinter","FunctionDeclarationStructurePrinter","currentStructure","previousStructure","isGenerator","ParameterDeclarationStructurePrinter","isRestParameter","CallSignatureDeclarationStructurePrinter","ConstructSignatureDeclarationStructurePrinter","IndexSignatureDeclarationStructurePrinter","keyName","keyType","InterfaceDeclarationStructurePrinter","MethodSignatureStructurePrinter","PropertySignatureStructurePrinter","TypeElementMemberedNodeStructurePrinter","TypeElementMemberStructurePrinter","JsxAttributeDeciderStructurePrinter","forJsxAttribute","forJsxSpreadAttribute","struct","JsxAttributeStructurePrinter","JsxChildDeciderStructurePrinter","JsxElementStructurePrinter","printAttributes","printChildren","attributePrinter","forJsxAttributeDecider","attrib","forJsxChildDecider","JsxSelfClosingElementStructurePrinter","JsxSpreadAttributeStructurePrinter","AssertEntryStructurePrinter","printAssertClause","ExportAssignmentStructurePrinter","isExportEquals","ExportDeclarationStructurePrinter","hasModuleSpecifier","moduleSpecifier","hasNamedImport","namespaceExport","isTypeOnly","forNamedImportExportSpecifier","printTextsWithBraces","forAssertEntry","ImportDeclarationStructurePrinter","namespaceImport","defaultImport","ModuleDeclarationStructurePrinter","blankLineFormattingWriter","validateAndGetStructure","declarationKind","ModuleDeclarationKind","Global","Namespace","NamedImportExportSpecifierStructurePrinter","formatSettings","specifierWriter","specifierText","alias","isLastNewLine","SourceFileStructurePrinter","StatementedNodeStructurePrinter","forStatement","StatementStructurePrinter","forExportAssignment","VariableDeclarationKind","VariableStatementStructurePrinter","Let","forVariableDeclaration","TypeAliasDeclarationStructurePrinter","TypeParameterDeclarationStructurePrinter","variance","TypeParameterVariance","In","Out","constraint","constraintText","defaultText","VariableDeclarationStructurePrinter","ExtendsClauseableNode","getExtends","extendsClause","getHeritageClauseByKind","ExtendsKeyword","getTypeNodes","addExtends","insertExtends","texts","originalExtends","wasStringInput","getHeritageClauseByKindOrThrow","openBraceStart","isLastSpace","newExtends","removeExtends","implementsNodeOrIndex","removeExpression","GeneratorableNode","asteriskToken","getAsteriskToken","getAsteriskTokenOrThrow","setIsGenerator","getAsteriskInsertPos","FunctionKeyword","namedNode","HeritageClauseableNode","getHeritageClauses","heritageClauses","ImplementsClauseableNode","getImplements","implementsClause","ImplementsKeyword","addImplements","insertImplements","originalImplements","newImplements","removeImplements","expr","InitializerExpressionGetableNode","hasInitializer","getInitializerIfKindOrThrow","getInitializerIfKind","getInitializer","getInitializerOrThrow","InitializerExpressionableNode","removeInitializer","EqualsToken","setInitializer","semiColonToken","JSDocableNode","getJsDocs","jsDoc","addJsDoc","addJsDocs","insertJsDocs","insertJsDoc","doc","jsdoc","LiteralLikeNode","getLiteralText","isTerminated","isUnterminated","hasExtendedUnicodeEscape","ModifierableNode","getModifiers","getCompilerModifiers","getFirstModifierByKindOrThrow","modifier","textOrKind","removeModifier","modifiers","existingModifier","getInsertPos","isFirstModifier","getInitialInsertPos","addAfterText","getAddAfterModifierTexts","isJSDocCommentContainingNode","ModuledNode","addImportDeclaration","addImportDeclarations","compilerChildren","_getCompilerStatementsWithComments","insertImportDeclarations","getInsertIndex","wasLastComment","insertImportDeclaration","_insertChildren","_standardWrite","previousNewLine","nextNewLine","getImportDeclaration","conditionOrModuleSpecifier","getImportDeclarations","getCondition","getModuleSpecifierValue","getImportDeclarationOrThrow","addExportDeclaration","addExportDeclarations","insertExportDeclarations","insertExportDeclaration","getExportDeclaration","getExportDeclarations","getExportDeclarationOrThrow","addExportAssignment","addExportAssignments","insertExportAssignments","insertExportAssignment","getExportAssignment","getExportAssignments","getExportAssignmentOrThrow","getDefaultExportSymbolOrThrow","getExportSymbols","getExportsOfModule","getExportedDeclarations","exportSymbols","declaration","getDeclarationHandlingImportsAndExports","existingArray","getLocalTargetDeclarations","getDeclarationsForSymbol","getDefaultImport","NamedNodeBase","ReferenceFindableNode","findReferences","getNodeForReferences","findReferencesAsNodes","RenameableNode","getNodeToRename","AssertionKeyNamedNode","BindingNamedNode","ModuleNamedNode","NameableNode","NameableNodeInternal","getNameNodeOrThrow","getNameOrThrow","removeName","addNameNode","classKeyword","ClassKeyword","openParenToken","NamedNode","PropertyNamedNode","OverrideableNode","OverrideKeyword","getOverrideKeyword","getOverrideKeywordOrThrow","setHasOverrideKeyword","ParameteredNode","getParameter","getParameters","getParameterOrThrow","addParameter","addParameters","insertParameters","insertParameter","QuestionDotTokenableNode","hasQuestionDotToken","questionDotToken","getQuestionDotTokenNode","getQuestionDotTokenNodeOrThrow","setHasQuestionDotToken","questionDotTokenNode","DotToken","OpenBracketToken","QuestionTokenableNode","questionToken","getQuestionTokenNode","getQuestionTokenNodeOrThrow","questionTokenNode","semicolonToken","ReadonlyableNode","getReadonlyKeyword","ReadonlyKeyword","getReadonlyKeywordOrThrow","setIsReadonly","ReturnTypedNode","getReturnType","getSignature","getReturnTypeNode","getReturnTypeNodeOrThrow","setReturnType","removeReturnType","returnTypeNode","getEndNode","CloseParenToken","signature","getSignatureFromNode","ScopeableNode","getScopeForNode","Public","setScope","setScopeForNode","getScopeKeyword","modifierFlags","Private","Protected","ScopedNode","SignaturedDeclaration","StaticableNode","StaticKeyword","getStaticKeyword","getStaticKeywordOrThrow","setIsStatic","TextInsertableNode","removeText","getValidRange","validRange","verifyArguments","verifyInRange","rangeNode","getRangeNode","TypeArgumentedNode","getTypeArguments","addTypeArgument","addTypeArguments","insertTypeArguments","insertTypeArgument","LessThanToken","removeTypeArgument","typeArgOrIndex","typeArgToRemove","getTypeArgFromIndex","GreaterThanToken","TypedNode","getTypeNode","getTypeNodeOrThrow","setType","removeType","typeNode","separatorSyntaxKind","getSeparatorSyntaxKindForNode","separatorNode","getInsertPosWhenNoType","insertAfterNode","isQuestionOrExclamation","QuestionToken","ExclamationToken","separatorToken","TypeElementMemberedNode","addMember","addMembers","insertMembers","getMembersWithComments","insertMember","memberWriter","memberPrinter","forTypeElementMember","addConstructSignature","addConstructSignatures","insertConstructSignatures","insertConstructSignature","insertChildren$1","createStructurePrinter","getConstructSignature","findFunction","getConstructSignatures","getConstructSignatureOrThrow","addCallSignature","addCallSignatures","insertCallSignatures","insertCallSignature","getCallSignature","getCallSignatures","getCallSignatureOrThrow","addIndexSignature","addIndexSignatures","insertIndexSignatures","insertIndexSignature","getIndexSignature","getIndexSignatures","getIndexSignatureOrThrow","addMethod","addMethods","insertMethods","insertMethod","getMethod","getMethods","getMethodOrThrow","addProperty","addProperties","insertProperties","insertProperty","getProperties","getPropertyOrThrow","getMembers","TypeParameteredNode","getTypeParameter","getTypeParameters","getTypeParameterOrThrow","addTypeParameter","addTypeParameters","insertTypeParameters","insertTypeParameter","UnwrappableNode","unwrap","elements","createBase$D","BindingElementBase","getPropertyNameNodeOrThrow","getPropertyNameNode","AbstractableNode","getAbstractKeyword","AbstractKeyword","getAbstractKeywordOrThrow","setIsAbstract","Expression","getContextualType","BinaryExpressionBase","getLeft","getOperatorToken","operatorToken","getRight","AssignmentExpressionBase","AssignmentExpression","ArrayDestructuringAssignmentBase","ArrayDestructuringAssignment","UnaryExpression","UpdateExpression","LeftHandSideExpression","MemberExpression","PrimaryExpression","addElement","addElements","textsOrWriterFunction","insertElements","insertElement","getUseNewLines","stringStructurePrinter","insertTexts","newElements","allElementsOnDifferentLines","previousLine","currentLine","removeElement","elementOrIndex","elementToRemove","getElementFromIndex","ExpressionableNode","getExpressionOrThrow","getExpressionIfKind","getExpressionIfKindOrThrow","BaseExpressionedNode","setExpression","ExpressionedNode","ImportExpressionedNode","LeftHandSideExpressionedNode","SuperExpressionedNode","UnaryExpressionedNode","createBase$C","AsExpressionBase","AwaitExpressionBase","createBase$B","CallExpressionBase","CommaListExpressionBase","ConditionalExpressionBase","getQuestionToken","getWhenTrue","whenTrue","getColonToken","getWhenFalse","whenFalse","DeleteExpressionBase","createBase$A","ElementAccessExpressionBase","getArgumentExpression","argumentExpression","getArgumentExpressionOrThrow","ImportExpressionBase","ImportExpression","LiteralExpressionBase","LiteralExpression","MetaPropertyBase","getKeywordToken","keywordToken","createBase$z","NewExpressionBase","NonNullExpressionBase","CommentObjectLiteralElement","ObjectDestructuringAssignmentBase","ObjectDestructuringAssignment","ObjectLiteralExpressionBase","prop","getPropertiesWithComments","_getAddIndex","forObjectLiteralExpressionProperty","addPropertyAssignment","addPropertyAssignments","insertPropertyAssignments","insertPropertyAssignment","_insertProperty","addShorthandPropertyAssignment","addShorthandPropertyAssignments","insertShorthandPropertyAssignments","insertShorthandPropertyAssignment","addSpreadAssignment","addSpreadAssignments","insertSpreadAssignments","insertSpreadAssignment","addGetAccessor","addGetAccessors","insertGetAccessors","insertGetAccessor","addSetAccessor","addSetAccessors","insertSetAccessors","insertSetAccessor","oldProperties","createBase$y","PropertyAssignmentBase","createBase$x","ShorthandPropertyAssignmentBase","hasObjectAssignmentInitializer","objectAssignmentInitializer","getObjectAssignmentInitializerOrThrow","getObjectAssignmentInitializer","getEqualsTokenOrThrow","getEqualsToken","equalsToken","removeObjectAssignmentInitializer","SpreadAssignmentBase","OmittedExpressionBase","ParenthesizedExpressionBase","PartiallyEmittedExpressionBase","PostfixUnaryExpressionBase","operator","getOperand","operand","PrefixUnaryExpressionBase","createBase$w","PropertyAccessExpressionBase","SpreadElementBase","SuperElementAccessExpressionBase","SuperElementAccessExpression","SuperExpressionBase","SuperExpression","SuperPropertyAccessExpressionBase","SuperPropertyAccessExpression","ThisExpressionBase","ThisExpression","createBase$v","TypeAssertionBase","TypeAssertion","TypeOfExpressionBase","VoidExpressionBase","YieldExpressionBase","StatementBase","StatementedNode","statementsContainer","_getCompilerStatementsContainer","getStatementsWithComments","getStatement","getStatementOrThrow","getStatementByKind","getStatementByKindOrThrow","addStatements","insertStatements","addBodyIfNotExists","writerFunction","statementsPrinter","removeStatement","removeStatements","indexRange","addClass","addClasses","insertClasses","insertClass","getClasses","getClass","getClassOrThrow","addEnum","addEnums","insertEnums","insertEnum","getEnums","getEnum","getEnumOrThrow","addFunction","addFunctions","insertFunctions","insertFunction","getFunctions","getFunction","getFunctionOrThrow","addInterface","addInterfaces","insertInterfaces","insertInterface","getInterfaces","getInterface","getInterfaceOrThrow","addModule","addModules","insertModules","insertModule","getModules","getModule","getModuleOrThrow","addTypeAlias","addTypeAliases","insertTypeAliases","insertTypeAlias","getTypeAliases","getTypeAlias","getTypeAliasOrThrow","getVariableStatements","getFindFunction","getVariableStatementOrThrow","addVariableStatement","addVariableStatements","insertVariableStatements","insertVariableStatement","getVariableDeclarations","variables","getVariableDeclaration","getVariableDeclarationOrThrow","statementCount","writeStructures","createBase$u","BlockBase","getLabel","label","getLabelOrThrow","CaseBlockBase","getClauses","clauses","removeClause","removeClauses","createBase$t","CaseClauseBase","CatchClauseBase","getBlock","variableDeclaration","CommentStatement","DebuggerStatementBase","createBase$s","DefaultClauseBase","IterationStatement","DoStatementBase","EmptyStatementBase","ExpressionStatementBase","ForInStatementBase","ForOfStatementBase","ForStatementBase","getConditionOrThrow","getIncrementor","incrementor","getIncrementorOrThrow","IfStatementBase","getThenStatement","thenStatement","getElseStatement","elseStatement","ElseKeyword","LabeledStatementBase","NotEmittedStatementBase","ReturnStatementBase","SwitchStatementBase","getCaseBlock","caseBlock","ThrowStatementBase","TryStatementBase","getTryBlock","tryBlock","getCatchClause","catchClause","getCatchClauseOrThrow","getFinallyBlock","finallyBlock","getFinallyBlockOrThrow","AssertClauseBase","setElements","AssertEntryBase","getValue","ExportAssignmentBase","setIsExportEquals","ExportDeclarationBase","setIsTypeOnly","AsteriskToken","typeKeyword","TypeKeyword","getNamespaceExport","exportClause","getNamespaceExportOrThrow","setNamespaceExport","setModuleSpecifier","textOrSourceFile","getRelativePathAsModuleSpecifierTo","removeModuleSpecifier","stringLiteral","getModuleSpecifier","setLiteralValue","getLiteralValue","getModuleSpecifierSourceFileOrThrow","moduleSpecifierValue","hasNamedExports","FromKeyword","addNamedExport","namedExport","addNamedExports","insertNamedExports","getNamedExports","insertNamedExport","originalNamedExports","namedExportStructurePrinter","newNamedExports","toNamespaceExport","namedExportsNode","setAssertElements","assertClause","getAssertClause","setEmptyNamedExport","replaceNode","ExportSpecifierBase","setName","renameAlias","removeAliasWithRename","aliasIdentifier","getAliasNode","setAlias","removeAlias","AsKeyword","getLocalTargetSymbolOrThrow","getLocalTargetSymbol","getExportSpecifierLocalTargetSymbol","exportDeclaration","ExternalModuleReferenceBase","getReferencedSourceFileOrThrow","getReferencedSourceFile","isRelative","ImportClauseBase","getDefaultImportOrThrow","getNamedBindingsOrThrow","getNamedBindings","getNamespaceImportOrThrow","getNamespaceImport","namedBindings","getNamedImports","ImportDeclarationBase","getImportClause","importClause","setDefaultImport","removeDefaultImport","importKeyword","renameDefaultImport","setNamespaceImport","removeNamespaceImport","getChildrenToRemove","getImportClauseOrThrow","hasOnlyDefaultImport","addNamedImport","namedImport","addNamedImports","insertNamedImports","insertNamedImport","originalNamedImports","namedImportStructurePrinter","getErrorWhenNamespaceImportsExist","newNamedImports","removeNamedImports","namedImportsNode","fromKeyword","setEmptyNamedImport","emptyBracesText","createBase$r","ImportEqualsDeclarationBase","getModuleReference","moduleReference","isExternalModuleReferenceRelative","setExternalModuleReference","getExternalModuleReferenceSourceFileOrThrow","ImportSpecifierBase","importDeclaration","ModuleBlockBase","ModuleChildableNode","getParentModuleOrThrow","getParentModule","createBase$q","ModuleDeclarationBase","nameNodesOrStringLit","getNameNodes","openIssueText","addNamespaceKeywordIfNecessary","changeToAmbientModuleIfNecessary","nameNodes","hasNamespaceKeyword","getDeclarationKind","hasModuleKeyword","setDeclarationKind","declarationKindKeyword","getDeclarationKindKeyword","nodeFlags","GlobalAugmentation","NamespaceKeyword","ModuleKeyword","namespaceDec","NamedExportsBase","NamedImportsBase","NamespaceExportBase","NamespaceImportBase","FileReference","getFileName","FileSystemRefreshResult","SourceFileBase","_isSaved","_preModifiedEventContainer","onPreModified","isFromExternalLibrary","resetProgram","_referencedFiles","_typeReferenceDirectives","_libReferenceDirectives","getBaseNameWithoutExtension","extension","getDirectory","getDirectoryFromCache","getDirectoryPath","getLineAndColumnAtPos","line","column","copyToDirectory","dirPathOrDirectory","_throwIfIsInMemoryLibFile","_copyInternal","copiedSourceFile","_updateReferencesForCopyInternal","_getReferencesForCopyInternal","fileAbsoluteOrRelativePath","overwrite","getCopiedSourceFile","currentFile","createSourceFileFromText","getShouldBeInProject","_isInProject","destinationFile","literalReferences","reference","updateStringLiteralReferences","copyImmediately","save","copyImmediatelySync","saveSync","moveToDirectory","oldDirPath","sourceFileReferences","_getReferencesForMoveInternal","_moveInternal","_updateReferencesForMoveInternal","fileRelativeOrAbsolutePath","markAsInProject","existingSourceFile","throwIfFileExists","_markAsInProject","referencingLiterals","moveImmediately","moveImmediatelySync","deleteImmediately","deleteImmediatelySync","_isLibFileInMemory","_getTextForSave","_hasBom","getPathReferenceDirectives","referencedFiles","getTypeReferenceDirectives","typeReferenceDirectives","getLibReferenceDirectives","libReferenceDirectives","getReferencingSourceFiles","getReferencingNodesInOtherSourceFiles","literals","getReferencingNodeFromStringLiteral","getReferencedSourceFiles","getSourceFilesFromEntries","getNodesReferencingOtherSourceFiles","getLiteralsReferencingOtherSourceFiles","getLiteralsFromEntries","imports","l","getLanguageVersion","getLanguageVariant","languageVariant","program","_isCompilerProgramCreated","compilerProgram","isSourceFileFromExternalLibrary","isInNodeModules","isSaved","_setIsSaved","getPreEmitDiagnostics","unindent","positionRangeOrPos","positionRange","correctedText","targetSourceFile","emitSync","getEmitOutput","emitOnlyDtsFiles","getFormattedDocumentText","refreshFromFileSystem","fileReadResult","_refreshFromFileSystemInternal","refreshFromFileSystemSync","sourceFileDirOrPath","sourceFileDirOrFilePath","_doActionPreNextModification","wrappedSubscription","organizeImports","userPreferences","fileTextChanges","applyChanges","fixUnusedIdentifiers","getCombinedCodeFix","fixMissingImports","combinedCodeFix","getChanges","changes","getTextChanges","removeUnnecessaryDoubleBlankLines","applyTextChanges","addedLength","Deleted","NoChange","Updated","inProjectCoordinator","isSourceFileInProject","markSourceFileAsInProject","nodeReferences","createBase$p","VariableStatementBase","getDeclarationList","declarationList","addDeclaration","addDeclarations","insertDeclaration","insertDeclarations","existingDeclarations","WhileStatementBase","WithStatementBase","FunctionLikeDeclaration","createBase$o","ArrowFunctionBase","getEqualsGreaterThan","equalsGreaterThanToken","OverloadableNode","getOverloadsAndImplementation","getImplementationOrThrow","getNameIfNamedNode","hasSameName","hasSameKind","nodeAsNamedNode","insertOverloads","implementationNode","overloadsCount","firstIndex","mainIndex","thisStructure","getThisStructure","printStructure","expectedSyntaxKind","createBase$n","FunctionDeclarationBase","createOverloadBase$2","FunctionDeclarationOverloadBase","addOverload","addOverloads","insertOverload","thisName","hasImplementation","getOverloadSpecificStructure","getSpecificStructure","createBase$m","FunctionExpressionBase","createBase$l","ParameterDeclarationBase","ParameterDeclaration","isParameterProperty","setIsRestParameter","addParensIfNecessary","isOptional","parameter","isParameterWithoutParens","addParens","paramText","newParent","createBase$k","MethodDeclarationBase","createOverloadBase$1","MethodDeclarationOverloadBase","ClassLikeDeclarationBase","ClassLikeDeclarationBaseSpecific","setExtends","childSyntaxListStart","getExtendsOrThrow","types","previousMemberHasBody","firstStructureHasBody","structureHasBody","forClassMember","lastStructureHasBody","nextMemberHasBody","addConstructor","insertConstructor","addConstructors","insertConstructors","insertChildren","getConstructors","addStaticBlock","insertStaticBlock","addStaticBlocks","insertStaticBlocks","getStaticBlocks","getInstanceProperty","getInstanceProperties","getInstancePropertyOrThrow","getInstanceMembers","isClassPropertyType","getStaticProperty","getStaticProperties","getStaticPropertyOrThrow","getStaticMembers","getGetAccessor","getGetAccessors","getGetAccessorOrThrow","getSetAccessor","getSetAccessors","getSetAccessorOrThrow","getInstanceMethod","getInstanceMethods","getInstanceMethodOrThrow","getStaticMethod","getStaticMethods","getStaticMethodOrThrow","getInstanceMember","getInstanceMemberOrThrow","getMembersWithParameterProperties","getStaticMember","getStaticMemberOrThrow","implementationCtors","param","getAllMembers","isSupportedClassMember","getMember","getMemberOrThrow","getBaseTypes","getBaseClassOrThrow","getBaseClass","baseTypes","isIntersection","getIntersectionTypes","getDerivedClasses","classes","getImmediateDerivedClasses","derivedClasses","derivedClass","classDec","compilerMembers","nodeParent","heritageClause","getToken","classDeclaration","createBase$j","ClassDeclarationBase","method","accessor","extractInterface","constructors","accessors","getExtractedClassDetails","parameterProperties","getDefaultExtractedName","jsDocComment","getTags","getTagName","getComment","getCommentText","getExtractedInterfacePropertyStructure","getExtractedInterfaceAccessorStructure","getExtractedInterfaceMethodStructure","extractStaticInterface","instanceName","getExtractedInterfaceParameterStructure","getAndSet","ClassExpressionBase","createBase$i","ClassStaticBlockDeclarationBase","CommentClassElement","createBase$h","ConstructorDeclarationBase","createOverloadBase","ConstructorDeclarationOverloadBase","ConstructorDeclaration","getSpecificOverloadStructure","createBase$g","GetAccessorDeclarationBase","GetAccessorDeclaration","createBase$f","PropertyDeclarationBase","createBase$e","SetAccessorDeclarationBase","SetAccessorDeclaration","DecoratorBase","callExpression","getCallExpression","getIdentifierFromName","_getInnerExpression","getNameFromExpression","getFullName","isDecoratorFactory","setIsDecoratorFactory","expressionText","getCallExpressionOrThrow","thisStartLinePos","JSDocPropertyLikeTag","getTypeExpression","typeExpression","getTypeExpressionOrThrow","isBracketed","JSDocTypeExpressionableTag","JSDocTypeParameteredTag","getTextWithoutStars","innerTextWithStars","starPos","getStarPosIfFirstNonWhitespaceChar","substringStart","JSDocBase","isMultiLine","getInnerText","getTextOfJSDocComment","getDescription","endSearchStart","getEndPos","startOrSpacePos","endOrNewLinePos","setDescription","startEditPos","endEditPos","rawLines","linesText","addTag","addTags","insertTags","insertTag","replaceStart","getReplaceStart","replaceEnd","getReplaceEnd","maxMin","TypeNode","NodeWithTypeArgumentsBase","NodeWithTypeArguments","ArrayTypeNode","getElementTypeNode","elementType","ConditionalTypeNode","getCheckType","checkType","getExtendsType","extendsType","getTrueType","trueType","getFalseType","falseType","FunctionOrConstructorTypeNodeBaseBase","FunctionOrConstructorTypeNodeBase","ConstructorTypeNodeBase","ConstructorTypeNode","ExpressionWithTypeArgumentsBase","FunctionTypeNodeBase","FunctionTypeNode","isMultiline","multiLine","ImportTypeNode","setArgument","getArgument","getLiteral","argument","setQualifier","qualifier","getQualifier","paren","getQualifierOrThrow","getAssertions","assertions","getAssertionsOrThrow","IndexedAccessTypeNode","getObjectTypeNode","objectType","getIndexTypeNode","indexType","InferTypeNode","typeParameter","IntersectionTypeNode","LiteralTypeNode","tsLiteral","MappedTypeNode","getNameTypeNode","nameType","getNameTypeNodeOrThrow","getReadonlyToken","readonlyToken","getReadonlyTokenOrThrow","getQuestionTokenOrThrow","createBase$d","NamedTupleMemberBase","ParenthesizedTypeNode","TemplateLiteralTypeNode","getHead","getTemplateSpans","templateSpans","ThisTypeNode","TupleTypeNode","createBase$c","TypeAliasDeclarationBase","TypeLiteralNodeBase","TypeLiteralNode","TypeOperatorTypeNode","getOperator","TypeParameterDeclarationBase","TypeParameterDeclaration","getConstraint","getConstraintOrThrow","setConstraint","removeConstraint","removeConstraintOrDefault","getDefaultOrThrow","setDefault","removeDefault","defaultNode","setVariance","getVariance","removeAllTypeParameters","constraintNode","nodeToRemove","siblingKind","TypePredicateNode","getParameterNameNode","parameterName","hasAssertsModifier","assertsModifier","getAssertsModifier","getAssertsModifierOrThrow","TypeQueryNode","getExprName","exprName","TypeReferenceNode","getTypeName","typeName","UnionTypeNode","JSDocType","JSDocTagBase","getTagNameNode","setTagName","jsDocBodyStart","nextJsDocTag","getNextJsDocTag","isLastJsDoc","removalStart","getRemovalStart","getNextTagStartOrDocEnd","getReplaceTrivia","getPreviousNonWhiteSpacePos","getTagEnd","jsDocTag","nameEnd","tagEnd","thisIndex","JSDocFunctionTypeBase","isPostfix","postfix","JSDocParameterTagBase","JSDocPropertyTagBase","JSDocReturnTagBase","JSDocSeeTagBase","JSDocTagInfo","JSDocTemplateTagBase","JSDocThisTagBase","isArrayType","getPropertyTags","jsDocPropertyTags","JSDocUnknownTag","CommentEnumMember","createBase$b","EnumDeclarationBase","setIsConstEnum","areAllStructuresStructures","isConstEnum","getConstKeyword","ConstKeyword","createBase$a","EnumMemberBase","getConstantValue","setValue","expressionNodeOrIndex","expressions","expressionNodeToRemove","getExpressionFromIndex","createBase$9","CallSignatureDeclarationBase","CallSignatureDeclaration","CommentTypeElement","createBase$8","ConstructSignatureDeclarationBase","ConstructSignatureDeclaration","createBase$7","IndexSignatureDeclarationBase","IndexSignatureDeclaration","getKeyName","getKeyNameNode","setKeyName","getKeyType","setKeyType","keyTypeNode","getKeyTypeNode","createBase$6","InterfaceDeclarationBase","getBaseDeclarations","getImplementations","createBase$5","MethodSignatureBase","createBase$4","PropertySignatureBase","JsxAttributedNode","getAttributes","getAttributeOrThrow","getAttribute","addAttribute","addAttributes","insertAttributes","insertAttribute","originalChildrenCount","structuresPrinter","JsxTagNamedNode","JsxAttributeBase","createBase$3","JsxClosingElementBase","JsxElementBase","getJsxChildren","getOpeningElement","openingElement","getClosingElement","closingElement","setBodyTextInline","bodyText","JsxExpressionBase","getOpeningFragment","openingFragment","getClosingFragment","closingFragment","createBase$2","JsxOpeningElementBase","createBase$1","JsxSelfClosingElementBase","JsxSpreadAttributeBase","JsxTextBase","containsOnlyTriviaWhiteSpaces","oldCompilerNode","containsOnlyWhiteSpaces","BigIntLiteralBase","BigInt","textWithoutN","TrueLiteralBase","TrueLiteral","FalseLiteralBase","FalseLiteral","NullLiteralBase","NullLiteral","NumericLiteralBase","parseFloat","RegularExpressionLiteralBase","regExpOrPattern","StringLiteralBase","Single","NoSubstitutionTemplateLiteralBase","getTag","tag","getTemplate","template","removeTag","TemplateExpressionBase","TemplateHeadBase","TemplateMiddleBase","TemplateSpanBase","TemplateTailBase","CommonIdentifierBase","getDefinitionNodes","getDefinitions","getDeclarationNode","ComputedPropertyNameBase","IdentifierBase","PrivateIdentifierBase","createBase","VariableDeclarationBase","removeFromDeclarationList","removeFromCatchClause","VariableDeclarationListBase","Const","Var","LetKeyword","VarKeyword","keyword","Signature","_compilerSignature","compilerSignature","getDocumentationComments","getDocumentationComment","getSymbolDisplayPart","getJsDocTags","getJSDocTagInfo","getDeclaration","compilerSignatureDeclaration","getSourceFileForNode","_compilerSymbol","getValueDeclaration","compilerSymbol","getEscapedName","getAliasedSymbolOrThrow","getImmediatelyAliasedSymbol","getImmediatelyAliasedSymbolOrThrow","getExportSymbol","getExportSymbolOfSymbol","isAlias","Alias","Optional","hasFlags","getValueDeclarationOrThrow","valueDeclaration","getExportOrThrow","getGlobalExportOrThrow","getGlobalExport","globalExports","getGlobalExports","getDeclaredType","getDeclaredTypeOfSymbol","getTypeOfSymbolAtLocation","getFullyQualifiedName","TextSpan","FileTextChanges","addOrGetSourceFileFromFilePath","_existingFileExists","isNewFile","_isApplied","CodeAction","CodeFixAction","getFixName","fixName","getFixId","fixId","getFixAllDescription","fixAllDescription","CombinedCodeActions","DocumentSpan","getNode","findBestMatchingNode","bestNode","getOriginalTextSpan","originalTextSpan","getOriginalFileName","originalFileName","DefinitionInfo","getContainerKind","containerKind","getContainerName","containerName","findIdentifier","DiagnosticMessageChain","getMessageText","getNext","getCode","getCategory","category","getDiagnosticMessageChain","getLineNumber","getSource","DiagnosticWithLocation","OutputFile","getWriteByteOrderMark","EmitOutput","getEmitSkipped","emitSkipped","getOutputFiles","outputFiles","EmitResult","getDiagnostics","getDiagnostic","ImplementationLocation","getDisplayParts","displayParts","MemoryEmitResult","_files","getFiles","saveFiles","promises","saveFilesSync","RefactorEditInfo","getEdits","edits","getRenameFilePath","renameFilename","getRenameLocation","ReferencedSymbol","_references","references","getReferencedSymbolEntry","getDefinition","getReferencedSymbolDefinitionInfo","definition","getReferences","ReferencedSymbolDefinitionInfo","ReferenceEntry","isWriteAccess","isInString","ReferencedSymbolEntry","isDefinition","RenameLocation","prefixText","suffixText","SymbolDisplayPart","TypeChecker","_getCompilerObject","_reset","getTypeChecker","getAmbientModules","getApparentType","compilerType","contextualType","tsAliasSymbol","getImmediateAliasedSymbol","getPropertiesOfType","getTypeText","enclosingNode","typeFormatFlags","_getDefaultTypeFormatFlags","typeToString","getReturnTypeOfSignature","getSignatureFromDeclaration","moduleSymbol","symbols","exportSpecifier","getResolvedSignature","resolvedSignature","getResolvedSignatureOrThrow","getBaseTypeOfLiteralType","typeReference","formatFlags","UseTypeOfFunction","NoTruncation","UseFullyQualifiedType","WriteTypeArgumentsOfSignature","InTypeAlias","Program","_configFileParsingDiagnostics","configFileParsingDiagnostics","_typeChecker","rootNames","_getOrCreateCompilerObject","_createdCompilerObject","createProgram","_oldProgram","emitResult","_emit","emitToMemory","customTransformers","cancellationToken","compilerDiagnostics","getDiagnosticWithLocation","getSemanticDiagnostics","getDeclarationDiagnostics","getGlobalDiagnostics","getConfigFileParsingDiagnostics","LanguageService","params","_projectVersion","getSourceFileContainer","_compilerHost","createLanguageService","documentRegistry","_program","getDefinitionsAtPosition","getDefinitionAtPosition","getDefinitionInfo","getImplementationsAtPosition","getImplementationAtPosition","location","findReferencesAtPosition","referencedSymbols","getReferencingNodes","referencedSymbol","ScriptElementKind","getReferencedSymbol","usePrefixAndSuffixText","renameInStrings","renameInComments","getSuggestionDiagnostics","filePathOrSourceFile","_getFilePathFromFilePathOrSourceFile","suggestionDiagnostics","_getFilledSettings","getFormattingEditsForDocument","newLineCharacter","ensureNewLineAtEndOfFile","getCompilerEmitOutput","position","getIndentationAtPosition","_getFilledUserPreferences","getEditsForRefactor","positionOrRange","refactorName","actionName","preferences","compilerResult","getCodeFixesAtPosition","errorCodes","formatOptions","Type","_compilerType","getAliasSymbol","aliasSymbol","getAliasSymbolOrThrow","getAliasTypeArguments","aliasTypeArgs","aliasTypeArguments","getArrayElementTypeOrThrow","getArrayElementType","defaultType","getApparentProperties","getApparentProperty","isNullable","getUnionTypes","isNull","isUndefined","getNonNullableType","getNumberIndexType","numberIndexType","getStringIndexType","stringIndexType","getTargetType","targetType","getTargetTypeOrThrow","getTupleElements","isTuple","isUnion","getLiteralValueOrThrow","getLiteralFreshType","freshType","getLiteralFreshTypeOrThrow","getLiteralRegularType","regularType","getLiteralRegularTypeOrThrow","isAnonymous","_hasObjectFlag","Anonymous","isAny","_hasTypeFlag","Any","isTemplateLiteral","TemplateLiteral","isBoolean","isLiteral","isBooleanLiteralForTs3_0","isBooleanLiteral","BooleanLiteral","isEnumLiteral","EnumLiteral","isNumberLiteral","NumberLiteral","isClassOrInterface","hasEnumFlag","Tuple","isUnionOrIntersection","isUnknown","Unknown","Null","Undefined","getObjectFlags","objectFlags","flag","_getTypeParameterDeclaration","DirectoryEmitResult","_skippedFilePaths","_outputFilePaths","getSkippedFilePaths","getOutputFilePaths","__context","_setPathInternal","_pathParts","_throwIfDeletedOrRemoved","isAncestorOf","possibleDescendant","_isAncestorOfDir","isDescendantOf","possibleAncestor","_getDepth","addDirectoryAtPathIfExists","getDirectoryOrThrow","pathOrCondition","getSourceFileOrThrow","absolutePath","_getSourceFilesIterator","_getDirectoriesIterator","getSourceFiles","globPatterns","finalGlobPatterns","getFilteredSourceFiles","sourceFilePaths","matchedPaths","matchedPath","_getDescendantSourceFilesIterator","getChildSourceFilesOfDirectory","getDescendantSourceFiles","_getDescendantDirectoriesIterator","addSourceFilesAtPaths","fileGlobs","g","directoryCoordinator","relativeOrAbsoluteDirPath","addDirectoryAtPath","createDirectory","createDirectoryOrAddIfExists","relativeFilePath","addSourceFileAtPathIfExists","addSourceFileAtPath","writeTasks","outputFilePaths","skippedFilePaths","_emitInternal","isStandardizedFilePath","isJsFile","outDir","isMapFile","isDtsFile","declarationDir","getStandardizedPath","getSubDirPath","hasDeclarationDir","emitDirectory","outputFile","relativeOrAbsolutePath","originalPath","newPath","getDirectoryCopyOptions","includeUntrackedFiles","copyingDirectories","newDirPath","copyingSourceFiles","_getReferencesForCopy","preAction","existingDir","getDirectoryFromCacheOnlyIfInCache","movingDirectories","oldPath","movingSourceFiles","_getReferencesForMove","removeDirectoryFromCache","dirToOverwrite","addDirectoryToCache","_deleteDescendants","clearImmediately","clearImmediatelySync","unsavedSourceFiles","thisDirectory","moduleResolution","getPathForSourceFile","getPathForDirectory","getPathForFilePath","NodeJs","Classic","Node16","NodeNext","isDirectoryInProject","markDirectoryAsInProject","_hasLoadedParent","DirectoryCoordinator","getDirectoryFromPath","globbedDirectories","DirectoryCache","directoriesByPath","sourceFilesByDirPath","directoriesByDirPath","orphanDirs","orphanDir","createOrAddIfExists","getOrphans","getAll","getAllByDepth","dirLevels","addToDirLevels","dirDepth","removeFromDirectoriesByDirPath","addSourceFile","fillParentsOfDirPath","newDirectory","addDirectory","orphanDirPath","orphanDirParentPath","isOrphanRootDir","addToDirectoriesByDirPath","passedDirPaths","ForgetfulNodeCache","forgetStack","setForgetPoint","forgetLastPoint","rememberNode","wasInForgetStack","stackItem","rememberParentOfNode","kindToWrapperMappings","CompilerFactory","diagnosticCache","definitionInfoCache","documentSpanCache","diagnosticMessageChainCache","jsDocTagInfoCache","signatureCache","symbolCache","symbolDisplayPartCache","referencedSymbolEntryCache","referencedSymbolCache","referencedSymbolDefinitionInfoCache","typeCache","typeParameterCache","nodeCache","sourceFileAddedEventContainer","sourceFileRemovedEventContainer","directoryCache","currentSourceFiles","getSourceFilesByDirectoryDepth","getDirectoriesByDepth","sourceText","createOrOverwriteSourceFileFromText","createSourceFileFromTextInternal","prefixMessage","createNode","initializeNode","parentNode","wasAdded","createdSourceFile","setSourceFileNotInProject","addSourceFileToCache","getOrphanDirectories","getDocumentSpan","diagnostic","jsDocTagInfo","nodeToReplace","removeCompilerNodeFromCache","wrappedSourceFile","wasPromise","isPromise","InProjectCoordinator","notInProjectFiles","_inProject","_internalMarkSourceFileAsInProject","markSourceFilesAsInProjectForResolution","nodeModulesSearchName","changedSourceFiles","unchangedSourceFiles","shouldMarkInProject","nodeModulesPath","nodeModulesDir","setDirectoryAndFilesAsNotInProjectForTesting","subDir","markAncestorDirs","ancestorDirs","getAncestorsUpToOneInProject","topAncestor","ancestorDir","StructurePrinterFactory","_getFormatCodeSettings","ProjectContext","_project","_compilerOptions","compilerOptionsContainer","_languageService","getModuleResolutionHost","_customTypeChecker","getToolRequiredError","hasLanguageService","indentNumberOfSpaces","useTabs","useSingleQuote","Project","verifyOptions","skipAddingFilesFromTsConfig","_addSourceFilesForTsConfigResolver","skipFileDependencyResolution","resolveSourceFileDependencies","getTsConfigCompilerOptions","defaultEncoding","_getProjectDirectoriesByDirectoryDepth","getRootDirectories","inProjectDir","findInProjectDirectories","addSourceFilesFromTsConfig","resolver","addedSourceFiles","previouslyForgotten","fileNameOrSearchFunction","fileNameOrPath","errorFileNameOrPath","filePathOrSearchFunction","getFilePathOrSearchFunction","_getProjectSourceFilesByDirectoryDepth","getAmbientModule","normalizeAmbientModuleName","getAmbientModuleOrThrow","_getUnsavedSourceFiles","enableLogging","getUnsavedIterator","getLanguageService","emitOptions","isQuote","createWrappedNode","projectContext","getSourceFileNode","getSourceFileFromNode","Writers","object","keyNames","writeObject","writeValue","anyPropertyHasValue","unionType","firstType","secondType","additionalTypes","getWriteFunctionForUnionOrIntersectionType","intersectionType","assertion","assertionType","returnStatement","hangingIndentUnlessBlock","writeSeparatedByString","eval","string_utils_js_1","CommentChar","CHARS","BACK_SLASH","FORWARD_SLASH","NEW_LINE","DOUBLE_QUOTE","SINGLE_QUOTE","BACK_TICK","OPEN_BRACE","DOLLAR_SIGN","isCharToHandle","configurable","writable","_newLine","_useTabs","_indentNumberOfSpaces","_indentationText","_quoteChar","countOrText","_queuedIndentation","_getIndentationLevelFromArg","_queuedOnlyIfNotBlock","_withResetIndentation","_currentIndentation","withIndentationLevel","setStateAction","writeAction","previousState","_getIndentationState","_setIndentationState","_newLineIfNewLineOnNextWrite","_newLineOnNextWrite","_indentBlockInternal","timesOrBlock","getLastChar","_isOnFirstLineOfBlock","conditionalWriteLine","strOrFunc","writeLine","getStringFromStrOrFunc","_writeIndentingNewLines","isLastBlankLine","_baseWriteNewline","tabIfLastNot","isLastTab","tab","textOrFunc","commentChar","_currentCommentChar","Line","Star","_assertUndefined","_length","_texts","verifyInput","updateInternalArray","localIndex","getArrayIndexAndLocalIndex","textItem","startText","endText","isOnFirstLineOfBlock","_stringCharStack","lastChar","foundCount","_getLastCharCodeWithOffset","textIndex","writeIndividual","_newLineRegEx","_writeIndentation","_updateInternalState","_internalWrite","lastStringCharOnStack","_dequeueQueuedIndentation","wasLastBlock","foundNewLine","pastChar","pastPastChar","_isInRegEx","isRegExStart","flooredIndentation","overflow","portion","round","_spacesOrTabsRegEx","getSpacesAndTabsCount","queued","queuedOnlyIfNotBlock","numberSpaces","newlineRegex","__webpack_module_cache__","moduleId","cachedModule","threw","__webpack_modules__","__dirname","extractHandlersFromFile","allowJs","callExpressions","handlerName","handlerBody","innerErr","extractServiceName","serviceFilePath","existsSync","decl","newExpr","serviceName","main","targetDir","argv","exit","manifest","handlers","stdout"],"sources":["../assets/node_modules/@nodelib/fs.scandir/out/adapters/fs.js","../assets/node_modules/@nodelib/fs.scandir/out/constants.js","../assets/node_modules/@nodelib/fs.scandir/out/index.js","../assets/node_modules/@nodelib/fs.scandir/out/providers/async.js","../assets/node_modules/@nodelib/fs.scandir/out/providers/common.js","../assets/node_modules/@nodelib/fs.scandir/out/providers/sync.js","../assets/node_modules/@nodelib/fs.scandir/out/settings.js","../assets/node_modules/@nodelib/fs.scandir/out/utils/fs.js","../assets/node_modules/@nodelib/fs.scandir/out/utils/index.js","../assets/node_modules/@nodelib/fs.stat/out/adapters/fs.js","../assets/node_modules/@nodelib/fs.stat/out/index.js","../assets/node_modules/@nodelib/fs.stat/out/providers/async.js","../assets/node_modules/@nodelib/fs.stat/out/providers/sync.js","../assets/node_modules/@nodelib/fs.stat/out/settings.js","../assets/node_modules/@nodelib/fs.walk/out/index.js","../assets/node_modules/@nodelib/fs.walk/out/providers/async.js","../assets/node_modules/@nodelib/fs.walk/out/providers/stream.js","../assets/node_modules/@nodelib/fs.walk/out/providers/sync.js","../assets/node_modules/@nodelib/fs.walk/out/readers/async.js","../assets/node_modules/@nodelib/fs.walk/out/readers/common.js","../assets/node_modules/@nodelib/fs.walk/out/readers/reader.js","../assets/node_modules/@nodelib/fs.walk/out/readers/sync.js","../assets/node_modules/@nodelib/fs.walk/out/settings.js","../assets/node_modules/@ts-morph/common/dist/ts-morph-common.js","../assets/node_modules/@ts-morph/common/dist/typescript.js","../assets/node_modules/balanced-match/index.js","../assets/node_modules/brace-expansion/index.js","../assets/node_modules/braces/index.js","../assets/node_modules/braces/lib/compile.js","../assets/node_modules/braces/lib/constants.js","../assets/node_modules/braces/lib/expand.js","../assets/node_modules/braces/lib/parse.js","../assets/node_modules/braces/lib/stringify.js","../assets/node_modules/braces/lib/utils.js","../assets/node_modules/fast-glob/out/index.js","../assets/node_modules/fast-glob/out/managers/tasks.js","../assets/node_modules/fast-glob/out/providers/async.js","../assets/node_modules/fast-glob/out/providers/filters/deep.js","../assets/node_modules/fast-glob/out/providers/filters/entry.js","../assets/node_modules/fast-glob/out/providers/filters/error.js","../assets/node_modules/fast-glob/out/providers/matchers/matcher.js","../assets/node_modules/fast-glob/out/providers/matchers/partial.js","../assets/node_modules/fast-glob/out/providers/provider.js","../assets/node_modules/fast-glob/out/providers/stream.js","../assets/node_modules/fast-glob/out/providers/sync.js","../assets/node_modules/fast-glob/out/providers/transformers/entry.js","../assets/node_modules/fast-glob/out/readers/async.js","../assets/node_modules/fast-glob/out/readers/reader.js","../assets/node_modules/fast-glob/out/readers/stream.js","../assets/node_modules/fast-glob/out/readers/sync.js","../assets/node_modules/fast-glob/out/settings.js","../assets/node_modules/fast-glob/out/utils/array.js","../assets/node_modules/fast-glob/out/utils/errno.js","../assets/node_modules/fast-glob/out/utils/fs.js","../assets/node_modules/fast-glob/out/utils/index.js","../assets/node_modules/fast-glob/out/utils/path.js","../assets/node_modules/fast-glob/out/utils/pattern.js","../assets/node_modules/fast-glob/out/utils/stream.js","../assets/node_modules/fast-glob/out/utils/string.js","../assets/node_modules/fastq/queue.js","../assets/node_modules/fill-range/index.js","../assets/node_modules/glob-parent/index.js","../assets/node_modules/is-extglob/index.js","../assets/node_modules/is-glob/index.js","../assets/node_modules/is-number/index.js","../assets/node_modules/merge2/index.js","../assets/node_modules/micromatch/index.js","../assets/node_modules/minimatch/lib/path.js","../assets/node_modules/minimatch/minimatch.js","../assets/node_modules/mkdirp/index.js","../assets/node_modules/mkdirp/lib/find-made.js","../assets/node_modules/mkdirp/lib/mkdirp-manual.js","../assets/node_modules/mkdirp/lib/mkdirp-native.js","../assets/node_modules/mkdirp/lib/opts-arg.js","../assets/node_modules/mkdirp/lib/path-arg.js","../assets/node_modules/mkdirp/lib/use-native.js","../assets/node_modules/path-browserify/index.js","../assets/node_modules/picomatch/index.js","../assets/node_modules/picomatch/lib/constants.js","../assets/node_modules/picomatch/lib/parse.js","../assets/node_modules/picomatch/lib/picomatch.js","../assets/node_modules/picomatch/lib/scan.js","../assets/node_modules/picomatch/lib/utils.js","../assets/node_modules/queue-microtask/index.js","../assets/node_modules/reusify/reusify.js","../assets/node_modules/run-parallel/index.js","../assets/node_modules/to-regex-range/index.js","../assets/node_modules/ts-morph/dist/ts-morph.js","../../../../../.nvm/versions/node/v18.20.6/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../external node-commonjs \"buffer\"","../external node-commonjs \"crypto\"","../external node-commonjs \"events\"","../external node-commonjs \"fs\"","../external node-commonjs \"inspector\"","../external node-commonjs \"os\"","../external node-commonjs \"path\"","../external node-commonjs \"perf_hooks\"","../external node-commonjs \"stream\"","../external node-commonjs \"util\"","../assets/node_modules/code-block-writer/script/mod.js","../assets/node_modules/code-block-writer/script/utils/string_utils.js","../webpack/bootstrap","../webpack/runtime/compat","../assets/extractHandlers.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;\nconst fs = require(\"fs\");\nexports.FILE_SYSTEM_ADAPTER = {\n    lstat: fs.lstat,\n    stat: fs.stat,\n    lstatSync: fs.lstatSync,\n    statSync: fs.statSync,\n    readdir: fs.readdir,\n    readdirSync: fs.readdirSync\n};\nfunction createFileSystemAdapter(fsMethods) {\n    if (fsMethods === undefined) {\n        return exports.FILE_SYSTEM_ADAPTER;\n    }\n    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);\n}\nexports.createFileSystemAdapter = createFileSystemAdapter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;\nconst NODE_PROCESS_VERSION_PARTS = process.versions.node.split('.');\nif (NODE_PROCESS_VERSION_PARTS[0] === undefined || NODE_PROCESS_VERSION_PARTS[1] === undefined) {\n    throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);\n}\nconst MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);\nconst MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);\nconst SUPPORTED_MAJOR_VERSION = 10;\nconst SUPPORTED_MINOR_VERSION = 10;\nconst IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;\nconst IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;\n/**\n * IS `true` for Node.js 10.10 and greater.\n */\nexports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Settings = exports.scandirSync = exports.scandir = void 0;\nconst async = require(\"./providers/async\");\nconst sync = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nexports.Settings = settings_1.default;\nfunction scandir(path, optionsOrSettingsOrCallback, callback) {\n    if (typeof optionsOrSettingsOrCallback === 'function') {\n        async.read(path, getSettings(), optionsOrSettingsOrCallback);\n        return;\n    }\n    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);\n}\nexports.scandir = scandir;\nfunction scandirSync(path, optionsOrSettings) {\n    const settings = getSettings(optionsOrSettings);\n    return sync.read(path, settings);\n}\nexports.scandirSync = scandirSync;\nfunction getSettings(settingsOrOptions = {}) {\n    if (settingsOrOptions instanceof settings_1.default) {\n        return settingsOrOptions;\n    }\n    return new settings_1.default(settingsOrOptions);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst rpl = require(\"run-parallel\");\nconst constants_1 = require(\"../constants\");\nconst utils = require(\"../utils\");\nconst common = require(\"./common\");\nfunction read(directory, settings, callback) {\n    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n        readdirWithFileTypes(directory, settings, callback);\n        return;\n    }\n    readdir(directory, settings, callback);\n}\nexports.read = read;\nfunction readdirWithFileTypes(directory, settings, callback) {\n    settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {\n        if (readdirError !== null) {\n            callFailureCallback(callback, readdirError);\n            return;\n        }\n        const entries = dirents.map((dirent) => ({\n            dirent,\n            name: dirent.name,\n            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n        }));\n        if (!settings.followSymbolicLinks) {\n            callSuccessCallback(callback, entries);\n            return;\n        }\n        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));\n        rpl(tasks, (rplError, rplEntries) => {\n            if (rplError !== null) {\n                callFailureCallback(callback, rplError);\n                return;\n            }\n            callSuccessCallback(callback, rplEntries);\n        });\n    });\n}\nexports.readdirWithFileTypes = readdirWithFileTypes;\nfunction makeRplTaskEntry(entry, settings) {\n    return (done) => {\n        if (!entry.dirent.isSymbolicLink()) {\n            done(null, entry);\n            return;\n        }\n        settings.fs.stat(entry.path, (statError, stats) => {\n            if (statError !== null) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    done(statError);\n                    return;\n                }\n                done(null, entry);\n                return;\n            }\n            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n            done(null, entry);\n        });\n    };\n}\nfunction readdir(directory, settings, callback) {\n    settings.fs.readdir(directory, (readdirError, names) => {\n        if (readdirError !== null) {\n            callFailureCallback(callback, readdirError);\n            return;\n        }\n        const tasks = names.map((name) => {\n            const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n            return (done) => {\n                fsStat.stat(path, settings.fsStatSettings, (error, stats) => {\n                    if (error !== null) {\n                        done(error);\n                        return;\n                    }\n                    const entry = {\n                        name,\n                        path,\n                        dirent: utils.fs.createDirentFromStats(name, stats)\n                    };\n                    if (settings.stats) {\n                        entry.stats = stats;\n                    }\n                    done(null, entry);\n                });\n            };\n        });\n        rpl(tasks, (rplError, entries) => {\n            if (rplError !== null) {\n                callFailureCallback(callback, rplError);\n                return;\n            }\n            callSuccessCallback(callback, entries);\n        });\n    });\n}\nexports.readdir = readdir;\nfunction callFailureCallback(callback, error) {\n    callback(error);\n}\nfunction callSuccessCallback(callback, result) {\n    callback(null, result);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.joinPathSegments = void 0;\nfunction joinPathSegments(a, b, separator) {\n    /**\n     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).\n     */\n    if (a.endsWith(separator)) {\n        return a + b;\n    }\n    return a + separator + b;\n}\nexports.joinPathSegments = joinPathSegments;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst constants_1 = require(\"../constants\");\nconst utils = require(\"../utils\");\nconst common = require(\"./common\");\nfunction read(directory, settings) {\n    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n        return readdirWithFileTypes(directory, settings);\n    }\n    return readdir(directory, settings);\n}\nexports.read = read;\nfunction readdirWithFileTypes(directory, settings) {\n    const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });\n    return dirents.map((dirent) => {\n        const entry = {\n            dirent,\n            name: dirent.name,\n            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n        };\n        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {\n            try {\n                const stats = settings.fs.statSync(entry.path);\n                entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n            }\n            catch (error) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    throw error;\n                }\n            }\n        }\n        return entry;\n    });\n}\nexports.readdirWithFileTypes = readdirWithFileTypes;\nfunction readdir(directory, settings) {\n    const names = settings.fs.readdirSync(directory);\n    return names.map((name) => {\n        const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);\n        const entry = {\n            name,\n            path: entryPath,\n            dirent: utils.fs.createDirentFromStats(name, stats)\n        };\n        if (settings.stats) {\n            entry.stats = stats;\n        }\n        return entry;\n    });\n}\nexports.readdir = readdir;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst fs = require(\"./adapters/fs\");\nclass Settings {\n    constructor(_options = {}) {\n        this._options = _options;\n        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);\n        this.fs = fs.createFileSystemAdapter(this._options.fs);\n        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);\n        this.stats = this._getValue(this._options.stats, false);\n        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);\n        this.fsStatSettings = new fsStat.Settings({\n            followSymbolicLink: this.followSymbolicLinks,\n            fs: this.fs,\n            throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink\n        });\n    }\n    _getValue(option, value) {\n        return option !== null && option !== void 0 ? option : value;\n    }\n}\nexports.default = Settings;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDirentFromStats = void 0;\nclass DirentFromStats {\n    constructor(name, stats) {\n        this.name = name;\n        this.isBlockDevice = stats.isBlockDevice.bind(stats);\n        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);\n        this.isDirectory = stats.isDirectory.bind(stats);\n        this.isFIFO = stats.isFIFO.bind(stats);\n        this.isFile = stats.isFile.bind(stats);\n        this.isSocket = stats.isSocket.bind(stats);\n        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);\n    }\n}\nfunction createDirentFromStats(name, stats) {\n    return new DirentFromStats(name, stats);\n}\nexports.createDirentFromStats = createDirentFromStats;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fs = void 0;\nconst fs = require(\"./fs\");\nexports.fs = fs;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;\nconst fs = require(\"fs\");\nexports.FILE_SYSTEM_ADAPTER = {\n    lstat: fs.lstat,\n    stat: fs.stat,\n    lstatSync: fs.lstatSync,\n    statSync: fs.statSync\n};\nfunction createFileSystemAdapter(fsMethods) {\n    if (fsMethods === undefined) {\n        return exports.FILE_SYSTEM_ADAPTER;\n    }\n    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);\n}\nexports.createFileSystemAdapter = createFileSystemAdapter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.statSync = exports.stat = exports.Settings = void 0;\nconst async = require(\"./providers/async\");\nconst sync = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nexports.Settings = settings_1.default;\nfunction stat(path, optionsOrSettingsOrCallback, callback) {\n    if (typeof optionsOrSettingsOrCallback === 'function') {\n        async.read(path, getSettings(), optionsOrSettingsOrCallback);\n        return;\n    }\n    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);\n}\nexports.stat = stat;\nfunction statSync(path, optionsOrSettings) {\n    const settings = getSettings(optionsOrSettings);\n    return sync.read(path, settings);\n}\nexports.statSync = statSync;\nfunction getSettings(settingsOrOptions = {}) {\n    if (settingsOrOptions instanceof settings_1.default) {\n        return settingsOrOptions;\n    }\n    return new settings_1.default(settingsOrOptions);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.read = void 0;\nfunction read(path, settings, callback) {\n    settings.fs.lstat(path, (lstatError, lstat) => {\n        if (lstatError !== null) {\n            callFailureCallback(callback, lstatError);\n            return;\n        }\n        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {\n            callSuccessCallback(callback, lstat);\n            return;\n        }\n        settings.fs.stat(path, (statError, stat) => {\n            if (statError !== null) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    callFailureCallback(callback, statError);\n                    return;\n                }\n                callSuccessCallback(callback, lstat);\n                return;\n            }\n            if (settings.markSymbolicLink) {\n                stat.isSymbolicLink = () => true;\n            }\n            callSuccessCallback(callback, stat);\n        });\n    });\n}\nexports.read = read;\nfunction callFailureCallback(callback, error) {\n    callback(error);\n}\nfunction callSuccessCallback(callback, result) {\n    callback(null, result);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.read = void 0;\nfunction read(path, settings) {\n    const lstat = settings.fs.lstatSync(path);\n    if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {\n        return lstat;\n    }\n    try {\n        const stat = settings.fs.statSync(path);\n        if (settings.markSymbolicLink) {\n            stat.isSymbolicLink = () => true;\n        }\n        return stat;\n    }\n    catch (error) {\n        if (!settings.throwErrorOnBrokenSymbolicLink) {\n            return lstat;\n        }\n        throw error;\n    }\n}\nexports.read = read;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"./adapters/fs\");\nclass Settings {\n    constructor(_options = {}) {\n        this._options = _options;\n        this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);\n        this.fs = fs.createFileSystemAdapter(this._options.fs);\n        this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);\n        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);\n    }\n    _getValue(option, value) {\n        return option !== null && option !== void 0 ? option : value;\n    }\n}\nexports.default = Settings;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Settings = exports.walkStream = exports.walkSync = exports.walk = void 0;\nconst async_1 = require(\"./providers/async\");\nconst stream_1 = require(\"./providers/stream\");\nconst sync_1 = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nexports.Settings = settings_1.default;\nfunction walk(directory, optionsOrSettingsOrCallback, callback) {\n    if (typeof optionsOrSettingsOrCallback === 'function') {\n        new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);\n        return;\n    }\n    new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);\n}\nexports.walk = walk;\nfunction walkSync(directory, optionsOrSettings) {\n    const settings = getSettings(optionsOrSettings);\n    const provider = new sync_1.default(directory, settings);\n    return provider.read();\n}\nexports.walkSync = walkSync;\nfunction walkStream(directory, optionsOrSettings) {\n    const settings = getSettings(optionsOrSettings);\n    const provider = new stream_1.default(directory, settings);\n    return provider.read();\n}\nexports.walkStream = walkStream;\nfunction getSettings(settingsOrOptions = {}) {\n    if (settingsOrOptions instanceof settings_1.default) {\n        return settingsOrOptions;\n    }\n    return new settings_1.default(settingsOrOptions);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst async_1 = require(\"../readers/async\");\nclass AsyncProvider {\n    constructor(_root, _settings) {\n        this._root = _root;\n        this._settings = _settings;\n        this._reader = new async_1.default(this._root, this._settings);\n        this._storage = [];\n    }\n    read(callback) {\n        this._reader.onError((error) => {\n            callFailureCallback(callback, error);\n        });\n        this._reader.onEntry((entry) => {\n            this._storage.push(entry);\n        });\n        this._reader.onEnd(() => {\n            callSuccessCallback(callback, this._storage);\n        });\n        this._reader.read();\n    }\n}\nexports.default = AsyncProvider;\nfunction callFailureCallback(callback, error) {\n    callback(error);\n}\nfunction callSuccessCallback(callback, entries) {\n    callback(null, entries);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"stream\");\nconst async_1 = require(\"../readers/async\");\nclass StreamProvider {\n    constructor(_root, _settings) {\n        this._root = _root;\n        this._settings = _settings;\n        this._reader = new async_1.default(this._root, this._settings);\n        this._stream = new stream_1.Readable({\n            objectMode: true,\n            read: () => { },\n            destroy: () => {\n                if (!this._reader.isDestroyed) {\n                    this._reader.destroy();\n                }\n            }\n        });\n    }\n    read() {\n        this._reader.onError((error) => {\n            this._stream.emit('error', error);\n        });\n        this._reader.onEntry((entry) => {\n            this._stream.push(entry);\n        });\n        this._reader.onEnd(() => {\n            this._stream.push(null);\n        });\n        this._reader.read();\n        return this._stream;\n    }\n}\nexports.default = StreamProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sync_1 = require(\"../readers/sync\");\nclass SyncProvider {\n    constructor(_root, _settings) {\n        this._root = _root;\n        this._settings = _settings;\n        this._reader = new sync_1.default(this._root, this._settings);\n    }\n    read() {\n        return this._reader.read();\n    }\n}\nexports.default = SyncProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst fsScandir = require(\"@nodelib/fs.scandir\");\nconst fastq = require(\"fastq\");\nconst common = require(\"./common\");\nconst reader_1 = require(\"./reader\");\nclass AsyncReader extends reader_1.default {\n    constructor(_root, _settings) {\n        super(_root, _settings);\n        this._settings = _settings;\n        this._scandir = fsScandir.scandir;\n        this._emitter = new events_1.EventEmitter();\n        this._queue = fastq(this._worker.bind(this), this._settings.concurrency);\n        this._isFatalError = false;\n        this._isDestroyed = false;\n        this._queue.drain = () => {\n            if (!this._isFatalError) {\n                this._emitter.emit('end');\n            }\n        };\n    }\n    read() {\n        this._isFatalError = false;\n        this._isDestroyed = false;\n        setImmediate(() => {\n            this._pushToQueue(this._root, this._settings.basePath);\n        });\n        return this._emitter;\n    }\n    get isDestroyed() {\n        return this._isDestroyed;\n    }\n    destroy() {\n        if (this._isDestroyed) {\n            throw new Error('The reader is already destroyed');\n        }\n        this._isDestroyed = true;\n        this._queue.killAndDrain();\n    }\n    onEntry(callback) {\n        this._emitter.on('entry', callback);\n    }\n    onError(callback) {\n        this._emitter.once('error', callback);\n    }\n    onEnd(callback) {\n        this._emitter.once('end', callback);\n    }\n    _pushToQueue(directory, base) {\n        const queueItem = { directory, base };\n        this._queue.push(queueItem, (error) => {\n            if (error !== null) {\n                this._handleError(error);\n            }\n        });\n    }\n    _worker(item, done) {\n        this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {\n            if (error !== null) {\n                done(error, undefined);\n                return;\n            }\n            for (const entry of entries) {\n                this._handleEntry(entry, item.base);\n            }\n            done(null, undefined);\n        });\n    }\n    _handleError(error) {\n        if (this._isDestroyed || !common.isFatalError(this._settings, error)) {\n            return;\n        }\n        this._isFatalError = true;\n        this._isDestroyed = true;\n        this._emitter.emit('error', error);\n    }\n    _handleEntry(entry, base) {\n        if (this._isDestroyed || this._isFatalError) {\n            return;\n        }\n        const fullpath = entry.path;\n        if (base !== undefined) {\n            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n        }\n        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n            this._emitEntry(entry);\n        }\n        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);\n        }\n    }\n    _emitEntry(entry) {\n        this._emitter.emit('entry', entry);\n    }\n}\nexports.default = AsyncReader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.joinPathSegments = exports.replacePathSegmentSeparator = exports.isAppliedFilter = exports.isFatalError = void 0;\nfunction isFatalError(settings, error) {\n    if (settings.errorFilter === null) {\n        return true;\n    }\n    return !settings.errorFilter(error);\n}\nexports.isFatalError = isFatalError;\nfunction isAppliedFilter(filter, value) {\n    return filter === null || filter(value);\n}\nexports.isAppliedFilter = isAppliedFilter;\nfunction replacePathSegmentSeparator(filepath, separator) {\n    return filepath.split(/[/\\\\]/).join(separator);\n}\nexports.replacePathSegmentSeparator = replacePathSegmentSeparator;\nfunction joinPathSegments(a, b, separator) {\n    if (a === '') {\n        return b;\n    }\n    /**\n     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).\n     */\n    if (a.endsWith(separator)) {\n        return a + b;\n    }\n    return a + separator + b;\n}\nexports.joinPathSegments = joinPathSegments;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common = require(\"./common\");\nclass Reader {\n    constructor(_root, _settings) {\n        this._root = _root;\n        this._settings = _settings;\n        this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);\n    }\n}\nexports.default = Reader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fsScandir = require(\"@nodelib/fs.scandir\");\nconst common = require(\"./common\");\nconst reader_1 = require(\"./reader\");\nclass SyncReader extends reader_1.default {\n    constructor() {\n        super(...arguments);\n        this._scandir = fsScandir.scandirSync;\n        this._storage = [];\n        this._queue = new Set();\n    }\n    read() {\n        this._pushToQueue(this._root, this._settings.basePath);\n        this._handleQueue();\n        return this._storage;\n    }\n    _pushToQueue(directory, base) {\n        this._queue.add({ directory, base });\n    }\n    _handleQueue() {\n        for (const item of this._queue.values()) {\n            this._handleDirectory(item.directory, item.base);\n        }\n    }\n    _handleDirectory(directory, base) {\n        try {\n            const entries = this._scandir(directory, this._settings.fsScandirSettings);\n            for (const entry of entries) {\n                this._handleEntry(entry, base);\n            }\n        }\n        catch (error) {\n            this._handleError(error);\n        }\n    }\n    _handleError(error) {\n        if (!common.isFatalError(this._settings, error)) {\n            return;\n        }\n        throw error;\n    }\n    _handleEntry(entry, base) {\n        const fullpath = entry.path;\n        if (base !== undefined) {\n            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n        }\n        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n            this._pushToStorage(entry);\n        }\n        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);\n        }\n    }\n    _pushToStorage(entry) {\n        this._storage.push(entry);\n    }\n}\nexports.default = SyncReader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst fsScandir = require(\"@nodelib/fs.scandir\");\nclass Settings {\n    constructor(_options = {}) {\n        this._options = _options;\n        this.basePath = this._getValue(this._options.basePath, undefined);\n        this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);\n        this.deepFilter = this._getValue(this._options.deepFilter, null);\n        this.entryFilter = this._getValue(this._options.entryFilter, null);\n        this.errorFilter = this._getValue(this._options.errorFilter, null);\n        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);\n        this.fsScandirSettings = new fsScandir.Settings({\n            followSymbolicLinks: this._options.followSymbolicLinks,\n            fs: this._options.fs,\n            pathSegmentSeparator: this._options.pathSegmentSeparator,\n            stats: this._options.stats,\n            throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink\n        });\n    }\n    _getValue(option, value) {\n        return option !== null && option !== void 0 ? option : value;\n    }\n}\nexports.default = Settings;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ts = require('./typescript');\nvar minimatch = require('minimatch');\nvar fastGlob = require('fast-glob');\nvar fs$1 = require('fs');\nvar mkdirp = require('mkdirp');\nvar os = require('os');\nvar path$2 = require('path');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar ts__namespace = /*#__PURE__*/_interopNamespace(ts);\nvar minimatch__default = /*#__PURE__*/_interopDefaultLegacy(minimatch);\nvar fastGlob__default = /*#__PURE__*/_interopDefaultLegacy(fastGlob);\nvar fs__namespace = /*#__PURE__*/_interopNamespace(fs$1);\nvar mkdirp__default = /*#__PURE__*/_interopDefaultLegacy(mkdirp);\nvar os__namespace = /*#__PURE__*/_interopNamespace(os);\nvar path__namespace = /*#__PURE__*/_interopNamespace(path$2);\n\nclass KeyValueCache {\n    constructor() {\n        this.cacheItems = new Map();\n    }\n    getSize() {\n        return this.cacheItems.size;\n    }\n    getValues() {\n        return this.cacheItems.values();\n    }\n    getValuesAsArray() {\n        return Array.from(this.getValues());\n    }\n    getKeys() {\n        return this.cacheItems.keys();\n    }\n    getEntries() {\n        return this.cacheItems.entries();\n    }\n    getOrCreate(key, createFunc) {\n        let item = this.get(key);\n        if (item == null) {\n            item = createFunc();\n            this.set(key, item);\n        }\n        return item;\n    }\n    has(key) {\n        return this.cacheItems.has(key);\n    }\n    get(key) {\n        return this.cacheItems.get(key);\n    }\n    set(key, value) {\n        this.cacheItems.set(key, value);\n    }\n    replaceKey(key, newKey) {\n        if (!this.cacheItems.has(key))\n            throw new Error(\"Key not found.\");\n        const value = this.cacheItems.get(key);\n        this.cacheItems.delete(key);\n        this.cacheItems.set(newKey, value);\n    }\n    removeByKey(key) {\n        this.cacheItems.delete(key);\n    }\n    clear() {\n        this.cacheItems.clear();\n    }\n}\n\nclass ComparerToStoredComparer {\n    constructor(comparer, storedValue) {\n        this.comparer = comparer;\n        this.storedValue = storedValue;\n    }\n    compareTo(value) {\n        return this.comparer.compareTo(this.storedValue, value);\n    }\n}\n\nclass LocaleStringComparer {\n    compareTo(a, b) {\n        const comparisonResult = a.localeCompare(b, \"en-us-u-kf-upper\");\n        if (comparisonResult < 0)\n            return -1;\n        else if (comparisonResult === 0)\n            return 0;\n        return 1;\n    }\n}\nLocaleStringComparer.instance = new LocaleStringComparer();\n\nclass PropertyComparer {\n    constructor(getProperty, comparer) {\n        this.getProperty = getProperty;\n        this.comparer = comparer;\n    }\n    compareTo(a, b) {\n        return this.comparer.compareTo(this.getProperty(a), this.getProperty(b));\n    }\n}\n\nclass PropertyStoredComparer {\n    constructor(getProperty, comparer) {\n        this.getProperty = getProperty;\n        this.comparer = comparer;\n    }\n    compareTo(value) {\n        return this.comparer.compareTo(this.getProperty(value));\n    }\n}\n\nclass ArrayUtils {\n    constructor() {\n    }\n    static isReadonlyArray(a) {\n        return a instanceof Array;\n    }\n    static isNullOrEmpty(a) {\n        return !(a instanceof Array) || a.length === 0;\n    }\n    static getUniqueItems(a) {\n        return a.filter((item, index) => a.indexOf(item) === index);\n    }\n    static removeFirst(a, item) {\n        const index = a.indexOf(item);\n        if (index === -1)\n            return false;\n        a.splice(index, 1);\n        return true;\n    }\n    static removeAll(a, isMatch) {\n        const removedItems = [];\n        for (let i = a.length - 1; i >= 0; i--) {\n            if (isMatch(a[i])) {\n                removedItems.push(a[i]);\n                a.splice(i, 1);\n            }\n        }\n        return removedItems;\n    }\n    static flatten(items) {\n        return items.reduce((a, b) => a.concat(b), []);\n    }\n    static from(items) {\n        const a = [];\n        for (const item of items)\n            a.push(item);\n        return a;\n    }\n    static *toIterator(items) {\n        for (const item of items)\n            yield item;\n    }\n    static sortByProperty(items, getProp) {\n        items.sort((a, b) => getProp(a) <= getProp(b) ? -1 : 1);\n        return items;\n    }\n    static groupBy(items, getGroup) {\n        const result = [];\n        const groups = {};\n        for (const item of items) {\n            const group = getGroup(item).toString();\n            if (groups[group] == null) {\n                groups[group] = [];\n                result.push(groups[group]);\n            }\n            groups[group].push(item);\n        }\n        return result;\n    }\n    static binaryInsertWithOverwrite(items, newItem, comparer) {\n        let top = items.length - 1;\n        let bottom = 0;\n        while (bottom <= top) {\n            const mid = Math.floor((top + bottom) / 2);\n            if (comparer.compareTo(newItem, items[mid]) < 0)\n                top = mid - 1;\n            else\n                bottom = mid + 1;\n        }\n        if (items[top] != null && comparer.compareTo(newItem, items[top]) === 0)\n            items[top] = newItem;\n        else\n            items.splice(top + 1, 0, newItem);\n    }\n    static binarySearch(items, storedComparer) {\n        let top = items.length - 1;\n        let bottom = 0;\n        while (bottom <= top) {\n            const mid = Math.floor((top + bottom) / 2);\n            const comparisonResult = storedComparer.compareTo(items[mid]);\n            if (comparisonResult === 0)\n                return mid;\n            else if (comparisonResult < 0)\n                top = mid - 1;\n            else\n                bottom = mid + 1;\n        }\n        return -1;\n    }\n    static containsSubArray(items, subArray) {\n        let findIndex = 0;\n        for (const item of items) {\n            if (subArray[findIndex] === item) {\n                findIndex++;\n                if (findIndex === subArray.length)\n                    return true;\n            }\n            else {\n                findIndex = 0;\n            }\n        }\n        return false;\n    }\n}\n\nfunction deepClone(objToClone) {\n    return clone(objToClone);\n    function clone(obj) {\n        const newObj = Object.create(obj.constructor.prototype);\n        for (const propName of Object.keys(obj))\n            newObj[propName] = cloneItem(obj[propName]);\n        return newObj;\n    }\n    function cloneArray(array) {\n        return array.map(cloneItem);\n    }\n    function cloneItem(item) {\n        if (item instanceof Array)\n            return cloneArray(item);\n        else if (typeof item === \"object\")\n            return item === null ? item : clone(item);\n        return item;\n    }\n}\n\nclass EventContainer {\n    constructor() {\n        this.subscriptions = [];\n    }\n    subscribe(subscription) {\n        const index = this.getIndex(subscription);\n        if (index === -1)\n            this.subscriptions.push(subscription);\n    }\n    unsubscribe(subscription) {\n        const index = this.getIndex(subscription);\n        if (index >= 0)\n            this.subscriptions.splice(index, 1);\n    }\n    fire(arg) {\n        for (const subscription of this.subscriptions)\n            subscription(arg);\n    }\n    getIndex(subscription) {\n        return this.subscriptions.indexOf(subscription);\n    }\n}\n\nclass IterableUtils {\n    static find(items, condition) {\n        for (const item of items) {\n            if (condition(item))\n                return item;\n        }\n        return undefined;\n    }\n}\n\nfunction nameof(key1, key2) {\n    return key2 !== null && key2 !== void 0 ? key2 : key1;\n}\n\nclass ObjectUtils {\n    constructor() {\n    }\n    static clone(obj) {\n        if (obj == null)\n            return undefined;\n        if (obj instanceof Array)\n            return cloneArray(obj);\n        return ObjectUtils.assign({}, obj);\n        function cloneArray(a) {\n            return a.map(item => ObjectUtils.clone(item));\n        }\n    }\n    static assign(a, b, c) {\n        if (Object.assign != null) {\n            if (c == null)\n                return Object.assign(a, b);\n            else\n                return Object.assign(a, b, c);\n        }\n        if (c == null)\n            return this.es5Assign(a, b);\n        else\n            return this.es5Assign(a, b, c);\n    }\n    static es5Assign(a, b, c) {\n        const to = Object(a);\n        for (let index = 1; index < arguments.length; index++) {\n            const nextSource = arguments[index];\n            if (nextSource == null)\n                continue;\n            for (const nextKey in nextSource) {\n                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                    to[nextKey] = nextSource[nextKey];\n            }\n        }\n        return to;\n    }\n}\n\nfunction matchFiles(path, extensions, excludes, includes, useCaseSensitiveFileNames, currentDirectory, depth, getEntries, realpath, directoryExists) {\n    return ts__namespace.matchFiles.apply(this, arguments);\n}\nfunction getFileMatcherPatterns(path, excludes, includes, useCaseSensitiveFileNames, currentDirectory) {\n    return ts__namespace.getFileMatcherPatterns.apply(this, arguments);\n}\nfunction getEmitModuleResolutionKind(compilerOptions) {\n    return ts__namespace.getEmitModuleResolutionKind.apply(this, arguments);\n}\n\nfunction getSyntaxKindName(kind) {\n    return getKindCache()[kind];\n}\nlet kindCache = undefined;\nfunction getKindCache() {\n    if (kindCache != null)\n        return kindCache;\n    kindCache = {};\n    for (const name of Object.keys(ts__namespace.SyntaxKind).filter(k => isNaN(parseInt(k, 10)))) {\n        const value = ts__namespace.SyntaxKind[name];\n        if (kindCache[value] == null)\n            kindCache[value] = name;\n    }\n    return kindCache;\n}\n\nexports.errors = void 0;\n(function (errors) {\n    class BaseError extends Error {\n        constructor(message) {\n            super(message);\n            this.message = message;\n            this.message = message;\n        }\n    }\n    errors.BaseError = BaseError;\n    class ArgumentError extends BaseError {\n        constructor(argName, message) {\n            super(`Argument Error (${argName}): ${message}`);\n        }\n    }\n    errors.ArgumentError = ArgumentError;\n    class ArgumentNullOrWhitespaceError extends ArgumentError {\n        constructor(argName) {\n            super(argName, \"Cannot be null or whitespace.\");\n        }\n    }\n    errors.ArgumentNullOrWhitespaceError = ArgumentNullOrWhitespaceError;\n    class ArgumentOutOfRangeError extends ArgumentError {\n        constructor(argName, value, range) {\n            super(argName, `Range is ${range[0]} to ${range[1]}, but ${value} was provided.`);\n        }\n    }\n    errors.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\n    class ArgumentTypeError extends ArgumentError {\n        constructor(argName, expectedType, actualType) {\n            super(argName, `Expected type '${expectedType}', but was '${actualType}'.`);\n        }\n    }\n    errors.ArgumentTypeError = ArgumentTypeError;\n    class PathNotFoundError extends BaseError {\n        constructor(path, prefix = \"Path\") {\n            super(`${prefix} not found: ${path}`);\n            this.path = path;\n            this.code = \"ENOENT\";\n        }\n    }\n    errors.PathNotFoundError = PathNotFoundError;\n    class DirectoryNotFoundError extends PathNotFoundError {\n        constructor(dirPath) {\n            super(dirPath, \"Directory\");\n        }\n    }\n    errors.DirectoryNotFoundError = DirectoryNotFoundError;\n    class FileNotFoundError extends PathNotFoundError {\n        constructor(filePath) {\n            super(filePath, \"File\");\n        }\n    }\n    errors.FileNotFoundError = FileNotFoundError;\n    class InvalidOperationError extends BaseError {\n        constructor(message) {\n            super(message);\n        }\n    }\n    errors.InvalidOperationError = InvalidOperationError;\n    class NotImplementedError extends BaseError {\n        constructor(message = \"Not implemented.\") {\n            super(message);\n        }\n    }\n    errors.NotImplementedError = NotImplementedError;\n    class NotSupportedError extends BaseError {\n        constructor(message) {\n            super(message);\n        }\n    }\n    errors.NotSupportedError = NotSupportedError;\n    function throwIfNotType(value, expectedType, argName) {\n        if (typeof value !== expectedType)\n            throw new ArgumentTypeError(argName, expectedType, typeof value);\n    }\n    errors.throwIfNotType = throwIfNotType;\n    function throwIfNotString(value, argName) {\n        if (typeof value !== \"string\")\n            throw new ArgumentTypeError(argName, \"string\", typeof value);\n    }\n    errors.throwIfNotString = throwIfNotString;\n    function throwIfWhitespaceOrNotString(value, argName) {\n        throwIfNotString(value, argName);\n        if (value.trim().length === 0)\n            throw new ArgumentNullOrWhitespaceError(argName);\n    }\n    errors.throwIfWhitespaceOrNotString = throwIfWhitespaceOrNotString;\n    function throwIfOutOfRange(value, range, argName) {\n        if (value < range[0] || value > range[1])\n            throw new ArgumentOutOfRangeError(argName, value, range);\n    }\n    errors.throwIfOutOfRange = throwIfOutOfRange;\n    function throwIfRangeOutOfRange(actualRange, range, argName) {\n        if (actualRange[0] > actualRange[1])\n            throw new ArgumentError(argName, `The start of a range must not be greater than the end: [${actualRange[0]}, ${actualRange[1]}]`);\n        throwIfOutOfRange(actualRange[0], range, argName);\n        throwIfOutOfRange(actualRange[1], range, argName);\n    }\n    errors.throwIfRangeOutOfRange = throwIfRangeOutOfRange;\n    function throwNotImplementedForSyntaxKindError(kind) {\n        throw new NotImplementedError(`Not implemented feature for syntax kind '${getSyntaxKindName(kind)}'.`);\n    }\n    errors.throwNotImplementedForSyntaxKindError = throwNotImplementedForSyntaxKindError;\n    function throwIfNegative(value, argName) {\n        if (value < 0)\n            throw new ArgumentError(argName, \"Expected a non-negative value.\");\n    }\n    errors.throwIfNegative = throwIfNegative;\n    function throwIfNullOrUndefined(value, errorMessage) {\n        if (value == null)\n            throw new InvalidOperationError(typeof errorMessage === \"string\" ? errorMessage : errorMessage());\n        return value;\n    }\n    errors.throwIfNullOrUndefined = throwIfNullOrUndefined;\n    function throwNotImplementedForNeverValueError(value) {\n        const node = value;\n        if (node != null && typeof node.kind === \"number\")\n            return throwNotImplementedForSyntaxKindError(node.kind);\n        throw new NotImplementedError(`Not implemented value: ${JSON.stringify(value)}`);\n    }\n    errors.throwNotImplementedForNeverValueError = throwNotImplementedForNeverValueError;\n    function throwIfNotEqual(actual, expected, description) {\n        if (actual !== expected)\n            throw new InvalidOperationError(`Expected ${actual} to equal ${expected}. ${description}`);\n    }\n    errors.throwIfNotEqual = throwIfNotEqual;\n    function throwIfTrue(value, errorMessage) {\n        if (value === true)\n            throw new InvalidOperationError(errorMessage);\n    }\n    errors.throwIfTrue = throwIfTrue;\n})(exports.errors || (exports.errors = {}));\n\nconst CharCodes = {\n    ASTERISK: \"*\".charCodeAt(0),\n    NEWLINE: \"\\n\".charCodeAt(0),\n    CARRIAGE_RETURN: \"\\r\".charCodeAt(0),\n    SPACE: \" \".charCodeAt(0),\n    TAB: \"\\t\".charCodeAt(0),\n    CLOSE_BRACE: \"}\".charCodeAt(0),\n};\n\nconst regExWhitespaceSet = new Set([\" \", \"\\f\", \"\\n\", \"\\r\", \"\\t\", \"\\v\", \"\\u00A0\", \"\\u2028\", \"\\u2029\"].map(c => c.charCodeAt(0)));\nclass StringUtils {\n    constructor() {\n    }\n    static isWhitespaceCharCode(charCode) {\n        return regExWhitespaceSet.has(charCode);\n    }\n    static isSpaces(text) {\n        if (text == null || text.length === 0)\n            return false;\n        for (let i = 0; i < text.length; i++) {\n            if (text.charCodeAt(i) !== CharCodes.SPACE)\n                return false;\n        }\n        return true;\n    }\n    static hasBom(text) {\n        return text.charCodeAt(0) === 0xFEFF;\n    }\n    static stripBom(text) {\n        if (StringUtils.hasBom(text))\n            return text.slice(1);\n        return text;\n    }\n    static stripQuotes(text) {\n        if (StringUtils.isQuoted(text))\n            return text.substring(1, text.length - 1);\n        return text;\n    }\n    static isQuoted(text) {\n        return text.startsWith(\"'\") && text.endsWith(\"'\") || text.startsWith(\"\\\"\") && text.endsWith(\"\\\"\");\n    }\n    static isNullOrWhitespace(str) {\n        return typeof str !== \"string\" || StringUtils.isWhitespace(str);\n    }\n    static isNullOrEmpty(str) {\n        return typeof str !== \"string\" || str.length === 0;\n    }\n    static isWhitespace(text) {\n        if (text == null)\n            return true;\n        for (let i = 0; i < text.length; i++) {\n            if (!StringUtils.isWhitespaceCharCode(text.charCodeAt(i)))\n                return false;\n        }\n        return true;\n    }\n    static startsWithNewLine(str) {\n        if (str == null)\n            return false;\n        return str.charCodeAt(0) === CharCodes.NEWLINE || str.charCodeAt(0) === CharCodes.CARRIAGE_RETURN && str.charCodeAt(1) === CharCodes.NEWLINE;\n    }\n    static endsWithNewLine(str) {\n        if (str == null)\n            return false;\n        return str.charCodeAt(str.length - 1) === CharCodes.NEWLINE;\n    }\n    static insertAtLastNonWhitespace(str, insertText) {\n        let i = str.length;\n        while (i > 0 && StringUtils.isWhitespaceCharCode(str.charCodeAt(i - 1)))\n            i--;\n        return str.substring(0, i) + insertText + str.substring(i);\n    }\n    static getLineNumberAtPos(str, pos) {\n        exports.errors.throwIfOutOfRange(pos, [0, str.length], \"pos\");\n        let count = 0;\n        for (let i = 0; i < pos; i++) {\n            if (str.charCodeAt(i) === CharCodes.NEWLINE)\n                count++;\n        }\n        return count + 1;\n    }\n    static getLengthFromLineStartAtPos(str, pos) {\n        exports.errors.throwIfOutOfRange(pos, [0, str.length], \"pos\");\n        return pos - StringUtils.getLineStartFromPos(str, pos);\n    }\n    static getLineStartFromPos(str, pos) {\n        exports.errors.throwIfOutOfRange(pos, [0, str.length], \"pos\");\n        while (pos > 0) {\n            const previousCharCode = str.charCodeAt(pos - 1);\n            if (previousCharCode === CharCodes.NEWLINE || previousCharCode === CharCodes.CARRIAGE_RETURN)\n                break;\n            pos--;\n        }\n        return pos;\n    }\n    static getLineEndFromPos(str, pos) {\n        exports.errors.throwIfOutOfRange(pos, [0, str.length], \"pos\");\n        while (pos < str.length) {\n            const currentChar = str.charCodeAt(pos);\n            if (currentChar === CharCodes.NEWLINE || currentChar === CharCodes.CARRIAGE_RETURN)\n                break;\n            pos++;\n        }\n        return pos;\n    }\n    static escapeForWithinString(str, quoteKind) {\n        return StringUtils.escapeChar(str, quoteKind).replace(/(\\r?\\n)/g, \"\\\\$1\");\n    }\n    static escapeChar(str, char) {\n        if (char.length !== 1)\n            throw new exports.errors.InvalidOperationError(`Specified char must be one character long.`);\n        let result = \"\";\n        for (const currentChar of str) {\n            if (currentChar === char)\n                result += \"\\\\\";\n            result += currentChar;\n        }\n        return result;\n    }\n    static removeIndentation(str, opts) {\n        const { isInStringAtPos, indentSizeInSpaces } = opts;\n        const startPositions = [];\n        const endPositions = [];\n        let minIndentWidth;\n        analyze();\n        return buildString();\n        function analyze() {\n            let isAtStartOfLine = str.charCodeAt(0) === CharCodes.SPACE || str.charCodeAt(0) === CharCodes.TAB;\n            for (let i = 0; i < str.length; i++) {\n                if (!isAtStartOfLine) {\n                    if (str.charCodeAt(i) === CharCodes.NEWLINE && !isInStringAtPos(i + 1))\n                        isAtStartOfLine = true;\n                    continue;\n                }\n                startPositions.push(i);\n                let spacesCount = 0;\n                let tabsCount = 0;\n                while (true) {\n                    if (str.charCodeAt(i) === CharCodes.SPACE)\n                        spacesCount++;\n                    else if (str.charCodeAt(i) === CharCodes.TAB)\n                        tabsCount++;\n                    else\n                        break;\n                    i++;\n                }\n                const indentWidth = Math.ceil(spacesCount / indentSizeInSpaces) * indentSizeInSpaces + tabsCount * indentSizeInSpaces;\n                if (minIndentWidth == null || indentWidth < minIndentWidth)\n                    minIndentWidth = indentWidth;\n                endPositions.push(i);\n                isAtStartOfLine = false;\n            }\n        }\n        function buildString() {\n            if (startPositions.length === 0)\n                return str;\n            if (minIndentWidth == null || minIndentWidth === 0)\n                return str;\n            const deindentWidth = minIndentWidth;\n            let result = \"\";\n            result += str.substring(0, startPositions[0]);\n            let lastEndPos = startPositions[0];\n            for (let i = 0; i < startPositions.length; i++) {\n                const startPosition = startPositions[i];\n                const endPosition = endPositions[i];\n                let indentCount = 0;\n                let pos;\n                for (pos = startPosition; pos < endPosition; pos++) {\n                    if (indentCount >= deindentWidth)\n                        break;\n                    if (str.charCodeAt(pos) === CharCodes.SPACE)\n                        indentCount++;\n                    else if (str.charCodeAt(pos) === CharCodes.TAB)\n                        indentCount += indentSizeInSpaces;\n                }\n                lastEndPos = startPositions[i + 1] == null ? str.length : startPositions[i + 1];\n                result += str.substring(pos, lastEndPos);\n            }\n            result += str.substring(lastEndPos);\n            return result;\n        }\n    }\n    static indent(str, times, options) {\n        if (times === 0)\n            return str;\n        const { indentText, indentSizeInSpaces, isInStringAtPos } = options;\n        const fullIndentationText = times > 0 ? indentText.repeat(times) : undefined;\n        const totalIndentSpaces = Math.abs(times * indentSizeInSpaces);\n        let result = \"\";\n        let lineStart = 0;\n        let lineEnd = 0;\n        for (let i = 0; i < str.length; i++) {\n            lineStart = i;\n            while (i < str.length && str.charCodeAt(i) !== CharCodes.NEWLINE)\n                i++;\n            lineEnd = i === str.length ? i : i + 1;\n            appendLine();\n        }\n        return result;\n        function appendLine() {\n            if (isInStringAtPos(lineStart))\n                result += str.substring(lineStart, lineEnd);\n            else if (times > 0)\n                result += fullIndentationText + str.substring(lineStart, lineEnd);\n            else {\n                let start = lineStart;\n                let indentSpaces = 0;\n                for (start = lineStart; start < str.length; start++) {\n                    if (indentSpaces >= totalIndentSpaces)\n                        break;\n                    if (str.charCodeAt(start) === CharCodes.SPACE)\n                        indentSpaces++;\n                    else if (str.charCodeAt(start) === CharCodes.TAB)\n                        indentSpaces += indentSizeInSpaces;\n                    else\n                        break;\n                }\n                result += str.substring(start, lineEnd);\n            }\n        }\n    }\n}\n\nclass SortedKeyValueArray {\n    constructor(getKey, comparer) {\n        this.getKey = getKey;\n        this.comparer = comparer;\n        this.array = [];\n    }\n    set(value) {\n        ArrayUtils.binaryInsertWithOverwrite(this.array, value, new PropertyComparer(this.getKey, this.comparer));\n    }\n    removeByValue(value) {\n        this.removeByKey(this.getKey(value));\n    }\n    removeByKey(key) {\n        const storedComparer = new ComparerToStoredComparer(this.comparer, key);\n        const index = ArrayUtils.binarySearch(this.array, new PropertyStoredComparer(this.getKey, storedComparer));\n        if (index >= 0)\n            this.array.splice(index, 1);\n    }\n    getArrayCopy() {\n        return [...this.array];\n    }\n    hasItems() {\n        return this.array.length > 0;\n    }\n    *entries() {\n        yield* this.array;\n    }\n}\n\nclass WeakCache {\n    constructor() {\n        this.cacheItems = new WeakMap();\n    }\n    getOrCreate(key, createFunc) {\n        let item = this.get(key);\n        if (item == null) {\n            item = createFunc();\n            this.set(key, item);\n        }\n        return item;\n    }\n    has(key) {\n        return this.cacheItems.has(key);\n    }\n    get(key) {\n        return this.cacheItems.get(key);\n    }\n    set(key, value) {\n        this.cacheItems.set(key, value);\n    }\n    removeByKey(key) {\n        this.cacheItems.delete(key);\n    }\n}\n\nfunction createCompilerSourceFile(filePath, scriptSnapshot, scriptTarget, version, setParentNodes, scriptKind) {\n    return ts__namespace.createLanguageServiceSourceFile(filePath, scriptSnapshot, scriptTarget !== null && scriptTarget !== void 0 ? scriptTarget : ts.ScriptTarget.Latest, version, setParentNodes, scriptKind);\n}\n\nfunction createDocumentCache(files) {\n    const cache = new InternalDocumentCache();\n    cache._addFiles(files);\n    return cache;\n}\nclass FileSystemDocumentCache {\n    constructor(fileSystem, documentCache) {\n        this.documentCache = documentCache;\n        this.absoluteToOriginalPath = new Map();\n        for (const filePath of documentCache._getFilePaths())\n            this.absoluteToOriginalPath.set(fileSystem.getStandardizedAbsolutePath(filePath), filePath);\n    }\n    getDocumentIfMatch(filePath, scriptSnapshot, scriptTarget, scriptKind) {\n        const originalFilePath = this.absoluteToOriginalPath.get(filePath);\n        if (originalFilePath == null)\n            return;\n        return this.documentCache._getDocumentIfMatch(originalFilePath, filePath, scriptSnapshot, scriptTarget, scriptKind);\n    }\n}\nclass InternalDocumentCache {\n    constructor() {\n        this._fileTexts = new Map();\n        this._documents = new Map();\n    }\n    _addFiles(files) {\n        for (const file of files)\n            this._fileTexts.set(file.fileName, file.text);\n    }\n    _getFilePaths() {\n        return this._fileTexts.keys();\n    }\n    _getCacheForFileSystem(fileSystem) {\n        return new FileSystemDocumentCache(fileSystem, this);\n    }\n    _getDocumentIfMatch(filePath, absoluteFilePath, scriptSnapshot, scriptTarget, scriptKind) {\n        const fileText = this._fileTexts.get(filePath);\n        if (fileText == null)\n            return undefined;\n        if (fileText !== scriptSnapshot.getText(0, scriptSnapshot.getLength()))\n            return undefined;\n        return this._getDocument(filePath, absoluteFilePath, scriptSnapshot, scriptTarget, scriptKind);\n    }\n    _getDocument(filePath, absoluteFilePath, scriptSnapshot, scriptTarget, scriptKind) {\n        const documentKey = this._getKey(filePath, scriptTarget, scriptKind);\n        let document = this._documents.get(documentKey);\n        if (document == null) {\n            document = createCompilerSourceFile(absoluteFilePath, scriptSnapshot, scriptTarget, \"-1\", false, scriptKind);\n            this._documents.set(documentKey, document);\n        }\n        document = deepClone(document);\n        document.fileName = absoluteFilePath;\n        return document;\n    }\n    _getKey(filePath, scriptTarget, scriptKind) {\n        var _a, _b;\n        return (filePath + ((_a = scriptTarget === null || scriptTarget === void 0 ? void 0 : scriptTarget.toString()) !== null && _a !== void 0 ? _a : \"-1\") + ((_b = scriptKind === null || scriptKind === void 0 ? void 0 : scriptKind.toString()) !== null && _b !== void 0 ? _b : \"-1\"));\n    }\n}\n\nconst libFiles = [{\n        fileName: \"lib.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es5\" />\\n/// <reference lib=\"dom\" />\\n/// <reference lib=\"webworker.importscripts\" />\\n/// <reference lib=\"scripthost\" />\\n`\n    }, {\n        fileName: \"lib.dom.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface AddEventListenerOptions extends EventListenerOptions{once?:boolean;passive?:boolean;signal?:AbortSignal;}interface AesCbcParams extends Algorithm{iv:BufferSource;}interface AesCtrParams extends Algorithm{counter:BufferSource;length:number;}interface AesDerivedKeyParams extends Algorithm{length:number;}interface AesGcmParams extends Algorithm{additionalData?:BufferSource;iv:BufferSource;tagLength?:number;}interface AesKeyAlgorithm extends KeyAlgorithm{length:number;}interface AesKeyGenParams extends Algorithm{length:number;}interface Algorithm{name:string;}interface AnalyserOptions extends AudioNodeOptions{fftSize?:number;maxDecibels?:number;minDecibels?:number;smoothingTimeConstant?:number;}interface AnimationEventInit extends EventInit{animationName?:string;elapsedTime?:number;pseudoElement?:string;}interface AnimationPlaybackEventInit extends EventInit{currentTime?:CSSNumberish|null;timelineTime?:CSSNumberish|null;}interface AssignedNodesOptions{flatten?:boolean;}interface AudioBufferOptions{length:number;numberOfChannels?:number;sampleRate:number;}interface AudioBufferSourceOptions{buffer?:AudioBuffer|null;detune?:number;loop?:boolean;loopEnd?:number;loopStart?:number;playbackRate?:number;}interface AudioConfiguration{bitrate?:number;channels?:string;contentType:string;samplerate?:number;spatialRendering?:boolean;}interface AudioContextOptions{latencyHint?:AudioContextLatencyCategory|number;sampleRate?:number;}interface AudioNodeOptions{channelCount?:number;channelCountMode?:ChannelCountMode;channelInterpretation?:ChannelInterpretation;}interface AudioProcessingEventInit extends EventInit{inputBuffer:AudioBuffer;outputBuffer:AudioBuffer;playbackTime:number;}interface AudioTimestamp{contextTime?:number;performanceTime?:DOMHighResTimeStamp;}interface AudioWorkletNodeOptions extends AudioNodeOptions{numberOfInputs?:number;numberOfOutputs?:number;outputChannelCount?:number[];parameterData?:Record<string,number>;processorOptions?:any;}interface AuthenticationExtensionsClientInputs{appid?:string;appidExclude?:string;credProps?:boolean;uvm?:boolean;}interface AuthenticationExtensionsClientOutputs{appid?:boolean;credProps?:CredentialPropertiesOutput;uvm?:UvmEntries;}interface AuthenticatorSelectionCriteria{authenticatorAttachment?:AuthenticatorAttachment;requireResidentKey?:boolean;residentKey?:ResidentKeyRequirement;userVerification?:UserVerificationRequirement;}interface BiquadFilterOptions extends AudioNodeOptions{Q?:number;detune?:number;frequency?:number;gain?:number;type?:BiquadFilterType;}interface BlobEventInit{data:Blob;timecode?:DOMHighResTimeStamp;}interface BlobPropertyBag{endings?:EndingType;type?:string;}interface CSSStyleSheetInit{baseURL?:string;disabled?:boolean;media?:MediaList|string;}interface CacheQueryOptions{ignoreMethod?:boolean;ignoreSearch?:boolean;ignoreVary?:boolean;}interface CanvasRenderingContext2DSettings{alpha?:boolean;colorSpace?:PredefinedColorSpace;desynchronized?:boolean;willReadFrequently?:boolean;}interface ChannelMergerOptions extends AudioNodeOptions{numberOfInputs?:number;}interface ChannelSplitterOptions extends AudioNodeOptions{numberOfOutputs?:number;}interface ClientQueryOptions{includeUncontrolled?:boolean;type?:ClientTypes;}interface ClipboardEventInit extends EventInit{clipboardData?:DataTransfer|null;}interface ClipboardItemOptions{presentationStyle?:PresentationStyle;}interface CloseEventInit extends EventInit{code?:number;reason?:string;wasClean?:boolean;}interface CompositionEventInit extends UIEventInit{data?:string;}interface ComputedEffectTiming extends EffectTiming{activeDuration?:CSSNumberish;currentIteration?:number|null;endTime?:CSSNumberish;localTime?:CSSNumberish|null;progress?:number|null;startTime?:CSSNumberish;}interface ComputedKeyframe{composite:CompositeOperationOrAuto;computedOffset:number;easing:string;offset:number|null;[property:string]:string|number|null|undefined;}interface ConstantSourceOptions{offset?:number;}interface ConstrainBooleanParameters{exact?:boolean;ideal?:boolean;}interface ConstrainDOMStringParameters{exact?:string|string[];ideal?:string|string[];}interface ConstrainDoubleRange extends DoubleRange{exact?:number;ideal?:number;}interface ConstrainULongRange extends ULongRange{exact?:number;ideal?:number;}interface ConvolverOptions extends AudioNodeOptions{buffer?:AudioBuffer|null;disableNormalization?:boolean;}interface CredentialCreationOptions{publicKey?:PublicKeyCredentialCreationOptions;signal?:AbortSignal;}interface CredentialPropertiesOutput{rk?:boolean;}interface CredentialRequestOptions{mediation?:CredentialMediationRequirement;publicKey?:PublicKeyCredentialRequestOptions;signal?:AbortSignal;}interface CryptoKeyPair{privateKey:CryptoKey;publicKey:CryptoKey;}interface CustomEventInit<T=any>extends EventInit{detail?:T;}interface DOMMatrix2DInit{a?:number;b?:number;c?:number;d?:number;e?:number;f?:number;m11?:number;m12?:number;m21?:number;m22?:number;m41?:number;m42?:number;}interface DOMMatrixInit extends DOMMatrix2DInit{is2D?:boolean;m13?:number;m14?:number;m23?:number;m24?:number;m31?:number;m32?:number;m33?:number;m34?:number;m43?:number;m44?:number;}interface DOMPointInit{w?:number;x?:number;y?:number;z?:number;}interface DOMQuadInit{p1?:DOMPointInit;p2?:DOMPointInit;p3?:DOMPointInit;p4?:DOMPointInit;}interface DOMRectInit{height?:number;width?:number;x?:number;y?:number;}interface DelayOptions extends AudioNodeOptions{delayTime?:number;maxDelayTime?:number;}interface DeviceMotionEventAccelerationInit{x?:number|null;y?:number|null;z?:number|null;}interface DeviceMotionEventInit extends EventInit{acceleration?:DeviceMotionEventAccelerationInit;accelerationIncludingGravity?:DeviceMotionEventAccelerationInit;interval?:number;rotationRate?:DeviceMotionEventRotationRateInit;}interface DeviceMotionEventRotationRateInit{alpha?:number|null;beta?:number|null;gamma?:number|null;}interface DeviceOrientationEventInit extends EventInit{absolute?:boolean;alpha?:number|null;beta?:number|null;gamma?:number|null;}interface DisplayMediaStreamConstraints{audio?:boolean|MediaTrackConstraints;video?:boolean|MediaTrackConstraints;}interface DocumentTimelineOptions{originTime?:DOMHighResTimeStamp;}interface DoubleRange{max?:number;min?:number;}interface DragEventInit extends MouseEventInit{dataTransfer?:DataTransfer|null;}interface DynamicsCompressorOptions extends AudioNodeOptions{attack?:number;knee?:number;ratio?:number;release?:number;threshold?:number;}interface EcKeyAlgorithm extends KeyAlgorithm{namedCurve:NamedCurve;}interface EcKeyGenParams extends Algorithm{namedCurve:NamedCurve;}interface EcKeyImportParams extends Algorithm{namedCurve:NamedCurve;}interface EcdhKeyDeriveParams extends Algorithm{public:CryptoKey;}interface EcdsaParams extends Algorithm{hash:HashAlgorithmIdentifier;}interface EffectTiming{delay?:number;direction?:PlaybackDirection;duration?:number|string;easing?:string;endDelay?:number;fill?:FillMode;iterationStart?:number;iterations?:number;playbackRate?:number;}interface ElementCreationOptions{is?:string;}interface ElementDefinitionOptions{extends?:string;}interface ErrorEventInit extends EventInit{colno?:number;error?:any;filename?:string;lineno?:number;message?:string;}interface EventInit{bubbles?:boolean;cancelable?:boolean;composed?:boolean;}interface EventListenerOptions{capture?:boolean;}interface EventModifierInit extends UIEventInit{altKey?:boolean;ctrlKey?:boolean;metaKey?:boolean;modifierAltGraph?:boolean;modifierCapsLock?:boolean;modifierFn?:boolean;modifierFnLock?:boolean;modifierHyper?:boolean;modifierNumLock?:boolean;modifierScrollLock?:boolean;modifierSuper?:boolean;modifierSymbol?:boolean;modifierSymbolLock?:boolean;shiftKey?:boolean;}interface EventSourceInit{withCredentials?:boolean;}interface FilePropertyBag extends BlobPropertyBag{lastModified?:number;}interface FileSystemFlags{create?:boolean;exclusive?:boolean;}interface FileSystemGetDirectoryOptions{create?:boolean;}interface FileSystemGetFileOptions{create?:boolean;}interface FileSystemRemoveOptions{recursive?:boolean;}interface FocusEventInit extends UIEventInit{relatedTarget?:EventTarget|null;}interface FocusOptions{preventScroll?:boolean;}interface FontFaceDescriptors{display?:string;featureSettings?:string;stretch?:string;style?:string;unicodeRange?:string;variant?:string;weight?:string;}interface FontFaceSetLoadEventInit extends EventInit{fontfaces?:FontFace[];}interface FormDataEventInit extends EventInit{formData:FormData;}interface FullscreenOptions{navigationUI?:FullscreenNavigationUI;}interface GainOptions extends AudioNodeOptions{gain?:number;}interface GamepadEventInit extends EventInit{gamepad:Gamepad;}interface GetAnimationsOptions{subtree?:boolean;}interface GetNotificationOptions{tag?:string;}interface GetRootNodeOptions{composed?:boolean;}interface HashChangeEventInit extends EventInit{newURL?:string;oldURL?:string;}interface HkdfParams extends Algorithm{hash:HashAlgorithmIdentifier;info:BufferSource;salt:BufferSource;}interface HmacImportParams extends Algorithm{hash:HashAlgorithmIdentifier;length?:number;}interface HmacKeyAlgorithm extends KeyAlgorithm{hash:KeyAlgorithm;length:number;}interface HmacKeyGenParams extends Algorithm{hash:HashAlgorithmIdentifier;length?:number;}interface IDBDatabaseInfo{name?:string;version?:number;}interface IDBIndexParameters{multiEntry?:boolean;unique?:boolean;}interface IDBObjectStoreParameters{autoIncrement?:boolean;keyPath?:string|string[]|null;}interface IDBVersionChangeEventInit extends EventInit{newVersion?:number|null;oldVersion?:number;}interface IIRFilterOptions extends AudioNodeOptions{feedback:number[];feedforward:number[];}interface IdleRequestOptions{timeout?:number;}interface ImageBitmapOptions{colorSpaceConversion?:ColorSpaceConversion;imageOrientation?:ImageOrientation;premultiplyAlpha?:PremultiplyAlpha;resizeHeight?:number;resizeQuality?:ResizeQuality;resizeWidth?:number;}interface ImageBitmapRenderingContextSettings{alpha?:boolean;}interface ImageDataSettings{colorSpace?:PredefinedColorSpace;}interface ImportMeta{url:string;}interface InputEventInit extends UIEventInit{data?:string|null;dataTransfer?:DataTransfer|null;inputType?:string;isComposing?:boolean;targetRanges?:StaticRange[];}interface IntersectionObserverEntryInit{boundingClientRect:DOMRectInit;intersectionRatio:number;intersectionRect:DOMRectInit;isIntersecting:boolean;rootBounds:DOMRectInit|null;target:Element;time:DOMHighResTimeStamp;}interface IntersectionObserverInit{root?:Element|Document|null;rootMargin?:string;threshold?:number|number[];}interface JsonWebKey{alg?:string;crv?:string;d?:string;dp?:string;dq?:string;e?:string;ext?:boolean;k?:string;key_ops?:string[];kty?:string;n?:string;oth?:RsaOtherPrimesInfo[];p?:string;q?:string;qi?:string;use?:string;x?:string;y?:string;}interface KeyAlgorithm{name:string;}interface KeyboardEventInit extends EventModifierInit{charCode?:number;code?:string;isComposing?:boolean;key?:string;keyCode?:number;location?:number;repeat?:boolean;}interface Keyframe{composite?:CompositeOperationOrAuto;easing?:string;offset?:number|null;[property:string]:string|number|null|undefined;}interface KeyframeAnimationOptions extends KeyframeEffectOptions{id?:string;}interface KeyframeEffectOptions extends EffectTiming{composite?:CompositeOperation;iterationComposite?:IterationCompositeOperation;pseudoElement?:string|null;}interface LockInfo{clientId?:string;mode?:LockMode;name?:string;}interface LockManagerSnapshot{held?:LockInfo[];pending?:LockInfo[];}interface LockOptions{ifAvailable?:boolean;mode?:LockMode;signal?:AbortSignal;steal?:boolean;}interface MIDIConnectionEventInit extends EventInit{port?:MIDIPort;}interface MIDIMessageEventInit extends EventInit{data?:Uint8Array;}interface MIDIOptions{software?:boolean;sysex?:boolean;}interface MediaCapabilitiesDecodingInfo extends MediaCapabilitiesInfo{configuration?:MediaDecodingConfiguration;}interface MediaCapabilitiesEncodingInfo extends MediaCapabilitiesInfo{configuration?:MediaEncodingConfiguration;}interface MediaCapabilitiesInfo{powerEfficient:boolean;smooth:boolean;supported:boolean;}interface MediaConfiguration{audio?:AudioConfiguration;video?:VideoConfiguration;}interface MediaDecodingConfiguration extends MediaConfiguration{type:MediaDecodingType;}interface MediaElementAudioSourceOptions{mediaElement:HTMLMediaElement;}interface MediaEncodingConfiguration extends MediaConfiguration{type:MediaEncodingType;}interface MediaEncryptedEventInit extends EventInit{initData?:ArrayBuffer|null;initDataType?:string;}interface MediaImage{sizes?:string;src:string;type?:string;}interface MediaKeyMessageEventInit extends EventInit{message:ArrayBuffer;messageType:MediaKeyMessageType;}interface MediaKeySystemConfiguration{audioCapabilities?:MediaKeySystemMediaCapability[];distinctiveIdentifier?:MediaKeysRequirement;initDataTypes?:string[];label?:string;persistentState?:MediaKeysRequirement;sessionTypes?:string[];videoCapabilities?:MediaKeySystemMediaCapability[];}interface MediaKeySystemMediaCapability{contentType?:string;encryptionScheme?:string|null;robustness?:string;}interface MediaMetadataInit{album?:string;artist?:string;artwork?:MediaImage[];title?:string;}interface MediaPositionState{duration?:number;playbackRate?:number;position?:number;}interface MediaQueryListEventInit extends EventInit{matches?:boolean;media?:string;}interface MediaRecorderErrorEventInit extends EventInit{error:DOMException;}interface MediaRecorderOptions{audioBitsPerSecond?:number;bitsPerSecond?:number;mimeType?:string;videoBitsPerSecond?:number;}interface MediaSessionActionDetails{action:MediaSessionAction;fastSeek?:boolean|null;seekOffset?:number|null;seekTime?:number|null;}interface MediaStreamAudioSourceOptions{mediaStream:MediaStream;}interface MediaStreamConstraints{audio?:boolean|MediaTrackConstraints;peerIdentity?:string;preferCurrentTab?:boolean;video?:boolean|MediaTrackConstraints;}interface MediaStreamTrackEventInit extends EventInit{track:MediaStreamTrack;}interface MediaTrackCapabilities{aspectRatio?:DoubleRange;autoGainControl?:boolean[];channelCount?:ULongRange;cursor?:string[];deviceId?:string;displaySurface?:string;echoCancellation?:boolean[];facingMode?:string[];frameRate?:DoubleRange;groupId?:string;height?:ULongRange;latency?:DoubleRange;logicalSurface?:boolean;noiseSuppression?:boolean[];resizeMode?:string[];sampleRate?:ULongRange;sampleSize?:ULongRange;width?:ULongRange;}interface MediaTrackConstraintSet{aspectRatio?:ConstrainDouble;autoGainControl?:ConstrainBoolean;channelCount?:ConstrainULong;deviceId?:ConstrainDOMString;echoCancellation?:ConstrainBoolean;facingMode?:ConstrainDOMString;frameRate?:ConstrainDouble;groupId?:ConstrainDOMString;height?:ConstrainULong;latency?:ConstrainDouble;noiseSuppression?:ConstrainBoolean;sampleRate?:ConstrainULong;sampleSize?:ConstrainULong;suppressLocalAudioPlayback?:ConstrainBoolean;width?:ConstrainULong;}interface MediaTrackConstraints extends MediaTrackConstraintSet{advanced?:MediaTrackConstraintSet[];}interface MediaTrackSettings{aspectRatio?:number;autoGainControl?:boolean;deviceId?:string;echoCancellation?:boolean;facingMode?:string;frameRate?:number;groupId?:string;height?:number;noiseSuppression?:boolean;restrictOwnAudio?:boolean;sampleRate?:number;sampleSize?:number;width?:number;}interface MediaTrackSupportedConstraints{aspectRatio?:boolean;autoGainControl?:boolean;deviceId?:boolean;echoCancellation?:boolean;facingMode?:boolean;frameRate?:boolean;groupId?:boolean;height?:boolean;noiseSuppression?:boolean;sampleRate?:boolean;sampleSize?:boolean;suppressLocalAudioPlayback?:boolean;width?:boolean;}interface MessageEventInit<T=any>extends EventInit{data?:T;lastEventId?:string;origin?:string;ports?:MessagePort[];source?:MessageEventSource|null;}interface MouseEventInit extends EventModifierInit{button?:number;buttons?:number;clientX?:number;clientY?:number;movementX?:number;movementY?:number;relatedTarget?:EventTarget|null;screenX?:number;screenY?:number;}interface MultiCacheQueryOptions extends CacheQueryOptions{cacheName?:string;}interface MutationObserverInit{attributeFilter?:string[];attributeOldValue?:boolean;attributes?:boolean;characterData?:boolean;characterDataOldValue?:boolean;childList?:boolean;subtree?:boolean;}interface NavigationPreloadState{enabled?:boolean;headerValue?:string;}interface NotificationAction{action:string;icon?:string;title:string;}interface NotificationOptions{actions?:NotificationAction[];badge?:string;body?:string;data?:any;dir?:NotificationDirection;icon?:string;image?:string;lang?:string;renotify?:boolean;requireInteraction?:boolean;silent?:boolean;tag?:string;timestamp?:EpochTimeStamp;vibrate?:VibratePattern;}interface OfflineAudioCompletionEventInit extends EventInit{renderedBuffer:AudioBuffer;}interface OfflineAudioContextOptions{length:number;numberOfChannels?:number;sampleRate:number;}interface OptionalEffectTiming{delay?:number;direction?:PlaybackDirection;duration?:number|string;easing?:string;endDelay?:number;fill?:FillMode;iterationStart?:number;iterations?:number;playbackRate?:number;}interface OscillatorOptions extends AudioNodeOptions{detune?:number;frequency?:number;periodicWave?:PeriodicWave;type?:OscillatorType;}interface PageTransitionEventInit extends EventInit{persisted?:boolean;}interface PannerOptions extends AudioNodeOptions{coneInnerAngle?:number;coneOuterAngle?:number;coneOuterGain?:number;distanceModel?:DistanceModelType;maxDistance?:number;orientationX?:number;orientationY?:number;orientationZ?:number;panningModel?:PanningModelType;positionX?:number;positionY?:number;positionZ?:number;refDistance?:number;rolloffFactor?:number;}interface PaymentCurrencyAmount{currency:string;value:string;}interface PaymentDetailsBase{displayItems?:PaymentItem[];modifiers?:PaymentDetailsModifier[];}interface PaymentDetailsInit extends PaymentDetailsBase{id?:string;total:PaymentItem;}interface PaymentDetailsModifier{additionalDisplayItems?:PaymentItem[];data?:any;supportedMethods:string;total?:PaymentItem;}interface PaymentDetailsUpdate extends PaymentDetailsBase{paymentMethodErrors?:any;total?:PaymentItem;}interface PaymentItem{amount:PaymentCurrencyAmount;label:string;pending?:boolean;}interface PaymentMethodChangeEventInit extends PaymentRequestUpdateEventInit{methodDetails?:any;methodName?:string;}interface PaymentMethodData{data?:any;supportedMethods:string;}interface PaymentRequestUpdateEventInit extends EventInit{}interface PaymentValidationErrors{error?:string;paymentMethod?:any;}interface Pbkdf2Params extends Algorithm{hash:HashAlgorithmIdentifier;iterations:number;salt:BufferSource;}interface PerformanceMarkOptions{detail?:any;startTime?:DOMHighResTimeStamp;}interface PerformanceMeasureOptions{detail?:any;duration?:DOMHighResTimeStamp;end?:string|DOMHighResTimeStamp;start?:string|DOMHighResTimeStamp;}interface PerformanceObserverInit{buffered?:boolean;entryTypes?:string[];type?:string;}interface PeriodicWaveConstraints{disableNormalization?:boolean;}interface PeriodicWaveOptions extends PeriodicWaveConstraints{imag?:number[]|Float32Array;real?:number[]|Float32Array;}interface PermissionDescriptor{name:PermissionName;}interface PointerEventInit extends MouseEventInit{coalescedEvents?:PointerEvent[];height?:number;isPrimary?:boolean;pointerId?:number;pointerType?:string;predictedEvents?:PointerEvent[];pressure?:number;tangentialPressure?:number;tiltX?:number;tiltY?:number;twist?:number;width?:number;}interface PopStateEventInit extends EventInit{state?:any;}interface PositionOptions{enableHighAccuracy?:boolean;maximumAge?:number;timeout?:number;}interface ProgressEventInit extends EventInit{lengthComputable?:boolean;loaded?:number;total?:number;}interface PromiseRejectionEventInit extends EventInit{promise:Promise<any>;reason?:any;}interface PropertyIndexedKeyframes{composite?:CompositeOperationOrAuto|CompositeOperationOrAuto[];easing?:string|string[];offset?:number|(number|null)[];[property:string]:string|string[]|number|null|(number|null)[]|undefined;}interface PublicKeyCredentialCreationOptions{attestation?:AttestationConveyancePreference;authenticatorSelection?:AuthenticatorSelectionCriteria;challenge:BufferSource;excludeCredentials?:PublicKeyCredentialDescriptor[];extensions?:AuthenticationExtensionsClientInputs;pubKeyCredParams:PublicKeyCredentialParameters[];rp:PublicKeyCredentialRpEntity;timeout?:number;user:PublicKeyCredentialUserEntity;}interface PublicKeyCredentialDescriptor{id:BufferSource;transports?:AuthenticatorTransport[];type:PublicKeyCredentialType;}interface PublicKeyCredentialEntity{name:string;}interface PublicKeyCredentialParameters{alg:COSEAlgorithmIdentifier;type:PublicKeyCredentialType;}interface PublicKeyCredentialRequestOptions{allowCredentials?:PublicKeyCredentialDescriptor[];challenge:BufferSource;extensions?:AuthenticationExtensionsClientInputs;rpId?:string;timeout?:number;userVerification?:UserVerificationRequirement;}interface PublicKeyCredentialRpEntity extends PublicKeyCredentialEntity{id?:string;}interface PublicKeyCredentialUserEntity extends PublicKeyCredentialEntity{displayName:string;id:BufferSource;}interface PushSubscriptionJSON{endpoint?:string;expirationTime?:EpochTimeStamp|null;keys?:Record<string,string>;}interface PushSubscriptionOptionsInit{applicationServerKey?:BufferSource|string|null;userVisibleOnly?:boolean;}interface QueuingStrategy<T=any>{highWaterMark?:number;size?:QueuingStrategySize<T>;}interface QueuingStrategyInit{highWaterMark:number;}interface RTCAnswerOptions extends RTCOfferAnswerOptions{}interface RTCCertificateExpiration{expires?:number;}interface RTCConfiguration{bundlePolicy?:RTCBundlePolicy;certificates?:RTCCertificate[];iceCandidatePoolSize?:number;iceServers?:RTCIceServer[];iceTransportPolicy?:RTCIceTransportPolicy;rtcpMuxPolicy?:RTCRtcpMuxPolicy;}interface RTCDTMFToneChangeEventInit extends EventInit{tone?:string;}interface RTCDataChannelEventInit extends EventInit{channel:RTCDataChannel;}interface RTCDataChannelInit{id?:number;maxPacketLifeTime?:number;maxRetransmits?:number;negotiated?:boolean;ordered?:boolean;protocol?:string;}interface RTCDtlsFingerprint{algorithm?:string;value?:string;}interface RTCEncodedAudioFrameMetadata{contributingSources?:number[];synchronizationSource?:number;}interface RTCEncodedVideoFrameMetadata{contributingSources?:number[];dependencies?:number[];frameId?:number;height?:number;spatialIndex?:number;synchronizationSource?:number;temporalIndex?:number;width?:number;}interface RTCErrorEventInit extends EventInit{error:RTCError;}interface RTCErrorInit{errorDetail:RTCErrorDetailType;httpRequestStatusCode?:number;receivedAlert?:number;sctpCauseCode?:number;sdpLineNumber?:number;sentAlert?:number;}interface RTCIceCandidateInit{candidate?:string;sdpMLineIndex?:number|null;sdpMid?:string|null;usernameFragment?:string|null;}interface RTCIceCandidatePairStats extends RTCStats{availableIncomingBitrate?:number;availableOutgoingBitrate?:number;bytesReceived?:number;bytesSent?:number;currentRoundTripTime?:number;localCandidateId:string;nominated?:boolean;remoteCandidateId:string;requestsReceived?:number;requestsSent?:number;responsesReceived?:number;responsesSent?:number;state:RTCStatsIceCandidatePairState;totalRoundTripTime?:number;transportId:string;}interface RTCIceServer{credential?:string;credentialType?:RTCIceCredentialType;urls:string|string[];username?:string;}interface RTCInboundRtpStreamStats extends RTCReceivedRtpStreamStats{firCount?:number;framesDecoded?:number;nackCount?:number;pliCount?:number;qpSum?:number;remoteId?:string;}interface RTCLocalSessionDescriptionInit{sdp?:string;type?:RTCSdpType;}interface RTCOfferAnswerOptions{}interface RTCOfferOptions extends RTCOfferAnswerOptions{iceRestart?:boolean;offerToReceiveAudio?:boolean;offerToReceiveVideo?:boolean;}interface RTCOutboundRtpStreamStats extends RTCSentRtpStreamStats{firCount?:number;framesEncoded?:number;nackCount?:number;pliCount?:number;qpSum?:number;remoteId?:string;}interface RTCPeerConnectionIceErrorEventInit extends EventInit{address?:string|null;errorCode:number;errorText?:string;port?:number|null;url?:string;}interface RTCPeerConnectionIceEventInit extends EventInit{candidate?:RTCIceCandidate|null;url?:string|null;}interface RTCReceivedRtpStreamStats extends RTCRtpStreamStats{jitter?:number;packetsDiscarded?:number;packetsLost?:number;packetsReceived?:number;}interface RTCRtcpParameters{cname?:string;reducedSize?:boolean;}interface RTCRtpCapabilities{codecs:RTCRtpCodecCapability[];headerExtensions:RTCRtpHeaderExtensionCapability[];}interface RTCRtpCodecCapability{channels?:number;clockRate:number;mimeType:string;sdpFmtpLine?:string;}interface RTCRtpCodecParameters{channels?:number;clockRate:number;mimeType:string;payloadType:number;sdpFmtpLine?:string;}interface RTCRtpCodingParameters{rid?:string;}interface RTCRtpContributingSource{audioLevel?:number;rtpTimestamp:number;source:number;timestamp:DOMHighResTimeStamp;}interface RTCRtpEncodingParameters extends RTCRtpCodingParameters{active?:boolean;maxBitrate?:number;priority?:RTCPriorityType;scaleResolutionDownBy?:number;}interface RTCRtpHeaderExtensionCapability{uri?:string;}interface RTCRtpHeaderExtensionParameters{encrypted?:boolean;id:number;uri:string;}interface RTCRtpParameters{codecs:RTCRtpCodecParameters[];headerExtensions:RTCRtpHeaderExtensionParameters[];rtcp:RTCRtcpParameters;}interface RTCRtpReceiveParameters extends RTCRtpParameters{}interface RTCRtpSendParameters extends RTCRtpParameters{degradationPreference?:RTCDegradationPreference;encodings:RTCRtpEncodingParameters[];transactionId:string;}interface RTCRtpStreamStats extends RTCStats{codecId?:string;kind:string;ssrc:number;transportId?:string;}interface RTCRtpSynchronizationSource extends RTCRtpContributingSource{}interface RTCRtpTransceiverInit{direction?:RTCRtpTransceiverDirection;sendEncodings?:RTCRtpEncodingParameters[];streams?:MediaStream[];}interface RTCSentRtpStreamStats extends RTCRtpStreamStats{bytesSent?:number;packetsSent?:number;}interface RTCSessionDescriptionInit{sdp?:string;type:RTCSdpType;}interface RTCStats{id:string;timestamp:DOMHighResTimeStamp;type:RTCStatsType;}interface RTCTrackEventInit extends EventInit{receiver:RTCRtpReceiver;streams?:MediaStream[];track:MediaStreamTrack;transceiver:RTCRtpTransceiver;}interface RTCTransportStats extends RTCStats{bytesReceived?:number;bytesSent?:number;dtlsCipher?:string;dtlsState:RTCDtlsTransportState;localCertificateId?:string;remoteCertificateId?:string;rtcpTransportStatsId?:string;selectedCandidatePairId?:string;srtpCipher?:string;tlsVersion?:string;}interface ReadableStreamDefaultReadDoneResult{done:true;value?:undefined;}interface ReadableStreamDefaultReadValueResult<T>{done:false;value:T;}interface ReadableWritablePair<R=any,W=any>{readable:ReadableStream<R>;writable:WritableStream<W>;}interface RegistrationOptions{scope?:string;type?:WorkerType;updateViaCache?:ServiceWorkerUpdateViaCache;}interface RequestInit{body?:BodyInit|null;cache?:RequestCache;credentials?:RequestCredentials;headers?:HeadersInit;integrity?:string;keepalive?:boolean;method?:string;mode?:RequestMode;redirect?:RequestRedirect;referrer?:string;referrerPolicy?:ReferrerPolicy;signal?:AbortSignal|null;window?:null;}interface ResizeObserverOptions{box?:ResizeObserverBoxOptions;}interface ResponseInit{headers?:HeadersInit;status?:number;statusText?:string;}interface RsaHashedImportParams extends Algorithm{hash:HashAlgorithmIdentifier;}interface RsaHashedKeyAlgorithm extends RsaKeyAlgorithm{hash:KeyAlgorithm;}interface RsaHashedKeyGenParams extends RsaKeyGenParams{hash:HashAlgorithmIdentifier;}interface RsaKeyAlgorithm extends KeyAlgorithm{modulusLength:number;publicExponent:BigInteger;}interface RsaKeyGenParams extends Algorithm{modulusLength:number;publicExponent:BigInteger;}interface RsaOaepParams extends Algorithm{label?:BufferSource;}interface RsaOtherPrimesInfo{d?:string;r?:string;t?:string;}interface RsaPssParams extends Algorithm{saltLength:number;}interface SVGBoundingBoxOptions{clipped?:boolean;fill?:boolean;markers?:boolean;stroke?:boolean;}interface ScrollIntoViewOptions extends ScrollOptions{block?:ScrollLogicalPosition;inline?:ScrollLogicalPosition;}interface ScrollOptions{behavior?:ScrollBehavior;}interface ScrollToOptions extends ScrollOptions{left?:number;top?:number;}interface SecurityPolicyViolationEventInit extends EventInit{blockedURI?:string;columnNumber?:number;disposition:SecurityPolicyViolationEventDisposition;documentURI:string;effectiveDirective:string;lineNumber?:number;originalPolicy:string;referrer?:string;sample?:string;sourceFile?:string;statusCode:number;violatedDirective:string;}interface ShadowRootInit{delegatesFocus?:boolean;mode:ShadowRootMode;slotAssignment?:SlotAssignmentMode;}interface ShareData{files?:File[];text?:string;title?:string;url?:string;}interface SpeechSynthesisErrorEventInit extends SpeechSynthesisEventInit{error:SpeechSynthesisErrorCode;}interface SpeechSynthesisEventInit extends EventInit{charIndex?:number;charLength?:number;elapsedTime?:number;name?:string;utterance:SpeechSynthesisUtterance;}interface StaticRangeInit{endContainer:Node;endOffset:number;startContainer:Node;startOffset:number;}interface StereoPannerOptions extends AudioNodeOptions{pan?:number;}interface StorageEstimate{quota?:number;usage?:number;}interface StorageEventInit extends EventInit{key?:string|null;newValue?:string|null;oldValue?:string|null;storageArea?:Storage|null;url?:string;}interface StreamPipeOptions{preventAbort?:boolean;preventCancel?:boolean;preventClose?:boolean;signal?:AbortSignal;}interface StructuredSerializeOptions{transfer?:Transferable[];}interface SubmitEventInit extends EventInit{submitter?:HTMLElement|null;}interface TextDecodeOptions{stream?:boolean;}interface TextDecoderOptions{fatal?:boolean;ignoreBOM?:boolean;}interface TextEncoderEncodeIntoResult{read?:number;written?:number;}interface TouchEventInit extends EventModifierInit{changedTouches?:Touch[];targetTouches?:Touch[];touches?:Touch[];}interface TouchInit{altitudeAngle?:number;azimuthAngle?:number;clientX?:number;clientY?:number;force?:number;identifier:number;pageX?:number;pageY?:number;radiusX?:number;radiusY?:number;rotationAngle?:number;screenX?:number;screenY?:number;target:EventTarget;touchType?:TouchType;}interface TrackEventInit extends EventInit{track?:TextTrack|null;}interface Transformer<I=any,O=any>{flush?:TransformerFlushCallback<O>;readableType?:undefined;start?:TransformerStartCallback<O>;transform?:TransformerTransformCallback<I,O>;writableType?:undefined;}interface TransitionEventInit extends EventInit{elapsedTime?:number;propertyName?:string;pseudoElement?:string;}interface UIEventInit extends EventInit{detail?:number;view?:Window|null;which?:number;}interface ULongRange{max?:number;min?:number;}interface UnderlyingSink<W=any>{abort?:UnderlyingSinkAbortCallback;close?:UnderlyingSinkCloseCallback;start?:UnderlyingSinkStartCallback;type?:undefined;write?:UnderlyingSinkWriteCallback<W>;}interface UnderlyingSource<R=any>{cancel?:UnderlyingSourceCancelCallback;pull?:UnderlyingSourcePullCallback<R>;start?:UnderlyingSourceStartCallback<R>;type?:undefined;}interface VideoColorSpaceInit{fullRange?:boolean;matrix?:VideoMatrixCoefficients;primaries?:VideoColorPrimaries;transfer?:VideoTransferCharacteristics;}interface VideoConfiguration{bitrate:number;colorGamut?:ColorGamut;contentType:string;framerate:number;hdrMetadataType?:HdrMetadataType;height:number;scalabilityMode?:string;transferFunction?:TransferFunction;width:number;}interface VideoFrameMetadata{captureTime?:DOMHighResTimeStamp;expectedDisplayTime:DOMHighResTimeStamp;height:number;mediaTime:number;presentationTime:DOMHighResTimeStamp;presentedFrames:number;processingDuration?:number;receiveTime?:DOMHighResTimeStamp;rtpTimestamp?:number;width:number;}interface WaveShaperOptions extends AudioNodeOptions{curve?:number[]|Float32Array;oversample?:OverSampleType;}interface WebGLContextAttributes{alpha?:boolean;antialias?:boolean;depth?:boolean;desynchronized?:boolean;failIfMajorPerformanceCaveat?:boolean;powerPreference?:WebGLPowerPreference;premultipliedAlpha?:boolean;preserveDrawingBuffer?:boolean;stencil?:boolean;}interface WebGLContextEventInit extends EventInit{statusMessage?:string;}interface WheelEventInit extends MouseEventInit{deltaMode?:number;deltaX?:number;deltaY?:number;deltaZ?:number;}interface WindowPostMessageOptions extends StructuredSerializeOptions{targetOrigin?:string;}interface WorkerOptions{credentials?:RequestCredentials;name?:string;type?:WorkerType;}interface WorkletOptions{credentials?:RequestCredentials;}type NodeFilter=((node:Node)=>number)|{acceptNode(node:Node):number;};declare var NodeFilter:{readonly FILTER_ACCEPT:number;readonly FILTER_REJECT:number;readonly FILTER_SKIP:number;readonly SHOW_ALL:number;readonly SHOW_ATTRIBUTE:number;readonly SHOW_CDATA_SECTION:number;readonly SHOW_COMMENT:number;readonly SHOW_DOCUMENT:number;readonly SHOW_DOCUMENT_FRAGMENT:number;readonly SHOW_DOCUMENT_TYPE:number;readonly SHOW_ELEMENT:number;readonly SHOW_ENTITY:number;readonly SHOW_ENTITY_REFERENCE:number;readonly SHOW_NOTATION:number;readonly SHOW_PROCESSING_INSTRUCTION:number;readonly SHOW_TEXT:number;};type XPathNSResolver=((prefix:string|null)=>string|null)|{lookupNamespaceURI(prefix:string|null):string|null;};interface ANGLE_instanced_arrays{drawArraysInstancedANGLE(mode:GLenum,first:GLint,count:GLsizei,primcount:GLsizei):void;drawElementsInstancedANGLE(mode:GLenum,count:GLsizei,type:GLenum,offset:GLintptr,primcount:GLsizei):void;vertexAttribDivisorANGLE(index:GLuint,divisor:GLuint):void;readonly VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE:GLenum;}interface ARIAMixin{ariaAtomic:string|null;ariaAutoComplete:string|null;ariaBusy:string|null;ariaChecked:string|null;ariaColCount:string|null;ariaColIndex:string|null;ariaColSpan:string|null;ariaCurrent:string|null;ariaDisabled:string|null;ariaExpanded:string|null;ariaHasPopup:string|null;ariaHidden:string|null;ariaKeyShortcuts:string|null;ariaLabel:string|null;ariaLevel:string|null;ariaLive:string|null;ariaModal:string|null;ariaMultiLine:string|null;ariaMultiSelectable:string|null;ariaOrientation:string|null;ariaPlaceholder:string|null;ariaPosInSet:string|null;ariaPressed:string|null;ariaReadOnly:string|null;ariaRequired:string|null;ariaRoleDescription:string|null;ariaRowCount:string|null;ariaRowIndex:string|null;ariaRowSpan:string|null;ariaSelected:string|null;ariaSetSize:string|null;ariaSort:string|null;ariaValueMax:string|null;ariaValueMin:string|null;ariaValueNow:string|null;ariaValueText:string|null;}interface AbortController{readonly signal:AbortSignal;abort(reason?:any):void;}declare var AbortController:{prototype:AbortController;new():AbortController;};interface AbortSignalEventMap{\"abort\":Event;}interface AbortSignal extends EventTarget{readonly aborted:boolean;onabort:((this:AbortSignal,ev:Event)=>any)|null;readonly reason:any;throwIfAborted():void;addEventListener<K extends keyof AbortSignalEventMap>(type:K,listener:(this:AbortSignal,ev:AbortSignalEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof AbortSignalEventMap>(type:K,listener:(this:AbortSignal,ev:AbortSignalEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var AbortSignal:{prototype:AbortSignal;new():AbortSignal;};interface AbstractRange{readonly collapsed:boolean;readonly endContainer:Node;readonly endOffset:number;readonly startContainer:Node;readonly startOffset:number;}declare var AbstractRange:{prototype:AbstractRange;new():AbstractRange;};interface AbstractWorkerEventMap{\"error\":ErrorEvent;}interface AbstractWorker{onerror:((this:AbstractWorker,ev:ErrorEvent)=>any)|null;addEventListener<K extends keyof AbstractWorkerEventMap>(type:K,listener:(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof AbstractWorkerEventMap>(type:K,listener:(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}interface AnalyserNode extends AudioNode{fftSize:number;readonly frequencyBinCount:number;maxDecibels:number;minDecibels:number;smoothingTimeConstant:number;getByteFrequencyData(array:Uint8Array):void;getByteTimeDomainData(array:Uint8Array):void;getFloatFrequencyData(array:Float32Array):void;getFloatTimeDomainData(array:Float32Array):void;}declare var AnalyserNode:{prototype:AnalyserNode;new(context:BaseAudioContext,options?:AnalyserOptions):AnalyserNode;};interface Animatable{animate(keyframes:Keyframe[]|PropertyIndexedKeyframes|null,options?:number|KeyframeAnimationOptions):Animation;getAnimations(options?:GetAnimationsOptions):Animation[];}interface AnimationEventMap{\"cancel\":AnimationPlaybackEvent;\"finish\":AnimationPlaybackEvent;\"remove\":Event;}interface Animation extends EventTarget{currentTime:CSSNumberish|null;effect:AnimationEffect|null;readonly finished:Promise<Animation>;id:string;oncancel:((this:Animation,ev:AnimationPlaybackEvent)=>any)|null;onfinish:((this:Animation,ev:AnimationPlaybackEvent)=>any)|null;onremove:((this:Animation,ev:Event)=>any)|null;readonly pending:boolean;readonly playState:AnimationPlayState;playbackRate:number;readonly ready:Promise<Animation>;readonly replaceState:AnimationReplaceState;startTime:CSSNumberish|null;timeline:AnimationTimeline|null;cancel():void;commitStyles():void;finish():void;pause():void;persist():void;play():void;reverse():void;updatePlaybackRate(playbackRate:number):void;addEventListener<K extends keyof AnimationEventMap>(type:K,listener:(this:Animation,ev:AnimationEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof AnimationEventMap>(type:K,listener:(this:Animation,ev:AnimationEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var Animation:{prototype:Animation;new(effect?:AnimationEffect|null,timeline?:AnimationTimeline|null):Animation;};interface AnimationEffect{getComputedTiming():ComputedEffectTiming;getTiming():EffectTiming;updateTiming(timing?:OptionalEffectTiming):void;}declare var AnimationEffect:{prototype:AnimationEffect;new():AnimationEffect;};interface AnimationEvent extends Event{readonly animationName:string;readonly elapsedTime:number;readonly pseudoElement:string;}declare var AnimationEvent:{prototype:AnimationEvent;new(type:string,animationEventInitDict?:AnimationEventInit):AnimationEvent;};interface AnimationFrameProvider{cancelAnimationFrame(handle:number):void;requestAnimationFrame(callback:FrameRequestCallback):number;}interface AnimationPlaybackEvent extends Event{readonly currentTime:CSSNumberish|null;readonly timelineTime:CSSNumberish|null;}declare var AnimationPlaybackEvent:{prototype:AnimationPlaybackEvent;new(type:string,eventInitDict?:AnimationPlaybackEventInit):AnimationPlaybackEvent;};interface AnimationTimeline{readonly currentTime:number|null;}declare var AnimationTimeline:{prototype:AnimationTimeline;new():AnimationTimeline;};interface Attr extends Node{readonly localName:string;readonly name:string;readonly namespaceURI:string|null;readonly ownerDocument:Document;readonly ownerElement:Element|null;readonly prefix:string|null;readonly specified:boolean;value:string;}declare var Attr:{prototype:Attr;new():Attr;};interface AudioBuffer{readonly duration:number;readonly length:number;readonly numberOfChannels:number;readonly sampleRate:number;copyFromChannel(destination:Float32Array,channelNumber:number,bufferOffset?:number):void;copyToChannel(source:Float32Array,channelNumber:number,bufferOffset?:number):void;getChannelData(channel:number):Float32Array;}declare var AudioBuffer:{prototype:AudioBuffer;new(options:AudioBufferOptions):AudioBuffer;};interface AudioBufferSourceNode extends AudioScheduledSourceNode{buffer:AudioBuffer|null;readonly detune:AudioParam;loop:boolean;loopEnd:number;loopStart:number;readonly playbackRate:AudioParam;start(when?:number,offset?:number,duration?:number):void;addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type:K,listener:(this:AudioBufferSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type:K,listener:(this:AudioBufferSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var AudioBufferSourceNode:{prototype:AudioBufferSourceNode;new(context:BaseAudioContext,options?:AudioBufferSourceOptions):AudioBufferSourceNode;};interface AudioContext extends BaseAudioContext{readonly baseLatency:number;close():Promise<void>;createMediaElementSource(mediaElement:HTMLMediaElement):MediaElementAudioSourceNode;createMediaStreamDestination():MediaStreamAudioDestinationNode;createMediaStreamSource(mediaStream:MediaStream):MediaStreamAudioSourceNode;getOutputTimestamp():AudioTimestamp;resume():Promise<void>;suspend():Promise<void>;addEventListener<K extends keyof BaseAudioContextEventMap>(type:K,listener:(this:AudioContext,ev:BaseAudioContextEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof BaseAudioContextEventMap>(type:K,listener:(this:AudioContext,ev:BaseAudioContextEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var AudioContext:{prototype:AudioContext;new(contextOptions?:AudioContextOptions):AudioContext;};interface AudioDestinationNode extends AudioNode{readonly maxChannelCount:number;}declare var AudioDestinationNode:{prototype:AudioDestinationNode;new():AudioDestinationNode;};interface AudioListener{readonly forwardX:AudioParam;readonly forwardY:AudioParam;readonly forwardZ:AudioParam;readonly positionX:AudioParam;readonly positionY:AudioParam;readonly positionZ:AudioParam;readonly upX:AudioParam;readonly upY:AudioParam;readonly upZ:AudioParam;setOrientation(x:number,y:number,z:number,xUp:number,yUp:number,zUp:number):void;setPosition(x:number,y:number,z:number):void;}declare var AudioListener:{prototype:AudioListener;new():AudioListener;};interface AudioNode extends EventTarget{channelCount:number;channelCountMode:ChannelCountMode;channelInterpretation:ChannelInterpretation;readonly context:BaseAudioContext;readonly numberOfInputs:number;readonly numberOfOutputs:number;connect(destinationNode:AudioNode,output?:number,input?:number):AudioNode;connect(destinationParam:AudioParam,output?:number):void;disconnect():void;disconnect(output:number):void;disconnect(destinationNode:AudioNode):void;disconnect(destinationNode:AudioNode,output:number):void;disconnect(destinationNode:AudioNode,output:number,input:number):void;disconnect(destinationParam:AudioParam):void;disconnect(destinationParam:AudioParam,output:number):void;}declare var AudioNode:{prototype:AudioNode;new():AudioNode;};interface AudioParam{automationRate:AutomationRate;readonly defaultValue:number;readonly maxValue:number;readonly minValue:number;value:number;cancelAndHoldAtTime(cancelTime:number):AudioParam;cancelScheduledValues(cancelTime:number):AudioParam;exponentialRampToValueAtTime(value:number,endTime:number):AudioParam;linearRampToValueAtTime(value:number,endTime:number):AudioParam;setTargetAtTime(target:number,startTime:number,timeConstant:number):AudioParam;setValueAtTime(value:number,startTime:number):AudioParam;setValueCurveAtTime(values:number[]|Float32Array,startTime:number,duration:number):AudioParam;}declare var AudioParam:{prototype:AudioParam;new():AudioParam;};interface AudioParamMap{forEach(callbackfn:(value:AudioParam,key:string,parent:AudioParamMap)=>void,thisArg?:any):void;}declare var AudioParamMap:{prototype:AudioParamMap;new():AudioParamMap;};interface AudioProcessingEvent extends Event{readonly inputBuffer:AudioBuffer;readonly outputBuffer:AudioBuffer;readonly playbackTime:number;}declare var AudioProcessingEvent:{prototype:AudioProcessingEvent;new(type:string,eventInitDict:AudioProcessingEventInit):AudioProcessingEvent;};interface AudioScheduledSourceNodeEventMap{\"ended\":Event;}interface AudioScheduledSourceNode extends AudioNode{onended:((this:AudioScheduledSourceNode,ev:Event)=>any)|null;start(when?:number):void;stop(when?:number):void;addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type:K,listener:(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type:K,listener:(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var AudioScheduledSourceNode:{prototype:AudioScheduledSourceNode;new():AudioScheduledSourceNode;};interface AudioWorklet extends Worklet{}declare var AudioWorklet:{prototype:AudioWorklet;new():AudioWorklet;};interface AudioWorkletNodeEventMap{\"processorerror\":Event;}interface AudioWorkletNode extends AudioNode{onprocessorerror:((this:AudioWorkletNode,ev:Event)=>any)|null;readonly parameters:AudioParamMap;readonly port:MessagePort;addEventListener<K extends keyof AudioWorkletNodeEventMap>(type:K,listener:(this:AudioWorkletNode,ev:AudioWorkletNodeEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof AudioWorkletNodeEventMap>(type:K,listener:(this:AudioWorkletNode,ev:AudioWorkletNodeEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var AudioWorkletNode:{prototype:AudioWorkletNode;new(context:BaseAudioContext,name:string,options?:AudioWorkletNodeOptions):AudioWorkletNode;};interface AuthenticatorAssertionResponse extends AuthenticatorResponse{readonly authenticatorData:ArrayBuffer;readonly signature:ArrayBuffer;readonly userHandle:ArrayBuffer|null;}declare var AuthenticatorAssertionResponse:{prototype:AuthenticatorAssertionResponse;new():AuthenticatorAssertionResponse;};interface AuthenticatorAttestationResponse extends AuthenticatorResponse{readonly attestationObject:ArrayBuffer;}declare var AuthenticatorAttestationResponse:{prototype:AuthenticatorAttestationResponse;new():AuthenticatorAttestationResponse;};interface AuthenticatorResponse{readonly clientDataJSON:ArrayBuffer;}declare var AuthenticatorResponse:{prototype:AuthenticatorResponse;new():AuthenticatorResponse;};interface BarProp{readonly visible:boolean;}declare var BarProp:{prototype:BarProp;new():BarProp;};interface BaseAudioContextEventMap{\"statechange\":Event;}interface BaseAudioContext extends EventTarget{readonly audioWorklet:AudioWorklet;readonly currentTime:number;readonly destination:AudioDestinationNode;readonly listener:AudioListener;onstatechange:((this:BaseAudioContext,ev:Event)=>any)|null;readonly sampleRate:number;readonly state:AudioContextState;createAnalyser():AnalyserNode;createBiquadFilter():BiquadFilterNode;createBuffer(numberOfChannels:number,length:number,sampleRate:number):AudioBuffer;createBufferSource():AudioBufferSourceNode;createChannelMerger(numberOfInputs?:number):ChannelMergerNode;createChannelSplitter(numberOfOutputs?:number):ChannelSplitterNode;createConstantSource():ConstantSourceNode;createConvolver():ConvolverNode;createDelay(maxDelayTime?:number):DelayNode;createDynamicsCompressor():DynamicsCompressorNode;createGain():GainNode;createIIRFilter(feedforward:number[],feedback:number[]):IIRFilterNode;createOscillator():OscillatorNode;createPanner():PannerNode;createPeriodicWave(real:number[]|Float32Array,imag:number[]|Float32Array,constraints?:PeriodicWaveConstraints):PeriodicWave;createScriptProcessor(bufferSize?:number,numberOfInputChannels?:number,numberOfOutputChannels?:number):ScriptProcessorNode;createStereoPanner():StereoPannerNode;createWaveShaper():WaveShaperNode;decodeAudioData(audioData:ArrayBuffer,successCallback?:DecodeSuccessCallback|null,errorCallback?:DecodeErrorCallback|null):Promise<AudioBuffer>;addEventListener<K extends keyof BaseAudioContextEventMap>(type:K,listener:(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof BaseAudioContextEventMap>(type:K,listener:(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var BaseAudioContext:{prototype:BaseAudioContext;new():BaseAudioContext;};interface BeforeUnloadEvent extends Event{returnValue:any;}declare var BeforeUnloadEvent:{prototype:BeforeUnloadEvent;new():BeforeUnloadEvent;};interface BiquadFilterNode extends AudioNode{readonly Q:AudioParam;readonly detune:AudioParam;readonly frequency:AudioParam;readonly gain:AudioParam;type:BiquadFilterType;getFrequencyResponse(frequencyHz:Float32Array,magResponse:Float32Array,phaseResponse:Float32Array):void;}declare var BiquadFilterNode:{prototype:BiquadFilterNode;new(context:BaseAudioContext,options?:BiquadFilterOptions):BiquadFilterNode;};interface Blob{readonly size:number;readonly type:string;arrayBuffer():Promise<ArrayBuffer>;slice(start?:number,end?:number,contentType?:string):Blob;stream():ReadableStream<Uint8Array>;text():Promise<string>;}declare var Blob:{prototype:Blob;new(blobParts?:BlobPart[],options?:BlobPropertyBag):Blob;};interface BlobEvent extends Event{readonly data:Blob;readonly timecode:DOMHighResTimeStamp;}declare var BlobEvent:{prototype:BlobEvent;new(type:string,eventInitDict:BlobEventInit):BlobEvent;};interface Body{readonly body:ReadableStream<Uint8Array>|null;readonly bodyUsed:boolean;arrayBuffer():Promise<ArrayBuffer>;blob():Promise<Blob>;formData():Promise<FormData>;json():Promise<any>;text():Promise<string>;}interface BroadcastChannelEventMap{\"message\":MessageEvent;\"messageerror\":MessageEvent;}interface BroadcastChannel extends EventTarget{readonly name:string;onmessage:((this:BroadcastChannel,ev:MessageEvent)=>any)|null;onmessageerror:((this:BroadcastChannel,ev:MessageEvent)=>any)|null;close():void;postMessage(message:any):void;addEventListener<K extends keyof BroadcastChannelEventMap>(type:K,listener:(this:BroadcastChannel,ev:BroadcastChannelEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof BroadcastChannelEventMap>(type:K,listener:(this:BroadcastChannel,ev:BroadcastChannelEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var BroadcastChannel:{prototype:BroadcastChannel;new(name:string):BroadcastChannel;};interface ByteLengthQueuingStrategy extends QueuingStrategy<ArrayBufferView>{readonly highWaterMark:number;readonly size:QueuingStrategySize<ArrayBufferView>;}declare var ByteLengthQueuingStrategy:{prototype:ByteLengthQueuingStrategy;new(init:QueuingStrategyInit):ByteLengthQueuingStrategy;};interface CDATASection extends Text{}declare var CDATASection:{prototype:CDATASection;new():CDATASection;};interface CSSAnimation extends Animation{readonly animationName:string;addEventListener<K extends keyof AnimationEventMap>(type:K,listener:(this:CSSAnimation,ev:AnimationEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof AnimationEventMap>(type:K,listener:(this:CSSAnimation,ev:AnimationEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var CSSAnimation:{prototype:CSSAnimation;new():CSSAnimation;};interface CSSConditionRule extends CSSGroupingRule{conditionText:string;}declare var CSSConditionRule:{prototype:CSSConditionRule;new():CSSConditionRule;};interface CSSCounterStyleRule extends CSSRule{additiveSymbols:string;fallback:string;name:string;negative:string;pad:string;prefix:string;range:string;speakAs:string;suffix:string;symbols:string;system:string;}declare var CSSCounterStyleRule:{prototype:CSSCounterStyleRule;new():CSSCounterStyleRule;};interface CSSFontFaceRule extends CSSRule{readonly style:CSSStyleDeclaration;}declare var CSSFontFaceRule:{prototype:CSSFontFaceRule;new():CSSFontFaceRule;};interface CSSGroupingRule extends CSSRule{readonly cssRules:CSSRuleList;deleteRule(index:number):void;insertRule(rule:string,index?:number):number;}declare var CSSGroupingRule:{prototype:CSSGroupingRule;new():CSSGroupingRule;};interface CSSImportRule extends CSSRule{readonly href:string;readonly media:MediaList;readonly styleSheet:CSSStyleSheet;}declare var CSSImportRule:{prototype:CSSImportRule;new():CSSImportRule;};interface CSSKeyframeRule extends CSSRule{keyText:string;readonly style:CSSStyleDeclaration;}declare var CSSKeyframeRule:{prototype:CSSKeyframeRule;new():CSSKeyframeRule;};interface CSSKeyframesRule extends CSSRule{readonly cssRules:CSSRuleList;name:string;appendRule(rule:string):void;deleteRule(select:string):void;findRule(select:string):CSSKeyframeRule|null;}declare var CSSKeyframesRule:{prototype:CSSKeyframesRule;new():CSSKeyframesRule;};interface CSSMediaRule extends CSSConditionRule{readonly media:MediaList;}declare var CSSMediaRule:{prototype:CSSMediaRule;new():CSSMediaRule;};interface CSSNamespaceRule extends CSSRule{readonly namespaceURI:string;readonly prefix:string;}declare var CSSNamespaceRule:{prototype:CSSNamespaceRule;new():CSSNamespaceRule;};interface CSSPageRule extends CSSGroupingRule{selectorText:string;readonly style:CSSStyleDeclaration;}declare var CSSPageRule:{prototype:CSSPageRule;new():CSSPageRule;};interface CSSRule{cssText:string;readonly parentRule:CSSRule|null;readonly parentStyleSheet:CSSStyleSheet|null;readonly type:number;readonly CHARSET_RULE:number;readonly FONT_FACE_RULE:number;readonly IMPORT_RULE:number;readonly KEYFRAMES_RULE:number;readonly KEYFRAME_RULE:number;readonly MEDIA_RULE:number;readonly NAMESPACE_RULE:number;readonly PAGE_RULE:number;readonly STYLE_RULE:number;readonly SUPPORTS_RULE:number;}declare var CSSRule:{prototype:CSSRule;new():CSSRule;readonly CHARSET_RULE:number;readonly FONT_FACE_RULE:number;readonly IMPORT_RULE:number;readonly KEYFRAMES_RULE:number;readonly KEYFRAME_RULE:number;readonly MEDIA_RULE:number;readonly NAMESPACE_RULE:number;readonly PAGE_RULE:number;readonly STYLE_RULE:number;readonly SUPPORTS_RULE:number;};interface CSSRuleList{readonly length:number;item(index:number):CSSRule|null;[index:number]:CSSRule;}declare var CSSRuleList:{prototype:CSSRuleList;new():CSSRuleList;};interface CSSStyleDeclaration{accentColor:string;alignContent:string;alignItems:string;alignSelf:string;alignmentBaseline:string;all:string;animation:string;animationDelay:string;animationDirection:string;animationDuration:string;animationFillMode:string;animationIterationCount:string;animationName:string;animationPlayState:string;animationTimingFunction:string;appearance:string;aspectRatio:string;backfaceVisibility:string;background:string;backgroundAttachment:string;backgroundBlendMode:string;backgroundClip:string;backgroundColor:string;backgroundImage:string;backgroundOrigin:string;backgroundPosition:string;backgroundPositionX:string;backgroundPositionY:string;backgroundRepeat:string;backgroundSize:string;baselineShift:string;blockSize:string;border:string;borderBlock:string;borderBlockColor:string;borderBlockEnd:string;borderBlockEndColor:string;borderBlockEndStyle:string;borderBlockEndWidth:string;borderBlockStart:string;borderBlockStartColor:string;borderBlockStartStyle:string;borderBlockStartWidth:string;borderBlockStyle:string;borderBlockWidth:string;borderBottom:string;borderBottomColor:string;borderBottomLeftRadius:string;borderBottomRightRadius:string;borderBottomStyle:string;borderBottomWidth:string;borderCollapse:string;borderColor:string;borderEndEndRadius:string;borderEndStartRadius:string;borderImage:string;borderImageOutset:string;borderImageRepeat:string;borderImageSlice:string;borderImageSource:string;borderImageWidth:string;borderInline:string;borderInlineColor:string;borderInlineEnd:string;borderInlineEndColor:string;borderInlineEndStyle:string;borderInlineEndWidth:string;borderInlineStart:string;borderInlineStartColor:string;borderInlineStartStyle:string;borderInlineStartWidth:string;borderInlineStyle:string;borderInlineWidth:string;borderLeft:string;borderLeftColor:string;borderLeftStyle:string;borderLeftWidth:string;borderRadius:string;borderRight:string;borderRightColor:string;borderRightStyle:string;borderRightWidth:string;borderSpacing:string;borderStartEndRadius:string;borderStartStartRadius:string;borderStyle:string;borderTop:string;borderTopColor:string;borderTopLeftRadius:string;borderTopRightRadius:string;borderTopStyle:string;borderTopWidth:string;borderWidth:string;bottom:string;boxShadow:string;boxSizing:string;breakAfter:string;breakBefore:string;breakInside:string;captionSide:string;caretColor:string;clear:string;clip:string;clipPath:string;clipRule:string;color:string;colorInterpolation:string;colorInterpolationFilters:string;colorScheme:string;columnCount:string;columnFill:string;columnGap:string;columnRule:string;columnRuleColor:string;columnRuleStyle:string;columnRuleWidth:string;columnSpan:string;columnWidth:string;columns:string;contain:string;content:string;contentVisibility:string;counterIncrement:string;counterReset:string;counterSet:string;cssFloat:string;cssText:string;cursor:string;direction:string;display:string;dominantBaseline:string;emptyCells:string;fill:string;fillOpacity:string;fillRule:string;filter:string;flex:string;flexBasis:string;flexDirection:string;flexFlow:string;flexGrow:string;flexShrink:string;flexWrap:string;float:string;floodColor:string;floodOpacity:string;font:string;fontFamily:string;fontFeatureSettings:string;fontKerning:string;fontOpticalSizing:string;fontSize:string;fontSizeAdjust:string;fontStretch:string;fontStyle:string;fontSynthesis:string;fontVariant:string;fontVariantAlternates:string;fontVariantCaps:string;fontVariantEastAsian:string;fontVariantLigatures:string;fontVariantNumeric:string;fontVariantPosition:string;fontVariationSettings:string;fontWeight:string;gap:string;grid:string;gridArea:string;gridAutoColumns:string;gridAutoFlow:string;gridAutoRows:string;gridColumn:string;gridColumnEnd:string;gridColumnGap:string;gridColumnStart:string;gridGap:string;gridRow:string;gridRowEnd:string;gridRowGap:string;gridRowStart:string;gridTemplate:string;gridTemplateAreas:string;gridTemplateColumns:string;gridTemplateRows:string;height:string;hyphens:string;imageOrientation:string;imageRendering:string;inlineSize:string;inset:string;insetBlock:string;insetBlockEnd:string;insetBlockStart:string;insetInline:string;insetInlineEnd:string;insetInlineStart:string;isolation:string;justifyContent:string;justifyItems:string;justifySelf:string;left:string;readonly length:number;letterSpacing:string;lightingColor:string;lineBreak:string;lineHeight:string;listStyle:string;listStyleImage:string;listStylePosition:string;listStyleType:string;margin:string;marginBlock:string;marginBlockEnd:string;marginBlockStart:string;marginBottom:string;marginInline:string;marginInlineEnd:string;marginInlineStart:string;marginLeft:string;marginRight:string;marginTop:string;marker:string;markerEnd:string;markerMid:string;markerStart:string;mask:string;maskClip:string;maskComposite:string;maskImage:string;maskMode:string;maskOrigin:string;maskPosition:string;maskRepeat:string;maskSize:string;maskType:string;maxBlockSize:string;maxHeight:string;maxInlineSize:string;maxWidth:string;minBlockSize:string;minHeight:string;minInlineSize:string;minWidth:string;mixBlendMode:string;objectFit:string;objectPosition:string;offset:string;offsetDistance:string;offsetPath:string;offsetRotate:string;opacity:string;order:string;orphans:string;outline:string;outlineColor:string;outlineOffset:string;outlineStyle:string;outlineWidth:string;overflow:string;overflowAnchor:string;overflowWrap:string;overflowX:string;overflowY:string;overscrollBehavior:string;overscrollBehaviorBlock:string;overscrollBehaviorInline:string;overscrollBehaviorX:string;overscrollBehaviorY:string;padding:string;paddingBlock:string;paddingBlockEnd:string;paddingBlockStart:string;paddingBottom:string;paddingInline:string;paddingInlineEnd:string;paddingInlineStart:string;paddingLeft:string;paddingRight:string;paddingTop:string;pageBreakAfter:string;pageBreakBefore:string;pageBreakInside:string;paintOrder:string;readonly parentRule:CSSRule|null;perspective:string;perspectiveOrigin:string;placeContent:string;placeItems:string;placeSelf:string;pointerEvents:string;position:string;printColorAdjust:string;quotes:string;resize:string;right:string;rotate:string;rowGap:string;rubyPosition:string;scale:string;scrollBehavior:string;scrollMargin:string;scrollMarginBlock:string;scrollMarginBlockEnd:string;scrollMarginBlockStart:string;scrollMarginBottom:string;scrollMarginInline:string;scrollMarginInlineEnd:string;scrollMarginInlineStart:string;scrollMarginLeft:string;scrollMarginRight:string;scrollMarginTop:string;scrollPadding:string;scrollPaddingBlock:string;scrollPaddingBlockEnd:string;scrollPaddingBlockStart:string;scrollPaddingBottom:string;scrollPaddingInline:string;scrollPaddingInlineEnd:string;scrollPaddingInlineStart:string;scrollPaddingLeft:string;scrollPaddingRight:string;scrollPaddingTop:string;scrollSnapAlign:string;scrollSnapStop:string;scrollSnapType:string;scrollbarGutter:string;shapeImageThreshold:string;shapeMargin:string;shapeOutside:string;shapeRendering:string;stopColor:string;stopOpacity:string;stroke:string;strokeDasharray:string;strokeDashoffset:string;strokeLinecap:string;strokeLinejoin:string;strokeMiterlimit:string;strokeOpacity:string;strokeWidth:string;tabSize:string;tableLayout:string;textAlign:string;textAlignLast:string;textAnchor:string;textCombineUpright:string;textDecoration:string;textDecorationColor:string;textDecorationLine:string;textDecorationSkipInk:string;textDecorationStyle:string;textDecorationThickness:string;textEmphasis:string;textEmphasisColor:string;textEmphasisPosition:string;textEmphasisStyle:string;textIndent:string;textOrientation:string;textOverflow:string;textRendering:string;textShadow:string;textTransform:string;textUnderlineOffset:string;textUnderlinePosition:string;top:string;touchAction:string;transform:string;transformBox:string;transformOrigin:string;transformStyle:string;transition:string;transitionDelay:string;transitionDuration:string;transitionProperty:string;transitionTimingFunction:string;translate:string;unicodeBidi:string;userSelect:string;verticalAlign:string;visibility:string;webkitAlignContent:string;webkitAlignItems:string;webkitAlignSelf:string;webkitAnimation:string;webkitAnimationDelay:string;webkitAnimationDirection:string;webkitAnimationDuration:string;webkitAnimationFillMode:string;webkitAnimationIterationCount:string;webkitAnimationName:string;webkitAnimationPlayState:string;webkitAnimationTimingFunction:string;webkitAppearance:string;webkitBackfaceVisibility:string;webkitBackgroundClip:string;webkitBackgroundOrigin:string;webkitBackgroundSize:string;webkitBorderBottomLeftRadius:string;webkitBorderBottomRightRadius:string;webkitBorderRadius:string;webkitBorderTopLeftRadius:string;webkitBorderTopRightRadius:string;webkitBoxAlign:string;webkitBoxFlex:string;webkitBoxOrdinalGroup:string;webkitBoxOrient:string;webkitBoxPack:string;webkitBoxShadow:string;webkitBoxSizing:string;webkitFilter:string;webkitFlex:string;webkitFlexBasis:string;webkitFlexDirection:string;webkitFlexFlow:string;webkitFlexGrow:string;webkitFlexShrink:string;webkitFlexWrap:string;webkitJustifyContent:string;webkitLineClamp:string;webkitMask:string;webkitMaskBoxImage:string;webkitMaskBoxImageOutset:string;webkitMaskBoxImageRepeat:string;webkitMaskBoxImageSlice:string;webkitMaskBoxImageSource:string;webkitMaskBoxImageWidth:string;webkitMaskClip:string;webkitMaskComposite:string;webkitMaskImage:string;webkitMaskOrigin:string;webkitMaskPosition:string;webkitMaskRepeat:string;webkitMaskSize:string;webkitOrder:string;webkitPerspective:string;webkitPerspectiveOrigin:string;webkitTextFillColor:string;webkitTextStroke:string;webkitTextStrokeColor:string;webkitTextStrokeWidth:string;webkitTransform:string;webkitTransformOrigin:string;webkitTransformStyle:string;webkitTransition:string;webkitTransitionDelay:string;webkitTransitionDuration:string;webkitTransitionProperty:string;webkitTransitionTimingFunction:string;webkitUserSelect:string;whiteSpace:string;widows:string;width:string;willChange:string;wordBreak:string;wordSpacing:string;wordWrap:string;writingMode:string;zIndex:string;getPropertyPriority(property:string):string;getPropertyValue(property:string):string;item(index:number):string;removeProperty(property:string):string;setProperty(property:string,value:string|null,priority?:string):void;[index:number]:string;}declare var CSSStyleDeclaration:{prototype:CSSStyleDeclaration;new():CSSStyleDeclaration;};interface CSSStyleRule extends CSSRule{selectorText:string;readonly style:CSSStyleDeclaration;}declare var CSSStyleRule:{prototype:CSSStyleRule;new():CSSStyleRule;};interface CSSStyleSheet extends StyleSheet{readonly cssRules:CSSRuleList;readonly ownerRule:CSSRule|null;readonly rules:CSSRuleList;addRule(selector?:string,style?:string,index?:number):number;deleteRule(index:number):void;insertRule(rule:string,index?:number):number;removeRule(index?:number):void;}declare var CSSStyleSheet:{prototype:CSSStyleSheet;new(options?:CSSStyleSheetInit):CSSStyleSheet;};interface CSSSupportsRule extends CSSConditionRule{}declare var CSSSupportsRule:{prototype:CSSSupportsRule;new():CSSSupportsRule;};interface CSSTransition extends Animation{readonly transitionProperty:string;addEventListener<K extends keyof AnimationEventMap>(type:K,listener:(this:CSSTransition,ev:AnimationEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof AnimationEventMap>(type:K,listener:(this:CSSTransition,ev:AnimationEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var CSSTransition:{prototype:CSSTransition;new():CSSTransition;};interface Cache{add(request:RequestInfo|URL):Promise<void>;addAll(requests:RequestInfo[]):Promise<void>;delete(request:RequestInfo|URL,options?:CacheQueryOptions):Promise<boolean>;keys(request?:RequestInfo|URL,options?:CacheQueryOptions):Promise<ReadonlyArray<Request>>;match(request:RequestInfo|URL,options?:CacheQueryOptions):Promise<Response|undefined>;matchAll(request?:RequestInfo|URL,options?:CacheQueryOptions):Promise<ReadonlyArray<Response>>;put(request:RequestInfo|URL,response:Response):Promise<void>;}declare var Cache:{prototype:Cache;new():Cache;};interface CacheStorage{delete(cacheName:string):Promise<boolean>;has(cacheName:string):Promise<boolean>;keys():Promise<string[]>;match(request:RequestInfo|URL,options?:MultiCacheQueryOptions):Promise<Response|undefined>;open(cacheName:string):Promise<Cache>;}declare var CacheStorage:{prototype:CacheStorage;new():CacheStorage;};interface CanvasCaptureMediaStreamTrack extends MediaStreamTrack{readonly canvas:HTMLCanvasElement;requestFrame():void;addEventListener<K extends keyof MediaStreamTrackEventMap>(type:K,listener:(this:CanvasCaptureMediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MediaStreamTrackEventMap>(type:K,listener:(this:CanvasCaptureMediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var CanvasCaptureMediaStreamTrack:{prototype:CanvasCaptureMediaStreamTrack;new():CanvasCaptureMediaStreamTrack;};interface CanvasCompositing{globalAlpha:number;globalCompositeOperation:GlobalCompositeOperation;}interface CanvasDrawImage{drawImage(image:CanvasImageSource,dx:number,dy:number):void;drawImage(image:CanvasImageSource,dx:number,dy:number,dw:number,dh:number):void;drawImage(image:CanvasImageSource,sx:number,sy:number,sw:number,sh:number,dx:number,dy:number,dw:number,dh:number):void;}interface CanvasDrawPath{beginPath():void;clip(fillRule?:CanvasFillRule):void;clip(path:Path2D,fillRule?:CanvasFillRule):void;fill(fillRule?:CanvasFillRule):void;fill(path:Path2D,fillRule?:CanvasFillRule):void;isPointInPath(x:number,y:number,fillRule?:CanvasFillRule):boolean;isPointInPath(path:Path2D,x:number,y:number,fillRule?:CanvasFillRule):boolean;isPointInStroke(x:number,y:number):boolean;isPointInStroke(path:Path2D,x:number,y:number):boolean;stroke():void;stroke(path:Path2D):void;}interface CanvasFillStrokeStyles{fillStyle:string|CanvasGradient|CanvasPattern;strokeStyle:string|CanvasGradient|CanvasPattern;createConicGradient(startAngle:number,x:number,y:number):CanvasGradient;createLinearGradient(x0:number,y0:number,x1:number,y1:number):CanvasGradient;createPattern(image:CanvasImageSource,repetition:string|null):CanvasPattern|null;createRadialGradient(x0:number,y0:number,r0:number,x1:number,y1:number,r1:number):CanvasGradient;}interface CanvasFilters{filter:string;}interface CanvasGradient{addColorStop(offset:number,color:string):void;}declare var CanvasGradient:{prototype:CanvasGradient;new():CanvasGradient;};interface CanvasImageData{createImageData(sw:number,sh:number,settings?:ImageDataSettings):ImageData;createImageData(imagedata:ImageData):ImageData;getImageData(sx:number,sy:number,sw:number,sh:number,settings?:ImageDataSettings):ImageData;putImageData(imagedata:ImageData,dx:number,dy:number):void;putImageData(imagedata:ImageData,dx:number,dy:number,dirtyX:number,dirtyY:number,dirtyWidth:number,dirtyHeight:number):void;}interface CanvasImageSmoothing{imageSmoothingEnabled:boolean;imageSmoothingQuality:ImageSmoothingQuality;}interface CanvasPath{arc(x:number,y:number,radius:number,startAngle:number,endAngle:number,counterclockwise?:boolean):void;arcTo(x1:number,y1:number,x2:number,y2:number,radius:number):void;bezierCurveTo(cp1x:number,cp1y:number,cp2x:number,cp2y:number,x:number,y:number):void;closePath():void;ellipse(x:number,y:number,radiusX:number,radiusY:number,rotation:number,startAngle:number,endAngle:number,counterclockwise?:boolean):void;lineTo(x:number,y:number):void;moveTo(x:number,y:number):void;quadraticCurveTo(cpx:number,cpy:number,x:number,y:number):void;rect(x:number,y:number,w:number,h:number):void;}interface CanvasPathDrawingStyles{lineCap:CanvasLineCap;lineDashOffset:number;lineJoin:CanvasLineJoin;lineWidth:number;miterLimit:number;getLineDash():number[];setLineDash(segments:number[]):void;}interface CanvasPattern{setTransform(transform?:DOMMatrix2DInit):void;}declare var CanvasPattern:{prototype:CanvasPattern;new():CanvasPattern;};interface CanvasRect{clearRect(x:number,y:number,w:number,h:number):void;fillRect(x:number,y:number,w:number,h:number):void;strokeRect(x:number,y:number,w:number,h:number):void;}interface CanvasRenderingContext2D extends CanvasCompositing,CanvasDrawImage,CanvasDrawPath,CanvasFillStrokeStyles,CanvasFilters,CanvasImageData,CanvasImageSmoothing,CanvasPath,CanvasPathDrawingStyles,CanvasRect,CanvasShadowStyles,CanvasState,CanvasText,CanvasTextDrawingStyles,CanvasTransform,CanvasUserInterface{readonly canvas:HTMLCanvasElement;getContextAttributes():CanvasRenderingContext2DSettings;}declare var CanvasRenderingContext2D:{prototype:CanvasRenderingContext2D;new():CanvasRenderingContext2D;};interface CanvasShadowStyles{shadowBlur:number;shadowColor:string;shadowOffsetX:number;shadowOffsetY:number;}interface CanvasState{restore():void;save():void;}interface CanvasText{fillText(text:string,x:number,y:number,maxWidth?:number):void;measureText(text:string):TextMetrics;strokeText(text:string,x:number,y:number,maxWidth?:number):void;}interface CanvasTextDrawingStyles{direction:CanvasDirection;font:string;textAlign:CanvasTextAlign;textBaseline:CanvasTextBaseline;}interface CanvasTransform{getTransform():DOMMatrix;resetTransform():void;rotate(angle:number):void;scale(x:number,y:number):void;setTransform(a:number,b:number,c:number,d:number,e:number,f:number):void;setTransform(transform?:DOMMatrix2DInit):void;transform(a:number,b:number,c:number,d:number,e:number,f:number):void;translate(x:number,y:number):void;}interface CanvasUserInterface{drawFocusIfNeeded(element:Element):void;drawFocusIfNeeded(path:Path2D,element:Element):void;}interface ChannelMergerNode extends AudioNode{}declare var ChannelMergerNode:{prototype:ChannelMergerNode;new(context:BaseAudioContext,options?:ChannelMergerOptions):ChannelMergerNode;};interface ChannelSplitterNode extends AudioNode{}declare var ChannelSplitterNode:{prototype:ChannelSplitterNode;new(context:BaseAudioContext,options?:ChannelSplitterOptions):ChannelSplitterNode;};interface CharacterData extends Node,ChildNode,NonDocumentTypeChildNode{data:string;readonly length:number;readonly ownerDocument:Document;appendData(data:string):void;deleteData(offset:number,count:number):void;insertData(offset:number,data:string):void;replaceData(offset:number,count:number,data:string):void;substringData(offset:number,count:number):string;}declare var CharacterData:{prototype:CharacterData;new():CharacterData;};interface ChildNode extends Node{after(...nodes:(Node|string)[]):void;before(...nodes:(Node|string)[]):void;remove():void;replaceWith(...nodes:(Node|string)[]):void;}interface ClientRect extends DOMRect{}interface Clipboard extends EventTarget{read():Promise<ClipboardItems>;readText():Promise<string>;write(data:ClipboardItems):Promise<void>;writeText(data:string):Promise<void>;}declare var Clipboard:{prototype:Clipboard;new():Clipboard;};interface ClipboardEvent extends Event{readonly clipboardData:DataTransfer|null;}declare var ClipboardEvent:{prototype:ClipboardEvent;new(type:string,eventInitDict?:ClipboardEventInit):ClipboardEvent;};interface ClipboardItem{readonly types:ReadonlyArray<string>;getType(type:string):Promise<Blob>;}declare var ClipboardItem:{prototype:ClipboardItem;new(items:Record<string,string|Blob|PromiseLike<string|Blob>>,options?:ClipboardItemOptions):ClipboardItem;};interface CloseEvent extends Event{readonly code:number;readonly reason:string;readonly wasClean:boolean;}declare var CloseEvent:{prototype:CloseEvent;new(type:string,eventInitDict?:CloseEventInit):CloseEvent;};interface Comment extends CharacterData{}declare var Comment:{prototype:Comment;new(data?:string):Comment;};interface CompositionEvent extends UIEvent{readonly data:string;initCompositionEvent(typeArg:string,bubblesArg?:boolean,cancelableArg?:boolean,viewArg?:WindowProxy|null,dataArg?:string):void;}declare var CompositionEvent:{prototype:CompositionEvent;new(type:string,eventInitDict?:CompositionEventInit):CompositionEvent;};interface ConstantSourceNode extends AudioScheduledSourceNode{readonly offset:AudioParam;addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type:K,listener:(this:ConstantSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type:K,listener:(this:ConstantSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var ConstantSourceNode:{prototype:ConstantSourceNode;new(context:BaseAudioContext,options?:ConstantSourceOptions):ConstantSourceNode;};interface ConvolverNode extends AudioNode{buffer:AudioBuffer|null;normalize:boolean;}declare var ConvolverNode:{prototype:ConvolverNode;new(context:BaseAudioContext,options?:ConvolverOptions):ConvolverNode;};interface CountQueuingStrategy extends QueuingStrategy{readonly highWaterMark:number;readonly size:QueuingStrategySize;}declare var CountQueuingStrategy:{prototype:CountQueuingStrategy;new(init:QueuingStrategyInit):CountQueuingStrategy;};interface Credential{readonly id:string;readonly type:string;}declare var Credential:{prototype:Credential;new():Credential;};interface CredentialsContainer{create(options?:CredentialCreationOptions):Promise<Credential|null>;get(options?:CredentialRequestOptions):Promise<Credential|null>;preventSilentAccess():Promise<void>;store(credential:Credential):Promise<Credential>;}declare var CredentialsContainer:{prototype:CredentialsContainer;new():CredentialsContainer;};interface Crypto{readonly subtle:SubtleCrypto;getRandomValues<T extends ArrayBufferView|null>(array:T):T;randomUUID():string;}declare var Crypto:{prototype:Crypto;new():Crypto;};interface CryptoKey{readonly algorithm:KeyAlgorithm;readonly extractable:boolean;readonly type:KeyType;readonly usages:KeyUsage[];}declare var CryptoKey:{prototype:CryptoKey;new():CryptoKey;};interface CustomElementRegistry{define(name:string,constructor:CustomElementConstructor,options?:ElementDefinitionOptions):void;get(name:string):CustomElementConstructor|undefined;upgrade(root:Node):void;whenDefined(name:string):Promise<CustomElementConstructor>;}declare var CustomElementRegistry:{prototype:CustomElementRegistry;new():CustomElementRegistry;};interface CustomEvent<T=any>extends Event{readonly detail:T;initCustomEvent(type:string,bubbles?:boolean,cancelable?:boolean,detail?:T):void;}declare var CustomEvent:{prototype:CustomEvent;new<T>(type:string,eventInitDict?:CustomEventInit<T>):CustomEvent<T>;};interface DOMException extends Error{readonly code:number;readonly message:string;readonly name:string;readonly ABORT_ERR:number;readonly DATA_CLONE_ERR:number;readonly DOMSTRING_SIZE_ERR:number;readonly HIERARCHY_REQUEST_ERR:number;readonly INDEX_SIZE_ERR:number;readonly INUSE_ATTRIBUTE_ERR:number;readonly INVALID_ACCESS_ERR:number;readonly INVALID_CHARACTER_ERR:number;readonly INVALID_MODIFICATION_ERR:number;readonly INVALID_NODE_TYPE_ERR:number;readonly INVALID_STATE_ERR:number;readonly NAMESPACE_ERR:number;readonly NETWORK_ERR:number;readonly NOT_FOUND_ERR:number;readonly NOT_SUPPORTED_ERR:number;readonly NO_DATA_ALLOWED_ERR:number;readonly NO_MODIFICATION_ALLOWED_ERR:number;readonly QUOTA_EXCEEDED_ERR:number;readonly SECURITY_ERR:number;readonly SYNTAX_ERR:number;readonly TIMEOUT_ERR:number;readonly TYPE_MISMATCH_ERR:number;readonly URL_MISMATCH_ERR:number;readonly VALIDATION_ERR:number;readonly WRONG_DOCUMENT_ERR:number;}declare var DOMException:{prototype:DOMException;new(message?:string,name?:string):DOMException;readonly ABORT_ERR:number;readonly DATA_CLONE_ERR:number;readonly DOMSTRING_SIZE_ERR:number;readonly HIERARCHY_REQUEST_ERR:number;readonly INDEX_SIZE_ERR:number;readonly INUSE_ATTRIBUTE_ERR:number;readonly INVALID_ACCESS_ERR:number;readonly INVALID_CHARACTER_ERR:number;readonly INVALID_MODIFICATION_ERR:number;readonly INVALID_NODE_TYPE_ERR:number;readonly INVALID_STATE_ERR:number;readonly NAMESPACE_ERR:number;readonly NETWORK_ERR:number;readonly NOT_FOUND_ERR:number;readonly NOT_SUPPORTED_ERR:number;readonly NO_DATA_ALLOWED_ERR:number;readonly NO_MODIFICATION_ALLOWED_ERR:number;readonly QUOTA_EXCEEDED_ERR:number;readonly SECURITY_ERR:number;readonly SYNTAX_ERR:number;readonly TIMEOUT_ERR:number;readonly TYPE_MISMATCH_ERR:number;readonly URL_MISMATCH_ERR:number;readonly VALIDATION_ERR:number;readonly WRONG_DOCUMENT_ERR:number;};interface DOMImplementation{createDocument(namespace:string|null,qualifiedName:string|null,doctype?:DocumentType|null):XMLDocument;createDocumentType(qualifiedName:string,publicId:string,systemId:string):DocumentType;createHTMLDocument(title?:string):Document;hasFeature(...args:any[]):true;}declare var DOMImplementation:{prototype:DOMImplementation;new():DOMImplementation;};interface DOMMatrix extends DOMMatrixReadOnly{a:number;b:number;c:number;d:number;e:number;f:number;m11:number;m12:number;m13:number;m14:number;m21:number;m22:number;m23:number;m24:number;m31:number;m32:number;m33:number;m34:number;m41:number;m42:number;m43:number;m44:number;invertSelf():DOMMatrix;multiplySelf(other?:DOMMatrixInit):DOMMatrix;preMultiplySelf(other?:DOMMatrixInit):DOMMatrix;rotateAxisAngleSelf(x?:number,y?:number,z?:number,angle?:number):DOMMatrix;rotateFromVectorSelf(x?:number,y?:number):DOMMatrix;rotateSelf(rotX?:number,rotY?:number,rotZ?:number):DOMMatrix;scale3dSelf(scale?:number,originX?:number,originY?:number,originZ?:number):DOMMatrix;scaleSelf(scaleX?:number,scaleY?:number,scaleZ?:number,originX?:number,originY?:number,originZ?:number):DOMMatrix;setMatrixValue(transformList:string):DOMMatrix;skewXSelf(sx?:number):DOMMatrix;skewYSelf(sy?:number):DOMMatrix;translateSelf(tx?:number,ty?:number,tz?:number):DOMMatrix;}declare var DOMMatrix:{prototype:DOMMatrix;new(init?:string|number[]):DOMMatrix;fromFloat32Array(array32:Float32Array):DOMMatrix;fromFloat64Array(array64:Float64Array):DOMMatrix;fromMatrix(other?:DOMMatrixInit):DOMMatrix;};type SVGMatrix=DOMMatrix;declare var SVGMatrix:typeof DOMMatrix;type WebKitCSSMatrix=DOMMatrix;declare var WebKitCSSMatrix:typeof DOMMatrix;interface DOMMatrixReadOnly{readonly a:number;readonly b:number;readonly c:number;readonly d:number;readonly e:number;readonly f:number;readonly is2D:boolean;readonly isIdentity:boolean;readonly m11:number;readonly m12:number;readonly m13:number;readonly m14:number;readonly m21:number;readonly m22:number;readonly m23:number;readonly m24:number;readonly m31:number;readonly m32:number;readonly m33:number;readonly m34:number;readonly m41:number;readonly m42:number;readonly m43:number;readonly m44:number;flipX():DOMMatrix;flipY():DOMMatrix;inverse():DOMMatrix;multiply(other?:DOMMatrixInit):DOMMatrix;rotate(rotX?:number,rotY?:number,rotZ?:number):DOMMatrix;rotateAxisAngle(x?:number,y?:number,z?:number,angle?:number):DOMMatrix;rotateFromVector(x?:number,y?:number):DOMMatrix;scale(scaleX?:number,scaleY?:number,scaleZ?:number,originX?:number,originY?:number,originZ?:number):DOMMatrix;scale3d(scale?:number,originX?:number,originY?:number,originZ?:number):DOMMatrix;scaleNonUniform(scaleX?:number,scaleY?:number):DOMMatrix;skewX(sx?:number):DOMMatrix;skewY(sy?:number):DOMMatrix;toFloat32Array():Float32Array;toFloat64Array():Float64Array;toJSON():any;transformPoint(point?:DOMPointInit):DOMPoint;translate(tx?:number,ty?:number,tz?:number):DOMMatrix;toString():string;}declare var DOMMatrixReadOnly:{prototype:DOMMatrixReadOnly;new(init?:string|number[]):DOMMatrixReadOnly;fromFloat32Array(array32:Float32Array):DOMMatrixReadOnly;fromFloat64Array(array64:Float64Array):DOMMatrixReadOnly;fromMatrix(other?:DOMMatrixInit):DOMMatrixReadOnly;toString():string;};interface DOMParser{parseFromString(string:string,type:DOMParserSupportedType):Document;}declare var DOMParser:{prototype:DOMParser;new():DOMParser;};interface DOMPoint extends DOMPointReadOnly{w:number;x:number;y:number;z:number;}declare var DOMPoint:{prototype:DOMPoint;new(x?:number,y?:number,z?:number,w?:number):DOMPoint;fromPoint(other?:DOMPointInit):DOMPoint;};type SVGPoint=DOMPoint;declare var SVGPoint:typeof DOMPoint;interface DOMPointReadOnly{readonly w:number;readonly x:number;readonly y:number;readonly z:number;matrixTransform(matrix?:DOMMatrixInit):DOMPoint;toJSON():any;}declare var DOMPointReadOnly:{prototype:DOMPointReadOnly;new(x?:number,y?:number,z?:number,w?:number):DOMPointReadOnly;fromPoint(other?:DOMPointInit):DOMPointReadOnly;};interface DOMQuad{readonly p1:DOMPoint;readonly p2:DOMPoint;readonly p3:DOMPoint;readonly p4:DOMPoint;getBounds():DOMRect;toJSON():any;}declare var DOMQuad:{prototype:DOMQuad;new(p1?:DOMPointInit,p2?:DOMPointInit,p3?:DOMPointInit,p4?:DOMPointInit):DOMQuad;fromQuad(other?:DOMQuadInit):DOMQuad;fromRect(other?:DOMRectInit):DOMQuad;};interface DOMRect extends DOMRectReadOnly{height:number;width:number;x:number;y:number;}declare var DOMRect:{prototype:DOMRect;new(x?:number,y?:number,width?:number,height?:number):DOMRect;fromRect(other?:DOMRectInit):DOMRect;};type SVGRect=DOMRect;declare var SVGRect:typeof DOMRect;interface DOMRectList{readonly length:number;item(index:number):DOMRect|null;[index:number]:DOMRect;}declare var DOMRectList:{prototype:DOMRectList;new():DOMRectList;};interface DOMRectReadOnly{readonly bottom:number;readonly height:number;readonly left:number;readonly right:number;readonly top:number;readonly width:number;readonly x:number;readonly y:number;toJSON():any;}declare var DOMRectReadOnly:{prototype:DOMRectReadOnly;new(x?:number,y?:number,width?:number,height?:number):DOMRectReadOnly;fromRect(other?:DOMRectInit):DOMRectReadOnly;};interface DOMStringList{readonly length:number;contains(string:string):boolean;item(index:number):string|null;[index:number]:string;}declare var DOMStringList:{prototype:DOMStringList;new():DOMStringList;};interface DOMStringMap{[name:string]:string|undefined;}declare var DOMStringMap:{prototype:DOMStringMap;new():DOMStringMap;};interface DOMTokenList{readonly length:number;value:string;toString():string;add(...tokens:string[]):void;contains(token:string):boolean;item(index:number):string|null;remove(...tokens:string[]):void;replace(token:string,newToken:string):boolean;supports(token:string):boolean;toggle(token:string,force?:boolean):boolean;forEach(callbackfn:(value:string,key:number,parent:DOMTokenList)=>void,thisArg?:any):void;[index:number]:string;}declare var DOMTokenList:{prototype:DOMTokenList;new():DOMTokenList;};interface DataTransfer{dropEffect:\"none\"|\"copy\"|\"link\"|\"move\";effectAllowed:\"none\"|\"copy\"|\"copyLink\"|\"copyMove\"|\"link\"|\"linkMove\"|\"move\"|\"all\"|\"uninitialized\";readonly files:FileList;readonly items:DataTransferItemList;readonly types:ReadonlyArray<string>;clearData(format?:string):void;getData(format:string):string;setData(format:string,data:string):void;setDragImage(image:Element,x:number,y:number):void;}declare var DataTransfer:{prototype:DataTransfer;new():DataTransfer;};interface DataTransferItem{readonly kind:string;readonly type:string;getAsFile():File|null;getAsString(callback:FunctionStringCallback|null):void;webkitGetAsEntry():FileSystemEntry|null;}declare var DataTransferItem:{prototype:DataTransferItem;new():DataTransferItem;};interface DataTransferItemList{readonly length:number;add(data:string,type:string):DataTransferItem|null;add(data:File):DataTransferItem|null;clear():void;remove(index:number):void;[index:number]:DataTransferItem;}declare var DataTransferItemList:{prototype:DataTransferItemList;new():DataTransferItemList;};interface DelayNode extends AudioNode{readonly delayTime:AudioParam;}declare var DelayNode:{prototype:DelayNode;new(context:BaseAudioContext,options?:DelayOptions):DelayNode;};interface DeviceMotionEvent extends Event{readonly acceleration:DeviceMotionEventAcceleration|null;readonly accelerationIncludingGravity:DeviceMotionEventAcceleration|null;readonly interval:number;readonly rotationRate:DeviceMotionEventRotationRate|null;}declare var DeviceMotionEvent:{prototype:DeviceMotionEvent;new(type:string,eventInitDict?:DeviceMotionEventInit):DeviceMotionEvent;};interface DeviceMotionEventAcceleration{readonly x:number|null;readonly y:number|null;readonly z:number|null;}interface DeviceMotionEventRotationRate{readonly alpha:number|null;readonly beta:number|null;readonly gamma:number|null;}interface DeviceOrientationEvent extends Event{readonly absolute:boolean;readonly alpha:number|null;readonly beta:number|null;readonly gamma:number|null;}declare var DeviceOrientationEvent:{prototype:DeviceOrientationEvent;new(type:string,eventInitDict?:DeviceOrientationEventInit):DeviceOrientationEvent;};interface DocumentEventMap extends DocumentAndElementEventHandlersEventMap,GlobalEventHandlersEventMap{\"DOMContentLoaded\":Event;\"fullscreenchange\":Event;\"fullscreenerror\":Event;\"pointerlockchange\":Event;\"pointerlockerror\":Event;\"readystatechange\":Event;\"visibilitychange\":Event;}interface Document extends Node,DocumentAndElementEventHandlers,DocumentOrShadowRoot,FontFaceSource,GlobalEventHandlers,NonElementParentNode,ParentNode,XPathEvaluatorBase{readonly URL:string;alinkColor:string;readonly all:HTMLAllCollection;readonly anchors:HTMLCollectionOf<HTMLAnchorElement>;readonly applets:HTMLCollection;bgColor:string;body:HTMLElement;readonly characterSet:string;readonly charset:string;readonly compatMode:string;readonly contentType:string;cookie:string;readonly currentScript:HTMLOrSVGScriptElement|null;readonly defaultView:(WindowProxy&typeof globalThis)|null;designMode:string;dir:string;readonly doctype:DocumentType|null;readonly documentElement:HTMLElement;readonly documentURI:string;domain:string;readonly embeds:HTMLCollectionOf<HTMLEmbedElement>;fgColor:string;readonly forms:HTMLCollectionOf<HTMLFormElement>;readonly fullscreen:boolean;readonly fullscreenEnabled:boolean;readonly head:HTMLHeadElement;readonly hidden:boolean;readonly images:HTMLCollectionOf<HTMLImageElement>;readonly implementation:DOMImplementation;readonly inputEncoding:string;readonly lastModified:string;linkColor:string;readonly links:HTMLCollectionOf<HTMLAnchorElement|HTMLAreaElement>;get location():Location;set location(href:string|Location);onfullscreenchange:((this:Document,ev:Event)=>any)|null;onfullscreenerror:((this:Document,ev:Event)=>any)|null;onpointerlockchange:((this:Document,ev:Event)=>any)|null;onpointerlockerror:((this:Document,ev:Event)=>any)|null;onreadystatechange:((this:Document,ev:Event)=>any)|null;onvisibilitychange:((this:Document,ev:Event)=>any)|null;readonly ownerDocument:null;readonly pictureInPictureEnabled:boolean;readonly plugins:HTMLCollectionOf<HTMLEmbedElement>;readonly readyState:DocumentReadyState;readonly referrer:string;readonly rootElement:SVGSVGElement|null;readonly scripts:HTMLCollectionOf<HTMLScriptElement>;readonly scrollingElement:Element|null;readonly timeline:DocumentTimeline;title:string;readonly visibilityState:DocumentVisibilityState;vlinkColor:string;adoptNode<T extends Node>(node:T):T;captureEvents():void;caretRangeFromPoint(x:number,y:number):Range|null;clear():void;close():void;createAttribute(localName:string):Attr;createAttributeNS(namespace:string|null,qualifiedName:string):Attr;createCDATASection(data:string):CDATASection;createComment(data:string):Comment;createDocumentFragment():DocumentFragment;createElement<K extends keyof HTMLElementTagNameMap>(tagName:K,options?:ElementCreationOptions):HTMLElementTagNameMap[K];createElement<K extends keyof HTMLElementDeprecatedTagNameMap>(tagName:K,options?:ElementCreationOptions):HTMLElementDeprecatedTagNameMap[K];createElement(tagName:string,options?:ElementCreationOptions):HTMLElement;createElementNS(namespaceURI:\"http://www.w3.org/1999/xhtml\",qualifiedName:string):HTMLElement;createElementNS<K extends keyof SVGElementTagNameMap>(namespaceURI:\"http://www.w3.org/2000/svg\",qualifiedName:K):SVGElementTagNameMap[K];createElementNS(namespaceURI:\"http://www.w3.org/2000/svg\",qualifiedName:string):SVGElement;createElementNS(namespaceURI:string|null,qualifiedName:string,options?:ElementCreationOptions):Element;createElementNS(namespace:string|null,qualifiedName:string,options?:string|ElementCreationOptions):Element;createEvent(eventInterface:\"AnimationEvent\"):AnimationEvent;createEvent(eventInterface:\"AnimationPlaybackEvent\"):AnimationPlaybackEvent;createEvent(eventInterface:\"AudioProcessingEvent\"):AudioProcessingEvent;createEvent(eventInterface:\"BeforeUnloadEvent\"):BeforeUnloadEvent;createEvent(eventInterface:\"BlobEvent\"):BlobEvent;createEvent(eventInterface:\"ClipboardEvent\"):ClipboardEvent;createEvent(eventInterface:\"CloseEvent\"):CloseEvent;createEvent(eventInterface:\"CompositionEvent\"):CompositionEvent;createEvent(eventInterface:\"CustomEvent\"):CustomEvent;createEvent(eventInterface:\"DeviceMotionEvent\"):DeviceMotionEvent;createEvent(eventInterface:\"DeviceOrientationEvent\"):DeviceOrientationEvent;createEvent(eventInterface:\"DragEvent\"):DragEvent;createEvent(eventInterface:\"ErrorEvent\"):ErrorEvent;createEvent(eventInterface:\"Event\"):Event;createEvent(eventInterface:\"Events\"):Event;createEvent(eventInterface:\"FocusEvent\"):FocusEvent;createEvent(eventInterface:\"FontFaceSetLoadEvent\"):FontFaceSetLoadEvent;createEvent(eventInterface:\"FormDataEvent\"):FormDataEvent;createEvent(eventInterface:\"GamepadEvent\"):GamepadEvent;createEvent(eventInterface:\"HashChangeEvent\"):HashChangeEvent;createEvent(eventInterface:\"IDBVersionChangeEvent\"):IDBVersionChangeEvent;createEvent(eventInterface:\"InputEvent\"):InputEvent;createEvent(eventInterface:\"KeyboardEvent\"):KeyboardEvent;createEvent(eventInterface:\"MIDIConnectionEvent\"):MIDIConnectionEvent;createEvent(eventInterface:\"MIDIMessageEvent\"):MIDIMessageEvent;createEvent(eventInterface:\"MediaEncryptedEvent\"):MediaEncryptedEvent;createEvent(eventInterface:\"MediaKeyMessageEvent\"):MediaKeyMessageEvent;createEvent(eventInterface:\"MediaQueryListEvent\"):MediaQueryListEvent;createEvent(eventInterface:\"MediaRecorderErrorEvent\"):MediaRecorderErrorEvent;createEvent(eventInterface:\"MediaStreamTrackEvent\"):MediaStreamTrackEvent;createEvent(eventInterface:\"MessageEvent\"):MessageEvent;createEvent(eventInterface:\"MouseEvent\"):MouseEvent;createEvent(eventInterface:\"MouseEvents\"):MouseEvent;createEvent(eventInterface:\"MutationEvent\"):MutationEvent;createEvent(eventInterface:\"MutationEvents\"):MutationEvent;createEvent(eventInterface:\"OfflineAudioCompletionEvent\"):OfflineAudioCompletionEvent;createEvent(eventInterface:\"PageTransitionEvent\"):PageTransitionEvent;createEvent(eventInterface:\"PaymentMethodChangeEvent\"):PaymentMethodChangeEvent;createEvent(eventInterface:\"PaymentRequestUpdateEvent\"):PaymentRequestUpdateEvent;createEvent(eventInterface:\"PointerEvent\"):PointerEvent;createEvent(eventInterface:\"PopStateEvent\"):PopStateEvent;createEvent(eventInterface:\"ProgressEvent\"):ProgressEvent;createEvent(eventInterface:\"PromiseRejectionEvent\"):PromiseRejectionEvent;createEvent(eventInterface:\"RTCDTMFToneChangeEvent\"):RTCDTMFToneChangeEvent;createEvent(eventInterface:\"RTCDataChannelEvent\"):RTCDataChannelEvent;createEvent(eventInterface:\"RTCErrorEvent\"):RTCErrorEvent;createEvent(eventInterface:\"RTCPeerConnectionIceErrorEvent\"):RTCPeerConnectionIceErrorEvent;createEvent(eventInterface:\"RTCPeerConnectionIceEvent\"):RTCPeerConnectionIceEvent;createEvent(eventInterface:\"RTCTrackEvent\"):RTCTrackEvent;createEvent(eventInterface:\"SecurityPolicyViolationEvent\"):SecurityPolicyViolationEvent;createEvent(eventInterface:\"SpeechSynthesisErrorEvent\"):SpeechSynthesisErrorEvent;createEvent(eventInterface:\"SpeechSynthesisEvent\"):SpeechSynthesisEvent;createEvent(eventInterface:\"StorageEvent\"):StorageEvent;createEvent(eventInterface:\"SubmitEvent\"):SubmitEvent;createEvent(eventInterface:\"TouchEvent\"):TouchEvent;createEvent(eventInterface:\"TrackEvent\"):TrackEvent;createEvent(eventInterface:\"TransitionEvent\"):TransitionEvent;createEvent(eventInterface:\"UIEvent\"):UIEvent;createEvent(eventInterface:\"UIEvents\"):UIEvent;createEvent(eventInterface:\"WebGLContextEvent\"):WebGLContextEvent;createEvent(eventInterface:\"WheelEvent\"):WheelEvent;createEvent(eventInterface:string):Event;createNodeIterator(root:Node,whatToShow?:number,filter?:NodeFilter|null):NodeIterator;createProcessingInstruction(target:string,data:string):ProcessingInstruction;createRange():Range;createTextNode(data:string):Text;createTreeWalker(root:Node,whatToShow?:number,filter?:NodeFilter|null):TreeWalker;execCommand(commandId:string,showUI?:boolean,value?:string):boolean;exitFullscreen():Promise<void>;exitPictureInPicture():Promise<void>;exitPointerLock():void;getElementById(elementId:string):HTMLElement|null;getElementsByClassName(classNames:string):HTMLCollectionOf<Element>;getElementsByName(elementName:string):NodeListOf<HTMLElement>;getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName:K):HTMLCollectionOf<HTMLElementTagNameMap[K]>;getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName:K):HTMLCollectionOf<SVGElementTagNameMap[K]>;getElementsByTagName(qualifiedName:string):HTMLCollectionOf<Element>;getElementsByTagNameNS(namespaceURI:\"http://www.w3.org/1999/xhtml\",localName:string):HTMLCollectionOf<HTMLElement>;getElementsByTagNameNS(namespaceURI:\"http://www.w3.org/2000/svg\",localName:string):HTMLCollectionOf<SVGElement>;getElementsByTagNameNS(namespace:string|null,localName:string):HTMLCollectionOf<Element>;getSelection():Selection|null;hasFocus():boolean;hasStorageAccess():Promise<boolean>;importNode<T extends Node>(node:T,deep?:boolean):T;open(unused1?:string,unused2?:string):Document;open(url:string|URL,name:string,features:string):WindowProxy|null;queryCommandEnabled(commandId:string):boolean;queryCommandIndeterm(commandId:string):boolean;queryCommandState(commandId:string):boolean;queryCommandSupported(commandId:string):boolean;queryCommandValue(commandId:string):string;releaseEvents():void;requestStorageAccess():Promise<void>;write(...text:string[]):void;writeln(...text:string[]):void;addEventListener<K extends keyof DocumentEventMap>(type:K,listener:(this:Document,ev:DocumentEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof DocumentEventMap>(type:K,listener:(this:Document,ev:DocumentEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var Document:{prototype:Document;new():Document;};interface DocumentAndElementEventHandlersEventMap{\"copy\":ClipboardEvent;\"cut\":ClipboardEvent;\"paste\":ClipboardEvent;}interface DocumentAndElementEventHandlers{oncopy:((this:DocumentAndElementEventHandlers,ev:ClipboardEvent)=>any)|null;oncut:((this:DocumentAndElementEventHandlers,ev:ClipboardEvent)=>any)|null;onpaste:((this:DocumentAndElementEventHandlers,ev:ClipboardEvent)=>any)|null;addEventListener<K extends keyof DocumentAndElementEventHandlersEventMap>(type:K,listener:(this:DocumentAndElementEventHandlers,ev:DocumentAndElementEventHandlersEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof DocumentAndElementEventHandlersEventMap>(type:K,listener:(this:DocumentAndElementEventHandlers,ev:DocumentAndElementEventHandlersEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}interface DocumentFragment extends Node,NonElementParentNode,ParentNode{readonly ownerDocument:Document;getElementById(elementId:string):HTMLElement|null;}declare var DocumentFragment:{prototype:DocumentFragment;new():DocumentFragment;};interface DocumentOrShadowRoot{readonly activeElement:Element|null;readonly fullscreenElement:Element|null;readonly pictureInPictureElement:Element|null;readonly pointerLockElement:Element|null;readonly styleSheets:StyleSheetList;elementFromPoint(x:number,y:number):Element|null;elementsFromPoint(x:number,y:number):Element[];getAnimations():Animation[];}interface DocumentTimeline extends AnimationTimeline{}declare var DocumentTimeline:{prototype:DocumentTimeline;new(options?:DocumentTimelineOptions):DocumentTimeline;};interface DocumentType extends Node,ChildNode{readonly name:string;readonly ownerDocument:Document;readonly publicId:string;readonly systemId:string;}declare var DocumentType:{prototype:DocumentType;new():DocumentType;};interface DragEvent extends MouseEvent{readonly dataTransfer:DataTransfer|null;}declare var DragEvent:{prototype:DragEvent;new(type:string,eventInitDict?:DragEventInit):DragEvent;};interface DynamicsCompressorNode extends AudioNode{readonly attack:AudioParam;readonly knee:AudioParam;readonly ratio:AudioParam;readonly reduction:number;readonly release:AudioParam;readonly threshold:AudioParam;}declare var DynamicsCompressorNode:{prototype:DynamicsCompressorNode;new(context:BaseAudioContext,options?:DynamicsCompressorOptions):DynamicsCompressorNode;};interface EXT_blend_minmax{readonly MAX_EXT:GLenum;readonly MIN_EXT:GLenum;}interface EXT_color_buffer_float{}interface EXT_color_buffer_half_float{readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT:GLenum;readonly RGB16F_EXT:GLenum;readonly RGBA16F_EXT:GLenum;readonly UNSIGNED_NORMALIZED_EXT:GLenum;}interface EXT_float_blend{}interface EXT_frag_depth{}interface EXT_sRGB{readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT:GLenum;readonly SRGB8_ALPHA8_EXT:GLenum;readonly SRGB_ALPHA_EXT:GLenum;readonly SRGB_EXT:GLenum;}interface EXT_shader_texture_lod{}interface EXT_texture_compression_rgtc{readonly COMPRESSED_RED_GREEN_RGTC2_EXT:GLenum;readonly COMPRESSED_RED_RGTC1_EXT:GLenum;readonly COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT:GLenum;readonly COMPRESSED_SIGNED_RED_RGTC1_EXT:GLenum;}interface EXT_texture_filter_anisotropic{readonly MAX_TEXTURE_MAX_ANISOTROPY_EXT:GLenum;readonly TEXTURE_MAX_ANISOTROPY_EXT:GLenum;}interface ElementEventMap{\"fullscreenchange\":Event;\"fullscreenerror\":Event;}interface Element extends Node,ARIAMixin,Animatable,ChildNode,InnerHTML,NonDocumentTypeChildNode,ParentNode,Slottable{readonly attributes:NamedNodeMap;readonly classList:DOMTokenList;className:string;readonly clientHeight:number;readonly clientLeft:number;readonly clientTop:number;readonly clientWidth:number;id:string;readonly localName:string;readonly namespaceURI:string|null;onfullscreenchange:((this:Element,ev:Event)=>any)|null;onfullscreenerror:((this:Element,ev:Event)=>any)|null;outerHTML:string;readonly ownerDocument:Document;readonly part:DOMTokenList;readonly prefix:string|null;readonly scrollHeight:number;scrollLeft:number;scrollTop:number;readonly scrollWidth:number;readonly shadowRoot:ShadowRoot|null;slot:string;readonly tagName:string;attachShadow(init:ShadowRootInit):ShadowRoot;closest<K extends keyof HTMLElementTagNameMap>(selector:K):HTMLElementTagNameMap[K]|null;closest<K extends keyof SVGElementTagNameMap>(selector:K):SVGElementTagNameMap[K]|null;closest<E extends Element=Element>(selectors:string):E|null;getAttribute(qualifiedName:string):string|null;getAttributeNS(namespace:string|null,localName:string):string|null;getAttributeNames():string[];getAttributeNode(qualifiedName:string):Attr|null;getAttributeNodeNS(namespace:string|null,localName:string):Attr|null;getBoundingClientRect():DOMRect;getClientRects():DOMRectList;getElementsByClassName(classNames:string):HTMLCollectionOf<Element>;getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName:K):HTMLCollectionOf<HTMLElementTagNameMap[K]>;getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName:K):HTMLCollectionOf<SVGElementTagNameMap[K]>;getElementsByTagName(qualifiedName:string):HTMLCollectionOf<Element>;getElementsByTagNameNS(namespaceURI:\"http://www.w3.org/1999/xhtml\",localName:string):HTMLCollectionOf<HTMLElement>;getElementsByTagNameNS(namespaceURI:\"http://www.w3.org/2000/svg\",localName:string):HTMLCollectionOf<SVGElement>;getElementsByTagNameNS(namespace:string|null,localName:string):HTMLCollectionOf<Element>;hasAttribute(qualifiedName:string):boolean;hasAttributeNS(namespace:string|null,localName:string):boolean;hasAttributes():boolean;hasPointerCapture(pointerId:number):boolean;insertAdjacentElement(where:InsertPosition,element:Element):Element|null;insertAdjacentHTML(position:InsertPosition,text:string):void;insertAdjacentText(where:InsertPosition,data:string):void;matches(selectors:string):boolean;releasePointerCapture(pointerId:number):void;removeAttribute(qualifiedName:string):void;removeAttributeNS(namespace:string|null,localName:string):void;removeAttributeNode(attr:Attr):Attr;requestFullscreen(options?:FullscreenOptions):Promise<void>;requestPointerLock():void;scroll(options?:ScrollToOptions):void;scroll(x:number,y:number):void;scrollBy(options?:ScrollToOptions):void;scrollBy(x:number,y:number):void;scrollIntoView(arg?:boolean|ScrollIntoViewOptions):void;scrollTo(options?:ScrollToOptions):void;scrollTo(x:number,y:number):void;setAttribute(qualifiedName:string,value:string):void;setAttributeNS(namespace:string|null,qualifiedName:string,value:string):void;setAttributeNode(attr:Attr):Attr|null;setAttributeNodeNS(attr:Attr):Attr|null;setPointerCapture(pointerId:number):void;toggleAttribute(qualifiedName:string,force?:boolean):boolean;webkitMatchesSelector(selectors:string):boolean;addEventListener<K extends keyof ElementEventMap>(type:K,listener:(this:Element,ev:ElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof ElementEventMap>(type:K,listener:(this:Element,ev:ElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var Element:{prototype:Element;new():Element;};interface ElementCSSInlineStyle{readonly style:CSSStyleDeclaration;}interface ElementContentEditable{contentEditable:string;enterKeyHint:string;inputMode:string;readonly isContentEditable:boolean;}interface ElementInternals extends ARIAMixin{readonly form:HTMLFormElement|null;readonly labels:NodeList;readonly shadowRoot:ShadowRoot|null;readonly willValidate:boolean;setFormValue(value:File|string|FormData|null,state?:File|string|FormData|null):void;}declare var ElementInternals:{prototype:ElementInternals;new():ElementInternals;};interface ErrorEvent extends Event{readonly colno:number;readonly error:any;readonly filename:string;readonly lineno:number;readonly message:string;}declare var ErrorEvent:{prototype:ErrorEvent;new(type:string,eventInitDict?:ErrorEventInit):ErrorEvent;};interface Event{readonly bubbles:boolean;cancelBubble:boolean;readonly cancelable:boolean;readonly composed:boolean;readonly currentTarget:EventTarget|null;readonly defaultPrevented:boolean;readonly eventPhase:number;readonly isTrusted:boolean;returnValue:boolean;readonly srcElement:EventTarget|null;readonly target:EventTarget|null;readonly timeStamp:DOMHighResTimeStamp;readonly type:string;composedPath():EventTarget[];initEvent(type:string,bubbles?:boolean,cancelable?:boolean):void;preventDefault():void;stopImmediatePropagation():void;stopPropagation():void;readonly AT_TARGET:number;readonly BUBBLING_PHASE:number;readonly CAPTURING_PHASE:number;readonly NONE:number;}declare var Event:{prototype:Event;new(type:string,eventInitDict?:EventInit):Event;readonly AT_TARGET:number;readonly BUBBLING_PHASE:number;readonly CAPTURING_PHASE:number;readonly NONE:number;};interface EventCounts{forEach(callbackfn:(value:number,key:string,parent:EventCounts)=>void,thisArg?:any):void;}declare var EventCounts:{prototype:EventCounts;new():EventCounts;};interface EventListener{(evt:Event):void;}interface EventListenerObject{handleEvent(object:Event):void;}interface EventSourceEventMap{\"error\":Event;\"message\":MessageEvent;\"open\":Event;}interface EventSource extends EventTarget{onerror:((this:EventSource,ev:Event)=>any)|null;onmessage:((this:EventSource,ev:MessageEvent)=>any)|null;onopen:((this:EventSource,ev:Event)=>any)|null;readonly readyState:number;readonly url:string;readonly withCredentials:boolean;close():void;readonly CLOSED:number;readonly CONNECTING:number;readonly OPEN:number;addEventListener<K extends keyof EventSourceEventMap>(type:K,listener:(this:EventSource,ev:EventSourceEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:(this:EventSource,event:MessageEvent)=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof EventSourceEventMap>(type:K,listener:(this:EventSource,ev:EventSourceEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:(this:EventSource,event:MessageEvent)=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var EventSource:{prototype:EventSource;new(url:string|URL,eventSourceInitDict?:EventSourceInit):EventSource;readonly CLOSED:number;readonly CONNECTING:number;readonly OPEN:number;};interface EventTarget{addEventListener(type:string,callback:EventListenerOrEventListenerObject|null,options?:AddEventListenerOptions|boolean):void;dispatchEvent(event:Event):boolean;removeEventListener(type:string,callback:EventListenerOrEventListenerObject|null,options?:EventListenerOptions|boolean):void;}declare var EventTarget:{prototype:EventTarget;new():EventTarget;};interface External{AddSearchProvider():void;IsSearchProviderInstalled():void;}declare var External:{prototype:External;new():External;};interface File extends Blob{readonly lastModified:number;readonly name:string;readonly webkitRelativePath:string;}declare var File:{prototype:File;new(fileBits:BlobPart[],fileName:string,options?:FilePropertyBag):File;};interface FileList{readonly length:number;item(index:number):File|null;[index:number]:File;}declare var FileList:{prototype:FileList;new():FileList;};interface FileReaderEventMap{\"abort\":ProgressEvent<FileReader>;\"error\":ProgressEvent<FileReader>;\"load\":ProgressEvent<FileReader>;\"loadend\":ProgressEvent<FileReader>;\"loadstart\":ProgressEvent<FileReader>;\"progress\":ProgressEvent<FileReader>;}interface FileReader extends EventTarget{readonly error:DOMException|null;onabort:((this:FileReader,ev:ProgressEvent<FileReader>)=>any)|null;onerror:((this:FileReader,ev:ProgressEvent<FileReader>)=>any)|null;onload:((this:FileReader,ev:ProgressEvent<FileReader>)=>any)|null;onloadend:((this:FileReader,ev:ProgressEvent<FileReader>)=>any)|null;onloadstart:((this:FileReader,ev:ProgressEvent<FileReader>)=>any)|null;onprogress:((this:FileReader,ev:ProgressEvent<FileReader>)=>any)|null;readonly readyState:number;readonly result:string|ArrayBuffer|null;abort():void;readAsArrayBuffer(blob:Blob):void;readAsBinaryString(blob:Blob):void;readAsDataURL(blob:Blob):void;readAsText(blob:Blob,encoding?:string):void;readonly DONE:number;readonly EMPTY:number;readonly LOADING:number;addEventListener<K extends keyof FileReaderEventMap>(type:K,listener:(this:FileReader,ev:FileReaderEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof FileReaderEventMap>(type:K,listener:(this:FileReader,ev:FileReaderEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var FileReader:{prototype:FileReader;new():FileReader;readonly DONE:number;readonly EMPTY:number;readonly LOADING:number;};interface FileSystem{readonly name:string;readonly root:FileSystemDirectoryEntry;}declare var FileSystem:{prototype:FileSystem;new():FileSystem;};interface FileSystemDirectoryEntry extends FileSystemEntry{createReader():FileSystemDirectoryReader;getDirectory(path?:string|null,options?:FileSystemFlags,successCallback?:FileSystemEntryCallback,errorCallback?:ErrorCallback):void;getFile(path?:string|null,options?:FileSystemFlags,successCallback?:FileSystemEntryCallback,errorCallback?:ErrorCallback):void;}declare var FileSystemDirectoryEntry:{prototype:FileSystemDirectoryEntry;new():FileSystemDirectoryEntry;};interface FileSystemDirectoryHandle extends FileSystemHandle{readonly kind:\"directory\";getDirectoryHandle(name:string,options?:FileSystemGetDirectoryOptions):Promise<FileSystemDirectoryHandle>;getFileHandle(name:string,options?:FileSystemGetFileOptions):Promise<FileSystemFileHandle>;removeEntry(name:string,options?:FileSystemRemoveOptions):Promise<void>;resolve(possibleDescendant:FileSystemHandle):Promise<string[]|null>;}declare var FileSystemDirectoryHandle:{prototype:FileSystemDirectoryHandle;new():FileSystemDirectoryHandle;};interface FileSystemDirectoryReader{readEntries(successCallback:FileSystemEntriesCallback,errorCallback?:ErrorCallback):void;}declare var FileSystemDirectoryReader:{prototype:FileSystemDirectoryReader;new():FileSystemDirectoryReader;};interface FileSystemEntry{readonly filesystem:FileSystem;readonly fullPath:string;readonly isDirectory:boolean;readonly isFile:boolean;readonly name:string;getParent(successCallback?:FileSystemEntryCallback,errorCallback?:ErrorCallback):void;}declare var FileSystemEntry:{prototype:FileSystemEntry;new():FileSystemEntry;};interface FileSystemFileEntry extends FileSystemEntry{file(successCallback:FileCallback,errorCallback?:ErrorCallback):void;}declare var FileSystemFileEntry:{prototype:FileSystemFileEntry;new():FileSystemFileEntry;};interface FileSystemFileHandle extends FileSystemHandle{readonly kind:\"file\";getFile():Promise<File>;}declare var FileSystemFileHandle:{prototype:FileSystemFileHandle;new():FileSystemFileHandle;};interface FileSystemHandle{readonly kind:FileSystemHandleKind;readonly name:string;isSameEntry(other:FileSystemHandle):Promise<boolean>;}declare var FileSystemHandle:{prototype:FileSystemHandle;new():FileSystemHandle;};interface FocusEvent extends UIEvent{readonly relatedTarget:EventTarget|null;}declare var FocusEvent:{prototype:FocusEvent;new(type:string,eventInitDict?:FocusEventInit):FocusEvent;};interface FontFace{ascentOverride:string;descentOverride:string;display:string;family:string;featureSettings:string;lineGapOverride:string;readonly loaded:Promise<FontFace>;readonly status:FontFaceLoadStatus;stretch:string;style:string;unicodeRange:string;variant:string;variationSettings:string;weight:string;load():Promise<FontFace>;}declare var FontFace:{prototype:FontFace;new(family:string,source:string|BinaryData,descriptors?:FontFaceDescriptors):FontFace;};interface FontFaceSetEventMap{\"loading\":Event;\"loadingdone\":Event;\"loadingerror\":Event;}interface FontFaceSet extends EventTarget{onloading:((this:FontFaceSet,ev:Event)=>any)|null;onloadingdone:((this:FontFaceSet,ev:Event)=>any)|null;onloadingerror:((this:FontFaceSet,ev:Event)=>any)|null;readonly ready:Promise<FontFaceSet>;readonly status:FontFaceSetLoadStatus;check(font:string,text?:string):boolean;load(font:string,text?:string):Promise<FontFace[]>;forEach(callbackfn:(value:FontFace,key:FontFace,parent:FontFaceSet)=>void,thisArg?:any):void;addEventListener<K extends keyof FontFaceSetEventMap>(type:K,listener:(this:FontFaceSet,ev:FontFaceSetEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof FontFaceSetEventMap>(type:K,listener:(this:FontFaceSet,ev:FontFaceSetEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var FontFaceSet:{prototype:FontFaceSet;new(initialFaces:FontFace[]):FontFaceSet;};interface FontFaceSetLoadEvent extends Event{readonly fontfaces:ReadonlyArray<FontFace>;}declare var FontFaceSetLoadEvent:{prototype:FontFaceSetLoadEvent;new(type:string,eventInitDict?:FontFaceSetLoadEventInit):FontFaceSetLoadEvent;};interface FontFaceSource{readonly fonts:FontFaceSet;}interface FormData{append(name:string,value:string|Blob,fileName?:string):void;delete(name:string):void;get(name:string):FormDataEntryValue|null;getAll(name:string):FormDataEntryValue[];has(name:string):boolean;set(name:string,value:string|Blob,fileName?:string):void;forEach(callbackfn:(value:FormDataEntryValue,key:string,parent:FormData)=>void,thisArg?:any):void;}declare var FormData:{prototype:FormData;new(form?:HTMLFormElement):FormData;};interface FormDataEvent extends Event{readonly formData:FormData;}declare var FormDataEvent:{prototype:FormDataEvent;new(type:string,eventInitDict:FormDataEventInit):FormDataEvent;};interface GainNode extends AudioNode{readonly gain:AudioParam;}declare var GainNode:{prototype:GainNode;new(context:BaseAudioContext,options?:GainOptions):GainNode;};interface Gamepad{readonly axes:ReadonlyArray<number>;readonly buttons:ReadonlyArray<GamepadButton>;readonly connected:boolean;readonly hapticActuators:ReadonlyArray<GamepadHapticActuator>;readonly id:string;readonly index:number;readonly mapping:GamepadMappingType;readonly timestamp:DOMHighResTimeStamp;}declare var Gamepad:{prototype:Gamepad;new():Gamepad;};interface GamepadButton{readonly pressed:boolean;readonly touched:boolean;readonly value:number;}declare var GamepadButton:{prototype:GamepadButton;new():GamepadButton;};interface GamepadEvent extends Event{readonly gamepad:Gamepad;}declare var GamepadEvent:{prototype:GamepadEvent;new(type:string,eventInitDict:GamepadEventInit):GamepadEvent;};interface GamepadHapticActuator{readonly type:GamepadHapticActuatorType;}declare var GamepadHapticActuator:{prototype:GamepadHapticActuator;new():GamepadHapticActuator;};interface GenericTransformStream{readonly readable:ReadableStream;readonly writable:WritableStream;}interface Geolocation{clearWatch(watchId:number):void;getCurrentPosition(successCallback:PositionCallback,errorCallback?:PositionErrorCallback|null,options?:PositionOptions):void;watchPosition(successCallback:PositionCallback,errorCallback?:PositionErrorCallback|null,options?:PositionOptions):number;}declare var Geolocation:{prototype:Geolocation;new():Geolocation;};interface GeolocationCoordinates{readonly accuracy:number;readonly altitude:number|null;readonly altitudeAccuracy:number|null;readonly heading:number|null;readonly latitude:number;readonly longitude:number;readonly speed:number|null;}declare var GeolocationCoordinates:{prototype:GeolocationCoordinates;new():GeolocationCoordinates;};interface GeolocationPosition{readonly coords:GeolocationCoordinates;readonly timestamp:EpochTimeStamp;}declare var GeolocationPosition:{prototype:GeolocationPosition;new():GeolocationPosition;};interface GeolocationPositionError{readonly code:number;readonly message:string;readonly PERMISSION_DENIED:number;readonly POSITION_UNAVAILABLE:number;readonly TIMEOUT:number;}declare var GeolocationPositionError:{prototype:GeolocationPositionError;new():GeolocationPositionError;readonly PERMISSION_DENIED:number;readonly POSITION_UNAVAILABLE:number;readonly TIMEOUT:number;};interface GlobalEventHandlersEventMap{\"abort\":UIEvent;\"animationcancel\":AnimationEvent;\"animationend\":AnimationEvent;\"animationiteration\":AnimationEvent;\"animationstart\":AnimationEvent;\"auxclick\":MouseEvent;\"beforeinput\":InputEvent;\"blur\":FocusEvent;\"canplay\":Event;\"canplaythrough\":Event;\"change\":Event;\"click\":MouseEvent;\"close\":Event;\"compositionend\":CompositionEvent;\"compositionstart\":CompositionEvent;\"compositionupdate\":CompositionEvent;\"contextmenu\":MouseEvent;\"cuechange\":Event;\"dblclick\":MouseEvent;\"drag\":DragEvent;\"dragend\":DragEvent;\"dragenter\":DragEvent;\"dragleave\":DragEvent;\"dragover\":DragEvent;\"dragstart\":DragEvent;\"drop\":DragEvent;\"durationchange\":Event;\"emptied\":Event;\"ended\":Event;\"error\":ErrorEvent;\"focus\":FocusEvent;\"focusin\":FocusEvent;\"focusout\":FocusEvent;\"formdata\":FormDataEvent;\"gotpointercapture\":PointerEvent;\"input\":Event;\"invalid\":Event;\"keydown\":KeyboardEvent;\"keypress\":KeyboardEvent;\"keyup\":KeyboardEvent;\"load\":Event;\"loadeddata\":Event;\"loadedmetadata\":Event;\"loadstart\":Event;\"lostpointercapture\":PointerEvent;\"mousedown\":MouseEvent;\"mouseenter\":MouseEvent;\"mouseleave\":MouseEvent;\"mousemove\":MouseEvent;\"mouseout\":MouseEvent;\"mouseover\":MouseEvent;\"mouseup\":MouseEvent;\"pause\":Event;\"play\":Event;\"playing\":Event;\"pointercancel\":PointerEvent;\"pointerdown\":PointerEvent;\"pointerenter\":PointerEvent;\"pointerleave\":PointerEvent;\"pointermove\":PointerEvent;\"pointerout\":PointerEvent;\"pointerover\":PointerEvent;\"pointerup\":PointerEvent;\"progress\":ProgressEvent;\"ratechange\":Event;\"reset\":Event;\"resize\":UIEvent;\"scroll\":Event;\"securitypolicyviolation\":SecurityPolicyViolationEvent;\"seeked\":Event;\"seeking\":Event;\"select\":Event;\"selectionchange\":Event;\"selectstart\":Event;\"slotchange\":Event;\"stalled\":Event;\"submit\":SubmitEvent;\"suspend\":Event;\"timeupdate\":Event;\"toggle\":Event;\"touchcancel\":TouchEvent;\"touchend\":TouchEvent;\"touchmove\":TouchEvent;\"touchstart\":TouchEvent;\"transitioncancel\":TransitionEvent;\"transitionend\":TransitionEvent;\"transitionrun\":TransitionEvent;\"transitionstart\":TransitionEvent;\"volumechange\":Event;\"waiting\":Event;\"webkitanimationend\":Event;\"webkitanimationiteration\":Event;\"webkitanimationstart\":Event;\"webkittransitionend\":Event;\"wheel\":WheelEvent;}interface GlobalEventHandlers{onabort:((this:GlobalEventHandlers,ev:UIEvent)=>any)|null;onanimationcancel:((this:GlobalEventHandlers,ev:AnimationEvent)=>any)|null;onanimationend:((this:GlobalEventHandlers,ev:AnimationEvent)=>any)|null;onanimationiteration:((this:GlobalEventHandlers,ev:AnimationEvent)=>any)|null;onanimationstart:((this:GlobalEventHandlers,ev:AnimationEvent)=>any)|null;onauxclick:((this:GlobalEventHandlers,ev:MouseEvent)=>any)|null;onblur:((this:GlobalEventHandlers,ev:FocusEvent)=>any)|null;oncanplay:((this:GlobalEventHandlers,ev:Event)=>any)|null;oncanplaythrough:((this:GlobalEventHandlers,ev:Event)=>any)|null;onchange:((this:GlobalEventHandlers,ev:Event)=>any)|null;onclick:((this:GlobalEventHandlers,ev:MouseEvent)=>any)|null;onclose:((this:GlobalEventHandlers,ev:Event)=>any)|null;oncontextmenu:((this:GlobalEventHandlers,ev:MouseEvent)=>any)|null;oncuechange:((this:GlobalEventHandlers,ev:Event)=>any)|null;ondblclick:((this:GlobalEventHandlers,ev:MouseEvent)=>any)|null;ondrag:((this:GlobalEventHandlers,ev:DragEvent)=>any)|null;ondragend:((this:GlobalEventHandlers,ev:DragEvent)=>any)|null;ondragenter:((this:GlobalEventHandlers,ev:DragEvent)=>any)|null;ondragleave:((this:GlobalEventHandlers,ev:DragEvent)=>any)|null;ondragover:((this:GlobalEventHandlers,ev:DragEvent)=>any)|null;ondragstart:((this:GlobalEventHandlers,ev:DragEvent)=>any)|null;ondrop:((this:GlobalEventHandlers,ev:DragEvent)=>any)|null;ondurationchange:((this:GlobalEventHandlers,ev:Event)=>any)|null;onemptied:((this:GlobalEventHandlers,ev:Event)=>any)|null;onended:((this:GlobalEventHandlers,ev:Event)=>any)|null;onerror:OnErrorEventHandler;onfocus:((this:GlobalEventHandlers,ev:FocusEvent)=>any)|null;onformdata:((this:GlobalEventHandlers,ev:FormDataEvent)=>any)|null;ongotpointercapture:((this:GlobalEventHandlers,ev:PointerEvent)=>any)|null;oninput:((this:GlobalEventHandlers,ev:Event)=>any)|null;oninvalid:((this:GlobalEventHandlers,ev:Event)=>any)|null;onkeydown:((this:GlobalEventHandlers,ev:KeyboardEvent)=>any)|null;onkeypress:((this:GlobalEventHandlers,ev:KeyboardEvent)=>any)|null;onkeyup:((this:GlobalEventHandlers,ev:KeyboardEvent)=>any)|null;onload:((this:GlobalEventHandlers,ev:Event)=>any)|null;onloadeddata:((this:GlobalEventHandlers,ev:Event)=>any)|null;onloadedmetadata:((this:GlobalEventHandlers,ev:Event)=>any)|null;onloadstart:((this:GlobalEventHandlers,ev:Event)=>any)|null;onlostpointercapture:((this:GlobalEventHandlers,ev:PointerEvent)=>any)|null;onmousedown:((this:GlobalEventHandlers,ev:MouseEvent)=>any)|null;onmouseenter:((this:GlobalEventHandlers,ev:MouseEvent)=>any)|null;onmouseleave:((this:GlobalEventHandlers,ev:MouseEvent)=>any)|null;onmousemove:((this:GlobalEventHandlers,ev:MouseEvent)=>any)|null;onmouseout:((this:GlobalEventHandlers,ev:MouseEvent)=>any)|null;onmouseover:((this:GlobalEventHandlers,ev:MouseEvent)=>any)|null;onmouseup:((this:GlobalEventHandlers,ev:MouseEvent)=>any)|null;onpause:((this:GlobalEventHandlers,ev:Event)=>any)|null;onplay:((this:GlobalEventHandlers,ev:Event)=>any)|null;onplaying:((this:GlobalEventHandlers,ev:Event)=>any)|null;onpointercancel:((this:GlobalEventHandlers,ev:PointerEvent)=>any)|null;onpointerdown:((this:GlobalEventHandlers,ev:PointerEvent)=>any)|null;onpointerenter:((this:GlobalEventHandlers,ev:PointerEvent)=>any)|null;onpointerleave:((this:GlobalEventHandlers,ev:PointerEvent)=>any)|null;onpointermove:((this:GlobalEventHandlers,ev:PointerEvent)=>any)|null;onpointerout:((this:GlobalEventHandlers,ev:PointerEvent)=>any)|null;onpointerover:((this:GlobalEventHandlers,ev:PointerEvent)=>any)|null;onpointerup:((this:GlobalEventHandlers,ev:PointerEvent)=>any)|null;onprogress:((this:GlobalEventHandlers,ev:ProgressEvent)=>any)|null;onratechange:((this:GlobalEventHandlers,ev:Event)=>any)|null;onreset:((this:GlobalEventHandlers,ev:Event)=>any)|null;onresize:((this:GlobalEventHandlers,ev:UIEvent)=>any)|null;onscroll:((this:GlobalEventHandlers,ev:Event)=>any)|null;onsecuritypolicyviolation:((this:GlobalEventHandlers,ev:SecurityPolicyViolationEvent)=>any)|null;onseeked:((this:GlobalEventHandlers,ev:Event)=>any)|null;onseeking:((this:GlobalEventHandlers,ev:Event)=>any)|null;onselect:((this:GlobalEventHandlers,ev:Event)=>any)|null;onselectionchange:((this:GlobalEventHandlers,ev:Event)=>any)|null;onselectstart:((this:GlobalEventHandlers,ev:Event)=>any)|null;onslotchange:((this:GlobalEventHandlers,ev:Event)=>any)|null;onstalled:((this:GlobalEventHandlers,ev:Event)=>any)|null;onsubmit:((this:GlobalEventHandlers,ev:SubmitEvent)=>any)|null;onsuspend:((this:GlobalEventHandlers,ev:Event)=>any)|null;ontimeupdate:((this:GlobalEventHandlers,ev:Event)=>any)|null;ontoggle:((this:GlobalEventHandlers,ev:Event)=>any)|null;ontouchcancel?:((this:GlobalEventHandlers,ev:TouchEvent)=>any)|null|undefined;ontouchend?:((this:GlobalEventHandlers,ev:TouchEvent)=>any)|null|undefined;ontouchmove?:((this:GlobalEventHandlers,ev:TouchEvent)=>any)|null|undefined;ontouchstart?:((this:GlobalEventHandlers,ev:TouchEvent)=>any)|null|undefined;ontransitioncancel:((this:GlobalEventHandlers,ev:TransitionEvent)=>any)|null;ontransitionend:((this:GlobalEventHandlers,ev:TransitionEvent)=>any)|null;ontransitionrun:((this:GlobalEventHandlers,ev:TransitionEvent)=>any)|null;ontransitionstart:((this:GlobalEventHandlers,ev:TransitionEvent)=>any)|null;onvolumechange:((this:GlobalEventHandlers,ev:Event)=>any)|null;onwaiting:((this:GlobalEventHandlers,ev:Event)=>any)|null;onwebkitanimationend:((this:GlobalEventHandlers,ev:Event)=>any)|null;onwebkitanimationiteration:((this:GlobalEventHandlers,ev:Event)=>any)|null;onwebkitanimationstart:((this:GlobalEventHandlers,ev:Event)=>any)|null;onwebkittransitionend:((this:GlobalEventHandlers,ev:Event)=>any)|null;onwheel:((this:GlobalEventHandlers,ev:WheelEvent)=>any)|null;addEventListener<K extends keyof GlobalEventHandlersEventMap>(type:K,listener:(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof GlobalEventHandlersEventMap>(type:K,listener:(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}interface HTMLAllCollection{readonly length:number;item(nameOrIndex?:string):HTMLCollection|Element|null;namedItem(name:string):HTMLCollection|Element|null;[index:number]:Element;}declare var HTMLAllCollection:{prototype:HTMLAllCollection;new():HTMLAllCollection;};interface HTMLAnchorElement extends HTMLElement,HTMLHyperlinkElementUtils{charset:string;coords:string;download:string;hreflang:string;name:string;ping:string;referrerPolicy:string;rel:string;readonly relList:DOMTokenList;rev:string;shape:string;target:string;text:string;type:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLAnchorElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLAnchorElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLAnchorElement:{prototype:HTMLAnchorElement;new():HTMLAnchorElement;};interface HTMLAreaElement extends HTMLElement,HTMLHyperlinkElementUtils{alt:string;coords:string;download:string;noHref:boolean;ping:string;referrerPolicy:string;rel:string;readonly relList:DOMTokenList;shape:string;target:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLAreaElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLAreaElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLAreaElement:{prototype:HTMLAreaElement;new():HTMLAreaElement;};interface HTMLAudioElement extends HTMLMediaElement{addEventListener<K extends keyof HTMLMediaElementEventMap>(type:K,listener:(this:HTMLAudioElement,ev:HTMLMediaElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLMediaElementEventMap>(type:K,listener:(this:HTMLAudioElement,ev:HTMLMediaElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLAudioElement:{prototype:HTMLAudioElement;new():HTMLAudioElement;};interface HTMLBRElement extends HTMLElement{clear:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLBRElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLBRElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLBRElement:{prototype:HTMLBRElement;new():HTMLBRElement;};interface HTMLBaseElement extends HTMLElement{href:string;target:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLBaseElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLBaseElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLBaseElement:{prototype:HTMLBaseElement;new():HTMLBaseElement;};interface HTMLBodyElementEventMap extends HTMLElementEventMap,WindowEventHandlersEventMap{\"orientationchange\":Event;}interface HTMLBodyElement extends HTMLElement,WindowEventHandlers{aLink:string;background:string;bgColor:string;link:string;onorientationchange:((this:HTMLBodyElement,ev:Event)=>any)|null;text:string;vLink:string;addEventListener<K extends keyof HTMLBodyElementEventMap>(type:K,listener:(this:HTMLBodyElement,ev:HTMLBodyElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLBodyElementEventMap>(type:K,listener:(this:HTMLBodyElement,ev:HTMLBodyElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLBodyElement:{prototype:HTMLBodyElement;new():HTMLBodyElement;};interface HTMLButtonElement extends HTMLElement{disabled:boolean;readonly form:HTMLFormElement|null;formAction:string;formEnctype:string;formMethod:string;formNoValidate:boolean;formTarget:string;readonly labels:NodeListOf<HTMLLabelElement>;name:string;type:string;readonly validationMessage:string;readonly validity:ValidityState;value:string;readonly willValidate:boolean;checkValidity():boolean;reportValidity():boolean;setCustomValidity(error:string):void;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLButtonElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLButtonElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLButtonElement:{prototype:HTMLButtonElement;new():HTMLButtonElement;};interface HTMLCanvasElement extends HTMLElement{height:number;width:number;captureStream(frameRequestRate?:number):MediaStream;getContext(contextId:\"2d\",options?:CanvasRenderingContext2DSettings):CanvasRenderingContext2D|null;getContext(contextId:\"bitmaprenderer\",options?:ImageBitmapRenderingContextSettings):ImageBitmapRenderingContext|null;getContext(contextId:\"webgl\",options?:WebGLContextAttributes):WebGLRenderingContext|null;getContext(contextId:\"webgl2\",options?:WebGLContextAttributes):WebGL2RenderingContext|null;getContext(contextId:string,options?:any):RenderingContext|null;toBlob(callback:BlobCallback,type?:string,quality?:any):void;toDataURL(type?:string,quality?:any):string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLCanvasElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLCanvasElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLCanvasElement:{prototype:HTMLCanvasElement;new():HTMLCanvasElement;};interface HTMLCollectionBase{readonly length:number;item(index:number):Element|null;[index:number]:Element;}interface HTMLCollection extends HTMLCollectionBase{namedItem(name:string):Element|null;}declare var HTMLCollection:{prototype:HTMLCollection;new():HTMLCollection;};interface HTMLCollectionOf<T extends Element>extends HTMLCollectionBase{item(index:number):T|null;namedItem(name:string):T|null;[index:number]:T;}interface HTMLDListElement extends HTMLElement{compact:boolean;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDListElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDListElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLDListElement:{prototype:HTMLDListElement;new():HTMLDListElement;};interface HTMLDataElement extends HTMLElement{value:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDataElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDataElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLDataElement:{prototype:HTMLDataElement;new():HTMLDataElement;};interface HTMLDataListElement extends HTMLElement{readonly options:HTMLCollectionOf<HTMLOptionElement>;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDataListElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDataListElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLDataListElement:{prototype:HTMLDataListElement;new():HTMLDataListElement;};interface HTMLDetailsElement extends HTMLElement{open:boolean;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDetailsElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDetailsElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLDetailsElement:{prototype:HTMLDetailsElement;new():HTMLDetailsElement;};interface HTMLDialogElement extends HTMLElement{open:boolean;returnValue:string;close(returnValue?:string):void;show():void;showModal():void;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDialogElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDialogElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLDialogElement:{prototype:HTMLDialogElement;new():HTMLDialogElement;};interface HTMLDirectoryElement extends HTMLElement{compact:boolean;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDirectoryElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDirectoryElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLDirectoryElement:{prototype:HTMLDirectoryElement;new():HTMLDirectoryElement;};interface HTMLDivElement extends HTMLElement{align:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDivElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLDivElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLDivElement:{prototype:HTMLDivElement;new():HTMLDivElement;};interface HTMLDocument extends Document{addEventListener<K extends keyof DocumentEventMap>(type:K,listener:(this:HTMLDocument,ev:DocumentEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof DocumentEventMap>(type:K,listener:(this:HTMLDocument,ev:DocumentEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLDocument:{prototype:HTMLDocument;new():HTMLDocument;};interface HTMLElementEventMap extends ElementEventMap,DocumentAndElementEventHandlersEventMap,GlobalEventHandlersEventMap{}interface HTMLElement extends Element,DocumentAndElementEventHandlers,ElementCSSInlineStyle,ElementContentEditable,GlobalEventHandlers,HTMLOrSVGElement{accessKey:string;readonly accessKeyLabel:string;autocapitalize:string;dir:string;draggable:boolean;hidden:boolean;innerText:string;lang:string;readonly offsetHeight:number;readonly offsetLeft:number;readonly offsetParent:Element|null;readonly offsetTop:number;readonly offsetWidth:number;outerText:string;spellcheck:boolean;title:string;translate:boolean;attachInternals():ElementInternals;click():void;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLElement:{prototype:HTMLElement;new():HTMLElement;};interface HTMLEmbedElement extends HTMLElement{align:string;height:string;name:string;src:string;type:string;width:string;getSVGDocument():Document|null;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLEmbedElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLEmbedElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLEmbedElement:{prototype:HTMLEmbedElement;new():HTMLEmbedElement;};interface HTMLFieldSetElement extends HTMLElement{disabled:boolean;readonly elements:HTMLCollection;readonly form:HTMLFormElement|null;name:string;readonly type:string;readonly validationMessage:string;readonly validity:ValidityState;readonly willValidate:boolean;checkValidity():boolean;reportValidity():boolean;setCustomValidity(error:string):void;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLFieldSetElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLFieldSetElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLFieldSetElement:{prototype:HTMLFieldSetElement;new():HTMLFieldSetElement;};interface HTMLFontElement extends HTMLElement{color:string;face:string;size:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLFontElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLFontElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLFontElement:{prototype:HTMLFontElement;new():HTMLFontElement;};interface HTMLFormControlsCollection extends HTMLCollectionBase{namedItem(name:string):RadioNodeList|Element|null;}declare var HTMLFormControlsCollection:{prototype:HTMLFormControlsCollection;new():HTMLFormControlsCollection;};interface HTMLFormElement extends HTMLElement{acceptCharset:string;action:string;autocomplete:string;readonly elements:HTMLFormControlsCollection;encoding:string;enctype:string;readonly length:number;method:string;name:string;noValidate:boolean;target:string;checkValidity():boolean;reportValidity():boolean;requestSubmit(submitter?:HTMLElement|null):void;reset():void;submit():void;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLFormElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLFormElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;[index:number]:Element;[name:string]:any;}declare var HTMLFormElement:{prototype:HTMLFormElement;new():HTMLFormElement;};interface HTMLFrameElement extends HTMLElement{readonly contentDocument:Document|null;readonly contentWindow:WindowProxy|null;frameBorder:string;longDesc:string;marginHeight:string;marginWidth:string;name:string;noResize:boolean;scrolling:string;src:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLFrameElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLFrameElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLFrameElement:{prototype:HTMLFrameElement;new():HTMLFrameElement;};interface HTMLFrameSetElementEventMap extends HTMLElementEventMap,WindowEventHandlersEventMap{}interface HTMLFrameSetElement extends HTMLElement,WindowEventHandlers{cols:string;rows:string;addEventListener<K extends keyof HTMLFrameSetElementEventMap>(type:K,listener:(this:HTMLFrameSetElement,ev:HTMLFrameSetElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLFrameSetElementEventMap>(type:K,listener:(this:HTMLFrameSetElement,ev:HTMLFrameSetElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLFrameSetElement:{prototype:HTMLFrameSetElement;new():HTMLFrameSetElement;};interface HTMLHRElement extends HTMLElement{align:string;color:string;noShade:boolean;size:string;width:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLHRElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLHRElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLHRElement:{prototype:HTMLHRElement;new():HTMLHRElement;};interface HTMLHeadElement extends HTMLElement{addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLHeadElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLHeadElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLHeadElement:{prototype:HTMLHeadElement;new():HTMLHeadElement;};interface HTMLHeadingElement extends HTMLElement{align:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLHeadingElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLHeadingElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLHeadingElement:{prototype:HTMLHeadingElement;new():HTMLHeadingElement;};interface HTMLHtmlElement extends HTMLElement{version:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLHtmlElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLHtmlElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLHtmlElement:{prototype:HTMLHtmlElement;new():HTMLHtmlElement;};interface HTMLHyperlinkElementUtils{hash:string;host:string;hostname:string;href:string;toString():string;readonly origin:string;password:string;pathname:string;port:string;protocol:string;search:string;username:string;}interface HTMLIFrameElement extends HTMLElement{align:string;allow:string;allowFullscreen:boolean;readonly contentDocument:Document|null;readonly contentWindow:WindowProxy|null;frameBorder:string;height:string;longDesc:string;marginHeight:string;marginWidth:string;name:string;referrerPolicy:ReferrerPolicy;readonly sandbox:DOMTokenList;scrolling:string;src:string;srcdoc:string;width:string;getSVGDocument():Document|null;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLIFrameElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLIFrameElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLIFrameElement:{prototype:HTMLIFrameElement;new():HTMLIFrameElement;};interface HTMLImageElement extends HTMLElement{align:string;alt:string;border:string;readonly complete:boolean;crossOrigin:string|null;readonly currentSrc:string;decoding:\"async\"|\"sync\"|\"auto\";height:number;hspace:number;isMap:boolean;loading:\"eager\"|\"lazy\";longDesc:string;lowsrc:string;name:string;readonly naturalHeight:number;readonly naturalWidth:number;referrerPolicy:string;sizes:string;src:string;srcset:string;useMap:string;vspace:number;width:number;readonly x:number;readonly y:number;decode():Promise<void>;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLImageElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLImageElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLImageElement:{prototype:HTMLImageElement;new():HTMLImageElement;};interface HTMLInputElement extends HTMLElement{accept:string;align:string;alt:string;autocomplete:string;capture:string;checked:boolean;defaultChecked:boolean;defaultValue:string;dirName:string;disabled:boolean;files:FileList|null;readonly form:HTMLFormElement|null;formAction:string;formEnctype:string;formMethod:string;formNoValidate:boolean;formTarget:string;height:number;indeterminate:boolean;readonly labels:NodeListOf<HTMLLabelElement>|null;readonly list:HTMLElement|null;max:string;maxLength:number;min:string;minLength:number;multiple:boolean;name:string;pattern:string;placeholder:string;readOnly:boolean;required:boolean;selectionDirection:\"forward\"|\"backward\"|\"none\"|null;selectionEnd:number|null;selectionStart:number|null;size:number;src:string;step:string;type:string;useMap:string;readonly validationMessage:string;readonly validity:ValidityState;value:string;valueAsDate:Date|null;valueAsNumber:number;readonly webkitEntries:ReadonlyArray<FileSystemEntry>;webkitdirectory:boolean;width:number;readonly willValidate:boolean;checkValidity():boolean;reportValidity():boolean;select():void;setCustomValidity(error:string):void;setRangeText(replacement:string):void;setRangeText(replacement:string,start:number,end:number,selectionMode?:SelectionMode):void;setSelectionRange(start:number|null,end:number|null,direction?:\"forward\"|\"backward\"|\"none\"):void;stepDown(n?:number):void;stepUp(n?:number):void;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLInputElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLInputElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLInputElement:{prototype:HTMLInputElement;new():HTMLInputElement;};interface HTMLLIElement extends HTMLElement{type:string;value:number;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLLIElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLLIElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLLIElement:{prototype:HTMLLIElement;new():HTMLLIElement;};interface HTMLLabelElement extends HTMLElement{readonly control:HTMLElement|null;readonly form:HTMLFormElement|null;htmlFor:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLLabelElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLLabelElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLLabelElement:{prototype:HTMLLabelElement;new():HTMLLabelElement;};interface HTMLLegendElement extends HTMLElement{align:string;readonly form:HTMLFormElement|null;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLLegendElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLLegendElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLLegendElement:{prototype:HTMLLegendElement;new():HTMLLegendElement;};interface HTMLLinkElement extends HTMLElement,LinkStyle{as:string;charset:string;crossOrigin:string|null;disabled:boolean;href:string;hreflang:string;imageSizes:string;imageSrcset:string;integrity:string;media:string;referrerPolicy:string;rel:string;readonly relList:DOMTokenList;rev:string;readonly sizes:DOMTokenList;target:string;type:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLLinkElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLLinkElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLLinkElement:{prototype:HTMLLinkElement;new():HTMLLinkElement;};interface HTMLMapElement extends HTMLElement{readonly areas:HTMLCollection;name:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLMapElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLMapElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLMapElement:{prototype:HTMLMapElement;new():HTMLMapElement;};interface HTMLMarqueeElement extends HTMLElement{behavior:string;bgColor:string;direction:string;height:string;hspace:number;loop:number;scrollAmount:number;scrollDelay:number;trueSpeed:boolean;vspace:number;width:string;start():void;stop():void;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLMarqueeElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLMarqueeElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLMarqueeElement:{prototype:HTMLMarqueeElement;new():HTMLMarqueeElement;};interface HTMLMediaElementEventMap extends HTMLElementEventMap{\"encrypted\":MediaEncryptedEvent;\"waitingforkey\":Event;}interface HTMLMediaElement extends HTMLElement{autoplay:boolean;readonly buffered:TimeRanges;controls:boolean;crossOrigin:string|null;readonly currentSrc:string;currentTime:number;defaultMuted:boolean;defaultPlaybackRate:number;disableRemotePlayback:boolean;readonly duration:number;readonly ended:boolean;readonly error:MediaError|null;loop:boolean;readonly mediaKeys:MediaKeys|null;muted:boolean;readonly networkState:number;onencrypted:((this:HTMLMediaElement,ev:MediaEncryptedEvent)=>any)|null;onwaitingforkey:((this:HTMLMediaElement,ev:Event)=>any)|null;readonly paused:boolean;playbackRate:number;readonly played:TimeRanges;preload:\"none\"|\"metadata\"|\"auto\"|\"\";readonly readyState:number;readonly remote:RemotePlayback;readonly seekable:TimeRanges;readonly seeking:boolean;src:string;srcObject:MediaProvider|null;readonly textTracks:TextTrackList;volume:number;addTextTrack(kind:TextTrackKind,label?:string,language?:string):TextTrack;canPlayType(type:string):CanPlayTypeResult;fastSeek(time:number):void;load():void;pause():void;play():Promise<void>;setMediaKeys(mediaKeys:MediaKeys|null):Promise<void>;readonly HAVE_CURRENT_DATA:number;readonly HAVE_ENOUGH_DATA:number;readonly HAVE_FUTURE_DATA:number;readonly HAVE_METADATA:number;readonly HAVE_NOTHING:number;readonly NETWORK_EMPTY:number;readonly NETWORK_IDLE:number;readonly NETWORK_LOADING:number;readonly NETWORK_NO_SOURCE:number;addEventListener<K extends keyof HTMLMediaElementEventMap>(type:K,listener:(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLMediaElementEventMap>(type:K,listener:(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLMediaElement:{prototype:HTMLMediaElement;new():HTMLMediaElement;readonly HAVE_CURRENT_DATA:number;readonly HAVE_ENOUGH_DATA:number;readonly HAVE_FUTURE_DATA:number;readonly HAVE_METADATA:number;readonly HAVE_NOTHING:number;readonly NETWORK_EMPTY:number;readonly NETWORK_IDLE:number;readonly NETWORK_LOADING:number;readonly NETWORK_NO_SOURCE:number;};interface HTMLMenuElement extends HTMLElement{compact:boolean;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLMenuElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLMenuElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLMenuElement:{prototype:HTMLMenuElement;new():HTMLMenuElement;};interface HTMLMetaElement extends HTMLElement{content:string;httpEquiv:string;media:string;name:string;scheme:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLMetaElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLMetaElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLMetaElement:{prototype:HTMLMetaElement;new():HTMLMetaElement;};interface HTMLMeterElement extends HTMLElement{high:number;readonly labels:NodeListOf<HTMLLabelElement>;low:number;max:number;min:number;optimum:number;value:number;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLMeterElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLMeterElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLMeterElement:{prototype:HTMLMeterElement;new():HTMLMeterElement;};interface HTMLModElement extends HTMLElement{cite:string;dateTime:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLModElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLModElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLModElement:{prototype:HTMLModElement;new():HTMLModElement;};interface HTMLOListElement extends HTMLElement{compact:boolean;reversed:boolean;start:number;type:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLOListElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLOListElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLOListElement:{prototype:HTMLOListElement;new():HTMLOListElement;};interface HTMLObjectElement extends HTMLElement{align:string;archive:string;border:string;code:string;codeBase:string;codeType:string;readonly contentDocument:Document|null;readonly contentWindow:WindowProxy|null;data:string;declare:boolean;readonly form:HTMLFormElement|null;height:string;hspace:number;name:string;standby:string;type:string;useMap:string;readonly validationMessage:string;readonly validity:ValidityState;vspace:number;width:string;readonly willValidate:boolean;checkValidity():boolean;getSVGDocument():Document|null;reportValidity():boolean;setCustomValidity(error:string):void;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLObjectElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLObjectElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLObjectElement:{prototype:HTMLObjectElement;new():HTMLObjectElement;};interface HTMLOptGroupElement extends HTMLElement{disabled:boolean;label:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLOptGroupElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLOptGroupElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLOptGroupElement:{prototype:HTMLOptGroupElement;new():HTMLOptGroupElement;};interface HTMLOptionElement extends HTMLElement{defaultSelected:boolean;disabled:boolean;readonly form:HTMLFormElement|null;readonly index:number;label:string;selected:boolean;text:string;value:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLOptionElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLOptionElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLOptionElement:{prototype:HTMLOptionElement;new():HTMLOptionElement;};interface HTMLOptionsCollection extends HTMLCollectionOf<HTMLOptionElement>{length:number;selectedIndex:number;add(element:HTMLOptionElement|HTMLOptGroupElement,before?:HTMLElement|number|null):void;remove(index:number):void;}declare var HTMLOptionsCollection:{prototype:HTMLOptionsCollection;new():HTMLOptionsCollection;};interface HTMLOrSVGElement{autofocus:boolean;readonly dataset:DOMStringMap;nonce?:string;tabIndex:number;blur():void;focus(options?:FocusOptions):void;}interface HTMLOutputElement extends HTMLElement{defaultValue:string;readonly form:HTMLFormElement|null;readonly htmlFor:DOMTokenList;readonly labels:NodeListOf<HTMLLabelElement>;name:string;readonly type:string;readonly validationMessage:string;readonly validity:ValidityState;value:string;readonly willValidate:boolean;checkValidity():boolean;reportValidity():boolean;setCustomValidity(error:string):void;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLOutputElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLOutputElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLOutputElement:{prototype:HTMLOutputElement;new():HTMLOutputElement;};interface HTMLParagraphElement extends HTMLElement{align:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLParagraphElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLParagraphElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLParagraphElement:{prototype:HTMLParagraphElement;new():HTMLParagraphElement;};interface HTMLParamElement extends HTMLElement{name:string;type:string;value:string;valueType:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLParamElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLParamElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLParamElement:{prototype:HTMLParamElement;new():HTMLParamElement;};interface HTMLPictureElement extends HTMLElement{addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLPictureElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLPictureElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLPictureElement:{prototype:HTMLPictureElement;new():HTMLPictureElement;};interface HTMLPreElement extends HTMLElement{width:number;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLPreElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLPreElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLPreElement:{prototype:HTMLPreElement;new():HTMLPreElement;};interface HTMLProgressElement extends HTMLElement{readonly labels:NodeListOf<HTMLLabelElement>;max:number;readonly position:number;value:number;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLProgressElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLProgressElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLProgressElement:{prototype:HTMLProgressElement;new():HTMLProgressElement;};interface HTMLQuoteElement extends HTMLElement{cite:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLQuoteElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLQuoteElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLQuoteElement:{prototype:HTMLQuoteElement;new():HTMLQuoteElement;};interface HTMLScriptElement extends HTMLElement{async:boolean;charset:string;crossOrigin:string|null;defer:boolean;event:string;htmlFor:string;integrity:string;noModule:boolean;referrerPolicy:string;src:string;text:string;type:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLScriptElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLScriptElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLScriptElement:{prototype:HTMLScriptElement;new():HTMLScriptElement;supports(type:string):boolean;};interface HTMLSelectElement extends HTMLElement{autocomplete:string;disabled:boolean;readonly form:HTMLFormElement|null;readonly labels:NodeListOf<HTMLLabelElement>;length:number;multiple:boolean;name:string;readonly options:HTMLOptionsCollection;required:boolean;selectedIndex:number;readonly selectedOptions:HTMLCollectionOf<HTMLOptionElement>;size:number;readonly type:string;readonly validationMessage:string;readonly validity:ValidityState;value:string;readonly willValidate:boolean;add(element:HTMLOptionElement|HTMLOptGroupElement,before?:HTMLElement|number|null):void;checkValidity():boolean;item(index:number):HTMLOptionElement|null;namedItem(name:string):HTMLOptionElement|null;remove():void;remove(index:number):void;reportValidity():boolean;setCustomValidity(error:string):void;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLSelectElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLSelectElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;[name:number]:HTMLOptionElement|HTMLOptGroupElement;}declare var HTMLSelectElement:{prototype:HTMLSelectElement;new():HTMLSelectElement;};interface HTMLSlotElement extends HTMLElement{name:string;assign(...nodes:(Element|Text)[]):void;assignedElements(options?:AssignedNodesOptions):Element[];assignedNodes(options?:AssignedNodesOptions):Node[];addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLSlotElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLSlotElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLSlotElement:{prototype:HTMLSlotElement;new():HTMLSlotElement;};interface HTMLSourceElement extends HTMLElement{height:number;media:string;sizes:string;src:string;srcset:string;type:string;width:number;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLSourceElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLSourceElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLSourceElement:{prototype:HTMLSourceElement;new():HTMLSourceElement;};interface HTMLSpanElement extends HTMLElement{addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLSpanElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLSpanElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLSpanElement:{prototype:HTMLSpanElement;new():HTMLSpanElement;};interface HTMLStyleElement extends HTMLElement,LinkStyle{disabled:boolean;media:string;type:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLStyleElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLStyleElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLStyleElement:{prototype:HTMLStyleElement;new():HTMLStyleElement;};interface HTMLTableCaptionElement extends HTMLElement{align:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableCaptionElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableCaptionElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLTableCaptionElement:{prototype:HTMLTableCaptionElement;new():HTMLTableCaptionElement;};interface HTMLTableCellElement extends HTMLElement{abbr:string;align:string;axis:string;bgColor:string;readonly cellIndex:number;ch:string;chOff:string;colSpan:number;headers:string;height:string;noWrap:boolean;rowSpan:number;scope:string;vAlign:string;width:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableCellElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableCellElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLTableCellElement:{prototype:HTMLTableCellElement;new():HTMLTableCellElement;};interface HTMLTableColElement extends HTMLElement{align:string;ch:string;chOff:string;span:number;vAlign:string;width:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableColElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableColElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLTableColElement:{prototype:HTMLTableColElement;new():HTMLTableColElement;};interface HTMLTableDataCellElement extends HTMLTableCellElement{addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableDataCellElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableDataCellElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}interface HTMLTableElement extends HTMLElement{align:string;bgColor:string;border:string;caption:HTMLTableCaptionElement|null;cellPadding:string;cellSpacing:string;frame:string;readonly rows:HTMLCollectionOf<HTMLTableRowElement>;rules:string;summary:string;readonly tBodies:HTMLCollectionOf<HTMLTableSectionElement>;tFoot:HTMLTableSectionElement|null;tHead:HTMLTableSectionElement|null;width:string;createCaption():HTMLTableCaptionElement;createTBody():HTMLTableSectionElement;createTFoot():HTMLTableSectionElement;createTHead():HTMLTableSectionElement;deleteCaption():void;deleteRow(index:number):void;deleteTFoot():void;deleteTHead():void;insertRow(index?:number):HTMLTableRowElement;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLTableElement:{prototype:HTMLTableElement;new():HTMLTableElement;};interface HTMLTableHeaderCellElement extends HTMLTableCellElement{addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableHeaderCellElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableHeaderCellElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}interface HTMLTableRowElement extends HTMLElement{align:string;bgColor:string;readonly cells:HTMLCollectionOf<HTMLTableCellElement>;ch:string;chOff:string;readonly rowIndex:number;readonly sectionRowIndex:number;vAlign:string;deleteCell(index:number):void;insertCell(index?:number):HTMLTableCellElement;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableRowElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableRowElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLTableRowElement:{prototype:HTMLTableRowElement;new():HTMLTableRowElement;};interface HTMLTableSectionElement extends HTMLElement{align:string;ch:string;chOff:string;readonly rows:HTMLCollectionOf<HTMLTableRowElement>;vAlign:string;deleteRow(index:number):void;insertRow(index?:number):HTMLTableRowElement;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableSectionElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTableSectionElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLTableSectionElement:{prototype:HTMLTableSectionElement;new():HTMLTableSectionElement;};interface HTMLTemplateElement extends HTMLElement{readonly content:DocumentFragment;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTemplateElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTemplateElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLTemplateElement:{prototype:HTMLTemplateElement;new():HTMLTemplateElement;};interface HTMLTextAreaElement extends HTMLElement{autocomplete:string;cols:number;defaultValue:string;dirName:string;disabled:boolean;readonly form:HTMLFormElement|null;readonly labels:NodeListOf<HTMLLabelElement>;maxLength:number;minLength:number;name:string;placeholder:string;readOnly:boolean;required:boolean;rows:number;selectionDirection:\"forward\"|\"backward\"|\"none\";selectionEnd:number;selectionStart:number;readonly textLength:number;readonly type:string;readonly validationMessage:string;readonly validity:ValidityState;value:string;readonly willValidate:boolean;wrap:string;checkValidity():boolean;reportValidity():boolean;select():void;setCustomValidity(error:string):void;setRangeText(replacement:string):void;setRangeText(replacement:string,start:number,end:number,selectionMode?:SelectionMode):void;setSelectionRange(start:number|null,end:number|null,direction?:\"forward\"|\"backward\"|\"none\"):void;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTextAreaElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTextAreaElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLTextAreaElement:{prototype:HTMLTextAreaElement;new():HTMLTextAreaElement;};interface HTMLTimeElement extends HTMLElement{dateTime:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTimeElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTimeElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLTimeElement:{prototype:HTMLTimeElement;new():HTMLTimeElement;};interface HTMLTitleElement extends HTMLElement{text:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTitleElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTitleElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLTitleElement:{prototype:HTMLTitleElement;new():HTMLTitleElement;};interface HTMLTrackElement extends HTMLElement{default:boolean;kind:string;label:string;readonly readyState:number;src:string;srclang:string;readonly track:TextTrack;readonly ERROR:number;readonly LOADED:number;readonly LOADING:number;readonly NONE:number;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTrackElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLTrackElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLTrackElement:{prototype:HTMLTrackElement;new():HTMLTrackElement;readonly ERROR:number;readonly LOADED:number;readonly LOADING:number;readonly NONE:number;};interface HTMLUListElement extends HTMLElement{compact:boolean;type:string;addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLUListElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLUListElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLUListElement:{prototype:HTMLUListElement;new():HTMLUListElement;};interface HTMLUnknownElement extends HTMLElement{addEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLUnknownElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLElementEventMap>(type:K,listener:(this:HTMLUnknownElement,ev:HTMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLUnknownElement:{prototype:HTMLUnknownElement;new():HTMLUnknownElement;};interface HTMLVideoElementEventMap extends HTMLMediaElementEventMap{\"enterpictureinpicture\":Event;\"leavepictureinpicture\":Event;}interface HTMLVideoElement extends HTMLMediaElement{disablePictureInPicture:boolean;height:number;onenterpictureinpicture:((this:HTMLVideoElement,ev:Event)=>any)|null;onleavepictureinpicture:((this:HTMLVideoElement,ev:Event)=>any)|null;playsInline:boolean;poster:string;readonly videoHeight:number;readonly videoWidth:number;width:number;cancelVideoFrameCallback(handle:number):void;getVideoPlaybackQuality():VideoPlaybackQuality;requestPictureInPicture():Promise<PictureInPictureWindow>;requestVideoFrameCallback(callback:VideoFrameRequestCallback):number;addEventListener<K extends keyof HTMLVideoElementEventMap>(type:K,listener:(this:HTMLVideoElement,ev:HTMLVideoElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof HTMLVideoElementEventMap>(type:K,listener:(this:HTMLVideoElement,ev:HTMLVideoElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var HTMLVideoElement:{prototype:HTMLVideoElement;new():HTMLVideoElement;};interface HashChangeEvent extends Event{readonly newURL:string;readonly oldURL:string;}declare var HashChangeEvent:{prototype:HashChangeEvent;new(type:string,eventInitDict?:HashChangeEventInit):HashChangeEvent;};interface Headers{append(name:string,value:string):void;delete(name:string):void;get(name:string):string|null;has(name:string):boolean;set(name:string,value:string):void;forEach(callbackfn:(value:string,key:string,parent:Headers)=>void,thisArg?:any):void;}declare var Headers:{prototype:Headers;new(init?:HeadersInit):Headers;};interface History{readonly length:number;scrollRestoration:ScrollRestoration;readonly state:any;back():void;forward():void;go(delta?:number):void;pushState(data:any,unused:string,url?:string|URL|null):void;replaceState(data:any,unused:string,url?:string|URL|null):void;}declare var History:{prototype:History;new():History;};interface IDBCursor{readonly direction:IDBCursorDirection;readonly key:IDBValidKey;readonly primaryKey:IDBValidKey;readonly request:IDBRequest;readonly source:IDBObjectStore|IDBIndex;advance(count:number):void;continue(key?:IDBValidKey):void;continuePrimaryKey(key:IDBValidKey,primaryKey:IDBValidKey):void;delete():IDBRequest<undefined>;update(value:any):IDBRequest<IDBValidKey>;}declare var IDBCursor:{prototype:IDBCursor;new():IDBCursor;};interface IDBCursorWithValue extends IDBCursor{readonly value:any;}declare var IDBCursorWithValue:{prototype:IDBCursorWithValue;new():IDBCursorWithValue;};interface IDBDatabaseEventMap{\"abort\":Event;\"close\":Event;\"error\":Event;\"versionchange\":IDBVersionChangeEvent;}interface IDBDatabase extends EventTarget{readonly name:string;readonly objectStoreNames:DOMStringList;onabort:((this:IDBDatabase,ev:Event)=>any)|null;onclose:((this:IDBDatabase,ev:Event)=>any)|null;onerror:((this:IDBDatabase,ev:Event)=>any)|null;onversionchange:((this:IDBDatabase,ev:IDBVersionChangeEvent)=>any)|null;readonly version:number;close():void;createObjectStore(name:string,options?:IDBObjectStoreParameters):IDBObjectStore;deleteObjectStore(name:string):void;transaction(storeNames:string|string[],mode?:IDBTransactionMode):IDBTransaction;addEventListener<K extends keyof IDBDatabaseEventMap>(type:K,listener:(this:IDBDatabase,ev:IDBDatabaseEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof IDBDatabaseEventMap>(type:K,listener:(this:IDBDatabase,ev:IDBDatabaseEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var IDBDatabase:{prototype:IDBDatabase;new():IDBDatabase;};interface IDBFactory{cmp(first:any,second:any):number;databases():Promise<IDBDatabaseInfo[]>;deleteDatabase(name:string):IDBOpenDBRequest;open(name:string,version?:number):IDBOpenDBRequest;}declare var IDBFactory:{prototype:IDBFactory;new():IDBFactory;};interface IDBIndex{readonly keyPath:string|string[];readonly multiEntry:boolean;name:string;readonly objectStore:IDBObjectStore;readonly unique:boolean;count(query?:IDBValidKey|IDBKeyRange):IDBRequest<number>;get(query:IDBValidKey|IDBKeyRange):IDBRequest<any>;getAll(query?:IDBValidKey|IDBKeyRange|null,count?:number):IDBRequest<any[]>;getAllKeys(query?:IDBValidKey|IDBKeyRange|null,count?:number):IDBRequest<IDBValidKey[]>;getKey(query:IDBValidKey|IDBKeyRange):IDBRequest<IDBValidKey|undefined>;openCursor(query?:IDBValidKey|IDBKeyRange|null,direction?:IDBCursorDirection):IDBRequest<IDBCursorWithValue|null>;openKeyCursor(query?:IDBValidKey|IDBKeyRange|null,direction?:IDBCursorDirection):IDBRequest<IDBCursor|null>;}declare var IDBIndex:{prototype:IDBIndex;new():IDBIndex;};interface IDBKeyRange{readonly lower:any;readonly lowerOpen:boolean;readonly upper:any;readonly upperOpen:boolean;includes(key:any):boolean;}declare var IDBKeyRange:{prototype:IDBKeyRange;new():IDBKeyRange;bound(lower:any,upper:any,lowerOpen?:boolean,upperOpen?:boolean):IDBKeyRange;lowerBound(lower:any,open?:boolean):IDBKeyRange;only(value:any):IDBKeyRange;upperBound(upper:any,open?:boolean):IDBKeyRange;};interface IDBObjectStore{readonly autoIncrement:boolean;readonly indexNames:DOMStringList;readonly keyPath:string|string[];name:string;readonly transaction:IDBTransaction;add(value:any,key?:IDBValidKey):IDBRequest<IDBValidKey>;clear():IDBRequest<undefined>;count(query?:IDBValidKey|IDBKeyRange):IDBRequest<number>;createIndex(name:string,keyPath:string|string[],options?:IDBIndexParameters):IDBIndex;delete(query:IDBValidKey|IDBKeyRange):IDBRequest<undefined>;deleteIndex(name:string):void;get(query:IDBValidKey|IDBKeyRange):IDBRequest<any>;getAll(query?:IDBValidKey|IDBKeyRange|null,count?:number):IDBRequest<any[]>;getAllKeys(query?:IDBValidKey|IDBKeyRange|null,count?:number):IDBRequest<IDBValidKey[]>;getKey(query:IDBValidKey|IDBKeyRange):IDBRequest<IDBValidKey|undefined>;index(name:string):IDBIndex;openCursor(query?:IDBValidKey|IDBKeyRange|null,direction?:IDBCursorDirection):IDBRequest<IDBCursorWithValue|null>;openKeyCursor(query?:IDBValidKey|IDBKeyRange|null,direction?:IDBCursorDirection):IDBRequest<IDBCursor|null>;put(value:any,key?:IDBValidKey):IDBRequest<IDBValidKey>;}declare var IDBObjectStore:{prototype:IDBObjectStore;new():IDBObjectStore;};interface IDBOpenDBRequestEventMap extends IDBRequestEventMap{\"blocked\":Event;\"upgradeneeded\":IDBVersionChangeEvent;}interface IDBOpenDBRequest extends IDBRequest<IDBDatabase>{onblocked:((this:IDBOpenDBRequest,ev:Event)=>any)|null;onupgradeneeded:((this:IDBOpenDBRequest,ev:IDBVersionChangeEvent)=>any)|null;addEventListener<K extends keyof IDBOpenDBRequestEventMap>(type:K,listener:(this:IDBOpenDBRequest,ev:IDBOpenDBRequestEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof IDBOpenDBRequestEventMap>(type:K,listener:(this:IDBOpenDBRequest,ev:IDBOpenDBRequestEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var IDBOpenDBRequest:{prototype:IDBOpenDBRequest;new():IDBOpenDBRequest;};interface IDBRequestEventMap{\"error\":Event;\"success\":Event;}interface IDBRequest<T=any>extends EventTarget{readonly error:DOMException|null;onerror:((this:IDBRequest<T>,ev:Event)=>any)|null;onsuccess:((this:IDBRequest<T>,ev:Event)=>any)|null;readonly readyState:IDBRequestReadyState;readonly result:T;readonly source:IDBObjectStore|IDBIndex|IDBCursor;readonly transaction:IDBTransaction|null;addEventListener<K extends keyof IDBRequestEventMap>(type:K,listener:(this:IDBRequest<T>,ev:IDBRequestEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof IDBRequestEventMap>(type:K,listener:(this:IDBRequest<T>,ev:IDBRequestEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var IDBRequest:{prototype:IDBRequest;new():IDBRequest;};interface IDBTransactionEventMap{\"abort\":Event;\"complete\":Event;\"error\":Event;}interface IDBTransaction extends EventTarget{readonly db:IDBDatabase;readonly durability:IDBTransactionDurability;readonly error:DOMException|null;readonly mode:IDBTransactionMode;readonly objectStoreNames:DOMStringList;onabort:((this:IDBTransaction,ev:Event)=>any)|null;oncomplete:((this:IDBTransaction,ev:Event)=>any)|null;onerror:((this:IDBTransaction,ev:Event)=>any)|null;abort():void;commit():void;objectStore(name:string):IDBObjectStore;addEventListener<K extends keyof IDBTransactionEventMap>(type:K,listener:(this:IDBTransaction,ev:IDBTransactionEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof IDBTransactionEventMap>(type:K,listener:(this:IDBTransaction,ev:IDBTransactionEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var IDBTransaction:{prototype:IDBTransaction;new():IDBTransaction;};interface IDBVersionChangeEvent extends Event{readonly newVersion:number|null;readonly oldVersion:number;}declare var IDBVersionChangeEvent:{prototype:IDBVersionChangeEvent;new(type:string,eventInitDict?:IDBVersionChangeEventInit):IDBVersionChangeEvent;};interface IIRFilterNode extends AudioNode{getFrequencyResponse(frequencyHz:Float32Array,magResponse:Float32Array,phaseResponse:Float32Array):void;}declare var IIRFilterNode:{prototype:IIRFilterNode;new(context:BaseAudioContext,options:IIRFilterOptions):IIRFilterNode;};interface IdleDeadline{readonly didTimeout:boolean;timeRemaining():DOMHighResTimeStamp;}declare var IdleDeadline:{prototype:IdleDeadline;new():IdleDeadline;};interface ImageBitmap{readonly height:number;readonly width:number;close():void;}declare var ImageBitmap:{prototype:ImageBitmap;new():ImageBitmap;};interface ImageBitmapRenderingContext{readonly canvas:HTMLCanvasElement;transferFromImageBitmap(bitmap:ImageBitmap|null):void;}declare var ImageBitmapRenderingContext:{prototype:ImageBitmapRenderingContext;new():ImageBitmapRenderingContext;};interface ImageData{readonly colorSpace:PredefinedColorSpace;readonly data:Uint8ClampedArray;readonly height:number;readonly width:number;}declare var ImageData:{prototype:ImageData;new(sw:number,sh:number,settings?:ImageDataSettings):ImageData;new(data:Uint8ClampedArray,sw:number,sh?:number,settings?:ImageDataSettings):ImageData;};interface InnerHTML{innerHTML:string;}interface InputDeviceInfo extends MediaDeviceInfo{}declare var InputDeviceInfo:{prototype:InputDeviceInfo;new():InputDeviceInfo;};interface InputEvent extends UIEvent{readonly data:string|null;readonly dataTransfer:DataTransfer|null;readonly inputType:string;readonly isComposing:boolean;getTargetRanges():StaticRange[];}declare var InputEvent:{prototype:InputEvent;new(type:string,eventInitDict?:InputEventInit):InputEvent;};interface IntersectionObserver{readonly root:Element|Document|null;readonly rootMargin:string;readonly thresholds:ReadonlyArray<number>;disconnect():void;observe(target:Element):void;takeRecords():IntersectionObserverEntry[];unobserve(target:Element):void;}declare var IntersectionObserver:{prototype:IntersectionObserver;new(callback:IntersectionObserverCallback,options?:IntersectionObserverInit):IntersectionObserver;};interface IntersectionObserverEntry{readonly boundingClientRect:DOMRectReadOnly;readonly intersectionRatio:number;readonly intersectionRect:DOMRectReadOnly;readonly isIntersecting:boolean;readonly rootBounds:DOMRectReadOnly|null;readonly target:Element;readonly time:DOMHighResTimeStamp;}declare var IntersectionObserverEntry:{prototype:IntersectionObserverEntry;new(intersectionObserverEntryInit:IntersectionObserverEntryInit):IntersectionObserverEntry;};interface KHR_parallel_shader_compile{readonly COMPLETION_STATUS_KHR:GLenum;}interface KeyboardEvent extends UIEvent{readonly altKey:boolean;readonly charCode:number;readonly code:string;readonly ctrlKey:boolean;readonly isComposing:boolean;readonly key:string;readonly keyCode:number;readonly location:number;readonly metaKey:boolean;readonly repeat:boolean;readonly shiftKey:boolean;getModifierState(keyArg:string):boolean;initKeyboardEvent(typeArg:string,bubblesArg?:boolean,cancelableArg?:boolean,viewArg?:Window|null,keyArg?:string,locationArg?:number,ctrlKey?:boolean,altKey?:boolean,shiftKey?:boolean,metaKey?:boolean):void;readonly DOM_KEY_LOCATION_LEFT:number;readonly DOM_KEY_LOCATION_NUMPAD:number;readonly DOM_KEY_LOCATION_RIGHT:number;readonly DOM_KEY_LOCATION_STANDARD:number;}declare var KeyboardEvent:{prototype:KeyboardEvent;new(type:string,eventInitDict?:KeyboardEventInit):KeyboardEvent;readonly DOM_KEY_LOCATION_LEFT:number;readonly DOM_KEY_LOCATION_NUMPAD:number;readonly DOM_KEY_LOCATION_RIGHT:number;readonly DOM_KEY_LOCATION_STANDARD:number;};interface KeyframeEffect extends AnimationEffect{composite:CompositeOperation;iterationComposite:IterationCompositeOperation;pseudoElement:string|null;target:Element|null;getKeyframes():ComputedKeyframe[];setKeyframes(keyframes:Keyframe[]|PropertyIndexedKeyframes|null):void;}declare var KeyframeEffect:{prototype:KeyframeEffect;new(target:Element|null,keyframes:Keyframe[]|PropertyIndexedKeyframes|null,options?:number|KeyframeEffectOptions):KeyframeEffect;new(source:KeyframeEffect):KeyframeEffect;};interface LinkStyle{readonly sheet:CSSStyleSheet|null;}interface Location{readonly ancestorOrigins:DOMStringList;hash:string;host:string;hostname:string;href:string;toString():string;readonly origin:string;pathname:string;port:string;protocol:string;search:string;assign(url:string|URL):void;reload():void;replace(url:string|URL):void;}declare var Location:{prototype:Location;new():Location;};interface Lock{readonly mode:LockMode;readonly name:string;}declare var Lock:{prototype:Lock;new():Lock;};interface LockManager{query():Promise<LockManagerSnapshot>;request(name:string,callback:LockGrantedCallback):Promise<any>;request(name:string,options:LockOptions,callback:LockGrantedCallback):Promise<any>;}declare var LockManager:{prototype:LockManager;new():LockManager;};interface MIDIAccessEventMap{\"statechange\":Event;}interface MIDIAccess extends EventTarget{readonly inputs:MIDIInputMap;onstatechange:((this:MIDIAccess,ev:Event)=>any)|null;readonly outputs:MIDIOutputMap;readonly sysexEnabled:boolean;addEventListener<K extends keyof MIDIAccessEventMap>(type:K,listener:(this:MIDIAccess,ev:MIDIAccessEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MIDIAccessEventMap>(type:K,listener:(this:MIDIAccess,ev:MIDIAccessEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MIDIAccess:{prototype:MIDIAccess;new():MIDIAccess;};interface MIDIConnectionEvent extends Event{readonly port:MIDIPort;}declare var MIDIConnectionEvent:{prototype:MIDIConnectionEvent;new(type:string,eventInitDict?:MIDIConnectionEventInit):MIDIConnectionEvent;};interface MIDIInputEventMap extends MIDIPortEventMap{\"midimessage\":Event;}interface MIDIInput extends MIDIPort{onmidimessage:((this:MIDIInput,ev:Event)=>any)|null;addEventListener<K extends keyof MIDIInputEventMap>(type:K,listener:(this:MIDIInput,ev:MIDIInputEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MIDIInputEventMap>(type:K,listener:(this:MIDIInput,ev:MIDIInputEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MIDIInput:{prototype:MIDIInput;new():MIDIInput;};interface MIDIInputMap{forEach(callbackfn:(value:MIDIInput,key:string,parent:MIDIInputMap)=>void,thisArg?:any):void;}declare var MIDIInputMap:{prototype:MIDIInputMap;new():MIDIInputMap;};interface MIDIMessageEvent extends Event{readonly data:Uint8Array;}declare var MIDIMessageEvent:{prototype:MIDIMessageEvent;new(type:string,eventInitDict?:MIDIMessageEventInit):MIDIMessageEvent;};interface MIDIOutput extends MIDIPort{send(data:number[],timestamp?:DOMHighResTimeStamp):void;addEventListener<K extends keyof MIDIPortEventMap>(type:K,listener:(this:MIDIOutput,ev:MIDIPortEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MIDIPortEventMap>(type:K,listener:(this:MIDIOutput,ev:MIDIPortEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MIDIOutput:{prototype:MIDIOutput;new():MIDIOutput;};interface MIDIOutputMap{forEach(callbackfn:(value:MIDIOutput,key:string,parent:MIDIOutputMap)=>void,thisArg?:any):void;}declare var MIDIOutputMap:{prototype:MIDIOutputMap;new():MIDIOutputMap;};interface MIDIPortEventMap{\"statechange\":Event;}interface MIDIPort extends EventTarget{readonly connection:MIDIPortConnectionState;readonly id:string;readonly manufacturer:string|null;readonly name:string|null;onstatechange:((this:MIDIPort,ev:Event)=>any)|null;readonly state:MIDIPortDeviceState;readonly type:MIDIPortType;readonly version:string|null;close():Promise<MIDIPort>;open():Promise<MIDIPort>;addEventListener<K extends keyof MIDIPortEventMap>(type:K,listener:(this:MIDIPort,ev:MIDIPortEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MIDIPortEventMap>(type:K,listener:(this:MIDIPort,ev:MIDIPortEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MIDIPort:{prototype:MIDIPort;new():MIDIPort;};interface MathMLElementEventMap extends ElementEventMap,DocumentAndElementEventHandlersEventMap,GlobalEventHandlersEventMap{}interface MathMLElement extends Element,DocumentAndElementEventHandlers,ElementCSSInlineStyle,GlobalEventHandlers,HTMLOrSVGElement{addEventListener<K extends keyof MathMLElementEventMap>(type:K,listener:(this:MathMLElement,ev:MathMLElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MathMLElementEventMap>(type:K,listener:(this:MathMLElement,ev:MathMLElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MathMLElement:{prototype:MathMLElement;new():MathMLElement;};interface MediaCapabilities{decodingInfo(configuration:MediaDecodingConfiguration):Promise<MediaCapabilitiesDecodingInfo>;encodingInfo(configuration:MediaEncodingConfiguration):Promise<MediaCapabilitiesEncodingInfo>;}declare var MediaCapabilities:{prototype:MediaCapabilities;new():MediaCapabilities;};interface MediaDeviceInfo{readonly deviceId:string;readonly groupId:string;readonly kind:MediaDeviceKind;readonly label:string;toJSON():any;}declare var MediaDeviceInfo:{prototype:MediaDeviceInfo;new():MediaDeviceInfo;};interface MediaDevicesEventMap{\"devicechange\":Event;}interface MediaDevices extends EventTarget{ondevicechange:((this:MediaDevices,ev:Event)=>any)|null;enumerateDevices():Promise<MediaDeviceInfo[]>;getDisplayMedia(constraints?:DisplayMediaStreamConstraints):Promise<MediaStream>;getSupportedConstraints():MediaTrackSupportedConstraints;getUserMedia(constraints?:MediaStreamConstraints):Promise<MediaStream>;addEventListener<K extends keyof MediaDevicesEventMap>(type:K,listener:(this:MediaDevices,ev:MediaDevicesEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MediaDevicesEventMap>(type:K,listener:(this:MediaDevices,ev:MediaDevicesEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MediaDevices:{prototype:MediaDevices;new():MediaDevices;};interface MediaElementAudioSourceNode extends AudioNode{readonly mediaElement:HTMLMediaElement;}declare var MediaElementAudioSourceNode:{prototype:MediaElementAudioSourceNode;new(context:AudioContext,options:MediaElementAudioSourceOptions):MediaElementAudioSourceNode;};interface MediaEncryptedEvent extends Event{readonly initData:ArrayBuffer|null;readonly initDataType:string;}declare var MediaEncryptedEvent:{prototype:MediaEncryptedEvent;new(type:string,eventInitDict?:MediaEncryptedEventInit):MediaEncryptedEvent;};interface MediaError{readonly code:number;readonly message:string;readonly MEDIA_ERR_ABORTED:number;readonly MEDIA_ERR_DECODE:number;readonly MEDIA_ERR_NETWORK:number;readonly MEDIA_ERR_SRC_NOT_SUPPORTED:number;}declare var MediaError:{prototype:MediaError;new():MediaError;readonly MEDIA_ERR_ABORTED:number;readonly MEDIA_ERR_DECODE:number;readonly MEDIA_ERR_NETWORK:number;readonly MEDIA_ERR_SRC_NOT_SUPPORTED:number;};interface MediaKeyMessageEvent extends Event{readonly message:ArrayBuffer;readonly messageType:MediaKeyMessageType;}declare var MediaKeyMessageEvent:{prototype:MediaKeyMessageEvent;new(type:string,eventInitDict:MediaKeyMessageEventInit):MediaKeyMessageEvent;};interface MediaKeySessionEventMap{\"keystatuseschange\":Event;\"message\":MediaKeyMessageEvent;}interface MediaKeySession extends EventTarget{readonly closed:Promise<MediaKeySessionClosedReason>;readonly expiration:number;readonly keyStatuses:MediaKeyStatusMap;onkeystatuseschange:((this:MediaKeySession,ev:Event)=>any)|null;onmessage:((this:MediaKeySession,ev:MediaKeyMessageEvent)=>any)|null;readonly sessionId:string;close():Promise<void>;generateRequest(initDataType:string,initData:BufferSource):Promise<void>;load(sessionId:string):Promise<boolean>;remove():Promise<void>;update(response:BufferSource):Promise<void>;addEventListener<K extends keyof MediaKeySessionEventMap>(type:K,listener:(this:MediaKeySession,ev:MediaKeySessionEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MediaKeySessionEventMap>(type:K,listener:(this:MediaKeySession,ev:MediaKeySessionEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MediaKeySession:{prototype:MediaKeySession;new():MediaKeySession;};interface MediaKeyStatusMap{readonly size:number;get(keyId:BufferSource):MediaKeyStatus|undefined;has(keyId:BufferSource):boolean;forEach(callbackfn:(value:MediaKeyStatus,key:BufferSource,parent:MediaKeyStatusMap)=>void,thisArg?:any):void;}declare var MediaKeyStatusMap:{prototype:MediaKeyStatusMap;new():MediaKeyStatusMap;};interface MediaKeySystemAccess{readonly keySystem:string;createMediaKeys():Promise<MediaKeys>;getConfiguration():MediaKeySystemConfiguration;}declare var MediaKeySystemAccess:{prototype:MediaKeySystemAccess;new():MediaKeySystemAccess;};interface MediaKeys{createSession(sessionType?:MediaKeySessionType):MediaKeySession;setServerCertificate(serverCertificate:BufferSource):Promise<boolean>;}declare var MediaKeys:{prototype:MediaKeys;new():MediaKeys;};interface MediaList{readonly length:number;mediaText:string;toString():string;appendMedium(medium:string):void;deleteMedium(medium:string):void;item(index:number):string|null;[index:number]:string;}declare var MediaList:{prototype:MediaList;new():MediaList;};interface MediaMetadata{album:string;artist:string;artwork:ReadonlyArray<MediaImage>;title:string;}declare var MediaMetadata:{prototype:MediaMetadata;new(init?:MediaMetadataInit):MediaMetadata;};interface MediaQueryListEventMap{\"change\":MediaQueryListEvent;}interface MediaQueryList extends EventTarget{readonly matches:boolean;readonly media:string;onchange:((this:MediaQueryList,ev:MediaQueryListEvent)=>any)|null;addListener(callback:((this:MediaQueryList,ev:MediaQueryListEvent)=>any)|null):void;removeListener(callback:((this:MediaQueryList,ev:MediaQueryListEvent)=>any)|null):void;addEventListener<K extends keyof MediaQueryListEventMap>(type:K,listener:(this:MediaQueryList,ev:MediaQueryListEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MediaQueryListEventMap>(type:K,listener:(this:MediaQueryList,ev:MediaQueryListEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MediaQueryList:{prototype:MediaQueryList;new():MediaQueryList;};interface MediaQueryListEvent extends Event{readonly matches:boolean;readonly media:string;}declare var MediaQueryListEvent:{prototype:MediaQueryListEvent;new(type:string,eventInitDict?:MediaQueryListEventInit):MediaQueryListEvent;};interface MediaRecorderEventMap{\"dataavailable\":BlobEvent;\"error\":MediaRecorderErrorEvent;\"pause\":Event;\"resume\":Event;\"start\":Event;\"stop\":Event;}interface MediaRecorder extends EventTarget{readonly audioBitsPerSecond:number;readonly mimeType:string;ondataavailable:((this:MediaRecorder,ev:BlobEvent)=>any)|null;onerror:((this:MediaRecorder,ev:MediaRecorderErrorEvent)=>any)|null;onpause:((this:MediaRecorder,ev:Event)=>any)|null;onresume:((this:MediaRecorder,ev:Event)=>any)|null;onstart:((this:MediaRecorder,ev:Event)=>any)|null;onstop:((this:MediaRecorder,ev:Event)=>any)|null;readonly state:RecordingState;readonly stream:MediaStream;readonly videoBitsPerSecond:number;pause():void;requestData():void;resume():void;start(timeslice?:number):void;stop():void;addEventListener<K extends keyof MediaRecorderEventMap>(type:K,listener:(this:MediaRecorder,ev:MediaRecorderEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MediaRecorderEventMap>(type:K,listener:(this:MediaRecorder,ev:MediaRecorderEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MediaRecorder:{prototype:MediaRecorder;new(stream:MediaStream,options?:MediaRecorderOptions):MediaRecorder;isTypeSupported(type:string):boolean;};interface MediaRecorderErrorEvent extends Event{readonly error:DOMException;}declare var MediaRecorderErrorEvent:{prototype:MediaRecorderErrorEvent;new(type:string,eventInitDict:MediaRecorderErrorEventInit):MediaRecorderErrorEvent;};interface MediaSession{metadata:MediaMetadata|null;playbackState:MediaSessionPlaybackState;setActionHandler(action:MediaSessionAction,handler:MediaSessionActionHandler|null):void;setPositionState(state?:MediaPositionState):void;}declare var MediaSession:{prototype:MediaSession;new():MediaSession;};interface MediaSourceEventMap{\"sourceclose\":Event;\"sourceended\":Event;\"sourceopen\":Event;}interface MediaSource extends EventTarget{readonly activeSourceBuffers:SourceBufferList;duration:number;onsourceclose:((this:MediaSource,ev:Event)=>any)|null;onsourceended:((this:MediaSource,ev:Event)=>any)|null;onsourceopen:((this:MediaSource,ev:Event)=>any)|null;readonly readyState:ReadyState;readonly sourceBuffers:SourceBufferList;addSourceBuffer(type:string):SourceBuffer;clearLiveSeekableRange():void;endOfStream(error?:EndOfStreamError):void;removeSourceBuffer(sourceBuffer:SourceBuffer):void;setLiveSeekableRange(start:number,end:number):void;addEventListener<K extends keyof MediaSourceEventMap>(type:K,listener:(this:MediaSource,ev:MediaSourceEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MediaSourceEventMap>(type:K,listener:(this:MediaSource,ev:MediaSourceEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MediaSource:{prototype:MediaSource;new():MediaSource;isTypeSupported(type:string):boolean;};interface MediaStreamEventMap{\"addtrack\":MediaStreamTrackEvent;\"removetrack\":MediaStreamTrackEvent;}interface MediaStream extends EventTarget{readonly active:boolean;readonly id:string;onaddtrack:((this:MediaStream,ev:MediaStreamTrackEvent)=>any)|null;onremovetrack:((this:MediaStream,ev:MediaStreamTrackEvent)=>any)|null;addTrack(track:MediaStreamTrack):void;clone():MediaStream;getAudioTracks():MediaStreamTrack[];getTrackById(trackId:string):MediaStreamTrack|null;getTracks():MediaStreamTrack[];getVideoTracks():MediaStreamTrack[];removeTrack(track:MediaStreamTrack):void;addEventListener<K extends keyof MediaStreamEventMap>(type:K,listener:(this:MediaStream,ev:MediaStreamEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MediaStreamEventMap>(type:K,listener:(this:MediaStream,ev:MediaStreamEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MediaStream:{prototype:MediaStream;new():MediaStream;new(stream:MediaStream):MediaStream;new(tracks:MediaStreamTrack[]):MediaStream;};interface MediaStreamAudioDestinationNode extends AudioNode{readonly stream:MediaStream;}declare var MediaStreamAudioDestinationNode:{prototype:MediaStreamAudioDestinationNode;new(context:AudioContext,options?:AudioNodeOptions):MediaStreamAudioDestinationNode;};interface MediaStreamAudioSourceNode extends AudioNode{readonly mediaStream:MediaStream;}declare var MediaStreamAudioSourceNode:{prototype:MediaStreamAudioSourceNode;new(context:AudioContext,options:MediaStreamAudioSourceOptions):MediaStreamAudioSourceNode;};interface MediaStreamTrackEventMap{\"ended\":Event;\"mute\":Event;\"unmute\":Event;}interface MediaStreamTrack extends EventTarget{contentHint:string;enabled:boolean;readonly id:string;readonly kind:string;readonly label:string;readonly muted:boolean;onended:((this:MediaStreamTrack,ev:Event)=>any)|null;onmute:((this:MediaStreamTrack,ev:Event)=>any)|null;onunmute:((this:MediaStreamTrack,ev:Event)=>any)|null;readonly readyState:MediaStreamTrackState;applyConstraints(constraints?:MediaTrackConstraints):Promise<void>;clone():MediaStreamTrack;getCapabilities():MediaTrackCapabilities;getConstraints():MediaTrackConstraints;getSettings():MediaTrackSettings;stop():void;addEventListener<K extends keyof MediaStreamTrackEventMap>(type:K,listener:(this:MediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MediaStreamTrackEventMap>(type:K,listener:(this:MediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MediaStreamTrack:{prototype:MediaStreamTrack;new():MediaStreamTrack;};interface MediaStreamTrackEvent extends Event{readonly track:MediaStreamTrack;}declare var MediaStreamTrackEvent:{prototype:MediaStreamTrackEvent;new(type:string,eventInitDict:MediaStreamTrackEventInit):MediaStreamTrackEvent;};interface MessageChannel{readonly port1:MessagePort;readonly port2:MessagePort;}declare var MessageChannel:{prototype:MessageChannel;new():MessageChannel;};interface MessageEvent<T=any>extends Event{readonly data:T;readonly lastEventId:string;readonly origin:string;readonly ports:ReadonlyArray<MessagePort>;readonly source:MessageEventSource|null;initMessageEvent(type:string,bubbles?:boolean,cancelable?:boolean,data?:any,origin?:string,lastEventId?:string,source?:MessageEventSource|null,ports?:MessagePort[]):void;}declare var MessageEvent:{prototype:MessageEvent;new<T>(type:string,eventInitDict?:MessageEventInit<T>):MessageEvent<T>;};interface MessagePortEventMap{\"message\":MessageEvent;\"messageerror\":MessageEvent;}interface MessagePort extends EventTarget{onmessage:((this:MessagePort,ev:MessageEvent)=>any)|null;onmessageerror:((this:MessagePort,ev:MessageEvent)=>any)|null;close():void;postMessage(message:any,transfer:Transferable[]):void;postMessage(message:any,options?:StructuredSerializeOptions):void;start():void;addEventListener<K extends keyof MessagePortEventMap>(type:K,listener:(this:MessagePort,ev:MessagePortEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MessagePortEventMap>(type:K,listener:(this:MessagePort,ev:MessagePortEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MessagePort:{prototype:MessagePort;new():MessagePort;};interface MimeType{readonly description:string;readonly enabledPlugin:Plugin;readonly suffixes:string;readonly type:string;}declare var MimeType:{prototype:MimeType;new():MimeType;};interface MimeTypeArray{readonly length:number;item(index:number):MimeType|null;namedItem(name:string):MimeType|null;[index:number]:MimeType;}declare var MimeTypeArray:{prototype:MimeTypeArray;new():MimeTypeArray;};interface MouseEvent extends UIEvent{readonly altKey:boolean;readonly button:number;readonly buttons:number;readonly clientX:number;readonly clientY:number;readonly ctrlKey:boolean;readonly metaKey:boolean;readonly movementX:number;readonly movementY:number;readonly offsetX:number;readonly offsetY:number;readonly pageX:number;readonly pageY:number;readonly relatedTarget:EventTarget|null;readonly screenX:number;readonly screenY:number;readonly shiftKey:boolean;readonly x:number;readonly y:number;getModifierState(keyArg:string):boolean;initMouseEvent(typeArg:string,canBubbleArg:boolean,cancelableArg:boolean,viewArg:Window,detailArg:number,screenXArg:number,screenYArg:number,clientXArg:number,clientYArg:number,ctrlKeyArg:boolean,altKeyArg:boolean,shiftKeyArg:boolean,metaKeyArg:boolean,buttonArg:number,relatedTargetArg:EventTarget|null):void;}declare var MouseEvent:{prototype:MouseEvent;new(type:string,eventInitDict?:MouseEventInit):MouseEvent;};interface MutationEvent extends Event{readonly attrChange:number;readonly attrName:string;readonly newValue:string;readonly prevValue:string;readonly relatedNode:Node|null;initMutationEvent(typeArg:string,bubblesArg?:boolean,cancelableArg?:boolean,relatedNodeArg?:Node|null,prevValueArg?:string,newValueArg?:string,attrNameArg?:string,attrChangeArg?:number):void;readonly ADDITION:number;readonly MODIFICATION:number;readonly REMOVAL:number;}declare var MutationEvent:{prototype:MutationEvent;new():MutationEvent;readonly ADDITION:number;readonly MODIFICATION:number;readonly REMOVAL:number;};interface MutationObserver{disconnect():void;observe(target:Node,options?:MutationObserverInit):void;takeRecords():MutationRecord[];}declare var MutationObserver:{prototype:MutationObserver;new(callback:MutationCallback):MutationObserver;};interface MutationRecord{readonly addedNodes:NodeList;readonly attributeName:string|null;readonly attributeNamespace:string|null;readonly nextSibling:Node|null;readonly oldValue:string|null;readonly previousSibling:Node|null;readonly removedNodes:NodeList;readonly target:Node;readonly type:MutationRecordType;}declare var MutationRecord:{prototype:MutationRecord;new():MutationRecord;};interface NamedNodeMap{readonly length:number;getNamedItem(qualifiedName:string):Attr|null;getNamedItemNS(namespace:string|null,localName:string):Attr|null;item(index:number):Attr|null;removeNamedItem(qualifiedName:string):Attr;removeNamedItemNS(namespace:string|null,localName:string):Attr;setNamedItem(attr:Attr):Attr|null;setNamedItemNS(attr:Attr):Attr|null;[index:number]:Attr;}declare var NamedNodeMap:{prototype:NamedNodeMap;new():NamedNodeMap;};interface NavigationPreloadManager{disable():Promise<void>;enable():Promise<void>;getState():Promise<NavigationPreloadState>;setHeaderValue(value:string):Promise<void>;}declare var NavigationPreloadManager:{prototype:NavigationPreloadManager;new():NavigationPreloadManager;};interface Navigator extends NavigatorAutomationInformation,NavigatorConcurrentHardware,NavigatorContentUtils,NavigatorCookies,NavigatorID,NavigatorLanguage,NavigatorLocks,NavigatorNetworkInformation,NavigatorOnLine,NavigatorPlugins,NavigatorStorage{readonly clipboard:Clipboard;readonly credentials:CredentialsContainer;readonly doNotTrack:string|null;readonly geolocation:Geolocation;readonly maxTouchPoints:number;readonly mediaCapabilities:MediaCapabilities;readonly mediaDevices:MediaDevices;readonly mediaSession:MediaSession;readonly permissions:Permissions;readonly serviceWorker:ServiceWorkerContainer;canShare(data?:ShareData):boolean;getGamepads():(Gamepad|null)[];requestMIDIAccess(options?:MIDIOptions):Promise<MIDIAccess>;requestMediaKeySystemAccess(keySystem:string,supportedConfigurations:MediaKeySystemConfiguration[]):Promise<MediaKeySystemAccess>;sendBeacon(url:string|URL,data?:BodyInit|null):boolean;share(data?:ShareData):Promise<void>;vibrate(pattern:VibratePattern):boolean;}declare var Navigator:{prototype:Navigator;new():Navigator;};interface NavigatorAutomationInformation{readonly webdriver:boolean;}interface NavigatorConcurrentHardware{readonly hardwareConcurrency:number;}interface NavigatorContentUtils{registerProtocolHandler(scheme:string,url:string|URL):void;}interface NavigatorCookies{readonly cookieEnabled:boolean;}interface NavigatorID{readonly appCodeName:string;readonly appName:string;readonly appVersion:string;readonly platform:string;readonly product:string;readonly productSub:string;readonly userAgent:string;readonly vendor:string;readonly vendorSub:string;}interface NavigatorLanguage{readonly language:string;readonly languages:ReadonlyArray<string>;}interface NavigatorLocks{readonly locks:LockManager;}interface NavigatorNetworkInformation{readonly connection:NetworkInformation;}interface NavigatorOnLine{readonly onLine:boolean;}interface NavigatorPlugins{readonly mimeTypes:MimeTypeArray;readonly pdfViewerEnabled:boolean;readonly plugins:PluginArray;javaEnabled():boolean;}interface NavigatorStorage{readonly storage:StorageManager;}interface NetworkInformation extends EventTarget{readonly type:ConnectionType;}declare var NetworkInformation:{prototype:NetworkInformation;new():NetworkInformation;};interface Node extends EventTarget{readonly baseURI:string;readonly childNodes:NodeListOf<ChildNode>;readonly firstChild:ChildNode|null;readonly isConnected:boolean;readonly lastChild:ChildNode|null;readonly nextSibling:ChildNode|null;readonly nodeName:string;readonly nodeType:number;nodeValue:string|null;readonly ownerDocument:Document|null;readonly parentElement:HTMLElement|null;readonly parentNode:ParentNode|null;readonly previousSibling:ChildNode|null;textContent:string|null;appendChild<T extends Node>(node:T):T;cloneNode(deep?:boolean):Node;compareDocumentPosition(other:Node):number;contains(other:Node|null):boolean;getRootNode(options?:GetRootNodeOptions):Node;hasChildNodes():boolean;insertBefore<T extends Node>(node:T,child:Node|null):T;isDefaultNamespace(namespace:string|null):boolean;isEqualNode(otherNode:Node|null):boolean;isSameNode(otherNode:Node|null):boolean;lookupNamespaceURI(prefix:string|null):string|null;lookupPrefix(namespace:string|null):string|null;normalize():void;removeChild<T extends Node>(child:T):T;replaceChild<T extends Node>(node:Node,child:T):T;readonly ATTRIBUTE_NODE:number;readonly CDATA_SECTION_NODE:number;readonly COMMENT_NODE:number;readonly DOCUMENT_FRAGMENT_NODE:number;readonly DOCUMENT_NODE:number;readonly DOCUMENT_POSITION_CONTAINED_BY:number;readonly DOCUMENT_POSITION_CONTAINS:number;readonly DOCUMENT_POSITION_DISCONNECTED:number;readonly DOCUMENT_POSITION_FOLLOWING:number;readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:number;readonly DOCUMENT_POSITION_PRECEDING:number;readonly DOCUMENT_TYPE_NODE:number;readonly ELEMENT_NODE:number;readonly ENTITY_NODE:number;readonly ENTITY_REFERENCE_NODE:number;readonly NOTATION_NODE:number;readonly PROCESSING_INSTRUCTION_NODE:number;readonly TEXT_NODE:number;}declare var Node:{prototype:Node;new():Node;readonly ATTRIBUTE_NODE:number;readonly CDATA_SECTION_NODE:number;readonly COMMENT_NODE:number;readonly DOCUMENT_FRAGMENT_NODE:number;readonly DOCUMENT_NODE:number;readonly DOCUMENT_POSITION_CONTAINED_BY:number;readonly DOCUMENT_POSITION_CONTAINS:number;readonly DOCUMENT_POSITION_DISCONNECTED:number;readonly DOCUMENT_POSITION_FOLLOWING:number;readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:number;readonly DOCUMENT_POSITION_PRECEDING:number;readonly DOCUMENT_TYPE_NODE:number;readonly ELEMENT_NODE:number;readonly ENTITY_NODE:number;readonly ENTITY_REFERENCE_NODE:number;readonly NOTATION_NODE:number;readonly PROCESSING_INSTRUCTION_NODE:number;readonly TEXT_NODE:number;};interface NodeIterator{readonly filter:NodeFilter|null;readonly pointerBeforeReferenceNode:boolean;readonly referenceNode:Node;readonly root:Node;readonly whatToShow:number;detach():void;nextNode():Node|null;previousNode():Node|null;}declare var NodeIterator:{prototype:NodeIterator;new():NodeIterator;};interface NodeList{readonly length:number;item(index:number):Node|null;forEach(callbackfn:(value:Node,key:number,parent:NodeList)=>void,thisArg?:any):void;[index:number]:Node;}declare var NodeList:{prototype:NodeList;new():NodeList;};interface NodeListOf<TNode extends Node>extends NodeList{item(index:number):TNode;forEach(callbackfn:(value:TNode,key:number,parent:NodeListOf<TNode>)=>void,thisArg?:any):void;[index:number]:TNode;}interface NonDocumentTypeChildNode{readonly nextElementSibling:Element|null;readonly previousElementSibling:Element|null;}interface NonElementParentNode{getElementById(elementId:string):Element|null;}interface NotificationEventMap{\"click\":Event;\"close\":Event;\"error\":Event;\"show\":Event;}interface Notification extends EventTarget{readonly body:string;readonly data:any;readonly dir:NotificationDirection;readonly icon:string;readonly lang:string;onclick:((this:Notification,ev:Event)=>any)|null;onclose:((this:Notification,ev:Event)=>any)|null;onerror:((this:Notification,ev:Event)=>any)|null;onshow:((this:Notification,ev:Event)=>any)|null;readonly tag:string;readonly title:string;close():void;addEventListener<K extends keyof NotificationEventMap>(type:K,listener:(this:Notification,ev:NotificationEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof NotificationEventMap>(type:K,listener:(this:Notification,ev:NotificationEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var Notification:{prototype:Notification;new(title:string,options?:NotificationOptions):Notification;readonly permission:NotificationPermission;requestPermission(deprecatedCallback?:NotificationPermissionCallback):Promise<NotificationPermission>;};interface OES_element_index_uint{}interface OES_fbo_render_mipmap{}interface OES_standard_derivatives{readonly FRAGMENT_SHADER_DERIVATIVE_HINT_OES:GLenum;}interface OES_texture_float{}interface OES_texture_float_linear{}interface OES_texture_half_float{readonly HALF_FLOAT_OES:GLenum;}interface OES_texture_half_float_linear{}interface OES_vertex_array_object{bindVertexArrayOES(arrayObject:WebGLVertexArrayObjectOES|null):void;createVertexArrayOES():WebGLVertexArrayObjectOES|null;deleteVertexArrayOES(arrayObject:WebGLVertexArrayObjectOES|null):void;isVertexArrayOES(arrayObject:WebGLVertexArrayObjectOES|null):GLboolean;readonly VERTEX_ARRAY_BINDING_OES:GLenum;}interface OVR_multiview2{framebufferTextureMultiviewOVR(target:GLenum,attachment:GLenum,texture:WebGLTexture|null,level:GLint,baseViewIndex:GLint,numViews:GLsizei):void;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR:GLenum;readonly FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR:GLenum;readonly MAX_VIEWS_OVR:GLenum;}interface OfflineAudioCompletionEvent extends Event{readonly renderedBuffer:AudioBuffer;}declare var OfflineAudioCompletionEvent:{prototype:OfflineAudioCompletionEvent;new(type:string,eventInitDict:OfflineAudioCompletionEventInit):OfflineAudioCompletionEvent;};interface OfflineAudioContextEventMap extends BaseAudioContextEventMap{\"complete\":OfflineAudioCompletionEvent;}interface OfflineAudioContext extends BaseAudioContext{readonly length:number;oncomplete:((this:OfflineAudioContext,ev:OfflineAudioCompletionEvent)=>any)|null;resume():Promise<void>;startRendering():Promise<AudioBuffer>;suspend(suspendTime:number):Promise<void>;addEventListener<K extends keyof OfflineAudioContextEventMap>(type:K,listener:(this:OfflineAudioContext,ev:OfflineAudioContextEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof OfflineAudioContextEventMap>(type:K,listener:(this:OfflineAudioContext,ev:OfflineAudioContextEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var OfflineAudioContext:{prototype:OfflineAudioContext;new(contextOptions:OfflineAudioContextOptions):OfflineAudioContext;new(numberOfChannels:number,length:number,sampleRate:number):OfflineAudioContext;};interface OscillatorNode extends AudioScheduledSourceNode{readonly detune:AudioParam;readonly frequency:AudioParam;type:OscillatorType;setPeriodicWave(periodicWave:PeriodicWave):void;addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type:K,listener:(this:OscillatorNode,ev:AudioScheduledSourceNodeEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type:K,listener:(this:OscillatorNode,ev:AudioScheduledSourceNodeEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var OscillatorNode:{prototype:OscillatorNode;new(context:BaseAudioContext,options?:OscillatorOptions):OscillatorNode;};interface OverconstrainedError extends Error{readonly constraint:string;}declare var OverconstrainedError:{prototype:OverconstrainedError;new(constraint:string,message?:string):OverconstrainedError;};interface PageTransitionEvent extends Event{readonly persisted:boolean;}declare var PageTransitionEvent:{prototype:PageTransitionEvent;new(type:string,eventInitDict?:PageTransitionEventInit):PageTransitionEvent;};interface PannerNode extends AudioNode{coneInnerAngle:number;coneOuterAngle:number;coneOuterGain:number;distanceModel:DistanceModelType;maxDistance:number;readonly orientationX:AudioParam;readonly orientationY:AudioParam;readonly orientationZ:AudioParam;panningModel:PanningModelType;readonly positionX:AudioParam;readonly positionY:AudioParam;readonly positionZ:AudioParam;refDistance:number;rolloffFactor:number;setOrientation(x:number,y:number,z:number):void;setPosition(x:number,y:number,z:number):void;}declare var PannerNode:{prototype:PannerNode;new(context:BaseAudioContext,options?:PannerOptions):PannerNode;};interface ParentNode extends Node{readonly childElementCount:number;readonly children:HTMLCollection;readonly firstElementChild:Element|null;readonly lastElementChild:Element|null;append(...nodes:(Node|string)[]):void;prepend(...nodes:(Node|string)[]):void;querySelector<K extends keyof HTMLElementTagNameMap>(selectors:K):HTMLElementTagNameMap[K]|null;querySelector<K extends keyof SVGElementTagNameMap>(selectors:K):SVGElementTagNameMap[K]|null;querySelector<E extends Element=Element>(selectors:string):E|null;querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors:K):NodeListOf<HTMLElementTagNameMap[K]>;querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors:K):NodeListOf<SVGElementTagNameMap[K]>;querySelectorAll<E extends Element=Element>(selectors:string):NodeListOf<E>;replaceChildren(...nodes:(Node|string)[]):void;}interface Path2D extends CanvasPath{addPath(path:Path2D,transform?:DOMMatrix2DInit):void;}declare var Path2D:{prototype:Path2D;new(path?:Path2D|string):Path2D;};interface PaymentMethodChangeEvent extends PaymentRequestUpdateEvent{readonly methodDetails:any;readonly methodName:string;}declare var PaymentMethodChangeEvent:{prototype:PaymentMethodChangeEvent;new(type:string,eventInitDict?:PaymentMethodChangeEventInit):PaymentMethodChangeEvent;};interface PaymentRequestEventMap{\"paymentmethodchange\":Event;}interface PaymentRequest extends EventTarget{readonly id:string;onpaymentmethodchange:((this:PaymentRequest,ev:Event)=>any)|null;abort():Promise<void>;canMakePayment():Promise<boolean>;show(detailsPromise?:PaymentDetailsUpdate|PromiseLike<PaymentDetailsUpdate>):Promise<PaymentResponse>;addEventListener<K extends keyof PaymentRequestEventMap>(type:K,listener:(this:PaymentRequest,ev:PaymentRequestEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof PaymentRequestEventMap>(type:K,listener:(this:PaymentRequest,ev:PaymentRequestEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var PaymentRequest:{prototype:PaymentRequest;new(methodData:PaymentMethodData[],details:PaymentDetailsInit):PaymentRequest;};interface PaymentRequestUpdateEvent extends Event{updateWith(detailsPromise:PaymentDetailsUpdate|PromiseLike<PaymentDetailsUpdate>):void;}declare var PaymentRequestUpdateEvent:{prototype:PaymentRequestUpdateEvent;new(type:string,eventInitDict?:PaymentRequestUpdateEventInit):PaymentRequestUpdateEvent;};interface PaymentResponse extends EventTarget{readonly details:any;readonly methodName:string;readonly requestId:string;complete(result?:PaymentComplete):Promise<void>;retry(errorFields?:PaymentValidationErrors):Promise<void>;toJSON():any;}declare var PaymentResponse:{prototype:PaymentResponse;new():PaymentResponse;};interface PerformanceEventMap{\"resourcetimingbufferfull\":Event;}interface Performance extends EventTarget{readonly eventCounts:EventCounts;readonly navigation:PerformanceNavigation;onresourcetimingbufferfull:((this:Performance,ev:Event)=>any)|null;readonly timeOrigin:DOMHighResTimeStamp;readonly timing:PerformanceTiming;clearMarks(markName?:string):void;clearMeasures(measureName?:string):void;clearResourceTimings():void;getEntries():PerformanceEntryList;getEntriesByName(name:string,type?:string):PerformanceEntryList;getEntriesByType(type:string):PerformanceEntryList;mark(markName:string,markOptions?:PerformanceMarkOptions):PerformanceMark;measure(measureName:string,startOrMeasureOptions?:string|PerformanceMeasureOptions,endMark?:string):PerformanceMeasure;now():DOMHighResTimeStamp;setResourceTimingBufferSize(maxSize:number):void;toJSON():any;addEventListener<K extends keyof PerformanceEventMap>(type:K,listener:(this:Performance,ev:PerformanceEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof PerformanceEventMap>(type:K,listener:(this:Performance,ev:PerformanceEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var Performance:{prototype:Performance;new():Performance;};interface PerformanceEntry{readonly duration:DOMHighResTimeStamp;readonly entryType:string;readonly name:string;readonly startTime:DOMHighResTimeStamp;toJSON():any;}declare var PerformanceEntry:{prototype:PerformanceEntry;new():PerformanceEntry;};interface PerformanceEventTiming extends PerformanceEntry{readonly cancelable:boolean;readonly processingEnd:DOMHighResTimeStamp;readonly processingStart:DOMHighResTimeStamp;readonly target:Node|null;toJSON():any;}declare var PerformanceEventTiming:{prototype:PerformanceEventTiming;new():PerformanceEventTiming;};interface PerformanceMark extends PerformanceEntry{readonly detail:any;}declare var PerformanceMark:{prototype:PerformanceMark;new(markName:string,markOptions?:PerformanceMarkOptions):PerformanceMark;};interface PerformanceMeasure extends PerformanceEntry{readonly detail:any;}declare var PerformanceMeasure:{prototype:PerformanceMeasure;new():PerformanceMeasure;};interface PerformanceNavigation{readonly redirectCount:number;readonly type:number;toJSON():any;readonly TYPE_BACK_FORWARD:number;readonly TYPE_NAVIGATE:number;readonly TYPE_RELOAD:number;readonly TYPE_RESERVED:number;}declare var PerformanceNavigation:{prototype:PerformanceNavigation;new():PerformanceNavigation;readonly TYPE_BACK_FORWARD:number;readonly TYPE_NAVIGATE:number;readonly TYPE_RELOAD:number;readonly TYPE_RESERVED:number;};interface PerformanceNavigationTiming extends PerformanceResourceTiming{readonly domComplete:DOMHighResTimeStamp;readonly domContentLoadedEventEnd:DOMHighResTimeStamp;readonly domContentLoadedEventStart:DOMHighResTimeStamp;readonly domInteractive:DOMHighResTimeStamp;readonly loadEventEnd:DOMHighResTimeStamp;readonly loadEventStart:DOMHighResTimeStamp;readonly redirectCount:number;readonly type:NavigationTimingType;readonly unloadEventEnd:DOMHighResTimeStamp;readonly unloadEventStart:DOMHighResTimeStamp;toJSON():any;}declare var PerformanceNavigationTiming:{prototype:PerformanceNavigationTiming;new():PerformanceNavigationTiming;};interface PerformanceObserver{disconnect():void;observe(options?:PerformanceObserverInit):void;takeRecords():PerformanceEntryList;}declare var PerformanceObserver:{prototype:PerformanceObserver;new(callback:PerformanceObserverCallback):PerformanceObserver;readonly supportedEntryTypes:ReadonlyArray<string>;};interface PerformanceObserverEntryList{getEntries():PerformanceEntryList;getEntriesByName(name:string,type?:string):PerformanceEntryList;getEntriesByType(type:string):PerformanceEntryList;}declare var PerformanceObserverEntryList:{prototype:PerformanceObserverEntryList;new():PerformanceObserverEntryList;};interface PerformancePaintTiming extends PerformanceEntry{}declare var PerformancePaintTiming:{prototype:PerformancePaintTiming;new():PerformancePaintTiming;};interface PerformanceResourceTiming extends PerformanceEntry{readonly connectEnd:DOMHighResTimeStamp;readonly connectStart:DOMHighResTimeStamp;readonly decodedBodySize:number;readonly domainLookupEnd:DOMHighResTimeStamp;readonly domainLookupStart:DOMHighResTimeStamp;readonly encodedBodySize:number;readonly fetchStart:DOMHighResTimeStamp;readonly initiatorType:string;readonly nextHopProtocol:string;readonly redirectEnd:DOMHighResTimeStamp;readonly redirectStart:DOMHighResTimeStamp;readonly requestStart:DOMHighResTimeStamp;readonly responseEnd:DOMHighResTimeStamp;readonly responseStart:DOMHighResTimeStamp;readonly secureConnectionStart:DOMHighResTimeStamp;readonly serverTiming:ReadonlyArray<PerformanceServerTiming>;readonly transferSize:number;readonly workerStart:DOMHighResTimeStamp;toJSON():any;}declare var PerformanceResourceTiming:{prototype:PerformanceResourceTiming;new():PerformanceResourceTiming;};interface PerformanceServerTiming{readonly description:string;readonly duration:DOMHighResTimeStamp;readonly name:string;toJSON():any;}declare var PerformanceServerTiming:{prototype:PerformanceServerTiming;new():PerformanceServerTiming;};interface PerformanceTiming{readonly connectEnd:number;readonly connectStart:number;readonly domComplete:number;readonly domContentLoadedEventEnd:number;readonly domContentLoadedEventStart:number;readonly domInteractive:number;readonly domLoading:number;readonly domainLookupEnd:number;readonly domainLookupStart:number;readonly fetchStart:number;readonly loadEventEnd:number;readonly loadEventStart:number;readonly navigationStart:number;readonly redirectEnd:number;readonly redirectStart:number;readonly requestStart:number;readonly responseEnd:number;readonly responseStart:number;readonly secureConnectionStart:number;readonly unloadEventEnd:number;readonly unloadEventStart:number;toJSON():any;}declare var PerformanceTiming:{prototype:PerformanceTiming;new():PerformanceTiming;};interface PeriodicWave{}declare var PeriodicWave:{prototype:PeriodicWave;new(context:BaseAudioContext,options?:PeriodicWaveOptions):PeriodicWave;};interface PermissionStatusEventMap{\"change\":Event;}interface PermissionStatus extends EventTarget{onchange:((this:PermissionStatus,ev:Event)=>any)|null;readonly state:PermissionState;addEventListener<K extends keyof PermissionStatusEventMap>(type:K,listener:(this:PermissionStatus,ev:PermissionStatusEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof PermissionStatusEventMap>(type:K,listener:(this:PermissionStatus,ev:PermissionStatusEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var PermissionStatus:{prototype:PermissionStatus;new():PermissionStatus;};interface Permissions{query(permissionDesc:PermissionDescriptor):Promise<PermissionStatus>;}declare var Permissions:{prototype:Permissions;new():Permissions;};interface PictureInPictureWindowEventMap{\"resize\":Event;}interface PictureInPictureWindow extends EventTarget{readonly height:number;onresize:((this:PictureInPictureWindow,ev:Event)=>any)|null;readonly width:number;addEventListener<K extends keyof PictureInPictureWindowEventMap>(type:K,listener:(this:PictureInPictureWindow,ev:PictureInPictureWindowEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof PictureInPictureWindowEventMap>(type:K,listener:(this:PictureInPictureWindow,ev:PictureInPictureWindowEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var PictureInPictureWindow:{prototype:PictureInPictureWindow;new():PictureInPictureWindow;};interface Plugin{readonly description:string;readonly filename:string;readonly length:number;readonly name:string;item(index:number):MimeType|null;namedItem(name:string):MimeType|null;[index:number]:MimeType;}declare var Plugin:{prototype:Plugin;new():Plugin;};interface PluginArray{readonly length:number;item(index:number):Plugin|null;namedItem(name:string):Plugin|null;refresh():void;[index:number]:Plugin;}declare var PluginArray:{prototype:PluginArray;new():PluginArray;};interface PointerEvent extends MouseEvent{readonly height:number;readonly isPrimary:boolean;readonly pointerId:number;readonly pointerType:string;readonly pressure:number;readonly tangentialPressure:number;readonly tiltX:number;readonly tiltY:number;readonly twist:number;readonly width:number;getCoalescedEvents():PointerEvent[];getPredictedEvents():PointerEvent[];}declare var PointerEvent:{prototype:PointerEvent;new(type:string,eventInitDict?:PointerEventInit):PointerEvent;};interface PopStateEvent extends Event{readonly state:any;}declare var PopStateEvent:{prototype:PopStateEvent;new(type:string,eventInitDict?:PopStateEventInit):PopStateEvent;};interface ProcessingInstruction extends CharacterData,LinkStyle{readonly ownerDocument:Document;readonly target:string;}declare var ProcessingInstruction:{prototype:ProcessingInstruction;new():ProcessingInstruction;};interface ProgressEvent<T extends EventTarget=EventTarget>extends Event{readonly lengthComputable:boolean;readonly loaded:number;readonly target:T|null;readonly total:number;}declare var ProgressEvent:{prototype:ProgressEvent;new(type:string,eventInitDict?:ProgressEventInit):ProgressEvent;};interface PromiseRejectionEvent extends Event{readonly promise:Promise<any>;readonly reason:any;}declare var PromiseRejectionEvent:{prototype:PromiseRejectionEvent;new(type:string,eventInitDict:PromiseRejectionEventInit):PromiseRejectionEvent;};interface PublicKeyCredential extends Credential{readonly rawId:ArrayBuffer;readonly response:AuthenticatorResponse;getClientExtensionResults():AuthenticationExtensionsClientOutputs;}declare var PublicKeyCredential:{prototype:PublicKeyCredential;new():PublicKeyCredential;isUserVerifyingPlatformAuthenticatorAvailable():Promise<boolean>;};interface PushManager{getSubscription():Promise<PushSubscription|null>;permissionState(options?:PushSubscriptionOptionsInit):Promise<PermissionState>;subscribe(options?:PushSubscriptionOptionsInit):Promise<PushSubscription>;}declare var PushManager:{prototype:PushManager;new():PushManager;readonly supportedContentEncodings:ReadonlyArray<string>;};interface PushSubscription{readonly endpoint:string;readonly options:PushSubscriptionOptions;getKey(name:PushEncryptionKeyName):ArrayBuffer|null;toJSON():PushSubscriptionJSON;unsubscribe():Promise<boolean>;}declare var PushSubscription:{prototype:PushSubscription;new():PushSubscription;};interface PushSubscriptionOptions{readonly applicationServerKey:ArrayBuffer|null;}declare var PushSubscriptionOptions:{prototype:PushSubscriptionOptions;new():PushSubscriptionOptions;};interface RTCCertificate{readonly expires:EpochTimeStamp;getFingerprints():RTCDtlsFingerprint[];}declare var RTCCertificate:{prototype:RTCCertificate;new():RTCCertificate;};interface RTCDTMFSenderEventMap{\"tonechange\":RTCDTMFToneChangeEvent;}interface RTCDTMFSender extends EventTarget{readonly canInsertDTMF:boolean;ontonechange:((this:RTCDTMFSender,ev:RTCDTMFToneChangeEvent)=>any)|null;readonly toneBuffer:string;insertDTMF(tones:string,duration?:number,interToneGap?:number):void;addEventListener<K extends keyof RTCDTMFSenderEventMap>(type:K,listener:(this:RTCDTMFSender,ev:RTCDTMFSenderEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof RTCDTMFSenderEventMap>(type:K,listener:(this:RTCDTMFSender,ev:RTCDTMFSenderEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var RTCDTMFSender:{prototype:RTCDTMFSender;new():RTCDTMFSender;};interface RTCDTMFToneChangeEvent extends Event{readonly tone:string;}declare var RTCDTMFToneChangeEvent:{prototype:RTCDTMFToneChangeEvent;new(type:string,eventInitDict?:RTCDTMFToneChangeEventInit):RTCDTMFToneChangeEvent;};interface RTCDataChannelEventMap{\"bufferedamountlow\":Event;\"close\":Event;\"closing\":Event;\"error\":Event;\"message\":MessageEvent;\"open\":Event;}interface RTCDataChannel extends EventTarget{binaryType:BinaryType;readonly bufferedAmount:number;bufferedAmountLowThreshold:number;readonly id:number|null;readonly label:string;readonly maxPacketLifeTime:number|null;readonly maxRetransmits:number|null;readonly negotiated:boolean;onbufferedamountlow:((this:RTCDataChannel,ev:Event)=>any)|null;onclose:((this:RTCDataChannel,ev:Event)=>any)|null;onclosing:((this:RTCDataChannel,ev:Event)=>any)|null;onerror:((this:RTCDataChannel,ev:Event)=>any)|null;onmessage:((this:RTCDataChannel,ev:MessageEvent)=>any)|null;onopen:((this:RTCDataChannel,ev:Event)=>any)|null;readonly ordered:boolean;readonly protocol:string;readonly readyState:RTCDataChannelState;close():void;send(data:string):void;send(data:Blob):void;send(data:ArrayBuffer):void;send(data:ArrayBufferView):void;addEventListener<K extends keyof RTCDataChannelEventMap>(type:K,listener:(this:RTCDataChannel,ev:RTCDataChannelEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof RTCDataChannelEventMap>(type:K,listener:(this:RTCDataChannel,ev:RTCDataChannelEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var RTCDataChannel:{prototype:RTCDataChannel;new():RTCDataChannel;};interface RTCDataChannelEvent extends Event{readonly channel:RTCDataChannel;}declare var RTCDataChannelEvent:{prototype:RTCDataChannelEvent;new(type:string,eventInitDict:RTCDataChannelEventInit):RTCDataChannelEvent;};interface RTCDtlsTransportEventMap{\"error\":Event;\"statechange\":Event;}interface RTCDtlsTransport extends EventTarget{readonly iceTransport:RTCIceTransport;onerror:((this:RTCDtlsTransport,ev:Event)=>any)|null;onstatechange:((this:RTCDtlsTransport,ev:Event)=>any)|null;readonly state:RTCDtlsTransportState;getRemoteCertificates():ArrayBuffer[];addEventListener<K extends keyof RTCDtlsTransportEventMap>(type:K,listener:(this:RTCDtlsTransport,ev:RTCDtlsTransportEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof RTCDtlsTransportEventMap>(type:K,listener:(this:RTCDtlsTransport,ev:RTCDtlsTransportEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var RTCDtlsTransport:{prototype:RTCDtlsTransport;new():RTCDtlsTransport;};interface RTCEncodedAudioFrame{data:ArrayBuffer;readonly timestamp:number;getMetadata():RTCEncodedAudioFrameMetadata;}declare var RTCEncodedAudioFrame:{prototype:RTCEncodedAudioFrame;new():RTCEncodedAudioFrame;};interface RTCEncodedVideoFrame{data:ArrayBuffer;readonly timestamp:number;readonly type:RTCEncodedVideoFrameType;getMetadata():RTCEncodedVideoFrameMetadata;}declare var RTCEncodedVideoFrame:{prototype:RTCEncodedVideoFrame;new():RTCEncodedVideoFrame;};interface RTCError extends DOMException{readonly errorDetail:RTCErrorDetailType;readonly receivedAlert:number|null;readonly sctpCauseCode:number|null;readonly sdpLineNumber:number|null;readonly sentAlert:number|null;}declare var RTCError:{prototype:RTCError;new(init:RTCErrorInit,message?:string):RTCError;};interface RTCErrorEvent extends Event{readonly error:RTCError;}declare var RTCErrorEvent:{prototype:RTCErrorEvent;new(type:string,eventInitDict:RTCErrorEventInit):RTCErrorEvent;};interface RTCIceCandidate{readonly address:string|null;readonly candidate:string;readonly component:RTCIceComponent|null;readonly foundation:string|null;readonly port:number|null;readonly priority:number|null;readonly protocol:RTCIceProtocol|null;readonly relatedAddress:string|null;readonly relatedPort:number|null;readonly sdpMLineIndex:number|null;readonly sdpMid:string|null;readonly tcpType:RTCIceTcpCandidateType|null;readonly type:RTCIceCandidateType|null;readonly usernameFragment:string|null;toJSON():RTCIceCandidateInit;}declare var RTCIceCandidate:{prototype:RTCIceCandidate;new(candidateInitDict?:RTCIceCandidateInit):RTCIceCandidate;};interface RTCIceTransportEventMap{\"gatheringstatechange\":Event;\"statechange\":Event;}interface RTCIceTransport extends EventTarget{readonly gatheringState:RTCIceGathererState;ongatheringstatechange:((this:RTCIceTransport,ev:Event)=>any)|null;onstatechange:((this:RTCIceTransport,ev:Event)=>any)|null;readonly state:RTCIceTransportState;addEventListener<K extends keyof RTCIceTransportEventMap>(type:K,listener:(this:RTCIceTransport,ev:RTCIceTransportEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof RTCIceTransportEventMap>(type:K,listener:(this:RTCIceTransport,ev:RTCIceTransportEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var RTCIceTransport:{prototype:RTCIceTransport;new():RTCIceTransport;};interface RTCPeerConnectionEventMap{\"connectionstatechange\":Event;\"datachannel\":RTCDataChannelEvent;\"icecandidate\":RTCPeerConnectionIceEvent;\"icecandidateerror\":Event;\"iceconnectionstatechange\":Event;\"icegatheringstatechange\":Event;\"negotiationneeded\":Event;\"signalingstatechange\":Event;\"track\":RTCTrackEvent;}interface RTCPeerConnection extends EventTarget{readonly canTrickleIceCandidates:boolean|null;readonly connectionState:RTCPeerConnectionState;readonly currentLocalDescription:RTCSessionDescription|null;readonly currentRemoteDescription:RTCSessionDescription|null;readonly iceConnectionState:RTCIceConnectionState;readonly iceGatheringState:RTCIceGatheringState;readonly localDescription:RTCSessionDescription|null;onconnectionstatechange:((this:RTCPeerConnection,ev:Event)=>any)|null;ondatachannel:((this:RTCPeerConnection,ev:RTCDataChannelEvent)=>any)|null;onicecandidate:((this:RTCPeerConnection,ev:RTCPeerConnectionIceEvent)=>any)|null;onicecandidateerror:((this:RTCPeerConnection,ev:Event)=>any)|null;oniceconnectionstatechange:((this:RTCPeerConnection,ev:Event)=>any)|null;onicegatheringstatechange:((this:RTCPeerConnection,ev:Event)=>any)|null;onnegotiationneeded:((this:RTCPeerConnection,ev:Event)=>any)|null;onsignalingstatechange:((this:RTCPeerConnection,ev:Event)=>any)|null;ontrack:((this:RTCPeerConnection,ev:RTCTrackEvent)=>any)|null;readonly pendingLocalDescription:RTCSessionDescription|null;readonly pendingRemoteDescription:RTCSessionDescription|null;readonly remoteDescription:RTCSessionDescription|null;readonly sctp:RTCSctpTransport|null;readonly signalingState:RTCSignalingState;addIceCandidate(candidate?:RTCIceCandidateInit):Promise<void>;addIceCandidate(candidate:RTCIceCandidateInit,successCallback:VoidFunction,failureCallback:RTCPeerConnectionErrorCallback):Promise<void>;addTrack(track:MediaStreamTrack,...streams:MediaStream[]):RTCRtpSender;addTransceiver(trackOrKind:MediaStreamTrack|string,init?:RTCRtpTransceiverInit):RTCRtpTransceiver;close():void;createAnswer(options?:RTCAnswerOptions):Promise<RTCSessionDescriptionInit>;createAnswer(successCallback:RTCSessionDescriptionCallback,failureCallback:RTCPeerConnectionErrorCallback):Promise<void>;createDataChannel(label:string,dataChannelDict?:RTCDataChannelInit):RTCDataChannel;createOffer(options?:RTCOfferOptions):Promise<RTCSessionDescriptionInit>;createOffer(successCallback:RTCSessionDescriptionCallback,failureCallback:RTCPeerConnectionErrorCallback,options?:RTCOfferOptions):Promise<void>;getConfiguration():RTCConfiguration;getReceivers():RTCRtpReceiver[];getSenders():RTCRtpSender[];getStats(selector?:MediaStreamTrack|null):Promise<RTCStatsReport>;getTransceivers():RTCRtpTransceiver[];removeTrack(sender:RTCRtpSender):void;restartIce():void;setConfiguration(configuration?:RTCConfiguration):void;setLocalDescription(description?:RTCLocalSessionDescriptionInit):Promise<void>;setLocalDescription(description:RTCLocalSessionDescriptionInit,successCallback:VoidFunction,failureCallback:RTCPeerConnectionErrorCallback):Promise<void>;setRemoteDescription(description:RTCSessionDescriptionInit):Promise<void>;setRemoteDescription(description:RTCSessionDescriptionInit,successCallback:VoidFunction,failureCallback:RTCPeerConnectionErrorCallback):Promise<void>;addEventListener<K extends keyof RTCPeerConnectionEventMap>(type:K,listener:(this:RTCPeerConnection,ev:RTCPeerConnectionEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof RTCPeerConnectionEventMap>(type:K,listener:(this:RTCPeerConnection,ev:RTCPeerConnectionEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var RTCPeerConnection:{prototype:RTCPeerConnection;new(configuration?:RTCConfiguration):RTCPeerConnection;generateCertificate(keygenAlgorithm:AlgorithmIdentifier):Promise<RTCCertificate>;};interface RTCPeerConnectionIceErrorEvent extends Event{readonly address:string|null;readonly errorCode:number;readonly errorText:string;readonly port:number|null;readonly url:string;}declare var RTCPeerConnectionIceErrorEvent:{prototype:RTCPeerConnectionIceErrorEvent;new(type:string,eventInitDict:RTCPeerConnectionIceErrorEventInit):RTCPeerConnectionIceErrorEvent;};interface RTCPeerConnectionIceEvent extends Event{readonly candidate:RTCIceCandidate|null;}declare var RTCPeerConnectionIceEvent:{prototype:RTCPeerConnectionIceEvent;new(type:string,eventInitDict?:RTCPeerConnectionIceEventInit):RTCPeerConnectionIceEvent;};interface RTCRtpReceiver{readonly track:MediaStreamTrack;readonly transport:RTCDtlsTransport|null;getContributingSources():RTCRtpContributingSource[];getParameters():RTCRtpReceiveParameters;getStats():Promise<RTCStatsReport>;getSynchronizationSources():RTCRtpSynchronizationSource[];}declare var RTCRtpReceiver:{prototype:RTCRtpReceiver;new():RTCRtpReceiver;getCapabilities(kind:string):RTCRtpCapabilities|null;};interface RTCRtpSender{readonly dtmf:RTCDTMFSender|null;readonly track:MediaStreamTrack|null;readonly transport:RTCDtlsTransport|null;getParameters():RTCRtpSendParameters;getStats():Promise<RTCStatsReport>;replaceTrack(withTrack:MediaStreamTrack|null):Promise<void>;setParameters(parameters:RTCRtpSendParameters):Promise<void>;setStreams(...streams:MediaStream[]):void;}declare var RTCRtpSender:{prototype:RTCRtpSender;new():RTCRtpSender;getCapabilities(kind:string):RTCRtpCapabilities|null;};interface RTCRtpTransceiver{readonly currentDirection:RTCRtpTransceiverDirection|null;direction:RTCRtpTransceiverDirection;readonly mid:string|null;readonly receiver:RTCRtpReceiver;readonly sender:RTCRtpSender;setCodecPreferences(codecs:RTCRtpCodecCapability[]):void;stop():void;}declare var RTCRtpTransceiver:{prototype:RTCRtpTransceiver;new():RTCRtpTransceiver;};interface RTCSctpTransportEventMap{\"statechange\":Event;}interface RTCSctpTransport extends EventTarget{readonly maxChannels:number|null;readonly maxMessageSize:number;onstatechange:((this:RTCSctpTransport,ev:Event)=>any)|null;readonly state:RTCSctpTransportState;readonly transport:RTCDtlsTransport;addEventListener<K extends keyof RTCSctpTransportEventMap>(type:K,listener:(this:RTCSctpTransport,ev:RTCSctpTransportEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof RTCSctpTransportEventMap>(type:K,listener:(this:RTCSctpTransport,ev:RTCSctpTransportEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var RTCSctpTransport:{prototype:RTCSctpTransport;new():RTCSctpTransport;};interface RTCSessionDescription{readonly sdp:string;readonly type:RTCSdpType;toJSON():any;}declare var RTCSessionDescription:{prototype:RTCSessionDescription;new(descriptionInitDict:RTCSessionDescriptionInit):RTCSessionDescription;};interface RTCStatsReport{forEach(callbackfn:(value:any,key:string,parent:RTCStatsReport)=>void,thisArg?:any):void;}declare var RTCStatsReport:{prototype:RTCStatsReport;new():RTCStatsReport;};interface RTCTrackEvent extends Event{readonly receiver:RTCRtpReceiver;readonly streams:ReadonlyArray<MediaStream>;readonly track:MediaStreamTrack;readonly transceiver:RTCRtpTransceiver;}declare var RTCTrackEvent:{prototype:RTCTrackEvent;new(type:string,eventInitDict:RTCTrackEventInit):RTCTrackEvent;};interface RadioNodeList extends NodeList{value:string;}declare var RadioNodeList:{prototype:RadioNodeList;new():RadioNodeList;};interface Range extends AbstractRange{readonly commonAncestorContainer:Node;cloneContents():DocumentFragment;cloneRange():Range;collapse(toStart?:boolean):void;compareBoundaryPoints(how:number,sourceRange:Range):number;comparePoint(node:Node,offset:number):number;createContextualFragment(fragment:string):DocumentFragment;deleteContents():void;detach():void;extractContents():DocumentFragment;getBoundingClientRect():DOMRect;getClientRects():DOMRectList;insertNode(node:Node):void;intersectsNode(node:Node):boolean;isPointInRange(node:Node,offset:number):boolean;selectNode(node:Node):void;selectNodeContents(node:Node):void;setEnd(node:Node,offset:number):void;setEndAfter(node:Node):void;setEndBefore(node:Node):void;setStart(node:Node,offset:number):void;setStartAfter(node:Node):void;setStartBefore(node:Node):void;surroundContents(newParent:Node):void;toString():string;readonly END_TO_END:number;readonly END_TO_START:number;readonly START_TO_END:number;readonly START_TO_START:number;}declare var Range:{prototype:Range;new():Range;readonly END_TO_END:number;readonly END_TO_START:number;readonly START_TO_END:number;readonly START_TO_START:number;toString():string;};interface ReadableStream<R=any>{readonly locked:boolean;cancel(reason?:any):Promise<void>;getReader():ReadableStreamDefaultReader<R>;pipeThrough<T>(transform:ReadableWritablePair<T,R>,options?:StreamPipeOptions):ReadableStream<T>;pipeTo(destination:WritableStream<R>,options?:StreamPipeOptions):Promise<void>;tee():[ReadableStream<R>,ReadableStream<R>];}declare var ReadableStream:{prototype:ReadableStream;new<R=any>(underlyingSource?:UnderlyingSource<R>,strategy?:QueuingStrategy<R>):ReadableStream<R>;};interface ReadableStreamDefaultController<R=any>{readonly desiredSize:number|null;close():void;enqueue(chunk?:R):void;error(e?:any):void;}declare var ReadableStreamDefaultController:{prototype:ReadableStreamDefaultController;new():ReadableStreamDefaultController;};interface ReadableStreamDefaultReader<R=any>extends ReadableStreamGenericReader{read():Promise<ReadableStreamDefaultReadResult<R>>;releaseLock():void;}declare var ReadableStreamDefaultReader:{prototype:ReadableStreamDefaultReader;new<R=any>(stream:ReadableStream<R>):ReadableStreamDefaultReader<R>;};interface ReadableStreamGenericReader{readonly closed:Promise<undefined>;cancel(reason?:any):Promise<void>;}interface RemotePlaybackEventMap{\"connect\":Event;\"connecting\":Event;\"disconnect\":Event;}interface RemotePlayback extends EventTarget{onconnect:((this:RemotePlayback,ev:Event)=>any)|null;onconnecting:((this:RemotePlayback,ev:Event)=>any)|null;ondisconnect:((this:RemotePlayback,ev:Event)=>any)|null;readonly state:RemotePlaybackState;cancelWatchAvailability(id?:number):Promise<void>;prompt():Promise<void>;watchAvailability(callback:RemotePlaybackAvailabilityCallback):Promise<number>;addEventListener<K extends keyof RemotePlaybackEventMap>(type:K,listener:(this:RemotePlayback,ev:RemotePlaybackEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof RemotePlaybackEventMap>(type:K,listener:(this:RemotePlayback,ev:RemotePlaybackEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var RemotePlayback:{prototype:RemotePlayback;new():RemotePlayback;};interface Request extends Body{readonly cache:RequestCache;readonly credentials:RequestCredentials;readonly destination:RequestDestination;readonly headers:Headers;readonly integrity:string;readonly keepalive:boolean;readonly method:string;readonly mode:RequestMode;readonly redirect:RequestRedirect;readonly referrer:string;readonly referrerPolicy:ReferrerPolicy;readonly signal:AbortSignal;readonly url:string;clone():Request;}declare var Request:{prototype:Request;new(input:RequestInfo|URL,init?:RequestInit):Request;};interface ResizeObserver{disconnect():void;observe(target:Element,options?:ResizeObserverOptions):void;unobserve(target:Element):void;}declare var ResizeObserver:{prototype:ResizeObserver;new(callback:ResizeObserverCallback):ResizeObserver;};interface ResizeObserverEntry{readonly borderBoxSize:ReadonlyArray<ResizeObserverSize>;readonly contentBoxSize:ReadonlyArray<ResizeObserverSize>;readonly contentRect:DOMRectReadOnly;readonly devicePixelContentBoxSize:ReadonlyArray<ResizeObserverSize>;readonly target:Element;}declare var ResizeObserverEntry:{prototype:ResizeObserverEntry;new():ResizeObserverEntry;};interface ResizeObserverSize{readonly blockSize:number;readonly inlineSize:number;}declare var ResizeObserverSize:{prototype:ResizeObserverSize;new():ResizeObserverSize;};interface Response extends Body{readonly headers:Headers;readonly ok:boolean;readonly redirected:boolean;readonly status:number;readonly statusText:string;readonly type:ResponseType;readonly url:string;clone():Response;}declare var Response:{prototype:Response;new(body?:BodyInit|null,init?:ResponseInit):Response;error():Response;redirect(url:string|URL,status?:number):Response;};interface SVGAElement extends SVGGraphicsElement,SVGURIReference{rel:string;readonly relList:DOMTokenList;readonly target:SVGAnimatedString;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGAElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGAElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGAElement:{prototype:SVGAElement;new():SVGAElement;};interface SVGAngle{readonly unitType:number;value:number;valueAsString:string;valueInSpecifiedUnits:number;convertToSpecifiedUnits(unitType:number):void;newValueSpecifiedUnits(unitType:number,valueInSpecifiedUnits:number):void;readonly SVG_ANGLETYPE_DEG:number;readonly SVG_ANGLETYPE_GRAD:number;readonly SVG_ANGLETYPE_RAD:number;readonly SVG_ANGLETYPE_UNKNOWN:number;readonly SVG_ANGLETYPE_UNSPECIFIED:number;}declare var SVGAngle:{prototype:SVGAngle;new():SVGAngle;readonly SVG_ANGLETYPE_DEG:number;readonly SVG_ANGLETYPE_GRAD:number;readonly SVG_ANGLETYPE_RAD:number;readonly SVG_ANGLETYPE_UNKNOWN:number;readonly SVG_ANGLETYPE_UNSPECIFIED:number;};interface SVGAnimateElement extends SVGAnimationElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGAnimateElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGAnimateElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGAnimateElement:{prototype:SVGAnimateElement;new():SVGAnimateElement;};interface SVGAnimateMotionElement extends SVGAnimationElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGAnimateMotionElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGAnimateMotionElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGAnimateMotionElement:{prototype:SVGAnimateMotionElement;new():SVGAnimateMotionElement;};interface SVGAnimateTransformElement extends SVGAnimationElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGAnimateTransformElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGAnimateTransformElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGAnimateTransformElement:{prototype:SVGAnimateTransformElement;new():SVGAnimateTransformElement;};interface SVGAnimatedAngle{readonly animVal:SVGAngle;readonly baseVal:SVGAngle;}declare var SVGAnimatedAngle:{prototype:SVGAnimatedAngle;new():SVGAnimatedAngle;};interface SVGAnimatedBoolean{readonly animVal:boolean;baseVal:boolean;}declare var SVGAnimatedBoolean:{prototype:SVGAnimatedBoolean;new():SVGAnimatedBoolean;};interface SVGAnimatedEnumeration{readonly animVal:number;baseVal:number;}declare var SVGAnimatedEnumeration:{prototype:SVGAnimatedEnumeration;new():SVGAnimatedEnumeration;};interface SVGAnimatedInteger{readonly animVal:number;baseVal:number;}declare var SVGAnimatedInteger:{prototype:SVGAnimatedInteger;new():SVGAnimatedInteger;};interface SVGAnimatedLength{readonly animVal:SVGLength;readonly baseVal:SVGLength;}declare var SVGAnimatedLength:{prototype:SVGAnimatedLength;new():SVGAnimatedLength;};interface SVGAnimatedLengthList{readonly animVal:SVGLengthList;readonly baseVal:SVGLengthList;}declare var SVGAnimatedLengthList:{prototype:SVGAnimatedLengthList;new():SVGAnimatedLengthList;};interface SVGAnimatedNumber{readonly animVal:number;baseVal:number;}declare var SVGAnimatedNumber:{prototype:SVGAnimatedNumber;new():SVGAnimatedNumber;};interface SVGAnimatedNumberList{readonly animVal:SVGNumberList;readonly baseVal:SVGNumberList;}declare var SVGAnimatedNumberList:{prototype:SVGAnimatedNumberList;new():SVGAnimatedNumberList;};interface SVGAnimatedPoints{readonly animatedPoints:SVGPointList;readonly points:SVGPointList;}interface SVGAnimatedPreserveAspectRatio{readonly animVal:SVGPreserveAspectRatio;readonly baseVal:SVGPreserveAspectRatio;}declare var SVGAnimatedPreserveAspectRatio:{prototype:SVGAnimatedPreserveAspectRatio;new():SVGAnimatedPreserveAspectRatio;};interface SVGAnimatedRect{readonly animVal:DOMRectReadOnly;readonly baseVal:DOMRect;}declare var SVGAnimatedRect:{prototype:SVGAnimatedRect;new():SVGAnimatedRect;};interface SVGAnimatedString{readonly animVal:string;baseVal:string;}declare var SVGAnimatedString:{prototype:SVGAnimatedString;new():SVGAnimatedString;};interface SVGAnimatedTransformList{readonly animVal:SVGTransformList;readonly baseVal:SVGTransformList;}declare var SVGAnimatedTransformList:{prototype:SVGAnimatedTransformList;new():SVGAnimatedTransformList;};interface SVGAnimationElement extends SVGElement,SVGTests{readonly targetElement:SVGElement|null;beginElement():void;beginElementAt(offset:number):void;endElement():void;endElementAt(offset:number):void;getCurrentTime():number;getSimpleDuration():number;getStartTime():number;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGAnimationElement:{prototype:SVGAnimationElement;new():SVGAnimationElement;};interface SVGCircleElement extends SVGGeometryElement{readonly cx:SVGAnimatedLength;readonly cy:SVGAnimatedLength;readonly r:SVGAnimatedLength;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGCircleElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGCircleElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGCircleElement:{prototype:SVGCircleElement;new():SVGCircleElement;};interface SVGClipPathElement extends SVGElement{readonly clipPathUnits:SVGAnimatedEnumeration;readonly transform:SVGAnimatedTransformList;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGClipPathElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGClipPathElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGClipPathElement:{prototype:SVGClipPathElement;new():SVGClipPathElement;};interface SVGComponentTransferFunctionElement extends SVGElement{readonly amplitude:SVGAnimatedNumber;readonly exponent:SVGAnimatedNumber;readonly intercept:SVGAnimatedNumber;readonly offset:SVGAnimatedNumber;readonly slope:SVGAnimatedNumber;readonly tableValues:SVGAnimatedNumberList;readonly type:SVGAnimatedEnumeration;readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE:number;readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA:number;readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY:number;readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR:number;readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE:number;readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN:number;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGComponentTransferFunctionElement:{prototype:SVGComponentTransferFunctionElement;new():SVGComponentTransferFunctionElement;readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE:number;readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA:number;readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY:number;readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR:number;readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE:number;readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN:number;};interface SVGDefsElement extends SVGGraphicsElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGDefsElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGDefsElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGDefsElement:{prototype:SVGDefsElement;new():SVGDefsElement;};interface SVGDescElement extends SVGElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGDescElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGDescElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGDescElement:{prototype:SVGDescElement;new():SVGDescElement;};interface SVGElementEventMap extends ElementEventMap,DocumentAndElementEventHandlersEventMap,GlobalEventHandlersEventMap{}interface SVGElement extends Element,DocumentAndElementEventHandlers,ElementCSSInlineStyle,GlobalEventHandlers,HTMLOrSVGElement{readonly className:any;readonly ownerSVGElement:SVGSVGElement|null;readonly viewportElement:SVGElement|null;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGElement:{prototype:SVGElement;new():SVGElement;};interface SVGEllipseElement extends SVGGeometryElement{readonly cx:SVGAnimatedLength;readonly cy:SVGAnimatedLength;readonly rx:SVGAnimatedLength;readonly ry:SVGAnimatedLength;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGEllipseElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGEllipseElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGEllipseElement:{prototype:SVGEllipseElement;new():SVGEllipseElement;};interface SVGFEBlendElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly in1:SVGAnimatedString;readonly in2:SVGAnimatedString;readonly mode:SVGAnimatedEnumeration;readonly SVG_FEBLEND_MODE_COLOR:number;readonly SVG_FEBLEND_MODE_COLOR_BURN:number;readonly SVG_FEBLEND_MODE_COLOR_DODGE:number;readonly SVG_FEBLEND_MODE_DARKEN:number;readonly SVG_FEBLEND_MODE_DIFFERENCE:number;readonly SVG_FEBLEND_MODE_EXCLUSION:number;readonly SVG_FEBLEND_MODE_HARD_LIGHT:number;readonly SVG_FEBLEND_MODE_HUE:number;readonly SVG_FEBLEND_MODE_LIGHTEN:number;readonly SVG_FEBLEND_MODE_LUMINOSITY:number;readonly SVG_FEBLEND_MODE_MULTIPLY:number;readonly SVG_FEBLEND_MODE_NORMAL:number;readonly SVG_FEBLEND_MODE_OVERLAY:number;readonly SVG_FEBLEND_MODE_SATURATION:number;readonly SVG_FEBLEND_MODE_SCREEN:number;readonly SVG_FEBLEND_MODE_SOFT_LIGHT:number;readonly SVG_FEBLEND_MODE_UNKNOWN:number;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEBlendElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEBlendElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEBlendElement:{prototype:SVGFEBlendElement;new():SVGFEBlendElement;readonly SVG_FEBLEND_MODE_COLOR:number;readonly SVG_FEBLEND_MODE_COLOR_BURN:number;readonly SVG_FEBLEND_MODE_COLOR_DODGE:number;readonly SVG_FEBLEND_MODE_DARKEN:number;readonly SVG_FEBLEND_MODE_DIFFERENCE:number;readonly SVG_FEBLEND_MODE_EXCLUSION:number;readonly SVG_FEBLEND_MODE_HARD_LIGHT:number;readonly SVG_FEBLEND_MODE_HUE:number;readonly SVG_FEBLEND_MODE_LIGHTEN:number;readonly SVG_FEBLEND_MODE_LUMINOSITY:number;readonly SVG_FEBLEND_MODE_MULTIPLY:number;readonly SVG_FEBLEND_MODE_NORMAL:number;readonly SVG_FEBLEND_MODE_OVERLAY:number;readonly SVG_FEBLEND_MODE_SATURATION:number;readonly SVG_FEBLEND_MODE_SCREEN:number;readonly SVG_FEBLEND_MODE_SOFT_LIGHT:number;readonly SVG_FEBLEND_MODE_UNKNOWN:number;};interface SVGFEColorMatrixElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly in1:SVGAnimatedString;readonly type:SVGAnimatedEnumeration;readonly values:SVGAnimatedNumberList;readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE:number;readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA:number;readonly SVG_FECOLORMATRIX_TYPE_MATRIX:number;readonly SVG_FECOLORMATRIX_TYPE_SATURATE:number;readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN:number;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEColorMatrixElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEColorMatrixElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEColorMatrixElement:{prototype:SVGFEColorMatrixElement;new():SVGFEColorMatrixElement;readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE:number;readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA:number;readonly SVG_FECOLORMATRIX_TYPE_MATRIX:number;readonly SVG_FECOLORMATRIX_TYPE_SATURATE:number;readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN:number;};interface SVGFEComponentTransferElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly in1:SVGAnimatedString;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEComponentTransferElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEComponentTransferElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEComponentTransferElement:{prototype:SVGFEComponentTransferElement;new():SVGFEComponentTransferElement;};interface SVGFECompositeElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly in1:SVGAnimatedString;readonly in2:SVGAnimatedString;readonly k1:SVGAnimatedNumber;readonly k2:SVGAnimatedNumber;readonly k3:SVGAnimatedNumber;readonly k4:SVGAnimatedNumber;readonly operator:SVGAnimatedEnumeration;readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC:number;readonly SVG_FECOMPOSITE_OPERATOR_ATOP:number;readonly SVG_FECOMPOSITE_OPERATOR_IN:number;readonly SVG_FECOMPOSITE_OPERATOR_OUT:number;readonly SVG_FECOMPOSITE_OPERATOR_OVER:number;readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN:number;readonly SVG_FECOMPOSITE_OPERATOR_XOR:number;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFECompositeElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFECompositeElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFECompositeElement:{prototype:SVGFECompositeElement;new():SVGFECompositeElement;readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC:number;readonly SVG_FECOMPOSITE_OPERATOR_ATOP:number;readonly SVG_FECOMPOSITE_OPERATOR_IN:number;readonly SVG_FECOMPOSITE_OPERATOR_OUT:number;readonly SVG_FECOMPOSITE_OPERATOR_OVER:number;readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN:number;readonly SVG_FECOMPOSITE_OPERATOR_XOR:number;};interface SVGFEConvolveMatrixElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly bias:SVGAnimatedNumber;readonly divisor:SVGAnimatedNumber;readonly edgeMode:SVGAnimatedEnumeration;readonly in1:SVGAnimatedString;readonly kernelMatrix:SVGAnimatedNumberList;readonly kernelUnitLengthX:SVGAnimatedNumber;readonly kernelUnitLengthY:SVGAnimatedNumber;readonly orderX:SVGAnimatedInteger;readonly orderY:SVGAnimatedInteger;readonly preserveAlpha:SVGAnimatedBoolean;readonly targetX:SVGAnimatedInteger;readonly targetY:SVGAnimatedInteger;readonly SVG_EDGEMODE_DUPLICATE:number;readonly SVG_EDGEMODE_NONE:number;readonly SVG_EDGEMODE_UNKNOWN:number;readonly SVG_EDGEMODE_WRAP:number;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEConvolveMatrixElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEConvolveMatrixElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEConvolveMatrixElement:{prototype:SVGFEConvolveMatrixElement;new():SVGFEConvolveMatrixElement;readonly SVG_EDGEMODE_DUPLICATE:number;readonly SVG_EDGEMODE_NONE:number;readonly SVG_EDGEMODE_UNKNOWN:number;readonly SVG_EDGEMODE_WRAP:number;};interface SVGFEDiffuseLightingElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly diffuseConstant:SVGAnimatedNumber;readonly in1:SVGAnimatedString;readonly kernelUnitLengthX:SVGAnimatedNumber;readonly kernelUnitLengthY:SVGAnimatedNumber;readonly surfaceScale:SVGAnimatedNumber;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEDiffuseLightingElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEDiffuseLightingElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEDiffuseLightingElement:{prototype:SVGFEDiffuseLightingElement;new():SVGFEDiffuseLightingElement;};interface SVGFEDisplacementMapElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly in1:SVGAnimatedString;readonly in2:SVGAnimatedString;readonly scale:SVGAnimatedNumber;readonly xChannelSelector:SVGAnimatedEnumeration;readonly yChannelSelector:SVGAnimatedEnumeration;readonly SVG_CHANNEL_A:number;readonly SVG_CHANNEL_B:number;readonly SVG_CHANNEL_G:number;readonly SVG_CHANNEL_R:number;readonly SVG_CHANNEL_UNKNOWN:number;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEDisplacementMapElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEDisplacementMapElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEDisplacementMapElement:{prototype:SVGFEDisplacementMapElement;new():SVGFEDisplacementMapElement;readonly SVG_CHANNEL_A:number;readonly SVG_CHANNEL_B:number;readonly SVG_CHANNEL_G:number;readonly SVG_CHANNEL_R:number;readonly SVG_CHANNEL_UNKNOWN:number;};interface SVGFEDistantLightElement extends SVGElement{readonly azimuth:SVGAnimatedNumber;readonly elevation:SVGAnimatedNumber;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEDistantLightElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEDistantLightElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEDistantLightElement:{prototype:SVGFEDistantLightElement;new():SVGFEDistantLightElement;};interface SVGFEDropShadowElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly dx:SVGAnimatedNumber;readonly dy:SVGAnimatedNumber;readonly in1:SVGAnimatedString;readonly stdDeviationX:SVGAnimatedNumber;readonly stdDeviationY:SVGAnimatedNumber;setStdDeviation(stdDeviationX:number,stdDeviationY:number):void;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEDropShadowElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEDropShadowElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEDropShadowElement:{prototype:SVGFEDropShadowElement;new():SVGFEDropShadowElement;};interface SVGFEFloodElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEFloodElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEFloodElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEFloodElement:{prototype:SVGFEFloodElement;new():SVGFEFloodElement;};interface SVGFEFuncAElement extends SVGComponentTransferFunctionElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEFuncAElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEFuncAElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEFuncAElement:{prototype:SVGFEFuncAElement;new():SVGFEFuncAElement;};interface SVGFEFuncBElement extends SVGComponentTransferFunctionElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEFuncBElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEFuncBElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEFuncBElement:{prototype:SVGFEFuncBElement;new():SVGFEFuncBElement;};interface SVGFEFuncGElement extends SVGComponentTransferFunctionElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEFuncGElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEFuncGElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEFuncGElement:{prototype:SVGFEFuncGElement;new():SVGFEFuncGElement;};interface SVGFEFuncRElement extends SVGComponentTransferFunctionElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEFuncRElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEFuncRElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEFuncRElement:{prototype:SVGFEFuncRElement;new():SVGFEFuncRElement;};interface SVGFEGaussianBlurElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly in1:SVGAnimatedString;readonly stdDeviationX:SVGAnimatedNumber;readonly stdDeviationY:SVGAnimatedNumber;setStdDeviation(stdDeviationX:number,stdDeviationY:number):void;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEGaussianBlurElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEGaussianBlurElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEGaussianBlurElement:{prototype:SVGFEGaussianBlurElement;new():SVGFEGaussianBlurElement;};interface SVGFEImageElement extends SVGElement,SVGFilterPrimitiveStandardAttributes,SVGURIReference{readonly preserveAspectRatio:SVGAnimatedPreserveAspectRatio;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEImageElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEImageElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEImageElement:{prototype:SVGFEImageElement;new():SVGFEImageElement;};interface SVGFEMergeElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEMergeElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEMergeElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEMergeElement:{prototype:SVGFEMergeElement;new():SVGFEMergeElement;};interface SVGFEMergeNodeElement extends SVGElement{readonly in1:SVGAnimatedString;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEMergeNodeElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEMergeNodeElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEMergeNodeElement:{prototype:SVGFEMergeNodeElement;new():SVGFEMergeNodeElement;};interface SVGFEMorphologyElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly in1:SVGAnimatedString;readonly operator:SVGAnimatedEnumeration;readonly radiusX:SVGAnimatedNumber;readonly radiusY:SVGAnimatedNumber;readonly SVG_MORPHOLOGY_OPERATOR_DILATE:number;readonly SVG_MORPHOLOGY_OPERATOR_ERODE:number;readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN:number;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEMorphologyElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEMorphologyElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEMorphologyElement:{prototype:SVGFEMorphologyElement;new():SVGFEMorphologyElement;readonly SVG_MORPHOLOGY_OPERATOR_DILATE:number;readonly SVG_MORPHOLOGY_OPERATOR_ERODE:number;readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN:number;};interface SVGFEOffsetElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly dx:SVGAnimatedNumber;readonly dy:SVGAnimatedNumber;readonly in1:SVGAnimatedString;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEOffsetElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEOffsetElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEOffsetElement:{prototype:SVGFEOffsetElement;new():SVGFEOffsetElement;};interface SVGFEPointLightElement extends SVGElement{readonly x:SVGAnimatedNumber;readonly y:SVGAnimatedNumber;readonly z:SVGAnimatedNumber;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEPointLightElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFEPointLightElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFEPointLightElement:{prototype:SVGFEPointLightElement;new():SVGFEPointLightElement;};interface SVGFESpecularLightingElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly in1:SVGAnimatedString;readonly kernelUnitLengthX:SVGAnimatedNumber;readonly kernelUnitLengthY:SVGAnimatedNumber;readonly specularConstant:SVGAnimatedNumber;readonly specularExponent:SVGAnimatedNumber;readonly surfaceScale:SVGAnimatedNumber;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFESpecularLightingElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFESpecularLightingElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFESpecularLightingElement:{prototype:SVGFESpecularLightingElement;new():SVGFESpecularLightingElement;};interface SVGFESpotLightElement extends SVGElement{readonly limitingConeAngle:SVGAnimatedNumber;readonly pointsAtX:SVGAnimatedNumber;readonly pointsAtY:SVGAnimatedNumber;readonly pointsAtZ:SVGAnimatedNumber;readonly specularExponent:SVGAnimatedNumber;readonly x:SVGAnimatedNumber;readonly y:SVGAnimatedNumber;readonly z:SVGAnimatedNumber;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFESpotLightElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFESpotLightElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFESpotLightElement:{prototype:SVGFESpotLightElement;new():SVGFESpotLightElement;};interface SVGFETileElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly in1:SVGAnimatedString;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFETileElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFETileElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFETileElement:{prototype:SVGFETileElement;new():SVGFETileElement;};interface SVGFETurbulenceElement extends SVGElement,SVGFilterPrimitiveStandardAttributes{readonly baseFrequencyX:SVGAnimatedNumber;readonly baseFrequencyY:SVGAnimatedNumber;readonly numOctaves:SVGAnimatedInteger;readonly seed:SVGAnimatedNumber;readonly stitchTiles:SVGAnimatedEnumeration;readonly type:SVGAnimatedEnumeration;readonly SVG_STITCHTYPE_NOSTITCH:number;readonly SVG_STITCHTYPE_STITCH:number;readonly SVG_STITCHTYPE_UNKNOWN:number;readonly SVG_TURBULENCE_TYPE_FRACTALNOISE:number;readonly SVG_TURBULENCE_TYPE_TURBULENCE:number;readonly SVG_TURBULENCE_TYPE_UNKNOWN:number;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFETurbulenceElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFETurbulenceElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFETurbulenceElement:{prototype:SVGFETurbulenceElement;new():SVGFETurbulenceElement;readonly SVG_STITCHTYPE_NOSTITCH:number;readonly SVG_STITCHTYPE_STITCH:number;readonly SVG_STITCHTYPE_UNKNOWN:number;readonly SVG_TURBULENCE_TYPE_FRACTALNOISE:number;readonly SVG_TURBULENCE_TYPE_TURBULENCE:number;readonly SVG_TURBULENCE_TYPE_UNKNOWN:number;};interface SVGFilterElement extends SVGElement,SVGURIReference{readonly filterUnits:SVGAnimatedEnumeration;readonly height:SVGAnimatedLength;readonly primitiveUnits:SVGAnimatedEnumeration;readonly width:SVGAnimatedLength;readonly x:SVGAnimatedLength;readonly y:SVGAnimatedLength;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFilterElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGFilterElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGFilterElement:{prototype:SVGFilterElement;new():SVGFilterElement;};interface SVGFilterPrimitiveStandardAttributes{readonly height:SVGAnimatedLength;readonly result:SVGAnimatedString;readonly width:SVGAnimatedLength;readonly x:SVGAnimatedLength;readonly y:SVGAnimatedLength;}interface SVGFitToViewBox{readonly preserveAspectRatio:SVGAnimatedPreserveAspectRatio;readonly viewBox:SVGAnimatedRect;}interface SVGForeignObjectElement extends SVGGraphicsElement{readonly height:SVGAnimatedLength;readonly width:SVGAnimatedLength;readonly x:SVGAnimatedLength;readonly y:SVGAnimatedLength;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGForeignObjectElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGForeignObjectElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGForeignObjectElement:{prototype:SVGForeignObjectElement;new():SVGForeignObjectElement;};interface SVGGElement extends SVGGraphicsElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGGElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGGElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGGElement:{prototype:SVGGElement;new():SVGGElement;};interface SVGGeometryElement extends SVGGraphicsElement{readonly pathLength:SVGAnimatedNumber;getPointAtLength(distance:number):DOMPoint;getTotalLength():number;isPointInFill(point?:DOMPointInit):boolean;isPointInStroke(point?:DOMPointInit):boolean;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGGeometryElement:{prototype:SVGGeometryElement;new():SVGGeometryElement;};interface SVGGradientElement extends SVGElement,SVGURIReference{readonly gradientTransform:SVGAnimatedTransformList;readonly gradientUnits:SVGAnimatedEnumeration;readonly spreadMethod:SVGAnimatedEnumeration;readonly SVG_SPREADMETHOD_PAD:number;readonly SVG_SPREADMETHOD_REFLECT:number;readonly SVG_SPREADMETHOD_REPEAT:number;readonly SVG_SPREADMETHOD_UNKNOWN:number;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGGradientElement:{prototype:SVGGradientElement;new():SVGGradientElement;readonly SVG_SPREADMETHOD_PAD:number;readonly SVG_SPREADMETHOD_REFLECT:number;readonly SVG_SPREADMETHOD_REPEAT:number;readonly SVG_SPREADMETHOD_UNKNOWN:number;};interface SVGGraphicsElement extends SVGElement,SVGTests{readonly transform:SVGAnimatedTransformList;getBBox(options?:SVGBoundingBoxOptions):DOMRect;getCTM():DOMMatrix|null;getScreenCTM():DOMMatrix|null;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGGraphicsElement:{prototype:SVGGraphicsElement;new():SVGGraphicsElement;};interface SVGImageElement extends SVGGraphicsElement,SVGURIReference{readonly height:SVGAnimatedLength;readonly preserveAspectRatio:SVGAnimatedPreserveAspectRatio;readonly width:SVGAnimatedLength;readonly x:SVGAnimatedLength;readonly y:SVGAnimatedLength;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGImageElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGImageElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGImageElement:{prototype:SVGImageElement;new():SVGImageElement;};interface SVGLength{readonly unitType:number;value:number;valueAsString:string;valueInSpecifiedUnits:number;convertToSpecifiedUnits(unitType:number):void;newValueSpecifiedUnits(unitType:number,valueInSpecifiedUnits:number):void;readonly SVG_LENGTHTYPE_CM:number;readonly SVG_LENGTHTYPE_EMS:number;readonly SVG_LENGTHTYPE_EXS:number;readonly SVG_LENGTHTYPE_IN:number;readonly SVG_LENGTHTYPE_MM:number;readonly SVG_LENGTHTYPE_NUMBER:number;readonly SVG_LENGTHTYPE_PC:number;readonly SVG_LENGTHTYPE_PERCENTAGE:number;readonly SVG_LENGTHTYPE_PT:number;readonly SVG_LENGTHTYPE_PX:number;readonly SVG_LENGTHTYPE_UNKNOWN:number;}declare var SVGLength:{prototype:SVGLength;new():SVGLength;readonly SVG_LENGTHTYPE_CM:number;readonly SVG_LENGTHTYPE_EMS:number;readonly SVG_LENGTHTYPE_EXS:number;readonly SVG_LENGTHTYPE_IN:number;readonly SVG_LENGTHTYPE_MM:number;readonly SVG_LENGTHTYPE_NUMBER:number;readonly SVG_LENGTHTYPE_PC:number;readonly SVG_LENGTHTYPE_PERCENTAGE:number;readonly SVG_LENGTHTYPE_PT:number;readonly SVG_LENGTHTYPE_PX:number;readonly SVG_LENGTHTYPE_UNKNOWN:number;};interface SVGLengthList{readonly length:number;readonly numberOfItems:number;appendItem(newItem:SVGLength):SVGLength;clear():void;getItem(index:number):SVGLength;initialize(newItem:SVGLength):SVGLength;insertItemBefore(newItem:SVGLength,index:number):SVGLength;removeItem(index:number):SVGLength;replaceItem(newItem:SVGLength,index:number):SVGLength;[index:number]:SVGLength;}declare var SVGLengthList:{prototype:SVGLengthList;new():SVGLengthList;};interface SVGLineElement extends SVGGeometryElement{readonly x1:SVGAnimatedLength;readonly x2:SVGAnimatedLength;readonly y1:SVGAnimatedLength;readonly y2:SVGAnimatedLength;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGLineElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGLineElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGLineElement:{prototype:SVGLineElement;new():SVGLineElement;};interface SVGLinearGradientElement extends SVGGradientElement{readonly x1:SVGAnimatedLength;readonly x2:SVGAnimatedLength;readonly y1:SVGAnimatedLength;readonly y2:SVGAnimatedLength;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGLinearGradientElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGLinearGradientElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGLinearGradientElement:{prototype:SVGLinearGradientElement;new():SVGLinearGradientElement;};interface SVGMPathElement extends SVGElement,SVGURIReference{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGMPathElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGMPathElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGMPathElement:{prototype:SVGMPathElement;new():SVGMPathElement;};interface SVGMarkerElement extends SVGElement,SVGFitToViewBox{readonly markerHeight:SVGAnimatedLength;readonly markerUnits:SVGAnimatedEnumeration;readonly markerWidth:SVGAnimatedLength;readonly orientAngle:SVGAnimatedAngle;readonly orientType:SVGAnimatedEnumeration;readonly refX:SVGAnimatedLength;readonly refY:SVGAnimatedLength;setOrientToAngle(angle:SVGAngle):void;setOrientToAuto():void;readonly SVG_MARKERUNITS_STROKEWIDTH:number;readonly SVG_MARKERUNITS_UNKNOWN:number;readonly SVG_MARKERUNITS_USERSPACEONUSE:number;readonly SVG_MARKER_ORIENT_ANGLE:number;readonly SVG_MARKER_ORIENT_AUTO:number;readonly SVG_MARKER_ORIENT_UNKNOWN:number;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGMarkerElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGMarkerElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGMarkerElement:{prototype:SVGMarkerElement;new():SVGMarkerElement;readonly SVG_MARKERUNITS_STROKEWIDTH:number;readonly SVG_MARKERUNITS_UNKNOWN:number;readonly SVG_MARKERUNITS_USERSPACEONUSE:number;readonly SVG_MARKER_ORIENT_ANGLE:number;readonly SVG_MARKER_ORIENT_AUTO:number;readonly SVG_MARKER_ORIENT_UNKNOWN:number;};interface SVGMaskElement extends SVGElement{readonly height:SVGAnimatedLength;readonly maskContentUnits:SVGAnimatedEnumeration;readonly maskUnits:SVGAnimatedEnumeration;readonly width:SVGAnimatedLength;readonly x:SVGAnimatedLength;readonly y:SVGAnimatedLength;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGMaskElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGMaskElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGMaskElement:{prototype:SVGMaskElement;new():SVGMaskElement;};interface SVGMetadataElement extends SVGElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGMetadataElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGMetadataElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGMetadataElement:{prototype:SVGMetadataElement;new():SVGMetadataElement;};interface SVGNumber{value:number;}declare var SVGNumber:{prototype:SVGNumber;new():SVGNumber;};interface SVGNumberList{readonly length:number;readonly numberOfItems:number;appendItem(newItem:SVGNumber):SVGNumber;clear():void;getItem(index:number):SVGNumber;initialize(newItem:SVGNumber):SVGNumber;insertItemBefore(newItem:SVGNumber,index:number):SVGNumber;removeItem(index:number):SVGNumber;replaceItem(newItem:SVGNumber,index:number):SVGNumber;[index:number]:SVGNumber;}declare var SVGNumberList:{prototype:SVGNumberList;new():SVGNumberList;};interface SVGPathElement extends SVGGeometryElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGPathElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGPathElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGPathElement:{prototype:SVGPathElement;new():SVGPathElement;};interface SVGPatternElement extends SVGElement,SVGFitToViewBox,SVGURIReference{readonly height:SVGAnimatedLength;readonly patternContentUnits:SVGAnimatedEnumeration;readonly patternTransform:SVGAnimatedTransformList;readonly patternUnits:SVGAnimatedEnumeration;readonly width:SVGAnimatedLength;readonly x:SVGAnimatedLength;readonly y:SVGAnimatedLength;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGPatternElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGPatternElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGPatternElement:{prototype:SVGPatternElement;new():SVGPatternElement;};interface SVGPointList{readonly length:number;readonly numberOfItems:number;appendItem(newItem:DOMPoint):DOMPoint;clear():void;getItem(index:number):DOMPoint;initialize(newItem:DOMPoint):DOMPoint;insertItemBefore(newItem:DOMPoint,index:number):DOMPoint;removeItem(index:number):DOMPoint;replaceItem(newItem:DOMPoint,index:number):DOMPoint;[index:number]:DOMPoint;}declare var SVGPointList:{prototype:SVGPointList;new():SVGPointList;};interface SVGPolygonElement extends SVGGeometryElement,SVGAnimatedPoints{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGPolygonElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGPolygonElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGPolygonElement:{prototype:SVGPolygonElement;new():SVGPolygonElement;};interface SVGPolylineElement extends SVGGeometryElement,SVGAnimatedPoints{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGPolylineElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGPolylineElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGPolylineElement:{prototype:SVGPolylineElement;new():SVGPolylineElement;};interface SVGPreserveAspectRatio{align:number;meetOrSlice:number;readonly SVG_MEETORSLICE_MEET:number;readonly SVG_MEETORSLICE_SLICE:number;readonly SVG_MEETORSLICE_UNKNOWN:number;readonly SVG_PRESERVEASPECTRATIO_NONE:number;readonly SVG_PRESERVEASPECTRATIO_UNKNOWN:number;readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX:number;readonly SVG_PRESERVEASPECTRATIO_XMAXYMID:number;readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN:number;readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX:number;readonly SVG_PRESERVEASPECTRATIO_XMIDYMID:number;readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN:number;readonly SVG_PRESERVEASPECTRATIO_XMINYMAX:number;readonly SVG_PRESERVEASPECTRATIO_XMINYMID:number;readonly SVG_PRESERVEASPECTRATIO_XMINYMIN:number;}declare var SVGPreserveAspectRatio:{prototype:SVGPreserveAspectRatio;new():SVGPreserveAspectRatio;readonly SVG_MEETORSLICE_MEET:number;readonly SVG_MEETORSLICE_SLICE:number;readonly SVG_MEETORSLICE_UNKNOWN:number;readonly SVG_PRESERVEASPECTRATIO_NONE:number;readonly SVG_PRESERVEASPECTRATIO_UNKNOWN:number;readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX:number;readonly SVG_PRESERVEASPECTRATIO_XMAXYMID:number;readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN:number;readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX:number;readonly SVG_PRESERVEASPECTRATIO_XMIDYMID:number;readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN:number;readonly SVG_PRESERVEASPECTRATIO_XMINYMAX:number;readonly SVG_PRESERVEASPECTRATIO_XMINYMID:number;readonly SVG_PRESERVEASPECTRATIO_XMINYMIN:number;};interface SVGRadialGradientElement extends SVGGradientElement{readonly cx:SVGAnimatedLength;readonly cy:SVGAnimatedLength;readonly fr:SVGAnimatedLength;readonly fx:SVGAnimatedLength;readonly fy:SVGAnimatedLength;readonly r:SVGAnimatedLength;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGRadialGradientElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGRadialGradientElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGRadialGradientElement:{prototype:SVGRadialGradientElement;new():SVGRadialGradientElement;};interface SVGRectElement extends SVGGeometryElement{readonly height:SVGAnimatedLength;readonly rx:SVGAnimatedLength;readonly ry:SVGAnimatedLength;readonly width:SVGAnimatedLength;readonly x:SVGAnimatedLength;readonly y:SVGAnimatedLength;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGRectElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGRectElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGRectElement:{prototype:SVGRectElement;new():SVGRectElement;};interface SVGSVGElementEventMap extends SVGElementEventMap,WindowEventHandlersEventMap{}interface SVGSVGElement extends SVGGraphicsElement,SVGFitToViewBox,WindowEventHandlers{currentScale:number;readonly currentTranslate:DOMPointReadOnly;readonly height:SVGAnimatedLength;readonly width:SVGAnimatedLength;readonly x:SVGAnimatedLength;readonly y:SVGAnimatedLength;animationsPaused():boolean;checkEnclosure(element:SVGElement,rect:DOMRectReadOnly):boolean;checkIntersection(element:SVGElement,rect:DOMRectReadOnly):boolean;createSVGAngle():SVGAngle;createSVGLength():SVGLength;createSVGMatrix():DOMMatrix;createSVGNumber():SVGNumber;createSVGPoint():DOMPoint;createSVGRect():DOMRect;createSVGTransform():SVGTransform;createSVGTransformFromMatrix(matrix?:DOMMatrix2DInit):SVGTransform;deselectAll():void;forceRedraw():void;getCurrentTime():number;getElementById(elementId:string):Element;getEnclosureList(rect:DOMRectReadOnly,referenceElement:SVGElement|null):NodeListOf<SVGCircleElement|SVGEllipseElement|SVGImageElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGTextElement|SVGUseElement>;getIntersectionList(rect:DOMRectReadOnly,referenceElement:SVGElement|null):NodeListOf<SVGCircleElement|SVGEllipseElement|SVGImageElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGTextElement|SVGUseElement>;pauseAnimations():void;setCurrentTime(seconds:number):void;suspendRedraw(maxWaitMilliseconds:number):number;unpauseAnimations():void;unsuspendRedraw(suspendHandleID:number):void;unsuspendRedrawAll():void;addEventListener<K extends keyof SVGSVGElementEventMap>(type:K,listener:(this:SVGSVGElement,ev:SVGSVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGSVGElementEventMap>(type:K,listener:(this:SVGSVGElement,ev:SVGSVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGSVGElement:{prototype:SVGSVGElement;new():SVGSVGElement;};interface SVGScriptElement extends SVGElement,SVGURIReference{type:string;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGScriptElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGScriptElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGScriptElement:{prototype:SVGScriptElement;new():SVGScriptElement;};interface SVGSetElement extends SVGAnimationElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGSetElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGSetElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGSetElement:{prototype:SVGSetElement;new():SVGSetElement;};interface SVGStopElement extends SVGElement{readonly offset:SVGAnimatedNumber;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGStopElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGStopElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGStopElement:{prototype:SVGStopElement;new():SVGStopElement;};interface SVGStringList{readonly length:number;readonly numberOfItems:number;appendItem(newItem:string):string;clear():void;getItem(index:number):string;initialize(newItem:string):string;insertItemBefore(newItem:string,index:number):string;removeItem(index:number):string;replaceItem(newItem:string,index:number):string;[index:number]:string;}declare var SVGStringList:{prototype:SVGStringList;new():SVGStringList;};interface SVGStyleElement extends SVGElement,LinkStyle{disabled:boolean;media:string;title:string;type:string;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGStyleElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGStyleElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGStyleElement:{prototype:SVGStyleElement;new():SVGStyleElement;};interface SVGSwitchElement extends SVGGraphicsElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGSwitchElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGSwitchElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGSwitchElement:{prototype:SVGSwitchElement;new():SVGSwitchElement;};interface SVGSymbolElement extends SVGElement,SVGFitToViewBox{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGSymbolElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGSymbolElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGSymbolElement:{prototype:SVGSymbolElement;new():SVGSymbolElement;};interface SVGTSpanElement extends SVGTextPositioningElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGTSpanElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGTSpanElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGTSpanElement:{prototype:SVGTSpanElement;new():SVGTSpanElement;};interface SVGTests{readonly requiredExtensions:SVGStringList;readonly systemLanguage:SVGStringList;}interface SVGTextContentElement extends SVGGraphicsElement{readonly lengthAdjust:SVGAnimatedEnumeration;readonly textLength:SVGAnimatedLength;getCharNumAtPosition(point?:DOMPointInit):number;getComputedTextLength():number;getEndPositionOfChar(charnum:number):DOMPoint;getExtentOfChar(charnum:number):DOMRect;getNumberOfChars():number;getRotationOfChar(charnum:number):number;getStartPositionOfChar(charnum:number):DOMPoint;getSubStringLength(charnum:number,nchars:number):number;selectSubString(charnum:number,nchars:number):void;readonly LENGTHADJUST_SPACING:number;readonly LENGTHADJUST_SPACINGANDGLYPHS:number;readonly LENGTHADJUST_UNKNOWN:number;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGTextContentElement:{prototype:SVGTextContentElement;new():SVGTextContentElement;readonly LENGTHADJUST_SPACING:number;readonly LENGTHADJUST_SPACINGANDGLYPHS:number;readonly LENGTHADJUST_UNKNOWN:number;};interface SVGTextElement extends SVGTextPositioningElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGTextElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGTextElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGTextElement:{prototype:SVGTextElement;new():SVGTextElement;};interface SVGTextPathElement extends SVGTextContentElement,SVGURIReference{readonly method:SVGAnimatedEnumeration;readonly spacing:SVGAnimatedEnumeration;readonly startOffset:SVGAnimatedLength;readonly TEXTPATH_METHODTYPE_ALIGN:number;readonly TEXTPATH_METHODTYPE_STRETCH:number;readonly TEXTPATH_METHODTYPE_UNKNOWN:number;readonly TEXTPATH_SPACINGTYPE_AUTO:number;readonly TEXTPATH_SPACINGTYPE_EXACT:number;readonly TEXTPATH_SPACINGTYPE_UNKNOWN:number;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGTextPathElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGTextPathElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGTextPathElement:{prototype:SVGTextPathElement;new():SVGTextPathElement;readonly TEXTPATH_METHODTYPE_ALIGN:number;readonly TEXTPATH_METHODTYPE_STRETCH:number;readonly TEXTPATH_METHODTYPE_UNKNOWN:number;readonly TEXTPATH_SPACINGTYPE_AUTO:number;readonly TEXTPATH_SPACINGTYPE_EXACT:number;readonly TEXTPATH_SPACINGTYPE_UNKNOWN:number;};interface SVGTextPositioningElement extends SVGTextContentElement{readonly dx:SVGAnimatedLengthList;readonly dy:SVGAnimatedLengthList;readonly rotate:SVGAnimatedNumberList;readonly x:SVGAnimatedLengthList;readonly y:SVGAnimatedLengthList;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGTextPositioningElement:{prototype:SVGTextPositioningElement;new():SVGTextPositioningElement;};interface SVGTitleElement extends SVGElement{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGTitleElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGTitleElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGTitleElement:{prototype:SVGTitleElement;new():SVGTitleElement;};interface SVGTransform{readonly angle:number;readonly matrix:DOMMatrix;readonly type:number;setMatrix(matrix?:DOMMatrix2DInit):void;setRotate(angle:number,cx:number,cy:number):void;setScale(sx:number,sy:number):void;setSkewX(angle:number):void;setSkewY(angle:number):void;setTranslate(tx:number,ty:number):void;readonly SVG_TRANSFORM_MATRIX:number;readonly SVG_TRANSFORM_ROTATE:number;readonly SVG_TRANSFORM_SCALE:number;readonly SVG_TRANSFORM_SKEWX:number;readonly SVG_TRANSFORM_SKEWY:number;readonly SVG_TRANSFORM_TRANSLATE:number;readonly SVG_TRANSFORM_UNKNOWN:number;}declare var SVGTransform:{prototype:SVGTransform;new():SVGTransform;readonly SVG_TRANSFORM_MATRIX:number;readonly SVG_TRANSFORM_ROTATE:number;readonly SVG_TRANSFORM_SCALE:number;readonly SVG_TRANSFORM_SKEWX:number;readonly SVG_TRANSFORM_SKEWY:number;readonly SVG_TRANSFORM_TRANSLATE:number;readonly SVG_TRANSFORM_UNKNOWN:number;};interface SVGTransformList{readonly length:number;readonly numberOfItems:number;appendItem(newItem:SVGTransform):SVGTransform;clear():void;consolidate():SVGTransform|null;createSVGTransformFromMatrix(matrix?:DOMMatrix2DInit):SVGTransform;getItem(index:number):SVGTransform;initialize(newItem:SVGTransform):SVGTransform;insertItemBefore(newItem:SVGTransform,index:number):SVGTransform;removeItem(index:number):SVGTransform;replaceItem(newItem:SVGTransform,index:number):SVGTransform;[index:number]:SVGTransform;}declare var SVGTransformList:{prototype:SVGTransformList;new():SVGTransformList;};interface SVGURIReference{readonly href:SVGAnimatedString;}interface SVGUnitTypes{readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX:number;readonly SVG_UNIT_TYPE_UNKNOWN:number;readonly SVG_UNIT_TYPE_USERSPACEONUSE:number;}declare var SVGUnitTypes:{prototype:SVGUnitTypes;new():SVGUnitTypes;readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX:number;readonly SVG_UNIT_TYPE_UNKNOWN:number;readonly SVG_UNIT_TYPE_USERSPACEONUSE:number;};interface SVGUseElement extends SVGGraphicsElement,SVGURIReference{readonly height:SVGAnimatedLength;readonly width:SVGAnimatedLength;readonly x:SVGAnimatedLength;readonly y:SVGAnimatedLength;addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGUseElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGUseElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGUseElement:{prototype:SVGUseElement;new():SVGUseElement;};interface SVGViewElement extends SVGElement,SVGFitToViewBox{addEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGViewElement,ev:SVGElementEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SVGElementEventMap>(type:K,listener:(this:SVGViewElement,ev:SVGElementEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SVGViewElement:{prototype:SVGViewElement;new():SVGViewElement;};interface Screen{readonly availHeight:number;readonly availWidth:number;readonly colorDepth:number;readonly height:number;readonly orientation:ScreenOrientation;readonly pixelDepth:number;readonly width:number;}declare var Screen:{prototype:Screen;new():Screen;};interface ScreenOrientationEventMap{\"change\":Event;}interface ScreenOrientation extends EventTarget{readonly angle:number;onchange:((this:ScreenOrientation,ev:Event)=>any)|null;readonly type:OrientationType;lock(orientation:OrientationLockType):Promise<void>;unlock():void;addEventListener<K extends keyof ScreenOrientationEventMap>(type:K,listener:(this:ScreenOrientation,ev:ScreenOrientationEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof ScreenOrientationEventMap>(type:K,listener:(this:ScreenOrientation,ev:ScreenOrientationEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var ScreenOrientation:{prototype:ScreenOrientation;new():ScreenOrientation;};interface ScriptProcessorNodeEventMap{\"audioprocess\":AudioProcessingEvent;}interface ScriptProcessorNode extends AudioNode{readonly bufferSize:number;onaudioprocess:((this:ScriptProcessorNode,ev:AudioProcessingEvent)=>any)|null;addEventListener<K extends keyof ScriptProcessorNodeEventMap>(type:K,listener:(this:ScriptProcessorNode,ev:ScriptProcessorNodeEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof ScriptProcessorNodeEventMap>(type:K,listener:(this:ScriptProcessorNode,ev:ScriptProcessorNodeEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var ScriptProcessorNode:{prototype:ScriptProcessorNode;new():ScriptProcessorNode;};interface SecurityPolicyViolationEvent extends Event{readonly blockedURI:string;readonly columnNumber:number;readonly disposition:SecurityPolicyViolationEventDisposition;readonly documentURI:string;readonly effectiveDirective:string;readonly lineNumber:number;readonly originalPolicy:string;readonly referrer:string;readonly sample:string;readonly sourceFile:string;readonly statusCode:number;readonly violatedDirective:string;}declare var SecurityPolicyViolationEvent:{prototype:SecurityPolicyViolationEvent;new(type:string,eventInitDict?:SecurityPolicyViolationEventInit):SecurityPolicyViolationEvent;};interface Selection{readonly anchorNode:Node|null;readonly anchorOffset:number;readonly focusNode:Node|null;readonly focusOffset:number;readonly isCollapsed:boolean;readonly rangeCount:number;readonly type:string;addRange(range:Range):void;collapse(node:Node|null,offset?:number):void;collapseToEnd():void;collapseToStart():void;containsNode(node:Node,allowPartialContainment?:boolean):boolean;deleteFromDocument():void;empty():void;extend(node:Node,offset?:number):void;getRangeAt(index:number):Range;removeAllRanges():void;removeRange(range:Range):void;selectAllChildren(node:Node):void;setBaseAndExtent(anchorNode:Node,anchorOffset:number,focusNode:Node,focusOffset:number):void;setPosition(node:Node|null,offset?:number):void;toString():string;}declare var Selection:{prototype:Selection;new():Selection;toString():string;};interface ServiceWorkerEventMap extends AbstractWorkerEventMap{\"statechange\":Event;}interface ServiceWorker extends EventTarget,AbstractWorker{onstatechange:((this:ServiceWorker,ev:Event)=>any)|null;readonly scriptURL:string;readonly state:ServiceWorkerState;postMessage(message:any,transfer:Transferable[]):void;postMessage(message:any,options?:StructuredSerializeOptions):void;addEventListener<K extends keyof ServiceWorkerEventMap>(type:K,listener:(this:ServiceWorker,ev:ServiceWorkerEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof ServiceWorkerEventMap>(type:K,listener:(this:ServiceWorker,ev:ServiceWorkerEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var ServiceWorker:{prototype:ServiceWorker;new():ServiceWorker;};interface ServiceWorkerContainerEventMap{\"controllerchange\":Event;\"message\":MessageEvent;\"messageerror\":MessageEvent;}interface ServiceWorkerContainer extends EventTarget{readonly controller:ServiceWorker|null;oncontrollerchange:((this:ServiceWorkerContainer,ev:Event)=>any)|null;onmessage:((this:ServiceWorkerContainer,ev:MessageEvent)=>any)|null;onmessageerror:((this:ServiceWorkerContainer,ev:MessageEvent)=>any)|null;readonly ready:Promise<ServiceWorkerRegistration>;getRegistration(clientURL?:string|URL):Promise<ServiceWorkerRegistration|undefined>;getRegistrations():Promise<ReadonlyArray<ServiceWorkerRegistration>>;register(scriptURL:string|URL,options?:RegistrationOptions):Promise<ServiceWorkerRegistration>;startMessages():void;addEventListener<K extends keyof ServiceWorkerContainerEventMap>(type:K,listener:(this:ServiceWorkerContainer,ev:ServiceWorkerContainerEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof ServiceWorkerContainerEventMap>(type:K,listener:(this:ServiceWorkerContainer,ev:ServiceWorkerContainerEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var ServiceWorkerContainer:{prototype:ServiceWorkerContainer;new():ServiceWorkerContainer;};interface ServiceWorkerRegistrationEventMap{\"updatefound\":Event;}interface ServiceWorkerRegistration extends EventTarget{readonly active:ServiceWorker|null;readonly installing:ServiceWorker|null;readonly navigationPreload:NavigationPreloadManager;onupdatefound:((this:ServiceWorkerRegistration,ev:Event)=>any)|null;readonly pushManager:PushManager;readonly scope:string;readonly updateViaCache:ServiceWorkerUpdateViaCache;readonly waiting:ServiceWorker|null;getNotifications(filter?:GetNotificationOptions):Promise<Notification[]>;showNotification(title:string,options?:NotificationOptions):Promise<void>;unregister():Promise<boolean>;update():Promise<void>;addEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type:K,listener:(this:ServiceWorkerRegistration,ev:ServiceWorkerRegistrationEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type:K,listener:(this:ServiceWorkerRegistration,ev:ServiceWorkerRegistrationEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var ServiceWorkerRegistration:{prototype:ServiceWorkerRegistration;new():ServiceWorkerRegistration;};interface ShadowRootEventMap{\"slotchange\":Event;}interface ShadowRoot extends DocumentFragment,DocumentOrShadowRoot,InnerHTML{readonly delegatesFocus:boolean;readonly host:Element;readonly mode:ShadowRootMode;onslotchange:((this:ShadowRoot,ev:Event)=>any)|null;readonly slotAssignment:SlotAssignmentMode;addEventListener<K extends keyof ShadowRootEventMap>(type:K,listener:(this:ShadowRoot,ev:ShadowRootEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof ShadowRootEventMap>(type:K,listener:(this:ShadowRoot,ev:ShadowRootEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var ShadowRoot:{prototype:ShadowRoot;new():ShadowRoot;};interface SharedWorker extends EventTarget,AbstractWorker{readonly port:MessagePort;addEventListener<K extends keyof AbstractWorkerEventMap>(type:K,listener:(this:SharedWorker,ev:AbstractWorkerEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof AbstractWorkerEventMap>(type:K,listener:(this:SharedWorker,ev:AbstractWorkerEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SharedWorker:{prototype:SharedWorker;new(scriptURL:string|URL,options?:string|WorkerOptions):SharedWorker;};interface Slottable{readonly assignedSlot:HTMLSlotElement|null;}interface SourceBufferEventMap{\"abort\":Event;\"error\":Event;\"update\":Event;\"updateend\":Event;\"updatestart\":Event;}interface SourceBuffer extends EventTarget{appendWindowEnd:number;appendWindowStart:number;readonly buffered:TimeRanges;mode:AppendMode;onabort:((this:SourceBuffer,ev:Event)=>any)|null;onerror:((this:SourceBuffer,ev:Event)=>any)|null;onupdate:((this:SourceBuffer,ev:Event)=>any)|null;onupdateend:((this:SourceBuffer,ev:Event)=>any)|null;onupdatestart:((this:SourceBuffer,ev:Event)=>any)|null;timestampOffset:number;readonly updating:boolean;abort():void;appendBuffer(data:BufferSource):void;changeType(type:string):void;remove(start:number,end:number):void;addEventListener<K extends keyof SourceBufferEventMap>(type:K,listener:(this:SourceBuffer,ev:SourceBufferEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SourceBufferEventMap>(type:K,listener:(this:SourceBuffer,ev:SourceBufferEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SourceBuffer:{prototype:SourceBuffer;new():SourceBuffer;};interface SourceBufferListEventMap{\"addsourcebuffer\":Event;\"removesourcebuffer\":Event;}interface SourceBufferList extends EventTarget{readonly length:number;onaddsourcebuffer:((this:SourceBufferList,ev:Event)=>any)|null;onremovesourcebuffer:((this:SourceBufferList,ev:Event)=>any)|null;addEventListener<K extends keyof SourceBufferListEventMap>(type:K,listener:(this:SourceBufferList,ev:SourceBufferListEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SourceBufferListEventMap>(type:K,listener:(this:SourceBufferList,ev:SourceBufferListEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;[index:number]:SourceBuffer;}declare var SourceBufferList:{prototype:SourceBufferList;new():SourceBufferList;};interface SpeechRecognitionAlternative{readonly confidence:number;readonly transcript:string;}declare var SpeechRecognitionAlternative:{prototype:SpeechRecognitionAlternative;new():SpeechRecognitionAlternative;};interface SpeechRecognitionResult{readonly isFinal:boolean;readonly length:number;item(index:number):SpeechRecognitionAlternative;[index:number]:SpeechRecognitionAlternative;}declare var SpeechRecognitionResult:{prototype:SpeechRecognitionResult;new():SpeechRecognitionResult;};interface SpeechRecognitionResultList{readonly length:number;item(index:number):SpeechRecognitionResult;[index:number]:SpeechRecognitionResult;}declare var SpeechRecognitionResultList:{prototype:SpeechRecognitionResultList;new():SpeechRecognitionResultList;};interface SpeechSynthesisEventMap{\"voiceschanged\":Event;}interface SpeechSynthesis extends EventTarget{onvoiceschanged:((this:SpeechSynthesis,ev:Event)=>any)|null;readonly paused:boolean;readonly pending:boolean;readonly speaking:boolean;cancel():void;getVoices():SpeechSynthesisVoice[];pause():void;resume():void;speak(utterance:SpeechSynthesisUtterance):void;addEventListener<K extends keyof SpeechSynthesisEventMap>(type:K,listener:(this:SpeechSynthesis,ev:SpeechSynthesisEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SpeechSynthesisEventMap>(type:K,listener:(this:SpeechSynthesis,ev:SpeechSynthesisEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SpeechSynthesis:{prototype:SpeechSynthesis;new():SpeechSynthesis;};interface SpeechSynthesisErrorEvent extends SpeechSynthesisEvent{readonly error:SpeechSynthesisErrorCode;}declare var SpeechSynthesisErrorEvent:{prototype:SpeechSynthesisErrorEvent;new(type:string,eventInitDict:SpeechSynthesisErrorEventInit):SpeechSynthesisErrorEvent;};interface SpeechSynthesisEvent extends Event{readonly charIndex:number;readonly charLength:number;readonly elapsedTime:number;readonly name:string;readonly utterance:SpeechSynthesisUtterance;}declare var SpeechSynthesisEvent:{prototype:SpeechSynthesisEvent;new(type:string,eventInitDict:SpeechSynthesisEventInit):SpeechSynthesisEvent;};interface SpeechSynthesisUtteranceEventMap{\"boundary\":SpeechSynthesisEvent;\"end\":SpeechSynthesisEvent;\"error\":SpeechSynthesisErrorEvent;\"mark\":SpeechSynthesisEvent;\"pause\":SpeechSynthesisEvent;\"resume\":SpeechSynthesisEvent;\"start\":SpeechSynthesisEvent;}interface SpeechSynthesisUtterance extends EventTarget{lang:string;onboundary:((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)|null;onend:((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)|null;onerror:((this:SpeechSynthesisUtterance,ev:SpeechSynthesisErrorEvent)=>any)|null;onmark:((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)|null;onpause:((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)|null;onresume:((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)|null;onstart:((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)|null;pitch:number;rate:number;text:string;voice:SpeechSynthesisVoice|null;volume:number;addEventListener<K extends keyof SpeechSynthesisUtteranceEventMap>(type:K,listener:(this:SpeechSynthesisUtterance,ev:SpeechSynthesisUtteranceEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SpeechSynthesisUtteranceEventMap>(type:K,listener:(this:SpeechSynthesisUtterance,ev:SpeechSynthesisUtteranceEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SpeechSynthesisUtterance:{prototype:SpeechSynthesisUtterance;new(text?:string):SpeechSynthesisUtterance;};interface SpeechSynthesisVoice{readonly default:boolean;readonly lang:string;readonly localService:boolean;readonly name:string;readonly voiceURI:string;}declare var SpeechSynthesisVoice:{prototype:SpeechSynthesisVoice;new():SpeechSynthesisVoice;};interface StaticRange extends AbstractRange{}declare var StaticRange:{prototype:StaticRange;new(init:StaticRangeInit):StaticRange;};interface StereoPannerNode extends AudioNode{readonly pan:AudioParam;}declare var StereoPannerNode:{prototype:StereoPannerNode;new(context:BaseAudioContext,options?:StereoPannerOptions):StereoPannerNode;};interface Storage{readonly length:number;clear():void;getItem(key:string):string|null;key(index:number):string|null;removeItem(key:string):void;setItem(key:string,value:string):void;[name:string]:any;}declare var Storage:{prototype:Storage;new():Storage;};interface StorageEvent extends Event{readonly key:string|null;readonly newValue:string|null;readonly oldValue:string|null;readonly storageArea:Storage|null;readonly url:string;initStorageEvent(type:string,bubbles?:boolean,cancelable?:boolean,key?:string|null,oldValue?:string|null,newValue?:string|null,url?:string|URL,storageArea?:Storage|null):void;}declare var StorageEvent:{prototype:StorageEvent;new(type:string,eventInitDict?:StorageEventInit):StorageEvent;};interface StorageManager{estimate():Promise<StorageEstimate>;getDirectory():Promise<FileSystemDirectoryHandle>;persist():Promise<boolean>;persisted():Promise<boolean>;}declare var StorageManager:{prototype:StorageManager;new():StorageManager;};interface StyleMedia{type:string;matchMedium(mediaquery:string):boolean;}interface StyleSheet{disabled:boolean;readonly href:string|null;readonly media:MediaList;readonly ownerNode:Element|ProcessingInstruction|null;readonly parentStyleSheet:CSSStyleSheet|null;readonly title:string|null;readonly type:string;}declare var StyleSheet:{prototype:StyleSheet;new():StyleSheet;};interface StyleSheetList{readonly length:number;item(index:number):CSSStyleSheet|null;[index:number]:CSSStyleSheet;}declare var StyleSheetList:{prototype:StyleSheetList;new():StyleSheetList;};interface SubmitEvent extends Event{readonly submitter:HTMLElement|null;}declare var SubmitEvent:{prototype:SubmitEvent;new(type:string,eventInitDict?:SubmitEventInit):SubmitEvent;};interface SubtleCrypto{decrypt(algorithm:AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams,key:CryptoKey,data:BufferSource):Promise<any>;deriveBits(algorithm:AlgorithmIdentifier|EcdhKeyDeriveParams|HkdfParams|Pbkdf2Params,baseKey:CryptoKey,length:number):Promise<ArrayBuffer>;deriveKey(algorithm:AlgorithmIdentifier|EcdhKeyDeriveParams|HkdfParams|Pbkdf2Params,baseKey:CryptoKey,derivedKeyType:AlgorithmIdentifier|AesDerivedKeyParams|HmacImportParams|HkdfParams|Pbkdf2Params,extractable:boolean,keyUsages:KeyUsage[]):Promise<CryptoKey>;digest(algorithm:AlgorithmIdentifier,data:BufferSource):Promise<ArrayBuffer>;encrypt(algorithm:AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams,key:CryptoKey,data:BufferSource):Promise<any>;exportKey(format:\"jwk\",key:CryptoKey):Promise<JsonWebKey>;exportKey(format:Exclude<KeyFormat,\"jwk\">,key:CryptoKey):Promise<ArrayBuffer>;generateKey(algorithm:RsaHashedKeyGenParams|EcKeyGenParams,extractable:boolean,keyUsages:ReadonlyArray<KeyUsage>):Promise<CryptoKeyPair>;generateKey(algorithm:AesKeyGenParams|HmacKeyGenParams|Pbkdf2Params,extractable:boolean,keyUsages:ReadonlyArray<KeyUsage>):Promise<CryptoKey>;generateKey(algorithm:AlgorithmIdentifier,extractable:boolean,keyUsages:KeyUsage[]):Promise<CryptoKeyPair|CryptoKey>;importKey(format:\"jwk\",keyData:JsonWebKey,algorithm:AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm,extractable:boolean,keyUsages:ReadonlyArray<KeyUsage>):Promise<CryptoKey>;importKey(format:Exclude<KeyFormat,\"jwk\">,keyData:BufferSource,algorithm:AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm,extractable:boolean,keyUsages:KeyUsage[]):Promise<CryptoKey>;sign(algorithm:AlgorithmIdentifier|RsaPssParams|EcdsaParams,key:CryptoKey,data:BufferSource):Promise<ArrayBuffer>;unwrapKey(format:KeyFormat,wrappedKey:BufferSource,unwrappingKey:CryptoKey,unwrapAlgorithm:AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams,unwrappedKeyAlgorithm:AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm,extractable:boolean,keyUsages:KeyUsage[]):Promise<CryptoKey>;verify(algorithm:AlgorithmIdentifier|RsaPssParams|EcdsaParams,key:CryptoKey,signature:BufferSource,data:BufferSource):Promise<boolean>;wrapKey(format:KeyFormat,key:CryptoKey,wrappingKey:CryptoKey,wrapAlgorithm:AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams):Promise<ArrayBuffer>;}declare var SubtleCrypto:{prototype:SubtleCrypto;new():SubtleCrypto;};interface Text extends CharacterData,Slottable{readonly wholeText:string;splitText(offset:number):Text;}declare var Text:{prototype:Text;new(data?:string):Text;};interface TextDecoder extends TextDecoderCommon{decode(input?:BufferSource,options?:TextDecodeOptions):string;}declare var TextDecoder:{prototype:TextDecoder;new(label?:string,options?:TextDecoderOptions):TextDecoder;};interface TextDecoderCommon{readonly encoding:string;readonly fatal:boolean;readonly ignoreBOM:boolean;}interface TextDecoderStream extends GenericTransformStream,TextDecoderCommon{readonly readable:ReadableStream<string>;readonly writable:WritableStream<BufferSource>;}declare var TextDecoderStream:{prototype:TextDecoderStream;new(label?:string,options?:TextDecoderOptions):TextDecoderStream;};interface TextEncoder extends TextEncoderCommon{encode(input?:string):Uint8Array;encodeInto(source:string,destination:Uint8Array):TextEncoderEncodeIntoResult;}declare var TextEncoder:{prototype:TextEncoder;new():TextEncoder;};interface TextEncoderCommon{readonly encoding:string;}interface TextEncoderStream extends GenericTransformStream,TextEncoderCommon{readonly readable:ReadableStream<Uint8Array>;readonly writable:WritableStream<string>;}declare var TextEncoderStream:{prototype:TextEncoderStream;new():TextEncoderStream;};interface TextMetrics{readonly actualBoundingBoxAscent:number;readonly actualBoundingBoxDescent:number;readonly actualBoundingBoxLeft:number;readonly actualBoundingBoxRight:number;readonly fontBoundingBoxAscent:number;readonly fontBoundingBoxDescent:number;readonly width:number;}declare var TextMetrics:{prototype:TextMetrics;new():TextMetrics;};interface TextTrackEventMap{\"cuechange\":Event;}interface TextTrack extends EventTarget{readonly activeCues:TextTrackCueList|null;readonly cues:TextTrackCueList|null;readonly id:string;readonly inBandMetadataTrackDispatchType:string;readonly kind:TextTrackKind;readonly label:string;readonly language:string;mode:TextTrackMode;oncuechange:((this:TextTrack,ev:Event)=>any)|null;addCue(cue:TextTrackCue):void;removeCue(cue:TextTrackCue):void;addEventListener<K extends keyof TextTrackEventMap>(type:K,listener:(this:TextTrack,ev:TextTrackEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof TextTrackEventMap>(type:K,listener:(this:TextTrack,ev:TextTrackEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var TextTrack:{prototype:TextTrack;new():TextTrack;};interface TextTrackCueEventMap{\"enter\":Event;\"exit\":Event;}interface TextTrackCue extends EventTarget{endTime:number;id:string;onenter:((this:TextTrackCue,ev:Event)=>any)|null;onexit:((this:TextTrackCue,ev:Event)=>any)|null;pauseOnExit:boolean;startTime:number;readonly track:TextTrack|null;addEventListener<K extends keyof TextTrackCueEventMap>(type:K,listener:(this:TextTrackCue,ev:TextTrackCueEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof TextTrackCueEventMap>(type:K,listener:(this:TextTrackCue,ev:TextTrackCueEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var TextTrackCue:{prototype:TextTrackCue;new():TextTrackCue;};interface TextTrackCueList{readonly length:number;getCueById(id:string):TextTrackCue|null;[index:number]:TextTrackCue;}declare var TextTrackCueList:{prototype:TextTrackCueList;new():TextTrackCueList;};interface TextTrackListEventMap{\"addtrack\":TrackEvent;\"change\":Event;\"removetrack\":TrackEvent;}interface TextTrackList extends EventTarget{readonly length:number;onaddtrack:((this:TextTrackList,ev:TrackEvent)=>any)|null;onchange:((this:TextTrackList,ev:Event)=>any)|null;onremovetrack:((this:TextTrackList,ev:TrackEvent)=>any)|null;getTrackById(id:string):TextTrack|null;addEventListener<K extends keyof TextTrackListEventMap>(type:K,listener:(this:TextTrackList,ev:TextTrackListEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof TextTrackListEventMap>(type:K,listener:(this:TextTrackList,ev:TextTrackListEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;[index:number]:TextTrack;}declare var TextTrackList:{prototype:TextTrackList;new():TextTrackList;};interface TimeRanges{readonly length:number;end(index:number):number;start(index:number):number;}declare var TimeRanges:{prototype:TimeRanges;new():TimeRanges;};interface Touch{readonly clientX:number;readonly clientY:number;readonly force:number;readonly identifier:number;readonly pageX:number;readonly pageY:number;readonly radiusX:number;readonly radiusY:number;readonly rotationAngle:number;readonly screenX:number;readonly screenY:number;readonly target:EventTarget;}declare var Touch:{prototype:Touch;new(touchInitDict:TouchInit):Touch;};interface TouchEvent extends UIEvent{readonly altKey:boolean;readonly changedTouches:TouchList;readonly ctrlKey:boolean;readonly metaKey:boolean;readonly shiftKey:boolean;readonly targetTouches:TouchList;readonly touches:TouchList;}declare var TouchEvent:{prototype:TouchEvent;new(type:string,eventInitDict?:TouchEventInit):TouchEvent;};interface TouchList{readonly length:number;item(index:number):Touch|null;[index:number]:Touch;}declare var TouchList:{prototype:TouchList;new():TouchList;};interface TrackEvent extends Event{readonly track:TextTrack|null;}declare var TrackEvent:{prototype:TrackEvent;new(type:string,eventInitDict?:TrackEventInit):TrackEvent;};interface TransformStream<I=any,O=any>{readonly readable:ReadableStream<O>;readonly writable:WritableStream<I>;}declare var TransformStream:{prototype:TransformStream;new<I=any,O=any>(transformer?:Transformer<I,O>,writableStrategy?:QueuingStrategy<I>,readableStrategy?:QueuingStrategy<O>):TransformStream<I,O>;};interface TransformStreamDefaultController<O=any>{readonly desiredSize:number|null;enqueue(chunk?:O):void;error(reason?:any):void;terminate():void;}declare var TransformStreamDefaultController:{prototype:TransformStreamDefaultController;new():TransformStreamDefaultController;};interface TransitionEvent extends Event{readonly elapsedTime:number;readonly propertyName:string;readonly pseudoElement:string;}declare var TransitionEvent:{prototype:TransitionEvent;new(type:string,transitionEventInitDict?:TransitionEventInit):TransitionEvent;};interface TreeWalker{currentNode:Node;readonly filter:NodeFilter|null;readonly root:Node;readonly whatToShow:number;firstChild():Node|null;lastChild():Node|null;nextNode():Node|null;nextSibling():Node|null;parentNode():Node|null;previousNode():Node|null;previousSibling():Node|null;}declare var TreeWalker:{prototype:TreeWalker;new():TreeWalker;};interface UIEvent extends Event{readonly detail:number;readonly view:Window|null;readonly which:number;initUIEvent(typeArg:string,bubblesArg?:boolean,cancelableArg?:boolean,viewArg?:Window|null,detailArg?:number):void;}declare var UIEvent:{prototype:UIEvent;new(type:string,eventInitDict?:UIEventInit):UIEvent;};interface URL{hash:string;host:string;hostname:string;href:string;toString():string;readonly origin:string;password:string;pathname:string;port:string;protocol:string;search:string;readonly searchParams:URLSearchParams;username:string;toJSON():string;}declare var URL:{prototype:URL;new(url:string|URL,base?:string|URL):URL;createObjectURL(obj:Blob|MediaSource):string;revokeObjectURL(url:string):void;};type webkitURL=URL;declare var webkitURL:typeof URL;interface URLSearchParams{append(name:string,value:string):void;delete(name:string):void;get(name:string):string|null;getAll(name:string):string[];has(name:string):boolean;set(name:string,value:string):void;sort():void;toString():string;forEach(callbackfn:(value:string,key:string,parent:URLSearchParams)=>void,thisArg?:any):void;}declare var URLSearchParams:{prototype:URLSearchParams;new(init?:string[][]|Record<string,string>|string|URLSearchParams):URLSearchParams;toString():string;};interface VTTCue extends TextTrackCue{align:AlignSetting;line:LineAndPositionSetting;lineAlign:LineAlignSetting;position:LineAndPositionSetting;positionAlign:PositionAlignSetting;region:VTTRegion|null;size:number;snapToLines:boolean;text:string;vertical:DirectionSetting;getCueAsHTML():DocumentFragment;addEventListener<K extends keyof TextTrackCueEventMap>(type:K,listener:(this:VTTCue,ev:TextTrackCueEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof TextTrackCueEventMap>(type:K,listener:(this:VTTCue,ev:TextTrackCueEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var VTTCue:{prototype:VTTCue;new(startTime:number,endTime:number,text:string):VTTCue;};interface VTTRegion{id:string;lines:number;regionAnchorX:number;regionAnchorY:number;scroll:ScrollSetting;viewportAnchorX:number;viewportAnchorY:number;width:number;}declare var VTTRegion:{prototype:VTTRegion;new():VTTRegion;};interface ValidityState{readonly badInput:boolean;readonly customError:boolean;readonly patternMismatch:boolean;readonly rangeOverflow:boolean;readonly rangeUnderflow:boolean;readonly stepMismatch:boolean;readonly tooLong:boolean;readonly tooShort:boolean;readonly typeMismatch:boolean;readonly valid:boolean;readonly valueMissing:boolean;}declare var ValidityState:{prototype:ValidityState;new():ValidityState;};interface VideoColorSpace{readonly fullRange:boolean|null;readonly matrix:VideoMatrixCoefficients|null;readonly primaries:VideoColorPrimaries|null;readonly transfer:VideoTransferCharacteristics|null;toJSON():VideoColorSpaceInit;}declare var VideoColorSpace:{prototype:VideoColorSpace;new(init?:VideoColorSpaceInit):VideoColorSpace;};interface VideoPlaybackQuality{readonly corruptedVideoFrames:number;readonly creationTime:DOMHighResTimeStamp;readonly droppedVideoFrames:number;readonly totalVideoFrames:number;}declare var VideoPlaybackQuality:{prototype:VideoPlaybackQuality;new():VideoPlaybackQuality;};interface VisualViewportEventMap{\"resize\":Event;\"scroll\":Event;}interface VisualViewport extends EventTarget{readonly height:number;readonly offsetLeft:number;readonly offsetTop:number;onresize:((this:VisualViewport,ev:Event)=>any)|null;onscroll:((this:VisualViewport,ev:Event)=>any)|null;readonly pageLeft:number;readonly pageTop:number;readonly scale:number;readonly width:number;addEventListener<K extends keyof VisualViewportEventMap>(type:K,listener:(this:VisualViewport,ev:VisualViewportEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof VisualViewportEventMap>(type:K,listener:(this:VisualViewport,ev:VisualViewportEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var VisualViewport:{prototype:VisualViewport;new():VisualViewport;};interface WEBGL_color_buffer_float{readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT:GLenum;readonly RGBA32F_EXT:GLenum;readonly UNSIGNED_NORMALIZED_EXT:GLenum;}interface WEBGL_compressed_texture_astc{getSupportedProfiles():string[];readonly COMPRESSED_RGBA_ASTC_10x10_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_10x5_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_10x6_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_10x8_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_12x10_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_12x12_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_4x4_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_5x4_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_5x5_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_6x5_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_6x6_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_8x5_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_8x6_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_8x8_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:GLenum;}interface WEBGL_compressed_texture_etc{readonly COMPRESSED_R11_EAC:GLenum;readonly COMPRESSED_RG11_EAC:GLenum;readonly COMPRESSED_RGB8_ETC2:GLenum;readonly COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:GLenum;readonly COMPRESSED_RGBA8_ETC2_EAC:GLenum;readonly COMPRESSED_SIGNED_R11_EAC:GLenum;readonly COMPRESSED_SIGNED_RG11_EAC:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:GLenum;readonly COMPRESSED_SRGB8_ETC2:GLenum;readonly COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:GLenum;}interface WEBGL_compressed_texture_etc1{readonly COMPRESSED_RGB_ETC1_WEBGL:GLenum;}interface WEBGL_compressed_texture_s3tc{readonly COMPRESSED_RGBA_S3TC_DXT1_EXT:GLenum;readonly COMPRESSED_RGBA_S3TC_DXT3_EXT:GLenum;readonly COMPRESSED_RGBA_S3TC_DXT5_EXT:GLenum;readonly COMPRESSED_RGB_S3TC_DXT1_EXT:GLenum;}interface WEBGL_compressed_texture_s3tc_srgb{readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT:GLenum;readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT:GLenum;readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT:GLenum;readonly COMPRESSED_SRGB_S3TC_DXT1_EXT:GLenum;}interface WEBGL_debug_renderer_info{readonly UNMASKED_RENDERER_WEBGL:GLenum;readonly UNMASKED_VENDOR_WEBGL:GLenum;}interface WEBGL_debug_shaders{getTranslatedShaderSource(shader:WebGLShader):string;}interface WEBGL_depth_texture{readonly UNSIGNED_INT_24_8_WEBGL:GLenum;}interface WEBGL_draw_buffers{drawBuffersWEBGL(buffers:GLenum[]):void;readonly COLOR_ATTACHMENT0_WEBGL:GLenum;readonly COLOR_ATTACHMENT10_WEBGL:GLenum;readonly COLOR_ATTACHMENT11_WEBGL:GLenum;readonly COLOR_ATTACHMENT12_WEBGL:GLenum;readonly COLOR_ATTACHMENT13_WEBGL:GLenum;readonly COLOR_ATTACHMENT14_WEBGL:GLenum;readonly COLOR_ATTACHMENT15_WEBGL:GLenum;readonly COLOR_ATTACHMENT1_WEBGL:GLenum;readonly COLOR_ATTACHMENT2_WEBGL:GLenum;readonly COLOR_ATTACHMENT3_WEBGL:GLenum;readonly COLOR_ATTACHMENT4_WEBGL:GLenum;readonly COLOR_ATTACHMENT5_WEBGL:GLenum;readonly COLOR_ATTACHMENT6_WEBGL:GLenum;readonly COLOR_ATTACHMENT7_WEBGL:GLenum;readonly COLOR_ATTACHMENT8_WEBGL:GLenum;readonly COLOR_ATTACHMENT9_WEBGL:GLenum;readonly DRAW_BUFFER0_WEBGL:GLenum;readonly DRAW_BUFFER10_WEBGL:GLenum;readonly DRAW_BUFFER11_WEBGL:GLenum;readonly DRAW_BUFFER12_WEBGL:GLenum;readonly DRAW_BUFFER13_WEBGL:GLenum;readonly DRAW_BUFFER14_WEBGL:GLenum;readonly DRAW_BUFFER15_WEBGL:GLenum;readonly DRAW_BUFFER1_WEBGL:GLenum;readonly DRAW_BUFFER2_WEBGL:GLenum;readonly DRAW_BUFFER3_WEBGL:GLenum;readonly DRAW_BUFFER4_WEBGL:GLenum;readonly DRAW_BUFFER5_WEBGL:GLenum;readonly DRAW_BUFFER6_WEBGL:GLenum;readonly DRAW_BUFFER7_WEBGL:GLenum;readonly DRAW_BUFFER8_WEBGL:GLenum;readonly DRAW_BUFFER9_WEBGL:GLenum;readonly MAX_COLOR_ATTACHMENTS_WEBGL:GLenum;readonly MAX_DRAW_BUFFERS_WEBGL:GLenum;}interface WEBGL_lose_context{loseContext():void;restoreContext():void;}interface WEBGL_multi_draw{multiDrawArraysInstancedWEBGL(mode:GLenum,firstsList:Int32Array|GLint[],firstsOffset:GLuint,countsList:Int32Array|GLsizei[],countsOffset:GLuint,instanceCountsList:Int32Array|GLsizei[],instanceCountsOffset:GLuint,drawcount:GLsizei):void;multiDrawArraysWEBGL(mode:GLenum,firstsList:Int32Array|GLint[],firstsOffset:GLuint,countsList:Int32Array|GLsizei[],countsOffset:GLuint,drawcount:GLsizei):void;multiDrawElementsInstancedWEBGL(mode:GLenum,countsList:Int32Array|GLint[],countsOffset:GLuint,type:GLenum,offsetsList:Int32Array|GLsizei[],offsetsOffset:GLuint,instanceCountsList:Int32Array|GLsizei[],instanceCountsOffset:GLuint,drawcount:GLsizei):void;multiDrawElementsWEBGL(mode:GLenum,countsList:Int32Array|GLint[],countsOffset:GLuint,type:GLenum,offsetsList:Int32Array|GLsizei[],offsetsOffset:GLuint,drawcount:GLsizei):void;}interface WaveShaperNode extends AudioNode{curve:Float32Array|null;oversample:OverSampleType;}declare var WaveShaperNode:{prototype:WaveShaperNode;new(context:BaseAudioContext,options?:WaveShaperOptions):WaveShaperNode;};interface WebGL2RenderingContext extends WebGL2RenderingContextBase,WebGL2RenderingContextOverloads,WebGLRenderingContextBase{}declare var WebGL2RenderingContext:{prototype:WebGL2RenderingContext;new():WebGL2RenderingContext;readonly ACTIVE_UNIFORM_BLOCKS:GLenum;readonly ALREADY_SIGNALED:GLenum;readonly ANY_SAMPLES_PASSED:GLenum;readonly ANY_SAMPLES_PASSED_CONSERVATIVE:GLenum;readonly COLOR:GLenum;readonly COLOR_ATTACHMENT1:GLenum;readonly COLOR_ATTACHMENT10:GLenum;readonly COLOR_ATTACHMENT11:GLenum;readonly COLOR_ATTACHMENT12:GLenum;readonly COLOR_ATTACHMENT13:GLenum;readonly COLOR_ATTACHMENT14:GLenum;readonly COLOR_ATTACHMENT15:GLenum;readonly COLOR_ATTACHMENT2:GLenum;readonly COLOR_ATTACHMENT3:GLenum;readonly COLOR_ATTACHMENT4:GLenum;readonly COLOR_ATTACHMENT5:GLenum;readonly COLOR_ATTACHMENT6:GLenum;readonly COLOR_ATTACHMENT7:GLenum;readonly COLOR_ATTACHMENT8:GLenum;readonly COLOR_ATTACHMENT9:GLenum;readonly COMPARE_REF_TO_TEXTURE:GLenum;readonly CONDITION_SATISFIED:GLenum;readonly COPY_READ_BUFFER:GLenum;readonly COPY_READ_BUFFER_BINDING:GLenum;readonly COPY_WRITE_BUFFER:GLenum;readonly COPY_WRITE_BUFFER_BINDING:GLenum;readonly CURRENT_QUERY:GLenum;readonly DEPTH:GLenum;readonly DEPTH24_STENCIL8:GLenum;readonly DEPTH32F_STENCIL8:GLenum;readonly DEPTH_COMPONENT24:GLenum;readonly DEPTH_COMPONENT32F:GLenum;readonly DRAW_BUFFER0:GLenum;readonly DRAW_BUFFER1:GLenum;readonly DRAW_BUFFER10:GLenum;readonly DRAW_BUFFER11:GLenum;readonly DRAW_BUFFER12:GLenum;readonly DRAW_BUFFER13:GLenum;readonly DRAW_BUFFER14:GLenum;readonly DRAW_BUFFER15:GLenum;readonly DRAW_BUFFER2:GLenum;readonly DRAW_BUFFER3:GLenum;readonly DRAW_BUFFER4:GLenum;readonly DRAW_BUFFER5:GLenum;readonly DRAW_BUFFER6:GLenum;readonly DRAW_BUFFER7:GLenum;readonly DRAW_BUFFER8:GLenum;readonly DRAW_BUFFER9:GLenum;readonly DRAW_FRAMEBUFFER:GLenum;readonly DRAW_FRAMEBUFFER_BINDING:GLenum;readonly DYNAMIC_COPY:GLenum;readonly DYNAMIC_READ:GLenum;readonly FLOAT_32_UNSIGNED_INT_24_8_REV:GLenum;readonly FLOAT_MAT2x3:GLenum;readonly FLOAT_MAT2x4:GLenum;readonly FLOAT_MAT3x2:GLenum;readonly FLOAT_MAT3x4:GLenum;readonly FLOAT_MAT4x2:GLenum;readonly FLOAT_MAT4x3:GLenum;readonly FRAGMENT_SHADER_DERIVATIVE_HINT:GLenum;readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:GLenum;readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:GLenum;readonly FRAMEBUFFER_DEFAULT:GLenum;readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:GLenum;readonly HALF_FLOAT:GLenum;readonly INTERLEAVED_ATTRIBS:GLenum;readonly INT_2_10_10_10_REV:GLenum;readonly INT_SAMPLER_2D:GLenum;readonly INT_SAMPLER_2D_ARRAY:GLenum;readonly INT_SAMPLER_3D:GLenum;readonly INT_SAMPLER_CUBE:GLenum;readonly INVALID_INDEX:GLenum;readonly MAX:GLenum;readonly MAX_3D_TEXTURE_SIZE:GLenum;readonly MAX_ARRAY_TEXTURE_LAYERS:GLenum;readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL:GLenum;readonly MAX_COLOR_ATTACHMENTS:GLenum;readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:GLenum;readonly MAX_COMBINED_UNIFORM_BLOCKS:GLenum;readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:GLenum;readonly MAX_DRAW_BUFFERS:GLenum;readonly MAX_ELEMENTS_INDICES:GLenum;readonly MAX_ELEMENTS_VERTICES:GLenum;readonly MAX_ELEMENT_INDEX:GLenum;readonly MAX_FRAGMENT_INPUT_COMPONENTS:GLenum;readonly MAX_FRAGMENT_UNIFORM_BLOCKS:GLenum;readonly MAX_FRAGMENT_UNIFORM_COMPONENTS:GLenum;readonly MAX_PROGRAM_TEXEL_OFFSET:GLenum;readonly MAX_SAMPLES:GLenum;readonly MAX_SERVER_WAIT_TIMEOUT:GLenum;readonly MAX_TEXTURE_LOD_BIAS:GLenum;readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS:GLenum;readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS:GLenum;readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS:GLenum;readonly MAX_UNIFORM_BLOCK_SIZE:GLenum;readonly MAX_UNIFORM_BUFFER_BINDINGS:GLenum;readonly MAX_VARYING_COMPONENTS:GLenum;readonly MAX_VERTEX_OUTPUT_COMPONENTS:GLenum;readonly MAX_VERTEX_UNIFORM_BLOCKS:GLenum;readonly MAX_VERTEX_UNIFORM_COMPONENTS:GLenum;readonly MIN:GLenum;readonly MIN_PROGRAM_TEXEL_OFFSET:GLenum;readonly OBJECT_TYPE:GLenum;readonly PACK_ROW_LENGTH:GLenum;readonly PACK_SKIP_PIXELS:GLenum;readonly PACK_SKIP_ROWS:GLenum;readonly PIXEL_PACK_BUFFER:GLenum;readonly PIXEL_PACK_BUFFER_BINDING:GLenum;readonly PIXEL_UNPACK_BUFFER:GLenum;readonly PIXEL_UNPACK_BUFFER_BINDING:GLenum;readonly QUERY_RESULT:GLenum;readonly QUERY_RESULT_AVAILABLE:GLenum;readonly R11F_G11F_B10F:GLenum;readonly R16F:GLenum;readonly R16I:GLenum;readonly R16UI:GLenum;readonly R32F:GLenum;readonly R32I:GLenum;readonly R32UI:GLenum;readonly R8:GLenum;readonly R8I:GLenum;readonly R8UI:GLenum;readonly R8_SNORM:GLenum;readonly RASTERIZER_DISCARD:GLenum;readonly READ_BUFFER:GLenum;readonly READ_FRAMEBUFFER:GLenum;readonly READ_FRAMEBUFFER_BINDING:GLenum;readonly RED:GLenum;readonly RED_INTEGER:GLenum;readonly RENDERBUFFER_SAMPLES:GLenum;readonly RG:GLenum;readonly RG16F:GLenum;readonly RG16I:GLenum;readonly RG16UI:GLenum;readonly RG32F:GLenum;readonly RG32I:GLenum;readonly RG32UI:GLenum;readonly RG8:GLenum;readonly RG8I:GLenum;readonly RG8UI:GLenum;readonly RG8_SNORM:GLenum;readonly RGB10_A2:GLenum;readonly RGB10_A2UI:GLenum;readonly RGB16F:GLenum;readonly RGB16I:GLenum;readonly RGB16UI:GLenum;readonly RGB32F:GLenum;readonly RGB32I:GLenum;readonly RGB32UI:GLenum;readonly RGB8:GLenum;readonly RGB8I:GLenum;readonly RGB8UI:GLenum;readonly RGB8_SNORM:GLenum;readonly RGB9_E5:GLenum;readonly RGBA16F:GLenum;readonly RGBA16I:GLenum;readonly RGBA16UI:GLenum;readonly RGBA32F:GLenum;readonly RGBA32I:GLenum;readonly RGBA32UI:GLenum;readonly RGBA8:GLenum;readonly RGBA8I:GLenum;readonly RGBA8UI:GLenum;readonly RGBA8_SNORM:GLenum;readonly RGBA_INTEGER:GLenum;readonly RGB_INTEGER:GLenum;readonly RG_INTEGER:GLenum;readonly SAMPLER_2D_ARRAY:GLenum;readonly SAMPLER_2D_ARRAY_SHADOW:GLenum;readonly SAMPLER_2D_SHADOW:GLenum;readonly SAMPLER_3D:GLenum;readonly SAMPLER_BINDING:GLenum;readonly SAMPLER_CUBE_SHADOW:GLenum;readonly SEPARATE_ATTRIBS:GLenum;readonly SIGNALED:GLenum;readonly SIGNED_NORMALIZED:GLenum;readonly SRGB:GLenum;readonly SRGB8:GLenum;readonly SRGB8_ALPHA8:GLenum;readonly STATIC_COPY:GLenum;readonly STATIC_READ:GLenum;readonly STENCIL:GLenum;readonly STREAM_COPY:GLenum;readonly STREAM_READ:GLenum;readonly SYNC_CONDITION:GLenum;readonly SYNC_FENCE:GLenum;readonly SYNC_FLAGS:GLenum;readonly SYNC_FLUSH_COMMANDS_BIT:GLenum;readonly SYNC_GPU_COMMANDS_COMPLETE:GLenum;readonly SYNC_STATUS:GLenum;readonly TEXTURE_2D_ARRAY:GLenum;readonly TEXTURE_3D:GLenum;readonly TEXTURE_BASE_LEVEL:GLenum;readonly TEXTURE_BINDING_2D_ARRAY:GLenum;readonly TEXTURE_BINDING_3D:GLenum;readonly TEXTURE_COMPARE_FUNC:GLenum;readonly TEXTURE_COMPARE_MODE:GLenum;readonly TEXTURE_IMMUTABLE_FORMAT:GLenum;readonly TEXTURE_IMMUTABLE_LEVELS:GLenum;readonly TEXTURE_MAX_LEVEL:GLenum;readonly TEXTURE_MAX_LOD:GLenum;readonly TEXTURE_MIN_LOD:GLenum;readonly TEXTURE_WRAP_R:GLenum;readonly TIMEOUT_EXPIRED:GLenum;readonly TIMEOUT_IGNORED:GLint64;readonly TRANSFORM_FEEDBACK:GLenum;readonly TRANSFORM_FEEDBACK_ACTIVE:GLenum;readonly TRANSFORM_FEEDBACK_BINDING:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_BINDING:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_MODE:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_SIZE:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_START:GLenum;readonly TRANSFORM_FEEDBACK_PAUSED:GLenum;readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:GLenum;readonly TRANSFORM_FEEDBACK_VARYINGS:GLenum;readonly UNIFORM_ARRAY_STRIDE:GLenum;readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS:GLenum;readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:GLenum;readonly UNIFORM_BLOCK_BINDING:GLenum;readonly UNIFORM_BLOCK_DATA_SIZE:GLenum;readonly UNIFORM_BLOCK_INDEX:GLenum;readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:GLenum;readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:GLenum;readonly UNIFORM_BUFFER:GLenum;readonly UNIFORM_BUFFER_BINDING:GLenum;readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT:GLenum;readonly UNIFORM_BUFFER_SIZE:GLenum;readonly UNIFORM_BUFFER_START:GLenum;readonly UNIFORM_IS_ROW_MAJOR:GLenum;readonly UNIFORM_MATRIX_STRIDE:GLenum;readonly UNIFORM_OFFSET:GLenum;readonly UNIFORM_SIZE:GLenum;readonly UNIFORM_TYPE:GLenum;readonly UNPACK_IMAGE_HEIGHT:GLenum;readonly UNPACK_ROW_LENGTH:GLenum;readonly UNPACK_SKIP_IMAGES:GLenum;readonly UNPACK_SKIP_PIXELS:GLenum;readonly UNPACK_SKIP_ROWS:GLenum;readonly UNSIGNALED:GLenum;readonly UNSIGNED_INT_10F_11F_11F_REV:GLenum;readonly UNSIGNED_INT_24_8:GLenum;readonly UNSIGNED_INT_2_10_10_10_REV:GLenum;readonly UNSIGNED_INT_5_9_9_9_REV:GLenum;readonly UNSIGNED_INT_SAMPLER_2D:GLenum;readonly UNSIGNED_INT_SAMPLER_2D_ARRAY:GLenum;readonly UNSIGNED_INT_SAMPLER_3D:GLenum;readonly UNSIGNED_INT_SAMPLER_CUBE:GLenum;readonly UNSIGNED_INT_VEC2:GLenum;readonly UNSIGNED_INT_VEC3:GLenum;readonly UNSIGNED_INT_VEC4:GLenum;readonly UNSIGNED_NORMALIZED:GLenum;readonly VERTEX_ARRAY_BINDING:GLenum;readonly VERTEX_ATTRIB_ARRAY_DIVISOR:GLenum;readonly VERTEX_ATTRIB_ARRAY_INTEGER:GLenum;readonly WAIT_FAILED:GLenum;readonly ACTIVE_ATTRIBUTES:GLenum;readonly ACTIVE_TEXTURE:GLenum;readonly ACTIVE_UNIFORMS:GLenum;readonly ALIASED_LINE_WIDTH_RANGE:GLenum;readonly ALIASED_POINT_SIZE_RANGE:GLenum;readonly ALPHA:GLenum;readonly ALPHA_BITS:GLenum;readonly ALWAYS:GLenum;readonly ARRAY_BUFFER:GLenum;readonly ARRAY_BUFFER_BINDING:GLenum;readonly ATTACHED_SHADERS:GLenum;readonly BACK:GLenum;readonly BLEND:GLenum;readonly BLEND_COLOR:GLenum;readonly BLEND_DST_ALPHA:GLenum;readonly BLEND_DST_RGB:GLenum;readonly BLEND_EQUATION:GLenum;readonly BLEND_EQUATION_ALPHA:GLenum;readonly BLEND_EQUATION_RGB:GLenum;readonly BLEND_SRC_ALPHA:GLenum;readonly BLEND_SRC_RGB:GLenum;readonly BLUE_BITS:GLenum;readonly BOOL:GLenum;readonly BOOL_VEC2:GLenum;readonly BOOL_VEC3:GLenum;readonly BOOL_VEC4:GLenum;readonly BROWSER_DEFAULT_WEBGL:GLenum;readonly BUFFER_SIZE:GLenum;readonly BUFFER_USAGE:GLenum;readonly BYTE:GLenum;readonly CCW:GLenum;readonly CLAMP_TO_EDGE:GLenum;readonly COLOR_ATTACHMENT0:GLenum;readonly COLOR_BUFFER_BIT:GLenum;readonly COLOR_CLEAR_VALUE:GLenum;readonly COLOR_WRITEMASK:GLenum;readonly COMPILE_STATUS:GLenum;readonly COMPRESSED_TEXTURE_FORMATS:GLenum;readonly CONSTANT_ALPHA:GLenum;readonly CONSTANT_COLOR:GLenum;readonly CONTEXT_LOST_WEBGL:GLenum;readonly CULL_FACE:GLenum;readonly CULL_FACE_MODE:GLenum;readonly CURRENT_PROGRAM:GLenum;readonly CURRENT_VERTEX_ATTRIB:GLenum;readonly CW:GLenum;readonly DECR:GLenum;readonly DECR_WRAP:GLenum;readonly DELETE_STATUS:GLenum;readonly DEPTH_ATTACHMENT:GLenum;readonly DEPTH_BITS:GLenum;readonly DEPTH_BUFFER_BIT:GLenum;readonly DEPTH_CLEAR_VALUE:GLenum;readonly DEPTH_COMPONENT:GLenum;readonly DEPTH_COMPONENT16:GLenum;readonly DEPTH_FUNC:GLenum;readonly DEPTH_RANGE:GLenum;readonly DEPTH_STENCIL:GLenum;readonly DEPTH_STENCIL_ATTACHMENT:GLenum;readonly DEPTH_TEST:GLenum;readonly DEPTH_WRITEMASK:GLenum;readonly DITHER:GLenum;readonly DONT_CARE:GLenum;readonly DST_ALPHA:GLenum;readonly DST_COLOR:GLenum;readonly DYNAMIC_DRAW:GLenum;readonly ELEMENT_ARRAY_BUFFER:GLenum;readonly ELEMENT_ARRAY_BUFFER_BINDING:GLenum;readonly EQUAL:GLenum;readonly FASTEST:GLenum;readonly FLOAT:GLenum;readonly FLOAT_MAT2:GLenum;readonly FLOAT_MAT3:GLenum;readonly FLOAT_MAT4:GLenum;readonly FLOAT_VEC2:GLenum;readonly FLOAT_VEC3:GLenum;readonly FLOAT_VEC4:GLenum;readonly FRAGMENT_SHADER:GLenum;readonly FRAMEBUFFER:GLenum;readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:GLenum;readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:GLenum;readonly FRAMEBUFFER_BINDING:GLenum;readonly FRAMEBUFFER_COMPLETE:GLenum;readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT:GLenum;readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS:GLenum;readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:GLenum;readonly FRAMEBUFFER_UNSUPPORTED:GLenum;readonly FRONT:GLenum;readonly FRONT_AND_BACK:GLenum;readonly FRONT_FACE:GLenum;readonly FUNC_ADD:GLenum;readonly FUNC_REVERSE_SUBTRACT:GLenum;readonly FUNC_SUBTRACT:GLenum;readonly GENERATE_MIPMAP_HINT:GLenum;readonly GEQUAL:GLenum;readonly GREATER:GLenum;readonly GREEN_BITS:GLenum;readonly HIGH_FLOAT:GLenum;readonly HIGH_INT:GLenum;readonly IMPLEMENTATION_COLOR_READ_FORMAT:GLenum;readonly IMPLEMENTATION_COLOR_READ_TYPE:GLenum;readonly INCR:GLenum;readonly INCR_WRAP:GLenum;readonly INT:GLenum;readonly INT_VEC2:GLenum;readonly INT_VEC3:GLenum;readonly INT_VEC4:GLenum;readonly INVALID_ENUM:GLenum;readonly INVALID_FRAMEBUFFER_OPERATION:GLenum;readonly INVALID_OPERATION:GLenum;readonly INVALID_VALUE:GLenum;readonly INVERT:GLenum;readonly KEEP:GLenum;readonly LEQUAL:GLenum;readonly LESS:GLenum;readonly LINEAR:GLenum;readonly LINEAR_MIPMAP_LINEAR:GLenum;readonly LINEAR_MIPMAP_NEAREST:GLenum;readonly LINES:GLenum;readonly LINE_LOOP:GLenum;readonly LINE_STRIP:GLenum;readonly LINE_WIDTH:GLenum;readonly LINK_STATUS:GLenum;readonly LOW_FLOAT:GLenum;readonly LOW_INT:GLenum;readonly LUMINANCE:GLenum;readonly LUMINANCE_ALPHA:GLenum;readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_CUBE_MAP_TEXTURE_SIZE:GLenum;readonly MAX_FRAGMENT_UNIFORM_VECTORS:GLenum;readonly MAX_RENDERBUFFER_SIZE:GLenum;readonly MAX_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_TEXTURE_SIZE:GLenum;readonly MAX_VARYING_VECTORS:GLenum;readonly MAX_VERTEX_ATTRIBS:GLenum;readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_VERTEX_UNIFORM_VECTORS:GLenum;readonly MAX_VIEWPORT_DIMS:GLenum;readonly MEDIUM_FLOAT:GLenum;readonly MEDIUM_INT:GLenum;readonly MIRRORED_REPEAT:GLenum;readonly NEAREST:GLenum;readonly NEAREST_MIPMAP_LINEAR:GLenum;readonly NEAREST_MIPMAP_NEAREST:GLenum;readonly NEVER:GLenum;readonly NICEST:GLenum;readonly NONE:GLenum;readonly NOTEQUAL:GLenum;readonly NO_ERROR:GLenum;readonly ONE:GLenum;readonly ONE_MINUS_CONSTANT_ALPHA:GLenum;readonly ONE_MINUS_CONSTANT_COLOR:GLenum;readonly ONE_MINUS_DST_ALPHA:GLenum;readonly ONE_MINUS_DST_COLOR:GLenum;readonly ONE_MINUS_SRC_ALPHA:GLenum;readonly ONE_MINUS_SRC_COLOR:GLenum;readonly OUT_OF_MEMORY:GLenum;readonly PACK_ALIGNMENT:GLenum;readonly POINTS:GLenum;readonly POLYGON_OFFSET_FACTOR:GLenum;readonly POLYGON_OFFSET_FILL:GLenum;readonly POLYGON_OFFSET_UNITS:GLenum;readonly RED_BITS:GLenum;readonly RENDERBUFFER:GLenum;readonly RENDERBUFFER_ALPHA_SIZE:GLenum;readonly RENDERBUFFER_BINDING:GLenum;readonly RENDERBUFFER_BLUE_SIZE:GLenum;readonly RENDERBUFFER_DEPTH_SIZE:GLenum;readonly RENDERBUFFER_GREEN_SIZE:GLenum;readonly RENDERBUFFER_HEIGHT:GLenum;readonly RENDERBUFFER_INTERNAL_FORMAT:GLenum;readonly RENDERBUFFER_RED_SIZE:GLenum;readonly RENDERBUFFER_STENCIL_SIZE:GLenum;readonly RENDERBUFFER_WIDTH:GLenum;readonly RENDERER:GLenum;readonly REPEAT:GLenum;readonly REPLACE:GLenum;readonly RGB:GLenum;readonly RGB565:GLenum;readonly RGB5_A1:GLenum;readonly RGBA:GLenum;readonly RGBA4:GLenum;readonly SAMPLER_2D:GLenum;readonly SAMPLER_CUBE:GLenum;readonly SAMPLES:GLenum;readonly SAMPLE_ALPHA_TO_COVERAGE:GLenum;readonly SAMPLE_BUFFERS:GLenum;readonly SAMPLE_COVERAGE:GLenum;readonly SAMPLE_COVERAGE_INVERT:GLenum;readonly SAMPLE_COVERAGE_VALUE:GLenum;readonly SCISSOR_BOX:GLenum;readonly SCISSOR_TEST:GLenum;readonly SHADER_TYPE:GLenum;readonly SHADING_LANGUAGE_VERSION:GLenum;readonly SHORT:GLenum;readonly SRC_ALPHA:GLenum;readonly SRC_ALPHA_SATURATE:GLenum;readonly SRC_COLOR:GLenum;readonly STATIC_DRAW:GLenum;readonly STENCIL_ATTACHMENT:GLenum;readonly STENCIL_BACK_FAIL:GLenum;readonly STENCIL_BACK_FUNC:GLenum;readonly STENCIL_BACK_PASS_DEPTH_FAIL:GLenum;readonly STENCIL_BACK_PASS_DEPTH_PASS:GLenum;readonly STENCIL_BACK_REF:GLenum;readonly STENCIL_BACK_VALUE_MASK:GLenum;readonly STENCIL_BACK_WRITEMASK:GLenum;readonly STENCIL_BITS:GLenum;readonly STENCIL_BUFFER_BIT:GLenum;readonly STENCIL_CLEAR_VALUE:GLenum;readonly STENCIL_FAIL:GLenum;readonly STENCIL_FUNC:GLenum;readonly STENCIL_INDEX8:GLenum;readonly STENCIL_PASS_DEPTH_FAIL:GLenum;readonly STENCIL_PASS_DEPTH_PASS:GLenum;readonly STENCIL_REF:GLenum;readonly STENCIL_TEST:GLenum;readonly STENCIL_VALUE_MASK:GLenum;readonly STENCIL_WRITEMASK:GLenum;readonly STREAM_DRAW:GLenum;readonly SUBPIXEL_BITS:GLenum;readonly TEXTURE:GLenum;readonly TEXTURE0:GLenum;readonly TEXTURE1:GLenum;readonly TEXTURE10:GLenum;readonly TEXTURE11:GLenum;readonly TEXTURE12:GLenum;readonly TEXTURE13:GLenum;readonly TEXTURE14:GLenum;readonly TEXTURE15:GLenum;readonly TEXTURE16:GLenum;readonly TEXTURE17:GLenum;readonly TEXTURE18:GLenum;readonly TEXTURE19:GLenum;readonly TEXTURE2:GLenum;readonly TEXTURE20:GLenum;readonly TEXTURE21:GLenum;readonly TEXTURE22:GLenum;readonly TEXTURE23:GLenum;readonly TEXTURE24:GLenum;readonly TEXTURE25:GLenum;readonly TEXTURE26:GLenum;readonly TEXTURE27:GLenum;readonly TEXTURE28:GLenum;readonly TEXTURE29:GLenum;readonly TEXTURE3:GLenum;readonly TEXTURE30:GLenum;readonly TEXTURE31:GLenum;readonly TEXTURE4:GLenum;readonly TEXTURE5:GLenum;readonly TEXTURE6:GLenum;readonly TEXTURE7:GLenum;readonly TEXTURE8:GLenum;readonly TEXTURE9:GLenum;readonly TEXTURE_2D:GLenum;readonly TEXTURE_BINDING_2D:GLenum;readonly TEXTURE_BINDING_CUBE_MAP:GLenum;readonly TEXTURE_CUBE_MAP:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_X:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_Y:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_Z:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_X:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_Y:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_Z:GLenum;readonly TEXTURE_MAG_FILTER:GLenum;readonly TEXTURE_MIN_FILTER:GLenum;readonly TEXTURE_WRAP_S:GLenum;readonly TEXTURE_WRAP_T:GLenum;readonly TRIANGLES:GLenum;readonly TRIANGLE_FAN:GLenum;readonly TRIANGLE_STRIP:GLenum;readonly UNPACK_ALIGNMENT:GLenum;readonly UNPACK_COLORSPACE_CONVERSION_WEBGL:GLenum;readonly UNPACK_FLIP_Y_WEBGL:GLenum;readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL:GLenum;readonly UNSIGNED_BYTE:GLenum;readonly UNSIGNED_INT:GLenum;readonly UNSIGNED_SHORT:GLenum;readonly UNSIGNED_SHORT_4_4_4_4:GLenum;readonly UNSIGNED_SHORT_5_5_5_1:GLenum;readonly UNSIGNED_SHORT_5_6_5:GLenum;readonly VALIDATE_STATUS:GLenum;readonly VENDOR:GLenum;readonly VERSION:GLenum;readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:GLenum;readonly VERTEX_ATTRIB_ARRAY_ENABLED:GLenum;readonly VERTEX_ATTRIB_ARRAY_NORMALIZED:GLenum;readonly VERTEX_ATTRIB_ARRAY_POINTER:GLenum;readonly VERTEX_ATTRIB_ARRAY_SIZE:GLenum;readonly VERTEX_ATTRIB_ARRAY_STRIDE:GLenum;readonly VERTEX_ATTRIB_ARRAY_TYPE:GLenum;readonly VERTEX_SHADER:GLenum;readonly VIEWPORT:GLenum;readonly ZERO:GLenum;};interface WebGL2RenderingContextBase{beginQuery(target:GLenum,query:WebGLQuery):void;beginTransformFeedback(primitiveMode:GLenum):void;bindBufferBase(target:GLenum,index:GLuint,buffer:WebGLBuffer|null):void;bindBufferRange(target:GLenum,index:GLuint,buffer:WebGLBuffer|null,offset:GLintptr,size:GLsizeiptr):void;bindSampler(unit:GLuint,sampler:WebGLSampler|null):void;bindTransformFeedback(target:GLenum,tf:WebGLTransformFeedback|null):void;bindVertexArray(array:WebGLVertexArrayObject|null):void;blitFramebuffer(srcX0:GLint,srcY0:GLint,srcX1:GLint,srcY1:GLint,dstX0:GLint,dstY0:GLint,dstX1:GLint,dstY1:GLint,mask:GLbitfield,filter:GLenum):void;clearBufferfi(buffer:GLenum,drawbuffer:GLint,depth:GLfloat,stencil:GLint):void;clearBufferfv(buffer:GLenum,drawbuffer:GLint,values:Float32List,srcOffset?:GLuint):void;clearBufferiv(buffer:GLenum,drawbuffer:GLint,values:Int32List,srcOffset?:GLuint):void;clearBufferuiv(buffer:GLenum,drawbuffer:GLint,values:Uint32List,srcOffset?:GLuint):void;clientWaitSync(sync:WebGLSync,flags:GLbitfield,timeout:GLuint64):GLenum;compressedTexImage3D(target:GLenum,level:GLint,internalformat:GLenum,width:GLsizei,height:GLsizei,depth:GLsizei,border:GLint,imageSize:GLsizei,offset:GLintptr):void;compressedTexImage3D(target:GLenum,level:GLint,internalformat:GLenum,width:GLsizei,height:GLsizei,depth:GLsizei,border:GLint,srcData:ArrayBufferView,srcOffset?:GLuint,srcLengthOverride?:GLuint):void;compressedTexSubImage3D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,zoffset:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,format:GLenum,imageSize:GLsizei,offset:GLintptr):void;compressedTexSubImage3D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,zoffset:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,format:GLenum,srcData:ArrayBufferView,srcOffset?:GLuint,srcLengthOverride?:GLuint):void;copyBufferSubData(readTarget:GLenum,writeTarget:GLenum,readOffset:GLintptr,writeOffset:GLintptr,size:GLsizeiptr):void;copyTexSubImage3D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,zoffset:GLint,x:GLint,y:GLint,width:GLsizei,height:GLsizei):void;createQuery():WebGLQuery|null;createSampler():WebGLSampler|null;createTransformFeedback():WebGLTransformFeedback|null;createVertexArray():WebGLVertexArrayObject|null;deleteQuery(query:WebGLQuery|null):void;deleteSampler(sampler:WebGLSampler|null):void;deleteSync(sync:WebGLSync|null):void;deleteTransformFeedback(tf:WebGLTransformFeedback|null):void;deleteVertexArray(vertexArray:WebGLVertexArrayObject|null):void;drawArraysInstanced(mode:GLenum,first:GLint,count:GLsizei,instanceCount:GLsizei):void;drawBuffers(buffers:GLenum[]):void;drawElementsInstanced(mode:GLenum,count:GLsizei,type:GLenum,offset:GLintptr,instanceCount:GLsizei):void;drawRangeElements(mode:GLenum,start:GLuint,end:GLuint,count:GLsizei,type:GLenum,offset:GLintptr):void;endQuery(target:GLenum):void;endTransformFeedback():void;fenceSync(condition:GLenum,flags:GLbitfield):WebGLSync|null;framebufferTextureLayer(target:GLenum,attachment:GLenum,texture:WebGLTexture|null,level:GLint,layer:GLint):void;getActiveUniformBlockName(program:WebGLProgram,uniformBlockIndex:GLuint):string|null;getActiveUniformBlockParameter(program:WebGLProgram,uniformBlockIndex:GLuint,pname:GLenum):any;getActiveUniforms(program:WebGLProgram,uniformIndices:GLuint[],pname:GLenum):any;getBufferSubData(target:GLenum,srcByteOffset:GLintptr,dstBuffer:ArrayBufferView,dstOffset?:GLuint,length?:GLuint):void;getFragDataLocation(program:WebGLProgram,name:string):GLint;getIndexedParameter(target:GLenum,index:GLuint):any;getInternalformatParameter(target:GLenum,internalformat:GLenum,pname:GLenum):any;getQuery(target:GLenum,pname:GLenum):WebGLQuery|null;getQueryParameter(query:WebGLQuery,pname:GLenum):any;getSamplerParameter(sampler:WebGLSampler,pname:GLenum):any;getSyncParameter(sync:WebGLSync,pname:GLenum):any;getTransformFeedbackVarying(program:WebGLProgram,index:GLuint):WebGLActiveInfo|null;getUniformBlockIndex(program:WebGLProgram,uniformBlockName:string):GLuint;getUniformIndices(program:WebGLProgram,uniformNames:string[]):GLuint[]|null;invalidateFramebuffer(target:GLenum,attachments:GLenum[]):void;invalidateSubFramebuffer(target:GLenum,attachments:GLenum[],x:GLint,y:GLint,width:GLsizei,height:GLsizei):void;isQuery(query:WebGLQuery|null):GLboolean;isSampler(sampler:WebGLSampler|null):GLboolean;isSync(sync:WebGLSync|null):GLboolean;isTransformFeedback(tf:WebGLTransformFeedback|null):GLboolean;isVertexArray(vertexArray:WebGLVertexArrayObject|null):GLboolean;pauseTransformFeedback():void;readBuffer(src:GLenum):void;renderbufferStorageMultisample(target:GLenum,samples:GLsizei,internalformat:GLenum,width:GLsizei,height:GLsizei):void;resumeTransformFeedback():void;samplerParameterf(sampler:WebGLSampler,pname:GLenum,param:GLfloat):void;samplerParameteri(sampler:WebGLSampler,pname:GLenum,param:GLint):void;texImage3D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,border:GLint,format:GLenum,type:GLenum,pboOffset:GLintptr):void;texImage3D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,border:GLint,format:GLenum,type:GLenum,source:TexImageSource):void;texImage3D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,border:GLint,format:GLenum,type:GLenum,srcData:ArrayBufferView|null):void;texImage3D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,border:GLint,format:GLenum,type:GLenum,srcData:ArrayBufferView,srcOffset:GLuint):void;texStorage2D(target:GLenum,levels:GLsizei,internalformat:GLenum,width:GLsizei,height:GLsizei):void;texStorage3D(target:GLenum,levels:GLsizei,internalformat:GLenum,width:GLsizei,height:GLsizei,depth:GLsizei):void;texSubImage3D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,zoffset:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,format:GLenum,type:GLenum,pboOffset:GLintptr):void;texSubImage3D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,zoffset:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,format:GLenum,type:GLenum,source:TexImageSource):void;texSubImage3D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,zoffset:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,format:GLenum,type:GLenum,srcData:ArrayBufferView|null,srcOffset?:GLuint):void;transformFeedbackVaryings(program:WebGLProgram,varyings:string[],bufferMode:GLenum):void;uniform1ui(location:WebGLUniformLocation|null,v0:GLuint):void;uniform1uiv(location:WebGLUniformLocation|null,data:Uint32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform2ui(location:WebGLUniformLocation|null,v0:GLuint,v1:GLuint):void;uniform2uiv(location:WebGLUniformLocation|null,data:Uint32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform3ui(location:WebGLUniformLocation|null,v0:GLuint,v1:GLuint,v2:GLuint):void;uniform3uiv(location:WebGLUniformLocation|null,data:Uint32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform4ui(location:WebGLUniformLocation|null,v0:GLuint,v1:GLuint,v2:GLuint,v3:GLuint):void;uniform4uiv(location:WebGLUniformLocation|null,data:Uint32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformBlockBinding(program:WebGLProgram,uniformBlockIndex:GLuint,uniformBlockBinding:GLuint):void;uniformMatrix2x3fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix2x4fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix3x2fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix3x4fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix4x2fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix4x3fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;vertexAttribDivisor(index:GLuint,divisor:GLuint):void;vertexAttribI4i(index:GLuint,x:GLint,y:GLint,z:GLint,w:GLint):void;vertexAttribI4iv(index:GLuint,values:Int32List):void;vertexAttribI4ui(index:GLuint,x:GLuint,y:GLuint,z:GLuint,w:GLuint):void;vertexAttribI4uiv(index:GLuint,values:Uint32List):void;vertexAttribIPointer(index:GLuint,size:GLint,type:GLenum,stride:GLsizei,offset:GLintptr):void;waitSync(sync:WebGLSync,flags:GLbitfield,timeout:GLint64):void;readonly ACTIVE_UNIFORM_BLOCKS:GLenum;readonly ALREADY_SIGNALED:GLenum;readonly ANY_SAMPLES_PASSED:GLenum;readonly ANY_SAMPLES_PASSED_CONSERVATIVE:GLenum;readonly COLOR:GLenum;readonly COLOR_ATTACHMENT1:GLenum;readonly COLOR_ATTACHMENT10:GLenum;readonly COLOR_ATTACHMENT11:GLenum;readonly COLOR_ATTACHMENT12:GLenum;readonly COLOR_ATTACHMENT13:GLenum;readonly COLOR_ATTACHMENT14:GLenum;readonly COLOR_ATTACHMENT15:GLenum;readonly COLOR_ATTACHMENT2:GLenum;readonly COLOR_ATTACHMENT3:GLenum;readonly COLOR_ATTACHMENT4:GLenum;readonly COLOR_ATTACHMENT5:GLenum;readonly COLOR_ATTACHMENT6:GLenum;readonly COLOR_ATTACHMENT7:GLenum;readonly COLOR_ATTACHMENT8:GLenum;readonly COLOR_ATTACHMENT9:GLenum;readonly COMPARE_REF_TO_TEXTURE:GLenum;readonly CONDITION_SATISFIED:GLenum;readonly COPY_READ_BUFFER:GLenum;readonly COPY_READ_BUFFER_BINDING:GLenum;readonly COPY_WRITE_BUFFER:GLenum;readonly COPY_WRITE_BUFFER_BINDING:GLenum;readonly CURRENT_QUERY:GLenum;readonly DEPTH:GLenum;readonly DEPTH24_STENCIL8:GLenum;readonly DEPTH32F_STENCIL8:GLenum;readonly DEPTH_COMPONENT24:GLenum;readonly DEPTH_COMPONENT32F:GLenum;readonly DRAW_BUFFER0:GLenum;readonly DRAW_BUFFER1:GLenum;readonly DRAW_BUFFER10:GLenum;readonly DRAW_BUFFER11:GLenum;readonly DRAW_BUFFER12:GLenum;readonly DRAW_BUFFER13:GLenum;readonly DRAW_BUFFER14:GLenum;readonly DRAW_BUFFER15:GLenum;readonly DRAW_BUFFER2:GLenum;readonly DRAW_BUFFER3:GLenum;readonly DRAW_BUFFER4:GLenum;readonly DRAW_BUFFER5:GLenum;readonly DRAW_BUFFER6:GLenum;readonly DRAW_BUFFER7:GLenum;readonly DRAW_BUFFER8:GLenum;readonly DRAW_BUFFER9:GLenum;readonly DRAW_FRAMEBUFFER:GLenum;readonly DRAW_FRAMEBUFFER_BINDING:GLenum;readonly DYNAMIC_COPY:GLenum;readonly DYNAMIC_READ:GLenum;readonly FLOAT_32_UNSIGNED_INT_24_8_REV:GLenum;readonly FLOAT_MAT2x3:GLenum;readonly FLOAT_MAT2x4:GLenum;readonly FLOAT_MAT3x2:GLenum;readonly FLOAT_MAT3x4:GLenum;readonly FLOAT_MAT4x2:GLenum;readonly FLOAT_MAT4x3:GLenum;readonly FRAGMENT_SHADER_DERIVATIVE_HINT:GLenum;readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:GLenum;readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:GLenum;readonly FRAMEBUFFER_DEFAULT:GLenum;readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:GLenum;readonly HALF_FLOAT:GLenum;readonly INTERLEAVED_ATTRIBS:GLenum;readonly INT_2_10_10_10_REV:GLenum;readonly INT_SAMPLER_2D:GLenum;readonly INT_SAMPLER_2D_ARRAY:GLenum;readonly INT_SAMPLER_3D:GLenum;readonly INT_SAMPLER_CUBE:GLenum;readonly INVALID_INDEX:GLenum;readonly MAX:GLenum;readonly MAX_3D_TEXTURE_SIZE:GLenum;readonly MAX_ARRAY_TEXTURE_LAYERS:GLenum;readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL:GLenum;readonly MAX_COLOR_ATTACHMENTS:GLenum;readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:GLenum;readonly MAX_COMBINED_UNIFORM_BLOCKS:GLenum;readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:GLenum;readonly MAX_DRAW_BUFFERS:GLenum;readonly MAX_ELEMENTS_INDICES:GLenum;readonly MAX_ELEMENTS_VERTICES:GLenum;readonly MAX_ELEMENT_INDEX:GLenum;readonly MAX_FRAGMENT_INPUT_COMPONENTS:GLenum;readonly MAX_FRAGMENT_UNIFORM_BLOCKS:GLenum;readonly MAX_FRAGMENT_UNIFORM_COMPONENTS:GLenum;readonly MAX_PROGRAM_TEXEL_OFFSET:GLenum;readonly MAX_SAMPLES:GLenum;readonly MAX_SERVER_WAIT_TIMEOUT:GLenum;readonly MAX_TEXTURE_LOD_BIAS:GLenum;readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS:GLenum;readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS:GLenum;readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS:GLenum;readonly MAX_UNIFORM_BLOCK_SIZE:GLenum;readonly MAX_UNIFORM_BUFFER_BINDINGS:GLenum;readonly MAX_VARYING_COMPONENTS:GLenum;readonly MAX_VERTEX_OUTPUT_COMPONENTS:GLenum;readonly MAX_VERTEX_UNIFORM_BLOCKS:GLenum;readonly MAX_VERTEX_UNIFORM_COMPONENTS:GLenum;readonly MIN:GLenum;readonly MIN_PROGRAM_TEXEL_OFFSET:GLenum;readonly OBJECT_TYPE:GLenum;readonly PACK_ROW_LENGTH:GLenum;readonly PACK_SKIP_PIXELS:GLenum;readonly PACK_SKIP_ROWS:GLenum;readonly PIXEL_PACK_BUFFER:GLenum;readonly PIXEL_PACK_BUFFER_BINDING:GLenum;readonly PIXEL_UNPACK_BUFFER:GLenum;readonly PIXEL_UNPACK_BUFFER_BINDING:GLenum;readonly QUERY_RESULT:GLenum;readonly QUERY_RESULT_AVAILABLE:GLenum;readonly R11F_G11F_B10F:GLenum;readonly R16F:GLenum;readonly R16I:GLenum;readonly R16UI:GLenum;readonly R32F:GLenum;readonly R32I:GLenum;readonly R32UI:GLenum;readonly R8:GLenum;readonly R8I:GLenum;readonly R8UI:GLenum;readonly R8_SNORM:GLenum;readonly RASTERIZER_DISCARD:GLenum;readonly READ_BUFFER:GLenum;readonly READ_FRAMEBUFFER:GLenum;readonly READ_FRAMEBUFFER_BINDING:GLenum;readonly RED:GLenum;readonly RED_INTEGER:GLenum;readonly RENDERBUFFER_SAMPLES:GLenum;readonly RG:GLenum;readonly RG16F:GLenum;readonly RG16I:GLenum;readonly RG16UI:GLenum;readonly RG32F:GLenum;readonly RG32I:GLenum;readonly RG32UI:GLenum;readonly RG8:GLenum;readonly RG8I:GLenum;readonly RG8UI:GLenum;readonly RG8_SNORM:GLenum;readonly RGB10_A2:GLenum;readonly RGB10_A2UI:GLenum;readonly RGB16F:GLenum;readonly RGB16I:GLenum;readonly RGB16UI:GLenum;readonly RGB32F:GLenum;readonly RGB32I:GLenum;readonly RGB32UI:GLenum;readonly RGB8:GLenum;readonly RGB8I:GLenum;readonly RGB8UI:GLenum;readonly RGB8_SNORM:GLenum;readonly RGB9_E5:GLenum;readonly RGBA16F:GLenum;readonly RGBA16I:GLenum;readonly RGBA16UI:GLenum;readonly RGBA32F:GLenum;readonly RGBA32I:GLenum;readonly RGBA32UI:GLenum;readonly RGBA8:GLenum;readonly RGBA8I:GLenum;readonly RGBA8UI:GLenum;readonly RGBA8_SNORM:GLenum;readonly RGBA_INTEGER:GLenum;readonly RGB_INTEGER:GLenum;readonly RG_INTEGER:GLenum;readonly SAMPLER_2D_ARRAY:GLenum;readonly SAMPLER_2D_ARRAY_SHADOW:GLenum;readonly SAMPLER_2D_SHADOW:GLenum;readonly SAMPLER_3D:GLenum;readonly SAMPLER_BINDING:GLenum;readonly SAMPLER_CUBE_SHADOW:GLenum;readonly SEPARATE_ATTRIBS:GLenum;readonly SIGNALED:GLenum;readonly SIGNED_NORMALIZED:GLenum;readonly SRGB:GLenum;readonly SRGB8:GLenum;readonly SRGB8_ALPHA8:GLenum;readonly STATIC_COPY:GLenum;readonly STATIC_READ:GLenum;readonly STENCIL:GLenum;readonly STREAM_COPY:GLenum;readonly STREAM_READ:GLenum;readonly SYNC_CONDITION:GLenum;readonly SYNC_FENCE:GLenum;readonly SYNC_FLAGS:GLenum;readonly SYNC_FLUSH_COMMANDS_BIT:GLenum;readonly SYNC_GPU_COMMANDS_COMPLETE:GLenum;readonly SYNC_STATUS:GLenum;readonly TEXTURE_2D_ARRAY:GLenum;readonly TEXTURE_3D:GLenum;readonly TEXTURE_BASE_LEVEL:GLenum;readonly TEXTURE_BINDING_2D_ARRAY:GLenum;readonly TEXTURE_BINDING_3D:GLenum;readonly TEXTURE_COMPARE_FUNC:GLenum;readonly TEXTURE_COMPARE_MODE:GLenum;readonly TEXTURE_IMMUTABLE_FORMAT:GLenum;readonly TEXTURE_IMMUTABLE_LEVELS:GLenum;readonly TEXTURE_MAX_LEVEL:GLenum;readonly TEXTURE_MAX_LOD:GLenum;readonly TEXTURE_MIN_LOD:GLenum;readonly TEXTURE_WRAP_R:GLenum;readonly TIMEOUT_EXPIRED:GLenum;readonly TIMEOUT_IGNORED:GLint64;readonly TRANSFORM_FEEDBACK:GLenum;readonly TRANSFORM_FEEDBACK_ACTIVE:GLenum;readonly TRANSFORM_FEEDBACK_BINDING:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_BINDING:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_MODE:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_SIZE:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_START:GLenum;readonly TRANSFORM_FEEDBACK_PAUSED:GLenum;readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:GLenum;readonly TRANSFORM_FEEDBACK_VARYINGS:GLenum;readonly UNIFORM_ARRAY_STRIDE:GLenum;readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS:GLenum;readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:GLenum;readonly UNIFORM_BLOCK_BINDING:GLenum;readonly UNIFORM_BLOCK_DATA_SIZE:GLenum;readonly UNIFORM_BLOCK_INDEX:GLenum;readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:GLenum;readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:GLenum;readonly UNIFORM_BUFFER:GLenum;readonly UNIFORM_BUFFER_BINDING:GLenum;readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT:GLenum;readonly UNIFORM_BUFFER_SIZE:GLenum;readonly UNIFORM_BUFFER_START:GLenum;readonly UNIFORM_IS_ROW_MAJOR:GLenum;readonly UNIFORM_MATRIX_STRIDE:GLenum;readonly UNIFORM_OFFSET:GLenum;readonly UNIFORM_SIZE:GLenum;readonly UNIFORM_TYPE:GLenum;readonly UNPACK_IMAGE_HEIGHT:GLenum;readonly UNPACK_ROW_LENGTH:GLenum;readonly UNPACK_SKIP_IMAGES:GLenum;readonly UNPACK_SKIP_PIXELS:GLenum;readonly UNPACK_SKIP_ROWS:GLenum;readonly UNSIGNALED:GLenum;readonly UNSIGNED_INT_10F_11F_11F_REV:GLenum;readonly UNSIGNED_INT_24_8:GLenum;readonly UNSIGNED_INT_2_10_10_10_REV:GLenum;readonly UNSIGNED_INT_5_9_9_9_REV:GLenum;readonly UNSIGNED_INT_SAMPLER_2D:GLenum;readonly UNSIGNED_INT_SAMPLER_2D_ARRAY:GLenum;readonly UNSIGNED_INT_SAMPLER_3D:GLenum;readonly UNSIGNED_INT_SAMPLER_CUBE:GLenum;readonly UNSIGNED_INT_VEC2:GLenum;readonly UNSIGNED_INT_VEC3:GLenum;readonly UNSIGNED_INT_VEC4:GLenum;readonly UNSIGNED_NORMALIZED:GLenum;readonly VERTEX_ARRAY_BINDING:GLenum;readonly VERTEX_ATTRIB_ARRAY_DIVISOR:GLenum;readonly VERTEX_ATTRIB_ARRAY_INTEGER:GLenum;readonly WAIT_FAILED:GLenum;}interface WebGL2RenderingContextOverloads{bufferData(target:GLenum,size:GLsizeiptr,usage:GLenum):void;bufferData(target:GLenum,srcData:BufferSource|null,usage:GLenum):void;bufferData(target:GLenum,srcData:ArrayBufferView,usage:GLenum,srcOffset:GLuint,length?:GLuint):void;bufferSubData(target:GLenum,dstByteOffset:GLintptr,srcData:BufferSource):void;bufferSubData(target:GLenum,dstByteOffset:GLintptr,srcData:ArrayBufferView,srcOffset:GLuint,length?:GLuint):void;compressedTexImage2D(target:GLenum,level:GLint,internalformat:GLenum,width:GLsizei,height:GLsizei,border:GLint,imageSize:GLsizei,offset:GLintptr):void;compressedTexImage2D(target:GLenum,level:GLint,internalformat:GLenum,width:GLsizei,height:GLsizei,border:GLint,srcData:ArrayBufferView,srcOffset?:GLuint,srcLengthOverride?:GLuint):void;compressedTexSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,imageSize:GLsizei,offset:GLintptr):void;compressedTexSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,srcData:ArrayBufferView,srcOffset?:GLuint,srcLengthOverride?:GLuint):void;readPixels(x:GLint,y:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,dstData:ArrayBufferView|null):void;readPixels(x:GLint,y:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,offset:GLintptr):void;readPixels(x:GLint,y:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,dstData:ArrayBufferView,dstOffset:GLuint):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,border:GLint,format:GLenum,type:GLenum,pixels:ArrayBufferView|null):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,format:GLenum,type:GLenum,source:TexImageSource):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,border:GLint,format:GLenum,type:GLenum,pboOffset:GLintptr):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,border:GLint,format:GLenum,type:GLenum,source:TexImageSource):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,border:GLint,format:GLenum,type:GLenum,srcData:ArrayBufferView,srcOffset:GLuint):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,pixels:ArrayBufferView|null):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,format:GLenum,type:GLenum,source:TexImageSource):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,pboOffset:GLintptr):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,source:TexImageSource):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,srcData:ArrayBufferView,srcOffset:GLuint):void;uniform1fv(location:WebGLUniformLocation|null,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform1iv(location:WebGLUniformLocation|null,data:Int32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform2fv(location:WebGLUniformLocation|null,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform2iv(location:WebGLUniformLocation|null,data:Int32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform3fv(location:WebGLUniformLocation|null,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform3iv(location:WebGLUniformLocation|null,data:Int32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform4fv(location:WebGLUniformLocation|null,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform4iv(location:WebGLUniformLocation|null,data:Int32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix2fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix3fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix4fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;}interface WebGLActiveInfo{readonly name:string;readonly size:GLint;readonly type:GLenum;}declare var WebGLActiveInfo:{prototype:WebGLActiveInfo;new():WebGLActiveInfo;};interface WebGLBuffer{}declare var WebGLBuffer:{prototype:WebGLBuffer;new():WebGLBuffer;};interface WebGLContextEvent extends Event{readonly statusMessage:string;}declare var WebGLContextEvent:{prototype:WebGLContextEvent;new(type:string,eventInit?:WebGLContextEventInit):WebGLContextEvent;};interface WebGLFramebuffer{}declare var WebGLFramebuffer:{prototype:WebGLFramebuffer;new():WebGLFramebuffer;};interface WebGLProgram{}declare var WebGLProgram:{prototype:WebGLProgram;new():WebGLProgram;};interface WebGLQuery{}declare var WebGLQuery:{prototype:WebGLQuery;new():WebGLQuery;};interface WebGLRenderbuffer{}declare var WebGLRenderbuffer:{prototype:WebGLRenderbuffer;new():WebGLRenderbuffer;};interface WebGLRenderingContext extends WebGLRenderingContextBase,WebGLRenderingContextOverloads{}declare var WebGLRenderingContext:{prototype:WebGLRenderingContext;new():WebGLRenderingContext;readonly ACTIVE_ATTRIBUTES:GLenum;readonly ACTIVE_TEXTURE:GLenum;readonly ACTIVE_UNIFORMS:GLenum;readonly ALIASED_LINE_WIDTH_RANGE:GLenum;readonly ALIASED_POINT_SIZE_RANGE:GLenum;readonly ALPHA:GLenum;readonly ALPHA_BITS:GLenum;readonly ALWAYS:GLenum;readonly ARRAY_BUFFER:GLenum;readonly ARRAY_BUFFER_BINDING:GLenum;readonly ATTACHED_SHADERS:GLenum;readonly BACK:GLenum;readonly BLEND:GLenum;readonly BLEND_COLOR:GLenum;readonly BLEND_DST_ALPHA:GLenum;readonly BLEND_DST_RGB:GLenum;readonly BLEND_EQUATION:GLenum;readonly BLEND_EQUATION_ALPHA:GLenum;readonly BLEND_EQUATION_RGB:GLenum;readonly BLEND_SRC_ALPHA:GLenum;readonly BLEND_SRC_RGB:GLenum;readonly BLUE_BITS:GLenum;readonly BOOL:GLenum;readonly BOOL_VEC2:GLenum;readonly BOOL_VEC3:GLenum;readonly BOOL_VEC4:GLenum;readonly BROWSER_DEFAULT_WEBGL:GLenum;readonly BUFFER_SIZE:GLenum;readonly BUFFER_USAGE:GLenum;readonly BYTE:GLenum;readonly CCW:GLenum;readonly CLAMP_TO_EDGE:GLenum;readonly COLOR_ATTACHMENT0:GLenum;readonly COLOR_BUFFER_BIT:GLenum;readonly COLOR_CLEAR_VALUE:GLenum;readonly COLOR_WRITEMASK:GLenum;readonly COMPILE_STATUS:GLenum;readonly COMPRESSED_TEXTURE_FORMATS:GLenum;readonly CONSTANT_ALPHA:GLenum;readonly CONSTANT_COLOR:GLenum;readonly CONTEXT_LOST_WEBGL:GLenum;readonly CULL_FACE:GLenum;readonly CULL_FACE_MODE:GLenum;readonly CURRENT_PROGRAM:GLenum;readonly CURRENT_VERTEX_ATTRIB:GLenum;readonly CW:GLenum;readonly DECR:GLenum;readonly DECR_WRAP:GLenum;readonly DELETE_STATUS:GLenum;readonly DEPTH_ATTACHMENT:GLenum;readonly DEPTH_BITS:GLenum;readonly DEPTH_BUFFER_BIT:GLenum;readonly DEPTH_CLEAR_VALUE:GLenum;readonly DEPTH_COMPONENT:GLenum;readonly DEPTH_COMPONENT16:GLenum;readonly DEPTH_FUNC:GLenum;readonly DEPTH_RANGE:GLenum;readonly DEPTH_STENCIL:GLenum;readonly DEPTH_STENCIL_ATTACHMENT:GLenum;readonly DEPTH_TEST:GLenum;readonly DEPTH_WRITEMASK:GLenum;readonly DITHER:GLenum;readonly DONT_CARE:GLenum;readonly DST_ALPHA:GLenum;readonly DST_COLOR:GLenum;readonly DYNAMIC_DRAW:GLenum;readonly ELEMENT_ARRAY_BUFFER:GLenum;readonly ELEMENT_ARRAY_BUFFER_BINDING:GLenum;readonly EQUAL:GLenum;readonly FASTEST:GLenum;readonly FLOAT:GLenum;readonly FLOAT_MAT2:GLenum;readonly FLOAT_MAT3:GLenum;readonly FLOAT_MAT4:GLenum;readonly FLOAT_VEC2:GLenum;readonly FLOAT_VEC3:GLenum;readonly FLOAT_VEC4:GLenum;readonly FRAGMENT_SHADER:GLenum;readonly FRAMEBUFFER:GLenum;readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:GLenum;readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:GLenum;readonly FRAMEBUFFER_BINDING:GLenum;readonly FRAMEBUFFER_COMPLETE:GLenum;readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT:GLenum;readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS:GLenum;readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:GLenum;readonly FRAMEBUFFER_UNSUPPORTED:GLenum;readonly FRONT:GLenum;readonly FRONT_AND_BACK:GLenum;readonly FRONT_FACE:GLenum;readonly FUNC_ADD:GLenum;readonly FUNC_REVERSE_SUBTRACT:GLenum;readonly FUNC_SUBTRACT:GLenum;readonly GENERATE_MIPMAP_HINT:GLenum;readonly GEQUAL:GLenum;readonly GREATER:GLenum;readonly GREEN_BITS:GLenum;readonly HIGH_FLOAT:GLenum;readonly HIGH_INT:GLenum;readonly IMPLEMENTATION_COLOR_READ_FORMAT:GLenum;readonly IMPLEMENTATION_COLOR_READ_TYPE:GLenum;readonly INCR:GLenum;readonly INCR_WRAP:GLenum;readonly INT:GLenum;readonly INT_VEC2:GLenum;readonly INT_VEC3:GLenum;readonly INT_VEC4:GLenum;readonly INVALID_ENUM:GLenum;readonly INVALID_FRAMEBUFFER_OPERATION:GLenum;readonly INVALID_OPERATION:GLenum;readonly INVALID_VALUE:GLenum;readonly INVERT:GLenum;readonly KEEP:GLenum;readonly LEQUAL:GLenum;readonly LESS:GLenum;readonly LINEAR:GLenum;readonly LINEAR_MIPMAP_LINEAR:GLenum;readonly LINEAR_MIPMAP_NEAREST:GLenum;readonly LINES:GLenum;readonly LINE_LOOP:GLenum;readonly LINE_STRIP:GLenum;readonly LINE_WIDTH:GLenum;readonly LINK_STATUS:GLenum;readonly LOW_FLOAT:GLenum;readonly LOW_INT:GLenum;readonly LUMINANCE:GLenum;readonly LUMINANCE_ALPHA:GLenum;readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_CUBE_MAP_TEXTURE_SIZE:GLenum;readonly MAX_FRAGMENT_UNIFORM_VECTORS:GLenum;readonly MAX_RENDERBUFFER_SIZE:GLenum;readonly MAX_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_TEXTURE_SIZE:GLenum;readonly MAX_VARYING_VECTORS:GLenum;readonly MAX_VERTEX_ATTRIBS:GLenum;readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_VERTEX_UNIFORM_VECTORS:GLenum;readonly MAX_VIEWPORT_DIMS:GLenum;readonly MEDIUM_FLOAT:GLenum;readonly MEDIUM_INT:GLenum;readonly MIRRORED_REPEAT:GLenum;readonly NEAREST:GLenum;readonly NEAREST_MIPMAP_LINEAR:GLenum;readonly NEAREST_MIPMAP_NEAREST:GLenum;readonly NEVER:GLenum;readonly NICEST:GLenum;readonly NONE:GLenum;readonly NOTEQUAL:GLenum;readonly NO_ERROR:GLenum;readonly ONE:GLenum;readonly ONE_MINUS_CONSTANT_ALPHA:GLenum;readonly ONE_MINUS_CONSTANT_COLOR:GLenum;readonly ONE_MINUS_DST_ALPHA:GLenum;readonly ONE_MINUS_DST_COLOR:GLenum;readonly ONE_MINUS_SRC_ALPHA:GLenum;readonly ONE_MINUS_SRC_COLOR:GLenum;readonly OUT_OF_MEMORY:GLenum;readonly PACK_ALIGNMENT:GLenum;readonly POINTS:GLenum;readonly POLYGON_OFFSET_FACTOR:GLenum;readonly POLYGON_OFFSET_FILL:GLenum;readonly POLYGON_OFFSET_UNITS:GLenum;readonly RED_BITS:GLenum;readonly RENDERBUFFER:GLenum;readonly RENDERBUFFER_ALPHA_SIZE:GLenum;readonly RENDERBUFFER_BINDING:GLenum;readonly RENDERBUFFER_BLUE_SIZE:GLenum;readonly RENDERBUFFER_DEPTH_SIZE:GLenum;readonly RENDERBUFFER_GREEN_SIZE:GLenum;readonly RENDERBUFFER_HEIGHT:GLenum;readonly RENDERBUFFER_INTERNAL_FORMAT:GLenum;readonly RENDERBUFFER_RED_SIZE:GLenum;readonly RENDERBUFFER_STENCIL_SIZE:GLenum;readonly RENDERBUFFER_WIDTH:GLenum;readonly RENDERER:GLenum;readonly REPEAT:GLenum;readonly REPLACE:GLenum;readonly RGB:GLenum;readonly RGB565:GLenum;readonly RGB5_A1:GLenum;readonly RGBA:GLenum;readonly RGBA4:GLenum;readonly SAMPLER_2D:GLenum;readonly SAMPLER_CUBE:GLenum;readonly SAMPLES:GLenum;readonly SAMPLE_ALPHA_TO_COVERAGE:GLenum;readonly SAMPLE_BUFFERS:GLenum;readonly SAMPLE_COVERAGE:GLenum;readonly SAMPLE_COVERAGE_INVERT:GLenum;readonly SAMPLE_COVERAGE_VALUE:GLenum;readonly SCISSOR_BOX:GLenum;readonly SCISSOR_TEST:GLenum;readonly SHADER_TYPE:GLenum;readonly SHADING_LANGUAGE_VERSION:GLenum;readonly SHORT:GLenum;readonly SRC_ALPHA:GLenum;readonly SRC_ALPHA_SATURATE:GLenum;readonly SRC_COLOR:GLenum;readonly STATIC_DRAW:GLenum;readonly STENCIL_ATTACHMENT:GLenum;readonly STENCIL_BACK_FAIL:GLenum;readonly STENCIL_BACK_FUNC:GLenum;readonly STENCIL_BACK_PASS_DEPTH_FAIL:GLenum;readonly STENCIL_BACK_PASS_DEPTH_PASS:GLenum;readonly STENCIL_BACK_REF:GLenum;readonly STENCIL_BACK_VALUE_MASK:GLenum;readonly STENCIL_BACK_WRITEMASK:GLenum;readonly STENCIL_BITS:GLenum;readonly STENCIL_BUFFER_BIT:GLenum;readonly STENCIL_CLEAR_VALUE:GLenum;readonly STENCIL_FAIL:GLenum;readonly STENCIL_FUNC:GLenum;readonly STENCIL_INDEX8:GLenum;readonly STENCIL_PASS_DEPTH_FAIL:GLenum;readonly STENCIL_PASS_DEPTH_PASS:GLenum;readonly STENCIL_REF:GLenum;readonly STENCIL_TEST:GLenum;readonly STENCIL_VALUE_MASK:GLenum;readonly STENCIL_WRITEMASK:GLenum;readonly STREAM_DRAW:GLenum;readonly SUBPIXEL_BITS:GLenum;readonly TEXTURE:GLenum;readonly TEXTURE0:GLenum;readonly TEXTURE1:GLenum;readonly TEXTURE10:GLenum;readonly TEXTURE11:GLenum;readonly TEXTURE12:GLenum;readonly TEXTURE13:GLenum;readonly TEXTURE14:GLenum;readonly TEXTURE15:GLenum;readonly TEXTURE16:GLenum;readonly TEXTURE17:GLenum;readonly TEXTURE18:GLenum;readonly TEXTURE19:GLenum;readonly TEXTURE2:GLenum;readonly TEXTURE20:GLenum;readonly TEXTURE21:GLenum;readonly TEXTURE22:GLenum;readonly TEXTURE23:GLenum;readonly TEXTURE24:GLenum;readonly TEXTURE25:GLenum;readonly TEXTURE26:GLenum;readonly TEXTURE27:GLenum;readonly TEXTURE28:GLenum;readonly TEXTURE29:GLenum;readonly TEXTURE3:GLenum;readonly TEXTURE30:GLenum;readonly TEXTURE31:GLenum;readonly TEXTURE4:GLenum;readonly TEXTURE5:GLenum;readonly TEXTURE6:GLenum;readonly TEXTURE7:GLenum;readonly TEXTURE8:GLenum;readonly TEXTURE9:GLenum;readonly TEXTURE_2D:GLenum;readonly TEXTURE_BINDING_2D:GLenum;readonly TEXTURE_BINDING_CUBE_MAP:GLenum;readonly TEXTURE_CUBE_MAP:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_X:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_Y:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_Z:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_X:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_Y:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_Z:GLenum;readonly TEXTURE_MAG_FILTER:GLenum;readonly TEXTURE_MIN_FILTER:GLenum;readonly TEXTURE_WRAP_S:GLenum;readonly TEXTURE_WRAP_T:GLenum;readonly TRIANGLES:GLenum;readonly TRIANGLE_FAN:GLenum;readonly TRIANGLE_STRIP:GLenum;readonly UNPACK_ALIGNMENT:GLenum;readonly UNPACK_COLORSPACE_CONVERSION_WEBGL:GLenum;readonly UNPACK_FLIP_Y_WEBGL:GLenum;readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL:GLenum;readonly UNSIGNED_BYTE:GLenum;readonly UNSIGNED_INT:GLenum;readonly UNSIGNED_SHORT:GLenum;readonly UNSIGNED_SHORT_4_4_4_4:GLenum;readonly UNSIGNED_SHORT_5_5_5_1:GLenum;readonly UNSIGNED_SHORT_5_6_5:GLenum;readonly VALIDATE_STATUS:GLenum;readonly VENDOR:GLenum;readonly VERSION:GLenum;readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:GLenum;readonly VERTEX_ATTRIB_ARRAY_ENABLED:GLenum;readonly VERTEX_ATTRIB_ARRAY_NORMALIZED:GLenum;readonly VERTEX_ATTRIB_ARRAY_POINTER:GLenum;readonly VERTEX_ATTRIB_ARRAY_SIZE:GLenum;readonly VERTEX_ATTRIB_ARRAY_STRIDE:GLenum;readonly VERTEX_ATTRIB_ARRAY_TYPE:GLenum;readonly VERTEX_SHADER:GLenum;readonly VIEWPORT:GLenum;readonly ZERO:GLenum;};interface WebGLRenderingContextBase{readonly canvas:HTMLCanvasElement;readonly drawingBufferHeight:GLsizei;readonly drawingBufferWidth:GLsizei;activeTexture(texture:GLenum):void;attachShader(program:WebGLProgram,shader:WebGLShader):void;bindAttribLocation(program:WebGLProgram,index:GLuint,name:string):void;bindBuffer(target:GLenum,buffer:WebGLBuffer|null):void;bindFramebuffer(target:GLenum,framebuffer:WebGLFramebuffer|null):void;bindRenderbuffer(target:GLenum,renderbuffer:WebGLRenderbuffer|null):void;bindTexture(target:GLenum,texture:WebGLTexture|null):void;blendColor(red:GLclampf,green:GLclampf,blue:GLclampf,alpha:GLclampf):void;blendEquation(mode:GLenum):void;blendEquationSeparate(modeRGB:GLenum,modeAlpha:GLenum):void;blendFunc(sfactor:GLenum,dfactor:GLenum):void;blendFuncSeparate(srcRGB:GLenum,dstRGB:GLenum,srcAlpha:GLenum,dstAlpha:GLenum):void;checkFramebufferStatus(target:GLenum):GLenum;clear(mask:GLbitfield):void;clearColor(red:GLclampf,green:GLclampf,blue:GLclampf,alpha:GLclampf):void;clearDepth(depth:GLclampf):void;clearStencil(s:GLint):void;colorMask(red:GLboolean,green:GLboolean,blue:GLboolean,alpha:GLboolean):void;compileShader(shader:WebGLShader):void;copyTexImage2D(target:GLenum,level:GLint,internalformat:GLenum,x:GLint,y:GLint,width:GLsizei,height:GLsizei,border:GLint):void;copyTexSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,x:GLint,y:GLint,width:GLsizei,height:GLsizei):void;createBuffer():WebGLBuffer|null;createFramebuffer():WebGLFramebuffer|null;createProgram():WebGLProgram|null;createRenderbuffer():WebGLRenderbuffer|null;createShader(type:GLenum):WebGLShader|null;createTexture():WebGLTexture|null;cullFace(mode:GLenum):void;deleteBuffer(buffer:WebGLBuffer|null):void;deleteFramebuffer(framebuffer:WebGLFramebuffer|null):void;deleteProgram(program:WebGLProgram|null):void;deleteRenderbuffer(renderbuffer:WebGLRenderbuffer|null):void;deleteShader(shader:WebGLShader|null):void;deleteTexture(texture:WebGLTexture|null):void;depthFunc(func:GLenum):void;depthMask(flag:GLboolean):void;depthRange(zNear:GLclampf,zFar:GLclampf):void;detachShader(program:WebGLProgram,shader:WebGLShader):void;disable(cap:GLenum):void;disableVertexAttribArray(index:GLuint):void;drawArrays(mode:GLenum,first:GLint,count:GLsizei):void;drawElements(mode:GLenum,count:GLsizei,type:GLenum,offset:GLintptr):void;enable(cap:GLenum):void;enableVertexAttribArray(index:GLuint):void;finish():void;flush():void;framebufferRenderbuffer(target:GLenum,attachment:GLenum,renderbuffertarget:GLenum,renderbuffer:WebGLRenderbuffer|null):void;framebufferTexture2D(target:GLenum,attachment:GLenum,textarget:GLenum,texture:WebGLTexture|null,level:GLint):void;frontFace(mode:GLenum):void;generateMipmap(target:GLenum):void;getActiveAttrib(program:WebGLProgram,index:GLuint):WebGLActiveInfo|null;getActiveUniform(program:WebGLProgram,index:GLuint):WebGLActiveInfo|null;getAttachedShaders(program:WebGLProgram):WebGLShader[]|null;getAttribLocation(program:WebGLProgram,name:string):GLint;getBufferParameter(target:GLenum,pname:GLenum):any;getContextAttributes():WebGLContextAttributes|null;getError():GLenum;getExtension(extensionName:\"EXT_blend_minmax\"):EXT_blend_minmax|null;getExtension(extensionName:\"EXT_color_buffer_float\"):EXT_color_buffer_float|null;getExtension(extensionName:\"EXT_color_buffer_half_float\"):EXT_color_buffer_half_float|null;getExtension(extensionName:\"EXT_float_blend\"):EXT_float_blend|null;getExtension(extensionName:\"EXT_texture_filter_anisotropic\"):EXT_texture_filter_anisotropic|null;getExtension(extensionName:\"EXT_frag_depth\"):EXT_frag_depth|null;getExtension(extensionName:\"EXT_shader_texture_lod\"):EXT_shader_texture_lod|null;getExtension(extensionName:\"EXT_sRGB\"):EXT_sRGB|null;getExtension(extensionName:\"KHR_parallel_shader_compile\"):KHR_parallel_shader_compile|null;getExtension(extensionName:\"OES_vertex_array_object\"):OES_vertex_array_object|null;getExtension(extensionName:\"OVR_multiview2\"):OVR_multiview2|null;getExtension(extensionName:\"WEBGL_color_buffer_float\"):WEBGL_color_buffer_float|null;getExtension(extensionName:\"WEBGL_compressed_texture_astc\"):WEBGL_compressed_texture_astc|null;getExtension(extensionName:\"WEBGL_compressed_texture_etc\"):WEBGL_compressed_texture_etc|null;getExtension(extensionName:\"WEBGL_compressed_texture_etc1\"):WEBGL_compressed_texture_etc1|null;getExtension(extensionName:\"WEBGL_compressed_texture_s3tc_srgb\"):WEBGL_compressed_texture_s3tc_srgb|null;getExtension(extensionName:\"WEBGL_debug_shaders\"):WEBGL_debug_shaders|null;getExtension(extensionName:\"WEBGL_draw_buffers\"):WEBGL_draw_buffers|null;getExtension(extensionName:\"WEBGL_lose_context\"):WEBGL_lose_context|null;getExtension(extensionName:\"WEBGL_depth_texture\"):WEBGL_depth_texture|null;getExtension(extensionName:\"WEBGL_debug_renderer_info\"):WEBGL_debug_renderer_info|null;getExtension(extensionName:\"WEBGL_compressed_texture_s3tc\"):WEBGL_compressed_texture_s3tc|null;getExtension(extensionName:\"OES_texture_half_float_linear\"):OES_texture_half_float_linear|null;getExtension(extensionName:\"OES_texture_half_float\"):OES_texture_half_float|null;getExtension(extensionName:\"OES_texture_float_linear\"):OES_texture_float_linear|null;getExtension(extensionName:\"OES_texture_float\"):OES_texture_float|null;getExtension(extensionName:\"OES_standard_derivatives\"):OES_standard_derivatives|null;getExtension(extensionName:\"OES_element_index_uint\"):OES_element_index_uint|null;getExtension(extensionName:\"ANGLE_instanced_arrays\"):ANGLE_instanced_arrays|null;getExtension(name:string):any;getFramebufferAttachmentParameter(target:GLenum,attachment:GLenum,pname:GLenum):any;getParameter(pname:GLenum):any;getProgramInfoLog(program:WebGLProgram):string|null;getProgramParameter(program:WebGLProgram,pname:GLenum):any;getRenderbufferParameter(target:GLenum,pname:GLenum):any;getShaderInfoLog(shader:WebGLShader):string|null;getShaderParameter(shader:WebGLShader,pname:GLenum):any;getShaderPrecisionFormat(shadertype:GLenum,precisiontype:GLenum):WebGLShaderPrecisionFormat|null;getShaderSource(shader:WebGLShader):string|null;getSupportedExtensions():string[]|null;getTexParameter(target:GLenum,pname:GLenum):any;getUniform(program:WebGLProgram,location:WebGLUniformLocation):any;getUniformLocation(program:WebGLProgram,name:string):WebGLUniformLocation|null;getVertexAttrib(index:GLuint,pname:GLenum):any;getVertexAttribOffset(index:GLuint,pname:GLenum):GLintptr;hint(target:GLenum,mode:GLenum):void;isBuffer(buffer:WebGLBuffer|null):GLboolean;isContextLost():boolean;isEnabled(cap:GLenum):GLboolean;isFramebuffer(framebuffer:WebGLFramebuffer|null):GLboolean;isProgram(program:WebGLProgram|null):GLboolean;isRenderbuffer(renderbuffer:WebGLRenderbuffer|null):GLboolean;isShader(shader:WebGLShader|null):GLboolean;isTexture(texture:WebGLTexture|null):GLboolean;lineWidth(width:GLfloat):void;linkProgram(program:WebGLProgram):void;pixelStorei(pname:GLenum,param:GLint|GLboolean):void;polygonOffset(factor:GLfloat,units:GLfloat):void;renderbufferStorage(target:GLenum,internalformat:GLenum,width:GLsizei,height:GLsizei):void;sampleCoverage(value:GLclampf,invert:GLboolean):void;scissor(x:GLint,y:GLint,width:GLsizei,height:GLsizei):void;shaderSource(shader:WebGLShader,source:string):void;stencilFunc(func:GLenum,ref:GLint,mask:GLuint):void;stencilFuncSeparate(face:GLenum,func:GLenum,ref:GLint,mask:GLuint):void;stencilMask(mask:GLuint):void;stencilMaskSeparate(face:GLenum,mask:GLuint):void;stencilOp(fail:GLenum,zfail:GLenum,zpass:GLenum):void;stencilOpSeparate(face:GLenum,fail:GLenum,zfail:GLenum,zpass:GLenum):void;texParameterf(target:GLenum,pname:GLenum,param:GLfloat):void;texParameteri(target:GLenum,pname:GLenum,param:GLint):void;uniform1f(location:WebGLUniformLocation|null,x:GLfloat):void;uniform1i(location:WebGLUniformLocation|null,x:GLint):void;uniform2f(location:WebGLUniformLocation|null,x:GLfloat,y:GLfloat):void;uniform2i(location:WebGLUniformLocation|null,x:GLint,y:GLint):void;uniform3f(location:WebGLUniformLocation|null,x:GLfloat,y:GLfloat,z:GLfloat):void;uniform3i(location:WebGLUniformLocation|null,x:GLint,y:GLint,z:GLint):void;uniform4f(location:WebGLUniformLocation|null,x:GLfloat,y:GLfloat,z:GLfloat,w:GLfloat):void;uniform4i(location:WebGLUniformLocation|null,x:GLint,y:GLint,z:GLint,w:GLint):void;useProgram(program:WebGLProgram|null):void;validateProgram(program:WebGLProgram):void;vertexAttrib1f(index:GLuint,x:GLfloat):void;vertexAttrib1fv(index:GLuint,values:Float32List):void;vertexAttrib2f(index:GLuint,x:GLfloat,y:GLfloat):void;vertexAttrib2fv(index:GLuint,values:Float32List):void;vertexAttrib3f(index:GLuint,x:GLfloat,y:GLfloat,z:GLfloat):void;vertexAttrib3fv(index:GLuint,values:Float32List):void;vertexAttrib4f(index:GLuint,x:GLfloat,y:GLfloat,z:GLfloat,w:GLfloat):void;vertexAttrib4fv(index:GLuint,values:Float32List):void;vertexAttribPointer(index:GLuint,size:GLint,type:GLenum,normalized:GLboolean,stride:GLsizei,offset:GLintptr):void;viewport(x:GLint,y:GLint,width:GLsizei,height:GLsizei):void;readonly ACTIVE_ATTRIBUTES:GLenum;readonly ACTIVE_TEXTURE:GLenum;readonly ACTIVE_UNIFORMS:GLenum;readonly ALIASED_LINE_WIDTH_RANGE:GLenum;readonly ALIASED_POINT_SIZE_RANGE:GLenum;readonly ALPHA:GLenum;readonly ALPHA_BITS:GLenum;readonly ALWAYS:GLenum;readonly ARRAY_BUFFER:GLenum;readonly ARRAY_BUFFER_BINDING:GLenum;readonly ATTACHED_SHADERS:GLenum;readonly BACK:GLenum;readonly BLEND:GLenum;readonly BLEND_COLOR:GLenum;readonly BLEND_DST_ALPHA:GLenum;readonly BLEND_DST_RGB:GLenum;readonly BLEND_EQUATION:GLenum;readonly BLEND_EQUATION_ALPHA:GLenum;readonly BLEND_EQUATION_RGB:GLenum;readonly BLEND_SRC_ALPHA:GLenum;readonly BLEND_SRC_RGB:GLenum;readonly BLUE_BITS:GLenum;readonly BOOL:GLenum;readonly BOOL_VEC2:GLenum;readonly BOOL_VEC3:GLenum;readonly BOOL_VEC4:GLenum;readonly BROWSER_DEFAULT_WEBGL:GLenum;readonly BUFFER_SIZE:GLenum;readonly BUFFER_USAGE:GLenum;readonly BYTE:GLenum;readonly CCW:GLenum;readonly CLAMP_TO_EDGE:GLenum;readonly COLOR_ATTACHMENT0:GLenum;readonly COLOR_BUFFER_BIT:GLenum;readonly COLOR_CLEAR_VALUE:GLenum;readonly COLOR_WRITEMASK:GLenum;readonly COMPILE_STATUS:GLenum;readonly COMPRESSED_TEXTURE_FORMATS:GLenum;readonly CONSTANT_ALPHA:GLenum;readonly CONSTANT_COLOR:GLenum;readonly CONTEXT_LOST_WEBGL:GLenum;readonly CULL_FACE:GLenum;readonly CULL_FACE_MODE:GLenum;readonly CURRENT_PROGRAM:GLenum;readonly CURRENT_VERTEX_ATTRIB:GLenum;readonly CW:GLenum;readonly DECR:GLenum;readonly DECR_WRAP:GLenum;readonly DELETE_STATUS:GLenum;readonly DEPTH_ATTACHMENT:GLenum;readonly DEPTH_BITS:GLenum;readonly DEPTH_BUFFER_BIT:GLenum;readonly DEPTH_CLEAR_VALUE:GLenum;readonly DEPTH_COMPONENT:GLenum;readonly DEPTH_COMPONENT16:GLenum;readonly DEPTH_FUNC:GLenum;readonly DEPTH_RANGE:GLenum;readonly DEPTH_STENCIL:GLenum;readonly DEPTH_STENCIL_ATTACHMENT:GLenum;readonly DEPTH_TEST:GLenum;readonly DEPTH_WRITEMASK:GLenum;readonly DITHER:GLenum;readonly DONT_CARE:GLenum;readonly DST_ALPHA:GLenum;readonly DST_COLOR:GLenum;readonly DYNAMIC_DRAW:GLenum;readonly ELEMENT_ARRAY_BUFFER:GLenum;readonly ELEMENT_ARRAY_BUFFER_BINDING:GLenum;readonly EQUAL:GLenum;readonly FASTEST:GLenum;readonly FLOAT:GLenum;readonly FLOAT_MAT2:GLenum;readonly FLOAT_MAT3:GLenum;readonly FLOAT_MAT4:GLenum;readonly FLOAT_VEC2:GLenum;readonly FLOAT_VEC3:GLenum;readonly FLOAT_VEC4:GLenum;readonly FRAGMENT_SHADER:GLenum;readonly FRAMEBUFFER:GLenum;readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:GLenum;readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:GLenum;readonly FRAMEBUFFER_BINDING:GLenum;readonly FRAMEBUFFER_COMPLETE:GLenum;readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT:GLenum;readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS:GLenum;readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:GLenum;readonly FRAMEBUFFER_UNSUPPORTED:GLenum;readonly FRONT:GLenum;readonly FRONT_AND_BACK:GLenum;readonly FRONT_FACE:GLenum;readonly FUNC_ADD:GLenum;readonly FUNC_REVERSE_SUBTRACT:GLenum;readonly FUNC_SUBTRACT:GLenum;readonly GENERATE_MIPMAP_HINT:GLenum;readonly GEQUAL:GLenum;readonly GREATER:GLenum;readonly GREEN_BITS:GLenum;readonly HIGH_FLOAT:GLenum;readonly HIGH_INT:GLenum;readonly IMPLEMENTATION_COLOR_READ_FORMAT:GLenum;readonly IMPLEMENTATION_COLOR_READ_TYPE:GLenum;readonly INCR:GLenum;readonly INCR_WRAP:GLenum;readonly INT:GLenum;readonly INT_VEC2:GLenum;readonly INT_VEC3:GLenum;readonly INT_VEC4:GLenum;readonly INVALID_ENUM:GLenum;readonly INVALID_FRAMEBUFFER_OPERATION:GLenum;readonly INVALID_OPERATION:GLenum;readonly INVALID_VALUE:GLenum;readonly INVERT:GLenum;readonly KEEP:GLenum;readonly LEQUAL:GLenum;readonly LESS:GLenum;readonly LINEAR:GLenum;readonly LINEAR_MIPMAP_LINEAR:GLenum;readonly LINEAR_MIPMAP_NEAREST:GLenum;readonly LINES:GLenum;readonly LINE_LOOP:GLenum;readonly LINE_STRIP:GLenum;readonly LINE_WIDTH:GLenum;readonly LINK_STATUS:GLenum;readonly LOW_FLOAT:GLenum;readonly LOW_INT:GLenum;readonly LUMINANCE:GLenum;readonly LUMINANCE_ALPHA:GLenum;readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_CUBE_MAP_TEXTURE_SIZE:GLenum;readonly MAX_FRAGMENT_UNIFORM_VECTORS:GLenum;readonly MAX_RENDERBUFFER_SIZE:GLenum;readonly MAX_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_TEXTURE_SIZE:GLenum;readonly MAX_VARYING_VECTORS:GLenum;readonly MAX_VERTEX_ATTRIBS:GLenum;readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_VERTEX_UNIFORM_VECTORS:GLenum;readonly MAX_VIEWPORT_DIMS:GLenum;readonly MEDIUM_FLOAT:GLenum;readonly MEDIUM_INT:GLenum;readonly MIRRORED_REPEAT:GLenum;readonly NEAREST:GLenum;readonly NEAREST_MIPMAP_LINEAR:GLenum;readonly NEAREST_MIPMAP_NEAREST:GLenum;readonly NEVER:GLenum;readonly NICEST:GLenum;readonly NONE:GLenum;readonly NOTEQUAL:GLenum;readonly NO_ERROR:GLenum;readonly ONE:GLenum;readonly ONE_MINUS_CONSTANT_ALPHA:GLenum;readonly ONE_MINUS_CONSTANT_COLOR:GLenum;readonly ONE_MINUS_DST_ALPHA:GLenum;readonly ONE_MINUS_DST_COLOR:GLenum;readonly ONE_MINUS_SRC_ALPHA:GLenum;readonly ONE_MINUS_SRC_COLOR:GLenum;readonly OUT_OF_MEMORY:GLenum;readonly PACK_ALIGNMENT:GLenum;readonly POINTS:GLenum;readonly POLYGON_OFFSET_FACTOR:GLenum;readonly POLYGON_OFFSET_FILL:GLenum;readonly POLYGON_OFFSET_UNITS:GLenum;readonly RED_BITS:GLenum;readonly RENDERBUFFER:GLenum;readonly RENDERBUFFER_ALPHA_SIZE:GLenum;readonly RENDERBUFFER_BINDING:GLenum;readonly RENDERBUFFER_BLUE_SIZE:GLenum;readonly RENDERBUFFER_DEPTH_SIZE:GLenum;readonly RENDERBUFFER_GREEN_SIZE:GLenum;readonly RENDERBUFFER_HEIGHT:GLenum;readonly RENDERBUFFER_INTERNAL_FORMAT:GLenum;readonly RENDERBUFFER_RED_SIZE:GLenum;readonly RENDERBUFFER_STENCIL_SIZE:GLenum;readonly RENDERBUFFER_WIDTH:GLenum;readonly RENDERER:GLenum;readonly REPEAT:GLenum;readonly REPLACE:GLenum;readonly RGB:GLenum;readonly RGB565:GLenum;readonly RGB5_A1:GLenum;readonly RGBA:GLenum;readonly RGBA4:GLenum;readonly SAMPLER_2D:GLenum;readonly SAMPLER_CUBE:GLenum;readonly SAMPLES:GLenum;readonly SAMPLE_ALPHA_TO_COVERAGE:GLenum;readonly SAMPLE_BUFFERS:GLenum;readonly SAMPLE_COVERAGE:GLenum;readonly SAMPLE_COVERAGE_INVERT:GLenum;readonly SAMPLE_COVERAGE_VALUE:GLenum;readonly SCISSOR_BOX:GLenum;readonly SCISSOR_TEST:GLenum;readonly SHADER_TYPE:GLenum;readonly SHADING_LANGUAGE_VERSION:GLenum;readonly SHORT:GLenum;readonly SRC_ALPHA:GLenum;readonly SRC_ALPHA_SATURATE:GLenum;readonly SRC_COLOR:GLenum;readonly STATIC_DRAW:GLenum;readonly STENCIL_ATTACHMENT:GLenum;readonly STENCIL_BACK_FAIL:GLenum;readonly STENCIL_BACK_FUNC:GLenum;readonly STENCIL_BACK_PASS_DEPTH_FAIL:GLenum;readonly STENCIL_BACK_PASS_DEPTH_PASS:GLenum;readonly STENCIL_BACK_REF:GLenum;readonly STENCIL_BACK_VALUE_MASK:GLenum;readonly STENCIL_BACK_WRITEMASK:GLenum;readonly STENCIL_BITS:GLenum;readonly STENCIL_BUFFER_BIT:GLenum;readonly STENCIL_CLEAR_VALUE:GLenum;readonly STENCIL_FAIL:GLenum;readonly STENCIL_FUNC:GLenum;readonly STENCIL_INDEX8:GLenum;readonly STENCIL_PASS_DEPTH_FAIL:GLenum;readonly STENCIL_PASS_DEPTH_PASS:GLenum;readonly STENCIL_REF:GLenum;readonly STENCIL_TEST:GLenum;readonly STENCIL_VALUE_MASK:GLenum;readonly STENCIL_WRITEMASK:GLenum;readonly STREAM_DRAW:GLenum;readonly SUBPIXEL_BITS:GLenum;readonly TEXTURE:GLenum;readonly TEXTURE0:GLenum;readonly TEXTURE1:GLenum;readonly TEXTURE10:GLenum;readonly TEXTURE11:GLenum;readonly TEXTURE12:GLenum;readonly TEXTURE13:GLenum;readonly TEXTURE14:GLenum;readonly TEXTURE15:GLenum;readonly TEXTURE16:GLenum;readonly TEXTURE17:GLenum;readonly TEXTURE18:GLenum;readonly TEXTURE19:GLenum;readonly TEXTURE2:GLenum;readonly TEXTURE20:GLenum;readonly TEXTURE21:GLenum;readonly TEXTURE22:GLenum;readonly TEXTURE23:GLenum;readonly TEXTURE24:GLenum;readonly TEXTURE25:GLenum;readonly TEXTURE26:GLenum;readonly TEXTURE27:GLenum;readonly TEXTURE28:GLenum;readonly TEXTURE29:GLenum;readonly TEXTURE3:GLenum;readonly TEXTURE30:GLenum;readonly TEXTURE31:GLenum;readonly TEXTURE4:GLenum;readonly TEXTURE5:GLenum;readonly TEXTURE6:GLenum;readonly TEXTURE7:GLenum;readonly TEXTURE8:GLenum;readonly TEXTURE9:GLenum;readonly TEXTURE_2D:GLenum;readonly TEXTURE_BINDING_2D:GLenum;readonly TEXTURE_BINDING_CUBE_MAP:GLenum;readonly TEXTURE_CUBE_MAP:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_X:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_Y:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_Z:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_X:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_Y:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_Z:GLenum;readonly TEXTURE_MAG_FILTER:GLenum;readonly TEXTURE_MIN_FILTER:GLenum;readonly TEXTURE_WRAP_S:GLenum;readonly TEXTURE_WRAP_T:GLenum;readonly TRIANGLES:GLenum;readonly TRIANGLE_FAN:GLenum;readonly TRIANGLE_STRIP:GLenum;readonly UNPACK_ALIGNMENT:GLenum;readonly UNPACK_COLORSPACE_CONVERSION_WEBGL:GLenum;readonly UNPACK_FLIP_Y_WEBGL:GLenum;readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL:GLenum;readonly UNSIGNED_BYTE:GLenum;readonly UNSIGNED_INT:GLenum;readonly UNSIGNED_SHORT:GLenum;readonly UNSIGNED_SHORT_4_4_4_4:GLenum;readonly UNSIGNED_SHORT_5_5_5_1:GLenum;readonly UNSIGNED_SHORT_5_6_5:GLenum;readonly VALIDATE_STATUS:GLenum;readonly VENDOR:GLenum;readonly VERSION:GLenum;readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:GLenum;readonly VERTEX_ATTRIB_ARRAY_ENABLED:GLenum;readonly VERTEX_ATTRIB_ARRAY_NORMALIZED:GLenum;readonly VERTEX_ATTRIB_ARRAY_POINTER:GLenum;readonly VERTEX_ATTRIB_ARRAY_SIZE:GLenum;readonly VERTEX_ATTRIB_ARRAY_STRIDE:GLenum;readonly VERTEX_ATTRIB_ARRAY_TYPE:GLenum;readonly VERTEX_SHADER:GLenum;readonly VIEWPORT:GLenum;readonly ZERO:GLenum;}interface WebGLRenderingContextOverloads{bufferData(target:GLenum,size:GLsizeiptr,usage:GLenum):void;bufferData(target:GLenum,data:BufferSource|null,usage:GLenum):void;bufferSubData(target:GLenum,offset:GLintptr,data:BufferSource):void;compressedTexImage2D(target:GLenum,level:GLint,internalformat:GLenum,width:GLsizei,height:GLsizei,border:GLint,data:ArrayBufferView):void;compressedTexSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,data:ArrayBufferView):void;readPixels(x:GLint,y:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,pixels:ArrayBufferView|null):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,border:GLint,format:GLenum,type:GLenum,pixels:ArrayBufferView|null):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,format:GLenum,type:GLenum,source:TexImageSource):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,pixels:ArrayBufferView|null):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,format:GLenum,type:GLenum,source:TexImageSource):void;uniform1fv(location:WebGLUniformLocation|null,v:Float32List):void;uniform1iv(location:WebGLUniformLocation|null,v:Int32List):void;uniform2fv(location:WebGLUniformLocation|null,v:Float32List):void;uniform2iv(location:WebGLUniformLocation|null,v:Int32List):void;uniform3fv(location:WebGLUniformLocation|null,v:Float32List):void;uniform3iv(location:WebGLUniformLocation|null,v:Int32List):void;uniform4fv(location:WebGLUniformLocation|null,v:Float32List):void;uniform4iv(location:WebGLUniformLocation|null,v:Int32List):void;uniformMatrix2fv(location:WebGLUniformLocation|null,transpose:GLboolean,value:Float32List):void;uniformMatrix3fv(location:WebGLUniformLocation|null,transpose:GLboolean,value:Float32List):void;uniformMatrix4fv(location:WebGLUniformLocation|null,transpose:GLboolean,value:Float32List):void;}interface WebGLSampler{}declare var WebGLSampler:{prototype:WebGLSampler;new():WebGLSampler;};interface WebGLShader{}declare var WebGLShader:{prototype:WebGLShader;new():WebGLShader;};interface WebGLShaderPrecisionFormat{readonly precision:GLint;readonly rangeMax:GLint;readonly rangeMin:GLint;}declare var WebGLShaderPrecisionFormat:{prototype:WebGLShaderPrecisionFormat;new():WebGLShaderPrecisionFormat;};interface WebGLSync{}declare var WebGLSync:{prototype:WebGLSync;new():WebGLSync;};interface WebGLTexture{}declare var WebGLTexture:{prototype:WebGLTexture;new():WebGLTexture;};interface WebGLTransformFeedback{}declare var WebGLTransformFeedback:{prototype:WebGLTransformFeedback;new():WebGLTransformFeedback;};interface WebGLUniformLocation{}declare var WebGLUniformLocation:{prototype:WebGLUniformLocation;new():WebGLUniformLocation;};interface WebGLVertexArrayObject{}declare var WebGLVertexArrayObject:{prototype:WebGLVertexArrayObject;new():WebGLVertexArrayObject;};interface WebGLVertexArrayObjectOES{}interface WebSocketEventMap{\"close\":CloseEvent;\"error\":Event;\"message\":MessageEvent;\"open\":Event;}interface WebSocket extends EventTarget{binaryType:BinaryType;readonly bufferedAmount:number;readonly extensions:string;onclose:((this:WebSocket,ev:CloseEvent)=>any)|null;onerror:((this:WebSocket,ev:Event)=>any)|null;onmessage:((this:WebSocket,ev:MessageEvent)=>any)|null;onopen:((this:WebSocket,ev:Event)=>any)|null;readonly protocol:string;readonly readyState:number;readonly url:string;close(code?:number,reason?:string):void;send(data:string|ArrayBufferLike|Blob|ArrayBufferView):void;readonly CLOSED:number;readonly CLOSING:number;readonly CONNECTING:number;readonly OPEN:number;addEventListener<K extends keyof WebSocketEventMap>(type:K,listener:(this:WebSocket,ev:WebSocketEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof WebSocketEventMap>(type:K,listener:(this:WebSocket,ev:WebSocketEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var WebSocket:{prototype:WebSocket;new(url:string|URL,protocols?:string|string[]):WebSocket;readonly CLOSED:number;readonly CLOSING:number;readonly CONNECTING:number;readonly OPEN:number;};interface WheelEvent extends MouseEvent{readonly deltaMode:number;readonly deltaX:number;readonly deltaY:number;readonly deltaZ:number;readonly DOM_DELTA_LINE:number;readonly DOM_DELTA_PAGE:number;readonly DOM_DELTA_PIXEL:number;}declare var WheelEvent:{prototype:WheelEvent;new(type:string,eventInitDict?:WheelEventInit):WheelEvent;readonly DOM_DELTA_LINE:number;readonly DOM_DELTA_PAGE:number;readonly DOM_DELTA_PIXEL:number;};interface WindowEventMap extends GlobalEventHandlersEventMap,WindowEventHandlersEventMap{\"DOMContentLoaded\":Event;\"devicemotion\":DeviceMotionEvent;\"deviceorientation\":DeviceOrientationEvent;\"gamepadconnected\":GamepadEvent;\"gamepaddisconnected\":GamepadEvent;\"orientationchange\":Event;}interface Window extends EventTarget,AnimationFrameProvider,GlobalEventHandlers,WindowEventHandlers,WindowLocalStorage,WindowOrWorkerGlobalScope,WindowSessionStorage{readonly clientInformation:Navigator;readonly closed:boolean;readonly customElements:CustomElementRegistry;readonly devicePixelRatio:number;readonly document:Document;readonly event:Event|undefined;readonly external:External;readonly frameElement:Element|null;readonly frames:WindowProxy;readonly history:History;readonly innerHeight:number;readonly innerWidth:number;readonly length:number;get location():Location;set location(href:string|Location);readonly locationbar:BarProp;readonly menubar:BarProp;name:string;readonly navigator:Navigator;ondevicemotion:((this:Window,ev:DeviceMotionEvent)=>any)|null;ondeviceorientation:((this:Window,ev:DeviceOrientationEvent)=>any)|null;onorientationchange:((this:Window,ev:Event)=>any)|null;opener:any;readonly orientation:number;readonly outerHeight:number;readonly outerWidth:number;readonly pageXOffset:number;readonly pageYOffset:number;readonly parent:WindowProxy;readonly personalbar:BarProp;readonly screen:Screen;readonly screenLeft:number;readonly screenTop:number;readonly screenX:number;readonly screenY:number;readonly scrollX:number;readonly scrollY:number;readonly scrollbars:BarProp;readonly self:Window&typeof globalThis;readonly speechSynthesis:SpeechSynthesis;status:string;readonly statusbar:BarProp;readonly toolbar:BarProp;readonly top:WindowProxy|null;readonly visualViewport:VisualViewport;readonly window:Window&typeof globalThis;alert(message?:any):void;blur():void;cancelIdleCallback(handle:number):void;captureEvents():void;close():void;confirm(message?:string):boolean;focus():void;getComputedStyle(elt:Element,pseudoElt?:string|null):CSSStyleDeclaration;getSelection():Selection|null;matchMedia(query:string):MediaQueryList;moveBy(x:number,y:number):void;moveTo(x:number,y:number):void;open(url?:string|URL,target?:string,features?:string):WindowProxy|null;postMessage(message:any,targetOrigin:string,transfer?:Transferable[]):void;postMessage(message:any,options?:WindowPostMessageOptions):void;print():void;prompt(message?:string,_default?:string):string|null;releaseEvents():void;requestIdleCallback(callback:IdleRequestCallback,options?:IdleRequestOptions):number;resizeBy(x:number,y:number):void;resizeTo(width:number,height:number):void;scroll(options?:ScrollToOptions):void;scroll(x:number,y:number):void;scrollBy(options?:ScrollToOptions):void;scrollBy(x:number,y:number):void;scrollTo(options?:ScrollToOptions):void;scrollTo(x:number,y:number):void;stop():void;addEventListener<K extends keyof WindowEventMap>(type:K,listener:(this:Window,ev:WindowEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof WindowEventMap>(type:K,listener:(this:Window,ev:WindowEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;[index:number]:Window;}declare var Window:{prototype:Window;new():Window;};interface WindowEventHandlersEventMap{\"afterprint\":Event;\"beforeprint\":Event;\"beforeunload\":BeforeUnloadEvent;\"gamepadconnected\":GamepadEvent;\"gamepaddisconnected\":GamepadEvent;\"hashchange\":HashChangeEvent;\"languagechange\":Event;\"message\":MessageEvent;\"messageerror\":MessageEvent;\"offline\":Event;\"online\":Event;\"pagehide\":PageTransitionEvent;\"pageshow\":PageTransitionEvent;\"popstate\":PopStateEvent;\"rejectionhandled\":PromiseRejectionEvent;\"storage\":StorageEvent;\"unhandledrejection\":PromiseRejectionEvent;\"unload\":Event;}interface WindowEventHandlers{onafterprint:((this:WindowEventHandlers,ev:Event)=>any)|null;onbeforeprint:((this:WindowEventHandlers,ev:Event)=>any)|null;onbeforeunload:((this:WindowEventHandlers,ev:BeforeUnloadEvent)=>any)|null;ongamepadconnected:((this:WindowEventHandlers,ev:GamepadEvent)=>any)|null;ongamepaddisconnected:((this:WindowEventHandlers,ev:GamepadEvent)=>any)|null;onhashchange:((this:WindowEventHandlers,ev:HashChangeEvent)=>any)|null;onlanguagechange:((this:WindowEventHandlers,ev:Event)=>any)|null;onmessage:((this:WindowEventHandlers,ev:MessageEvent)=>any)|null;onmessageerror:((this:WindowEventHandlers,ev:MessageEvent)=>any)|null;onoffline:((this:WindowEventHandlers,ev:Event)=>any)|null;ononline:((this:WindowEventHandlers,ev:Event)=>any)|null;onpagehide:((this:WindowEventHandlers,ev:PageTransitionEvent)=>any)|null;onpageshow:((this:WindowEventHandlers,ev:PageTransitionEvent)=>any)|null;onpopstate:((this:WindowEventHandlers,ev:PopStateEvent)=>any)|null;onrejectionhandled:((this:WindowEventHandlers,ev:PromiseRejectionEvent)=>any)|null;onstorage:((this:WindowEventHandlers,ev:StorageEvent)=>any)|null;onunhandledrejection:((this:WindowEventHandlers,ev:PromiseRejectionEvent)=>any)|null;onunload:((this:WindowEventHandlers,ev:Event)=>any)|null;addEventListener<K extends keyof WindowEventHandlersEventMap>(type:K,listener:(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof WindowEventHandlersEventMap>(type:K,listener:(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}interface WindowLocalStorage{readonly localStorage:Storage;}interface WindowOrWorkerGlobalScope{readonly caches:CacheStorage;readonly crossOriginIsolated:boolean;readonly crypto:Crypto;readonly indexedDB:IDBFactory;readonly isSecureContext:boolean;readonly origin:string;readonly performance:Performance;atob(data:string):string;btoa(data:string):string;clearInterval(id?:number):void;clearTimeout(id?:number):void;createImageBitmap(image:ImageBitmapSource,options?:ImageBitmapOptions):Promise<ImageBitmap>;createImageBitmap(image:ImageBitmapSource,sx:number,sy:number,sw:number,sh:number,options?:ImageBitmapOptions):Promise<ImageBitmap>;fetch(input:RequestInfo|URL,init?:RequestInit):Promise<Response>;queueMicrotask(callback:VoidFunction):void;reportError(e:any):void;setInterval(handler:TimerHandler,timeout?:number,...arguments:any[]):number;setTimeout(handler:TimerHandler,timeout?:number,...arguments:any[]):number;structuredClone(value:any,options?:StructuredSerializeOptions):any;}interface WindowSessionStorage{readonly sessionStorage:Storage;}interface WorkerEventMap extends AbstractWorkerEventMap{\"message\":MessageEvent;\"messageerror\":MessageEvent;}interface Worker extends EventTarget,AbstractWorker{onmessage:((this:Worker,ev:MessageEvent)=>any)|null;onmessageerror:((this:Worker,ev:MessageEvent)=>any)|null;postMessage(message:any,transfer:Transferable[]):void;postMessage(message:any,options?:StructuredSerializeOptions):void;terminate():void;addEventListener<K extends keyof WorkerEventMap>(type:K,listener:(this:Worker,ev:WorkerEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof WorkerEventMap>(type:K,listener:(this:Worker,ev:WorkerEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var Worker:{prototype:Worker;new(scriptURL:string|URL,options?:WorkerOptions):Worker;};interface Worklet{addModule(moduleURL:string|URL,options?:WorkletOptions):Promise<void>;}declare var Worklet:{prototype:Worklet;new():Worklet;};interface WritableStream<W=any>{readonly locked:boolean;abort(reason?:any):Promise<void>;close():Promise<void>;getWriter():WritableStreamDefaultWriter<W>;}declare var WritableStream:{prototype:WritableStream;new<W=any>(underlyingSink?:UnderlyingSink<W>,strategy?:QueuingStrategy<W>):WritableStream<W>;};interface WritableStreamDefaultController{error(e?:any):void;}declare var WritableStreamDefaultController:{prototype:WritableStreamDefaultController;new():WritableStreamDefaultController;};interface WritableStreamDefaultWriter<W=any>{readonly closed:Promise<undefined>;readonly desiredSize:number|null;readonly ready:Promise<undefined>;abort(reason?:any):Promise<void>;close():Promise<void>;releaseLock():void;write(chunk?:W):Promise<void>;}declare var WritableStreamDefaultWriter:{prototype:WritableStreamDefaultWriter;new<W=any>(stream:WritableStream<W>):WritableStreamDefaultWriter<W>;};interface XMLDocument extends Document{addEventListener<K extends keyof DocumentEventMap>(type:K,listener:(this:XMLDocument,ev:DocumentEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof DocumentEventMap>(type:K,listener:(this:XMLDocument,ev:DocumentEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var XMLDocument:{prototype:XMLDocument;new():XMLDocument;};interface XMLHttpRequestEventMap extends XMLHttpRequestEventTargetEventMap{\"readystatechange\":Event;}interface XMLHttpRequest extends XMLHttpRequestEventTarget{onreadystatechange:((this:XMLHttpRequest,ev:Event)=>any)|null;readonly readyState:number;readonly response:any;readonly responseText:string;responseType:XMLHttpRequestResponseType;readonly responseURL:string;readonly responseXML:Document|null;readonly status:number;readonly statusText:string;timeout:number;readonly upload:XMLHttpRequestUpload;withCredentials:boolean;abort():void;getAllResponseHeaders():string;getResponseHeader(name:string):string|null;open(method:string,url:string|URL):void;open(method:string,url:string|URL,async:boolean,username?:string|null,password?:string|null):void;overrideMimeType(mime:string):void;send(body?:Document|XMLHttpRequestBodyInit|null):void;setRequestHeader(name:string,value:string):void;readonly DONE:number;readonly HEADERS_RECEIVED:number;readonly LOADING:number;readonly OPENED:number;readonly UNSENT:number;addEventListener<K extends keyof XMLHttpRequestEventMap>(type:K,listener:(this:XMLHttpRequest,ev:XMLHttpRequestEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof XMLHttpRequestEventMap>(type:K,listener:(this:XMLHttpRequest,ev:XMLHttpRequestEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var XMLHttpRequest:{prototype:XMLHttpRequest;new():XMLHttpRequest;readonly DONE:number;readonly HEADERS_RECEIVED:number;readonly LOADING:number;readonly OPENED:number;readonly UNSENT:number;};interface XMLHttpRequestEventTargetEventMap{\"abort\":ProgressEvent<XMLHttpRequestEventTarget>;\"error\":ProgressEvent<XMLHttpRequestEventTarget>;\"load\":ProgressEvent<XMLHttpRequestEventTarget>;\"loadend\":ProgressEvent<XMLHttpRequestEventTarget>;\"loadstart\":ProgressEvent<XMLHttpRequestEventTarget>;\"progress\":ProgressEvent<XMLHttpRequestEventTarget>;\"timeout\":ProgressEvent<XMLHttpRequestEventTarget>;}interface XMLHttpRequestEventTarget extends EventTarget{onabort:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;onerror:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;onload:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;onloadend:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;onloadstart:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;onprogress:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;ontimeout:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type:K,listener:(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type:K,listener:(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var XMLHttpRequestEventTarget:{prototype:XMLHttpRequestEventTarget;new():XMLHttpRequestEventTarget;};interface XMLHttpRequestUpload extends XMLHttpRequestEventTarget{addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type:K,listener:(this:XMLHttpRequestUpload,ev:XMLHttpRequestEventTargetEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type:K,listener:(this:XMLHttpRequestUpload,ev:XMLHttpRequestEventTargetEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var XMLHttpRequestUpload:{prototype:XMLHttpRequestUpload;new():XMLHttpRequestUpload;};interface XMLSerializer{serializeToString(root:Node):string;}declare var XMLSerializer:{prototype:XMLSerializer;new():XMLSerializer;};interface XPathEvaluator extends XPathEvaluatorBase{}declare var XPathEvaluator:{prototype:XPathEvaluator;new():XPathEvaluator;};interface XPathEvaluatorBase{createExpression(expression:string,resolver?:XPathNSResolver|null):XPathExpression;createNSResolver(nodeResolver:Node):XPathNSResolver;evaluate(expression:string,contextNode:Node,resolver?:XPathNSResolver|null,type?:number,result?:XPathResult|null):XPathResult;}interface XPathExpression{evaluate(contextNode:Node,type?:number,result?:XPathResult|null):XPathResult;}declare var XPathExpression:{prototype:XPathExpression;new():XPathExpression;};interface XPathResult{readonly booleanValue:boolean;readonly invalidIteratorState:boolean;readonly numberValue:number;readonly resultType:number;readonly singleNodeValue:Node|null;readonly snapshotLength:number;readonly stringValue:string;iterateNext():Node|null;snapshotItem(index:number):Node|null;readonly ANY_TYPE:number;readonly ANY_UNORDERED_NODE_TYPE:number;readonly BOOLEAN_TYPE:number;readonly FIRST_ORDERED_NODE_TYPE:number;readonly NUMBER_TYPE:number;readonly ORDERED_NODE_ITERATOR_TYPE:number;readonly ORDERED_NODE_SNAPSHOT_TYPE:number;readonly STRING_TYPE:number;readonly UNORDERED_NODE_ITERATOR_TYPE:number;readonly UNORDERED_NODE_SNAPSHOT_TYPE:number;}declare var XPathResult:{prototype:XPathResult;new():XPathResult;readonly ANY_TYPE:number;readonly ANY_UNORDERED_NODE_TYPE:number;readonly BOOLEAN_TYPE:number;readonly FIRST_ORDERED_NODE_TYPE:number;readonly NUMBER_TYPE:number;readonly ORDERED_NODE_ITERATOR_TYPE:number;readonly ORDERED_NODE_SNAPSHOT_TYPE:number;readonly STRING_TYPE:number;readonly UNORDERED_NODE_ITERATOR_TYPE:number;readonly UNORDERED_NODE_SNAPSHOT_TYPE:number;};interface XSLTProcessor{clearParameters():void;getParameter(namespaceURI:string|null,localName:string):any;importStylesheet(style:Node):void;removeParameter(namespaceURI:string|null,localName:string):void;reset():void;setParameter(namespaceURI:string|null,localName:string,value:any):void;transformToDocument(source:Node):Document;transformToFragment(source:Node,output:Document):DocumentFragment;}declare var XSLTProcessor:{prototype:XSLTProcessor;new():XSLTProcessor;};interface Console{assert(condition?:boolean,...data:any[]):void;clear():void;count(label?:string):void;countReset(label?:string):void;debug(...data:any[]):void;dir(item?:any,options?:any):void;dirxml(...data:any[]):void;error(...data:any[]):void;group(...data:any[]):void;groupCollapsed(...data:any[]):void;groupEnd():void;info(...data:any[]):void;log(...data:any[]):void;table(tabularData?:any,properties?:string[]):void;time(label?:string):void;timeEnd(label?:string):void;timeLog(label?:string,...data:any[]):void;timeStamp(label?:string):void;trace(...data:any[]):void;warn(...data:any[]):void;}declare var console:Console;declare namespace CSS{function escape(ident:string):string;function supports(property:string,value:string):boolean;function supports(conditionText:string):boolean;}declare namespace WebAssembly{interface CompileError extends Error{}var CompileError:{prototype:CompileError;new(message?:string):CompileError;(message?:string):CompileError;};interface Global{value:any;valueOf():any;}var Global:{prototype:Global;new(descriptor:GlobalDescriptor,v?:any):Global;};interface Instance{readonly exports:Exports;}var Instance:{prototype:Instance;new(module:Module,importObject?:Imports):Instance;};interface LinkError extends Error{}var LinkError:{prototype:LinkError;new(message?:string):LinkError;(message?:string):LinkError;};interface Memory{readonly buffer:ArrayBuffer;grow(delta:number):number;}var Memory:{prototype:Memory;new(descriptor:MemoryDescriptor):Memory;};interface Module{}var Module:{prototype:Module;new(bytes:BufferSource):Module;customSections(moduleObject:Module,sectionName:string):ArrayBuffer[];exports(moduleObject:Module):ModuleExportDescriptor[];imports(moduleObject:Module):ModuleImportDescriptor[];};interface RuntimeError extends Error{}var RuntimeError:{prototype:RuntimeError;new(message?:string):RuntimeError;(message?:string):RuntimeError;};interface Table{readonly length:number;get(index:number):any;grow(delta:number,value?:any):number;set(index:number,value?:any):void;}var Table:{prototype:Table;new(descriptor:TableDescriptor,value?:any):Table;};interface GlobalDescriptor{mutable?:boolean;value:ValueType;}interface MemoryDescriptor{initial:number;maximum?:number;shared?:boolean;}interface ModuleExportDescriptor{kind:ImportExportKind;name:string;}interface ModuleImportDescriptor{kind:ImportExportKind;module:string;name:string;}interface TableDescriptor{element:TableKind;initial:number;maximum?:number;}interface WebAssemblyInstantiatedSource{instance:Instance;module:Module;}type ImportExportKind=\"function\"|\"global\"|\"memory\"|\"table\";type TableKind=\"anyfunc\"|\"externref\";type ValueType=\"anyfunc\"|\"externref\"|\"f32\"|\"f64\"|\"i32\"|\"i64\"|\"v128\";type ExportValue=Function|Global|Memory|Table;type Exports=Record<string,ExportValue>;type ImportValue=ExportValue|number;type Imports=Record<string,ModuleImports>;type ModuleImports=Record<string,ImportValue>;function compile(bytes:BufferSource):Promise<Module>;function compileStreaming(source:Response|PromiseLike<Response>):Promise<Module>;function instantiate(bytes:BufferSource,importObject?:Imports):Promise<WebAssemblyInstantiatedSource>;function instantiate(moduleObject:Module,importObject?:Imports):Promise<Instance>;function instantiateStreaming(source:Response|PromiseLike<Response>,importObject?:Imports):Promise<WebAssemblyInstantiatedSource>;function validate(bytes:BufferSource):boolean;}interface BlobCallback{(blob:Blob|null):void;}interface CustomElementConstructor{new(...params:any[]):HTMLElement;}interface DecodeErrorCallback{(error:DOMException):void;}interface DecodeSuccessCallback{(decodedData:AudioBuffer):void;}interface ErrorCallback{(err:DOMException):void;}interface FileCallback{(file:File):void;}interface FileSystemEntriesCallback{(entries:FileSystemEntry[]):void;}interface FileSystemEntryCallback{(entry:FileSystemEntry):void;}interface FrameRequestCallback{(time:DOMHighResTimeStamp):void;}interface FunctionStringCallback{(data:string):void;}interface IdleRequestCallback{(deadline:IdleDeadline):void;}interface IntersectionObserverCallback{(entries:IntersectionObserverEntry[],observer:IntersectionObserver):void;}interface LockGrantedCallback{(lock:Lock|null):any;}interface MediaSessionActionHandler{(details:MediaSessionActionDetails):void;}interface MutationCallback{(mutations:MutationRecord[],observer:MutationObserver):void;}interface NotificationPermissionCallback{(permission:NotificationPermission):void;}interface OnBeforeUnloadEventHandlerNonNull{(event:Event):string|null;}interface OnErrorEventHandlerNonNull{(event:Event|string,source?:string,lineno?:number,colno?:number,error?:Error):any;}interface PerformanceObserverCallback{(entries:PerformanceObserverEntryList,observer:PerformanceObserver):void;}interface PositionCallback{(position:GeolocationPosition):void;}interface PositionErrorCallback{(positionError:GeolocationPositionError):void;}interface QueuingStrategySize<T=any>{(chunk:T):number;}interface RTCPeerConnectionErrorCallback{(error:DOMException):void;}interface RTCSessionDescriptionCallback{(description:RTCSessionDescriptionInit):void;}interface RemotePlaybackAvailabilityCallback{(available:boolean):void;}interface ResizeObserverCallback{(entries:ResizeObserverEntry[],observer:ResizeObserver):void;}interface TransformerFlushCallback<O>{(controller:TransformStreamDefaultController<O>):void|PromiseLike<void>;}interface TransformerStartCallback<O>{(controller:TransformStreamDefaultController<O>):any;}interface TransformerTransformCallback<I,O>{(chunk:I,controller:TransformStreamDefaultController<O>):void|PromiseLike<void>;}interface UnderlyingSinkAbortCallback{(reason?:any):void|PromiseLike<void>;}interface UnderlyingSinkCloseCallback{():void|PromiseLike<void>;}interface UnderlyingSinkStartCallback{(controller:WritableStreamDefaultController):any;}interface UnderlyingSinkWriteCallback<W>{(chunk:W,controller:WritableStreamDefaultController):void|PromiseLike<void>;}interface UnderlyingSourceCancelCallback{(reason?:any):void|PromiseLike<void>;}interface UnderlyingSourcePullCallback<R>{(controller:ReadableStreamController<R>):void|PromiseLike<void>;}interface UnderlyingSourceStartCallback<R>{(controller:ReadableStreamController<R>):any;}interface VideoFrameRequestCallback{(now:DOMHighResTimeStamp,metadata:VideoFrameMetadata):void;}interface VoidFunction{():void;}interface HTMLElementTagNameMap{\"a\":HTMLAnchorElement;\"abbr\":HTMLElement;\"address\":HTMLElement;\"area\":HTMLAreaElement;\"article\":HTMLElement;\"aside\":HTMLElement;\"audio\":HTMLAudioElement;\"b\":HTMLElement;\"base\":HTMLBaseElement;\"bdi\":HTMLElement;\"bdo\":HTMLElement;\"blockquote\":HTMLQuoteElement;\"body\":HTMLBodyElement;\"br\":HTMLBRElement;\"button\":HTMLButtonElement;\"canvas\":HTMLCanvasElement;\"caption\":HTMLTableCaptionElement;\"cite\":HTMLElement;\"code\":HTMLElement;\"col\":HTMLTableColElement;\"colgroup\":HTMLTableColElement;\"data\":HTMLDataElement;\"datalist\":HTMLDataListElement;\"dd\":HTMLElement;\"del\":HTMLModElement;\"details\":HTMLDetailsElement;\"dfn\":HTMLElement;\"dialog\":HTMLDialogElement;\"dir\":HTMLDirectoryElement;\"div\":HTMLDivElement;\"dl\":HTMLDListElement;\"dt\":HTMLElement;\"em\":HTMLElement;\"embed\":HTMLEmbedElement;\"fieldset\":HTMLFieldSetElement;\"figcaption\":HTMLElement;\"figure\":HTMLElement;\"font\":HTMLFontElement;\"footer\":HTMLElement;\"form\":HTMLFormElement;\"frame\":HTMLFrameElement;\"frameset\":HTMLFrameSetElement;\"h1\":HTMLHeadingElement;\"h2\":HTMLHeadingElement;\"h3\":HTMLHeadingElement;\"h4\":HTMLHeadingElement;\"h5\":HTMLHeadingElement;\"h6\":HTMLHeadingElement;\"head\":HTMLHeadElement;\"header\":HTMLElement;\"hgroup\":HTMLElement;\"hr\":HTMLHRElement;\"html\":HTMLHtmlElement;\"i\":HTMLElement;\"iframe\":HTMLIFrameElement;\"img\":HTMLImageElement;\"input\":HTMLInputElement;\"ins\":HTMLModElement;\"kbd\":HTMLElement;\"label\":HTMLLabelElement;\"legend\":HTMLLegendElement;\"li\":HTMLLIElement;\"link\":HTMLLinkElement;\"main\":HTMLElement;\"map\":HTMLMapElement;\"mark\":HTMLElement;\"marquee\":HTMLMarqueeElement;\"menu\":HTMLMenuElement;\"meta\":HTMLMetaElement;\"meter\":HTMLMeterElement;\"nav\":HTMLElement;\"noscript\":HTMLElement;\"object\":HTMLObjectElement;\"ol\":HTMLOListElement;\"optgroup\":HTMLOptGroupElement;\"option\":HTMLOptionElement;\"output\":HTMLOutputElement;\"p\":HTMLParagraphElement;\"param\":HTMLParamElement;\"picture\":HTMLPictureElement;\"pre\":HTMLPreElement;\"progress\":HTMLProgressElement;\"q\":HTMLQuoteElement;\"rp\":HTMLElement;\"rt\":HTMLElement;\"ruby\":HTMLElement;\"s\":HTMLElement;\"samp\":HTMLElement;\"script\":HTMLScriptElement;\"section\":HTMLElement;\"select\":HTMLSelectElement;\"slot\":HTMLSlotElement;\"small\":HTMLElement;\"source\":HTMLSourceElement;\"span\":HTMLSpanElement;\"strong\":HTMLElement;\"style\":HTMLStyleElement;\"sub\":HTMLElement;\"summary\":HTMLElement;\"sup\":HTMLElement;\"table\":HTMLTableElement;\"tbody\":HTMLTableSectionElement;\"td\":HTMLTableCellElement;\"template\":HTMLTemplateElement;\"textarea\":HTMLTextAreaElement;\"tfoot\":HTMLTableSectionElement;\"th\":HTMLTableCellElement;\"thead\":HTMLTableSectionElement;\"time\":HTMLTimeElement;\"title\":HTMLTitleElement;\"tr\":HTMLTableRowElement;\"track\":HTMLTrackElement;\"u\":HTMLElement;\"ul\":HTMLUListElement;\"var\":HTMLElement;\"video\":HTMLVideoElement;\"wbr\":HTMLElement;}interface HTMLElementDeprecatedTagNameMap{\"listing\":HTMLPreElement;\"xmp\":HTMLPreElement;}interface SVGElementTagNameMap{\"a\":SVGAElement;\"animate\":SVGAnimateElement;\"animateMotion\":SVGAnimateMotionElement;\"animateTransform\":SVGAnimateTransformElement;\"circle\":SVGCircleElement;\"clipPath\":SVGClipPathElement;\"defs\":SVGDefsElement;\"desc\":SVGDescElement;\"ellipse\":SVGEllipseElement;\"feBlend\":SVGFEBlendElement;\"feColorMatrix\":SVGFEColorMatrixElement;\"feComponentTransfer\":SVGFEComponentTransferElement;\"feComposite\":SVGFECompositeElement;\"feConvolveMatrix\":SVGFEConvolveMatrixElement;\"feDiffuseLighting\":SVGFEDiffuseLightingElement;\"feDisplacementMap\":SVGFEDisplacementMapElement;\"feDistantLight\":SVGFEDistantLightElement;\"feDropShadow\":SVGFEDropShadowElement;\"feFlood\":SVGFEFloodElement;\"feFuncA\":SVGFEFuncAElement;\"feFuncB\":SVGFEFuncBElement;\"feFuncG\":SVGFEFuncGElement;\"feFuncR\":SVGFEFuncRElement;\"feGaussianBlur\":SVGFEGaussianBlurElement;\"feImage\":SVGFEImageElement;\"feMerge\":SVGFEMergeElement;\"feMergeNode\":SVGFEMergeNodeElement;\"feMorphology\":SVGFEMorphologyElement;\"feOffset\":SVGFEOffsetElement;\"fePointLight\":SVGFEPointLightElement;\"feSpecularLighting\":SVGFESpecularLightingElement;\"feSpotLight\":SVGFESpotLightElement;\"feTile\":SVGFETileElement;\"feTurbulence\":SVGFETurbulenceElement;\"filter\":SVGFilterElement;\"foreignObject\":SVGForeignObjectElement;\"g\":SVGGElement;\"image\":SVGImageElement;\"line\":SVGLineElement;\"linearGradient\":SVGLinearGradientElement;\"marker\":SVGMarkerElement;\"mask\":SVGMaskElement;\"metadata\":SVGMetadataElement;\"mpath\":SVGMPathElement;\"path\":SVGPathElement;\"pattern\":SVGPatternElement;\"polygon\":SVGPolygonElement;\"polyline\":SVGPolylineElement;\"radialGradient\":SVGRadialGradientElement;\"rect\":SVGRectElement;\"script\":SVGScriptElement;\"set\":SVGSetElement;\"stop\":SVGStopElement;\"style\":SVGStyleElement;\"svg\":SVGSVGElement;\"switch\":SVGSwitchElement;\"symbol\":SVGSymbolElement;\"text\":SVGTextElement;\"textPath\":SVGTextPathElement;\"title\":SVGTitleElement;\"tspan\":SVGTSpanElement;\"use\":SVGUseElement;\"view\":SVGViewElement;}type ElementTagNameMap=HTMLElementTagNameMap&Pick<SVGElementTagNameMap,Exclude<keyof SVGElementTagNameMap,keyof HTMLElementTagNameMap>>;declare var Audio:{new(src?:string):HTMLAudioElement;};declare var Image:{new(width?:number,height?:number):HTMLImageElement;};declare var Option:{new(text?:string,value?:string,defaultSelected?:boolean,selected?:boolean):HTMLOptionElement;};declare var clientInformation:Navigator;declare var closed:boolean;declare var customElements:CustomElementRegistry;declare var devicePixelRatio:number;declare var document:Document;declare var event:Event|undefined;declare var external:External;declare var frameElement:Element|null;declare var frames:WindowProxy;declare var history:History;declare var innerHeight:number;declare var innerWidth:number;declare var length:number;declare var location:Location;declare var locationbar:BarProp;declare var menubar:BarProp;declare const name:void;declare var navigator:Navigator;declare var ondevicemotion:((this:Window,ev:DeviceMotionEvent)=>any)|null;declare var ondeviceorientation:((this:Window,ev:DeviceOrientationEvent)=>any)|null;declare var onorientationchange:((this:Window,ev:Event)=>any)|null;declare var opener:any;declare var orientation:number;declare var outerHeight:number;declare var outerWidth:number;declare var pageXOffset:number;declare var pageYOffset:number;declare var parent:WindowProxy;declare var personalbar:BarProp;declare var screen:Screen;declare var screenLeft:number;declare var screenTop:number;declare var screenX:number;declare var screenY:number;declare var scrollX:number;declare var scrollY:number;declare var scrollbars:BarProp;declare var self:Window&typeof globalThis;declare var speechSynthesis:SpeechSynthesis;declare var status:string;declare var statusbar:BarProp;declare var toolbar:BarProp;declare var top:WindowProxy|null;declare var visualViewport:VisualViewport;declare var window:Window&typeof globalThis;declare function alert(message?:any):void;declare function blur():void;declare function cancelIdleCallback(handle:number):void;declare function captureEvents():void;declare function close():void;declare function confirm(message?:string):boolean;declare function focus():void;declare function getComputedStyle(elt:Element,pseudoElt?:string|null):CSSStyleDeclaration;declare function getSelection():Selection|null;declare function matchMedia(query:string):MediaQueryList;declare function moveBy(x:number,y:number):void;declare function moveTo(x:number,y:number):void;declare function open(url?:string|URL,target?:string,features?:string):WindowProxy|null;declare function postMessage(message:any,targetOrigin:string,transfer?:Transferable[]):void;declare function postMessage(message:any,options?:WindowPostMessageOptions):void;declare function print():void;declare function prompt(message?:string,_default?:string):string|null;declare function releaseEvents():void;declare function requestIdleCallback(callback:IdleRequestCallback,options?:IdleRequestOptions):number;declare function resizeBy(x:number,y:number):void;declare function resizeTo(width:number,height:number):void;declare function scroll(options?:ScrollToOptions):void;declare function scroll(x:number,y:number):void;declare function scrollBy(options?:ScrollToOptions):void;declare function scrollBy(x:number,y:number):void;declare function scrollTo(options?:ScrollToOptions):void;declare function scrollTo(x:number,y:number):void;declare function stop():void;declare function toString():string;declare function dispatchEvent(event:Event):boolean;declare function cancelAnimationFrame(handle:number):void;declare function requestAnimationFrame(callback:FrameRequestCallback):number;declare var onabort:((this:Window,ev:UIEvent)=>any)|null;declare var onanimationcancel:((this:Window,ev:AnimationEvent)=>any)|null;declare var onanimationend:((this:Window,ev:AnimationEvent)=>any)|null;declare var onanimationiteration:((this:Window,ev:AnimationEvent)=>any)|null;declare var onanimationstart:((this:Window,ev:AnimationEvent)=>any)|null;declare var onauxclick:((this:Window,ev:MouseEvent)=>any)|null;declare var onblur:((this:Window,ev:FocusEvent)=>any)|null;declare var oncanplay:((this:Window,ev:Event)=>any)|null;declare var oncanplaythrough:((this:Window,ev:Event)=>any)|null;declare var onchange:((this:Window,ev:Event)=>any)|null;declare var onclick:((this:Window,ev:MouseEvent)=>any)|null;declare var onclose:((this:Window,ev:Event)=>any)|null;declare var oncontextmenu:((this:Window,ev:MouseEvent)=>any)|null;declare var oncuechange:((this:Window,ev:Event)=>any)|null;declare var ondblclick:((this:Window,ev:MouseEvent)=>any)|null;declare var ondrag:((this:Window,ev:DragEvent)=>any)|null;declare var ondragend:((this:Window,ev:DragEvent)=>any)|null;declare var ondragenter:((this:Window,ev:DragEvent)=>any)|null;declare var ondragleave:((this:Window,ev:DragEvent)=>any)|null;declare var ondragover:((this:Window,ev:DragEvent)=>any)|null;declare var ondragstart:((this:Window,ev:DragEvent)=>any)|null;declare var ondrop:((this:Window,ev:DragEvent)=>any)|null;declare var ondurationchange:((this:Window,ev:Event)=>any)|null;declare var onemptied:((this:Window,ev:Event)=>any)|null;declare var onended:((this:Window,ev:Event)=>any)|null;declare var onerror:OnErrorEventHandler;declare var onfocus:((this:Window,ev:FocusEvent)=>any)|null;declare var onformdata:((this:Window,ev:FormDataEvent)=>any)|null;declare var ongotpointercapture:((this:Window,ev:PointerEvent)=>any)|null;declare var oninput:((this:Window,ev:Event)=>any)|null;declare var oninvalid:((this:Window,ev:Event)=>any)|null;declare var onkeydown:((this:Window,ev:KeyboardEvent)=>any)|null;declare var onkeypress:((this:Window,ev:KeyboardEvent)=>any)|null;declare var onkeyup:((this:Window,ev:KeyboardEvent)=>any)|null;declare var onload:((this:Window,ev:Event)=>any)|null;declare var onloadeddata:((this:Window,ev:Event)=>any)|null;declare var onloadedmetadata:((this:Window,ev:Event)=>any)|null;declare var onloadstart:((this:Window,ev:Event)=>any)|null;declare var onlostpointercapture:((this:Window,ev:PointerEvent)=>any)|null;declare var onmousedown:((this:Window,ev:MouseEvent)=>any)|null;declare var onmouseenter:((this:Window,ev:MouseEvent)=>any)|null;declare var onmouseleave:((this:Window,ev:MouseEvent)=>any)|null;declare var onmousemove:((this:Window,ev:MouseEvent)=>any)|null;declare var onmouseout:((this:Window,ev:MouseEvent)=>any)|null;declare var onmouseover:((this:Window,ev:MouseEvent)=>any)|null;declare var onmouseup:((this:Window,ev:MouseEvent)=>any)|null;declare var onpause:((this:Window,ev:Event)=>any)|null;declare var onplay:((this:Window,ev:Event)=>any)|null;declare var onplaying:((this:Window,ev:Event)=>any)|null;declare var onpointercancel:((this:Window,ev:PointerEvent)=>any)|null;declare var onpointerdown:((this:Window,ev:PointerEvent)=>any)|null;declare var onpointerenter:((this:Window,ev:PointerEvent)=>any)|null;declare var onpointerleave:((this:Window,ev:PointerEvent)=>any)|null;declare var onpointermove:((this:Window,ev:PointerEvent)=>any)|null;declare var onpointerout:((this:Window,ev:PointerEvent)=>any)|null;declare var onpointerover:((this:Window,ev:PointerEvent)=>any)|null;declare var onpointerup:((this:Window,ev:PointerEvent)=>any)|null;declare var onprogress:((this:Window,ev:ProgressEvent)=>any)|null;declare var onratechange:((this:Window,ev:Event)=>any)|null;declare var onreset:((this:Window,ev:Event)=>any)|null;declare var onresize:((this:Window,ev:UIEvent)=>any)|null;declare var onscroll:((this:Window,ev:Event)=>any)|null;declare var onsecuritypolicyviolation:((this:Window,ev:SecurityPolicyViolationEvent)=>any)|null;declare var onseeked:((this:Window,ev:Event)=>any)|null;declare var onseeking:((this:Window,ev:Event)=>any)|null;declare var onselect:((this:Window,ev:Event)=>any)|null;declare var onselectionchange:((this:Window,ev:Event)=>any)|null;declare var onselectstart:((this:Window,ev:Event)=>any)|null;declare var onslotchange:((this:Window,ev:Event)=>any)|null;declare var onstalled:((this:Window,ev:Event)=>any)|null;declare var onsubmit:((this:Window,ev:SubmitEvent)=>any)|null;declare var onsuspend:((this:Window,ev:Event)=>any)|null;declare var ontimeupdate:((this:Window,ev:Event)=>any)|null;declare var ontoggle:((this:Window,ev:Event)=>any)|null;declare var ontouchcancel:((this:Window,ev:TouchEvent)=>any)|null|undefined;declare var ontouchend:((this:Window,ev:TouchEvent)=>any)|null|undefined;declare var ontouchmove:((this:Window,ev:TouchEvent)=>any)|null|undefined;declare var ontouchstart:((this:Window,ev:TouchEvent)=>any)|null|undefined;declare var ontransitioncancel:((this:Window,ev:TransitionEvent)=>any)|null;declare var ontransitionend:((this:Window,ev:TransitionEvent)=>any)|null;declare var ontransitionrun:((this:Window,ev:TransitionEvent)=>any)|null;declare var ontransitionstart:((this:Window,ev:TransitionEvent)=>any)|null;declare var onvolumechange:((this:Window,ev:Event)=>any)|null;declare var onwaiting:((this:Window,ev:Event)=>any)|null;declare var onwebkitanimationend:((this:Window,ev:Event)=>any)|null;declare var onwebkitanimationiteration:((this:Window,ev:Event)=>any)|null;declare var onwebkitanimationstart:((this:Window,ev:Event)=>any)|null;declare var onwebkittransitionend:((this:Window,ev:Event)=>any)|null;declare var onwheel:((this:Window,ev:WheelEvent)=>any)|null;declare var onafterprint:((this:Window,ev:Event)=>any)|null;declare var onbeforeprint:((this:Window,ev:Event)=>any)|null;declare var onbeforeunload:((this:Window,ev:BeforeUnloadEvent)=>any)|null;declare var ongamepadconnected:((this:Window,ev:GamepadEvent)=>any)|null;declare var ongamepaddisconnected:((this:Window,ev:GamepadEvent)=>any)|null;declare var onhashchange:((this:Window,ev:HashChangeEvent)=>any)|null;declare var onlanguagechange:((this:Window,ev:Event)=>any)|null;declare var onmessage:((this:Window,ev:MessageEvent)=>any)|null;declare var onmessageerror:((this:Window,ev:MessageEvent)=>any)|null;declare var onoffline:((this:Window,ev:Event)=>any)|null;declare var ononline:((this:Window,ev:Event)=>any)|null;declare var onpagehide:((this:Window,ev:PageTransitionEvent)=>any)|null;declare var onpageshow:((this:Window,ev:PageTransitionEvent)=>any)|null;declare var onpopstate:((this:Window,ev:PopStateEvent)=>any)|null;declare var onrejectionhandled:((this:Window,ev:PromiseRejectionEvent)=>any)|null;declare var onstorage:((this:Window,ev:StorageEvent)=>any)|null;declare var onunhandledrejection:((this:Window,ev:PromiseRejectionEvent)=>any)|null;declare var onunload:((this:Window,ev:Event)=>any)|null;declare var localStorage:Storage;declare var caches:CacheStorage;declare var crossOriginIsolated:boolean;declare var crypto:Crypto;declare var indexedDB:IDBFactory;declare var isSecureContext:boolean;declare var origin:string;declare var performance:Performance;declare function atob(data:string):string;declare function btoa(data:string):string;declare function clearInterval(id?:number):void;declare function clearTimeout(id?:number):void;declare function createImageBitmap(image:ImageBitmapSource,options?:ImageBitmapOptions):Promise<ImageBitmap>;declare function createImageBitmap(image:ImageBitmapSource,sx:number,sy:number,sw:number,sh:number,options?:ImageBitmapOptions):Promise<ImageBitmap>;declare function fetch(input:RequestInfo|URL,init?:RequestInit):Promise<Response>;declare function queueMicrotask(callback:VoidFunction):void;declare function reportError(e:any):void;declare function setInterval(handler:TimerHandler,timeout?:number,...arguments:any[]):number;declare function setTimeout(handler:TimerHandler,timeout?:number,...arguments:any[]):number;declare function structuredClone(value:any,options?:StructuredSerializeOptions):any;declare var sessionStorage:Storage;declare function addEventListener<K extends keyof WindowEventMap>(type:K,listener:(this:Window,ev:WindowEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;declare function addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;declare function removeEventListener<K extends keyof WindowEventMap>(type:K,listener:(this:Window,ev:WindowEventMap[K])=>any,options?:boolean|EventListenerOptions):void;declare function removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;type AlgorithmIdentifier=Algorithm|string;type BigInteger=Uint8Array;type BinaryData=ArrayBuffer|ArrayBufferView;type BlobPart=BufferSource|Blob|string;type BodyInit=ReadableStream|XMLHttpRequestBodyInit;type BufferSource=ArrayBufferView|ArrayBuffer;type COSEAlgorithmIdentifier=number;type CSSNumberish=number;type CanvasImageSource=HTMLOrSVGImageElement|HTMLVideoElement|HTMLCanvasElement|ImageBitmap;type ClipboardItemData=Promise<string|Blob>;type ClipboardItems=ClipboardItem[];type ConstrainBoolean=boolean|ConstrainBooleanParameters;type ConstrainDOMString=string|string[]|ConstrainDOMStringParameters;type ConstrainDouble=number|ConstrainDoubleRange;type ConstrainULong=number|ConstrainULongRange;type DOMHighResTimeStamp=number;type EpochTimeStamp=number;type EventListenerOrEventListenerObject=EventListener|EventListenerObject;type Float32List=Float32Array|GLfloat[];type FormDataEntryValue=File|string;type GLbitfield=number;type GLboolean=boolean;type GLclampf=number;type GLenum=number;type GLfloat=number;type GLint=number;type GLint64=number;type GLintptr=number;type GLsizei=number;type GLsizeiptr=number;type GLuint=number;type GLuint64=number;type HTMLOrSVGImageElement=HTMLImageElement|SVGImageElement;type HTMLOrSVGScriptElement=HTMLScriptElement|SVGScriptElement;type HashAlgorithmIdentifier=AlgorithmIdentifier;type HeadersInit=string[][]|Record<string,string>|Headers;type IDBValidKey=number|string|Date|BufferSource|IDBValidKey[];type ImageBitmapSource=CanvasImageSource|Blob|ImageData;type InsertPosition=\"beforebegin\"|\"afterbegin\"|\"beforeend\"|\"afterend\";type Int32List=Int32Array|GLint[];type LineAndPositionSetting=number|AutoKeyword;type MediaProvider=MediaStream|MediaSource|Blob;type MessageEventSource=WindowProxy|MessagePort|ServiceWorker;type MutationRecordType=\"attributes\"|\"characterData\"|\"childList\";type NamedCurve=string;type OnBeforeUnloadEventHandler=OnBeforeUnloadEventHandlerNonNull|null;type OnErrorEventHandler=OnErrorEventHandlerNonNull|null;type PerformanceEntryList=PerformanceEntry[];type ReadableStreamController<T>=ReadableStreamDefaultController<T>;type ReadableStreamDefaultReadResult<T>=ReadableStreamDefaultReadValueResult<T>|ReadableStreamDefaultReadDoneResult;type ReadableStreamReader<T>=ReadableStreamDefaultReader<T>;type RenderingContext=CanvasRenderingContext2D|ImageBitmapRenderingContext|WebGLRenderingContext|WebGL2RenderingContext;type RequestInfo=Request|string;type TexImageSource=ImageBitmap|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement;type TimerHandler=string|Function;type Transferable=ArrayBuffer|MessagePort|ImageBitmap;type Uint32List=Uint32Array|GLuint[];type UvmEntries=UvmEntry[];type UvmEntry=number[];type VibratePattern=number|number[];type WindowProxy=Window;type XMLHttpRequestBodyInit=Blob|BufferSource|FormData|URLSearchParams|string;type AlignSetting=\"center\"|\"end\"|\"left\"|\"right\"|\"start\";type AnimationPlayState=\"finished\"|\"idle\"|\"paused\"|\"running\";type AnimationReplaceState=\"active\"|\"persisted\"|\"removed\";type AppendMode=\"segments\"|\"sequence\";type AttestationConveyancePreference=\"direct\"|\"enterprise\"|\"indirect\"|\"none\";type AudioContextLatencyCategory=\"balanced\"|\"interactive\"|\"playback\";type AudioContextState=\"closed\"|\"running\"|\"suspended\";type AuthenticatorAttachment=\"cross-platform\"|\"platform\";type AuthenticatorTransport=\"ble\"|\"internal\"|\"nfc\"|\"usb\";type AutoKeyword=\"auto\";type AutomationRate=\"a-rate\"|\"k-rate\";type BinaryType=\"arraybuffer\"|\"blob\";type BiquadFilterType=\"allpass\"|\"bandpass\"|\"highpass\"|\"highshelf\"|\"lowpass\"|\"lowshelf\"|\"notch\"|\"peaking\";type CanPlayTypeResult=\"\"|\"maybe\"|\"probably\";type CanvasDirection=\"inherit\"|\"ltr\"|\"rtl\";type CanvasFillRule=\"evenodd\"|\"nonzero\";type CanvasFontKerning=\"auto\"|\"none\"|\"normal\";type CanvasFontStretch=\"condensed\"|\"expanded\"|\"extra-condensed\"|\"extra-expanded\"|\"normal\"|\"semi-condensed\"|\"semi-expanded\"|\"ultra-condensed\"|\"ultra-expanded\";type CanvasFontVariantCaps=\"all-petite-caps\"|\"all-small-caps\"|\"normal\"|\"petite-caps\"|\"small-caps\"|\"titling-caps\"|\"unicase\";type CanvasLineCap=\"butt\"|\"round\"|\"square\";type CanvasLineJoin=\"bevel\"|\"miter\"|\"round\";type CanvasTextAlign=\"center\"|\"end\"|\"left\"|\"right\"|\"start\";type CanvasTextBaseline=\"alphabetic\"|\"bottom\"|\"hanging\"|\"ideographic\"|\"middle\"|\"top\";type CanvasTextRendering=\"auto\"|\"geometricPrecision\"|\"optimizeLegibility\"|\"optimizeSpeed\";type ChannelCountMode=\"clamped-max\"|\"explicit\"|\"max\";type ChannelInterpretation=\"discrete\"|\"speakers\";type ClientTypes=\"all\"|\"sharedworker\"|\"window\"|\"worker\";type ColorGamut=\"p3\"|\"rec2020\"|\"srgb\";type ColorSpaceConversion=\"default\"|\"none\";type CompositeOperation=\"accumulate\"|\"add\"|\"replace\";type CompositeOperationOrAuto=\"accumulate\"|\"add\"|\"auto\"|\"replace\";type ConnectionType=\"bluetooth\"|\"cellular\"|\"ethernet\"|\"mixed\"|\"none\"|\"other\"|\"unknown\"|\"wifi\";type CredentialMediationRequirement=\"optional\"|\"required\"|\"silent\";type DOMParserSupportedType=\"application/xhtml+xml\"|\"application/xml\"|\"image/svg+xml\"|\"text/html\"|\"text/xml\";type DirectionSetting=\"\"|\"lr\"|\"rl\";type DisplayCaptureSurfaceType=\"application\"|\"browser\"|\"monitor\"|\"window\";type DistanceModelType=\"exponential\"|\"inverse\"|\"linear\";type DocumentReadyState=\"complete\"|\"interactive\"|\"loading\";type DocumentVisibilityState=\"hidden\"|\"visible\";type EndOfStreamError=\"decode\"|\"network\";type EndingType=\"native\"|\"transparent\";type FileSystemHandleKind=\"directory\"|\"file\";type FillMode=\"auto\"|\"backwards\"|\"both\"|\"forwards\"|\"none\";type FontFaceLoadStatus=\"error\"|\"loaded\"|\"loading\"|\"unloaded\";type FontFaceSetLoadStatus=\"loaded\"|\"loading\";type FullscreenNavigationUI=\"auto\"|\"hide\"|\"show\";type GamepadHapticActuatorType=\"vibration\";type GamepadMappingType=\"\"|\"standard\"|\"xr-standard\";type GlobalCompositeOperation=\"color\"|\"color-burn\"|\"color-dodge\"|\"copy\"|\"darken\"|\"destination-atop\"|\"destination-in\"|\"destination-out\"|\"destination-over\"|\"difference\"|\"exclusion\"|\"hard-light\"|\"hue\"|\"lighten\"|\"lighter\"|\"luminosity\"|\"multiply\"|\"overlay\"|\"saturation\"|\"screen\"|\"soft-light\"|\"source-atop\"|\"source-in\"|\"source-out\"|\"source-over\"|\"xor\";type HdrMetadataType=\"smpteSt2086\"|\"smpteSt2094-10\"|\"smpteSt2094-40\";type IDBCursorDirection=\"next\"|\"nextunique\"|\"prev\"|\"prevunique\";type IDBRequestReadyState=\"done\"|\"pending\";type IDBTransactionDurability=\"default\"|\"relaxed\"|\"strict\";type IDBTransactionMode=\"readonly\"|\"readwrite\"|\"versionchange\";type ImageOrientation=\"flipY\"|\"none\";type ImageSmoothingQuality=\"high\"|\"low\"|\"medium\";type IterationCompositeOperation=\"accumulate\"|\"replace\";type KeyFormat=\"jwk\"|\"pkcs8\"|\"raw\"|\"spki\";type KeyType=\"private\"|\"public\"|\"secret\";type KeyUsage=\"decrypt\"|\"deriveBits\"|\"deriveKey\"|\"encrypt\"|\"sign\"|\"unwrapKey\"|\"verify\"|\"wrapKey\";type LineAlignSetting=\"center\"|\"end\"|\"start\";type LockMode=\"exclusive\"|\"shared\";type MIDIPortConnectionState=\"closed\"|\"open\"|\"pending\";type MIDIPortDeviceState=\"connected\"|\"disconnected\";type MIDIPortType=\"input\"|\"output\";type MediaDecodingType=\"file\"|\"media-source\"|\"webrtc\";type MediaDeviceKind=\"audioinput\"|\"audiooutput\"|\"videoinput\";type MediaEncodingType=\"record\"|\"webrtc\";type MediaKeyMessageType=\"individualization-request\"|\"license-release\"|\"license-renewal\"|\"license-request\";type MediaKeySessionClosedReason=\"closed-by-application\"|\"hardware-context-reset\"|\"internal-error\"|\"release-acknowledged\"|\"resource-evicted\";type MediaKeySessionType=\"persistent-license\"|\"temporary\";type MediaKeyStatus=\"expired\"|\"internal-error\"|\"output-downscaled\"|\"output-restricted\"|\"released\"|\"status-pending\"|\"usable\"|\"usable-in-future\";type MediaKeysRequirement=\"not-allowed\"|\"optional\"|\"required\";type MediaSessionAction=\"hangup\"|\"nexttrack\"|\"pause\"|\"play\"|\"previoustrack\"|\"seekbackward\"|\"seekforward\"|\"seekto\"|\"skipad\"|\"stop\"|\"togglecamera\"|\"togglemicrophone\";type MediaSessionPlaybackState=\"none\"|\"paused\"|\"playing\";type MediaStreamTrackState=\"ended\"|\"live\";type NavigationTimingType=\"back_forward\"|\"navigate\"|\"prerender\"|\"reload\";type NotificationDirection=\"auto\"|\"ltr\"|\"rtl\";type NotificationPermission=\"default\"|\"denied\"|\"granted\";type OrientationLockType=\"any\"|\"landscape\"|\"landscape-primary\"|\"landscape-secondary\"|\"natural\"|\"portrait\"|\"portrait-primary\"|\"portrait-secondary\";type OrientationType=\"landscape-primary\"|\"landscape-secondary\"|\"portrait-primary\"|\"portrait-secondary\";type OscillatorType=\"custom\"|\"sawtooth\"|\"sine\"|\"square\"|\"triangle\";type OverSampleType=\"2x\"|\"4x\"|\"none\";type PanningModelType=\"HRTF\"|\"equalpower\";type PaymentComplete=\"fail\"|\"success\"|\"unknown\";type PermissionName=\"geolocation\"|\"notifications\"|\"persistent-storage\"|\"push\"|\"screen-wake-lock\"|\"xr-spatial-tracking\";type PermissionState=\"denied\"|\"granted\"|\"prompt\";type PlaybackDirection=\"alternate\"|\"alternate-reverse\"|\"normal\"|\"reverse\";type PositionAlignSetting=\"auto\"|\"center\"|\"line-left\"|\"line-right\";type PredefinedColorSpace=\"display-p3\"|\"srgb\";type PremultiplyAlpha=\"default\"|\"none\"|\"premultiply\";type PresentationStyle=\"attachment\"|\"inline\"|\"unspecified\";type PublicKeyCredentialType=\"public-key\";type PushEncryptionKeyName=\"auth\"|\"p256dh\";type RTCBundlePolicy=\"balanced\"|\"max-bundle\"|\"max-compat\";type RTCDataChannelState=\"closed\"|\"closing\"|\"connecting\"|\"open\";type RTCDegradationPreference=\"balanced\"|\"maintain-framerate\"|\"maintain-resolution\";type RTCDtlsTransportState=\"closed\"|\"connected\"|\"connecting\"|\"failed\"|\"new\";type RTCEncodedVideoFrameType=\"delta\"|\"empty\"|\"key\";type RTCErrorDetailType=\"data-channel-failure\"|\"dtls-failure\"|\"fingerprint-failure\"|\"hardware-encoder-error\"|\"hardware-encoder-not-available\"|\"sctp-failure\"|\"sdp-syntax-error\";type RTCIceCandidateType=\"host\"|\"prflx\"|\"relay\"|\"srflx\";type RTCIceComponent=\"rtcp\"|\"rtp\";type RTCIceConnectionState=\"checking\"|\"closed\"|\"completed\"|\"connected\"|\"disconnected\"|\"failed\"|\"new\";type RTCIceCredentialType=\"password\";type RTCIceGathererState=\"complete\"|\"gathering\"|\"new\";type RTCIceGatheringState=\"complete\"|\"gathering\"|\"new\";type RTCIceProtocol=\"tcp\"|\"udp\";type RTCIceTcpCandidateType=\"active\"|\"passive\"|\"so\";type RTCIceTransportPolicy=\"all\"|\"relay\";type RTCIceTransportState=\"checking\"|\"closed\"|\"completed\"|\"connected\"|\"disconnected\"|\"failed\"|\"new\";type RTCPeerConnectionState=\"closed\"|\"connected\"|\"connecting\"|\"disconnected\"|\"failed\"|\"new\";type RTCPriorityType=\"high\"|\"low\"|\"medium\"|\"very-low\";type RTCRtcpMuxPolicy=\"require\";type RTCRtpTransceiverDirection=\"inactive\"|\"recvonly\"|\"sendonly\"|\"sendrecv\"|\"stopped\";type RTCSctpTransportState=\"closed\"|\"connected\"|\"connecting\";type RTCSdpType=\"answer\"|\"offer\"|\"pranswer\"|\"rollback\";type RTCSignalingState=\"closed\"|\"have-local-offer\"|\"have-local-pranswer\"|\"have-remote-offer\"|\"have-remote-pranswer\"|\"stable\";type RTCStatsIceCandidatePairState=\"failed\"|\"frozen\"|\"in-progress\"|\"inprogress\"|\"succeeded\"|\"waiting\";type RTCStatsType=\"candidate-pair\"|\"certificate\"|\"codec\"|\"csrc\"|\"data-channel\"|\"inbound-rtp\"|\"local-candidate\"|\"media-source\"|\"outbound-rtp\"|\"peer-connection\"|\"remote-candidate\"|\"remote-inbound-rtp\"|\"remote-outbound-rtp\"|\"track\"|\"transport\";type ReadyState=\"closed\"|\"ended\"|\"open\";type RecordingState=\"inactive\"|\"paused\"|\"recording\";type ReferrerPolicy=\"\"|\"no-referrer\"|\"no-referrer-when-downgrade\"|\"origin\"|\"origin-when-cross-origin\"|\"same-origin\"|\"strict-origin\"|\"strict-origin-when-cross-origin\"|\"unsafe-url\";type RemotePlaybackState=\"connected\"|\"connecting\"|\"disconnected\";type RequestCache=\"default\"|\"force-cache\"|\"no-cache\"|\"no-store\"|\"only-if-cached\"|\"reload\";type RequestCredentials=\"include\"|\"omit\"|\"same-origin\";type RequestDestination=\"\"|\"audio\"|\"audioworklet\"|\"document\"|\"embed\"|\"font\"|\"frame\"|\"iframe\"|\"image\"|\"manifest\"|\"object\"|\"paintworklet\"|\"report\"|\"script\"|\"sharedworker\"|\"style\"|\"track\"|\"video\"|\"worker\"|\"xslt\";type RequestMode=\"cors\"|\"navigate\"|\"no-cors\"|\"same-origin\";type RequestRedirect=\"error\"|\"follow\"|\"manual\";type ResidentKeyRequirement=\"discouraged\"|\"preferred\"|\"required\";type ResizeObserverBoxOptions=\"border-box\"|\"content-box\"|\"device-pixel-content-box\";type ResizeQuality=\"high\"|\"low\"|\"medium\"|\"pixelated\";type ResponseType=\"basic\"|\"cors\"|\"default\"|\"error\"|\"opaque\"|\"opaqueredirect\";type ScrollBehavior=\"auto\"|\"smooth\";type ScrollLogicalPosition=\"center\"|\"end\"|\"nearest\"|\"start\";type ScrollRestoration=\"auto\"|\"manual\";type ScrollSetting=\"\"|\"up\";type SecurityPolicyViolationEventDisposition=\"enforce\"|\"report\";type SelectionMode=\"end\"|\"preserve\"|\"select\"|\"start\";type ServiceWorkerState=\"activated\"|\"activating\"|\"installed\"|\"installing\"|\"parsed\"|\"redundant\";type ServiceWorkerUpdateViaCache=\"all\"|\"imports\"|\"none\";type ShadowRootMode=\"closed\"|\"open\";type SlotAssignmentMode=\"manual\"|\"named\";type SpeechSynthesisErrorCode=\"audio-busy\"|\"audio-hardware\"|\"canceled\"|\"interrupted\"|\"invalid-argument\"|\"language-unavailable\"|\"network\"|\"not-allowed\"|\"synthesis-failed\"|\"synthesis-unavailable\"|\"text-too-long\"|\"voice-unavailable\";type TextTrackKind=\"captions\"|\"chapters\"|\"descriptions\"|\"metadata\"|\"subtitles\";type TextTrackMode=\"disabled\"|\"hidden\"|\"showing\";type TouchType=\"direct\"|\"stylus\";type TransferFunction=\"hlg\"|\"pq\"|\"srgb\";type UserVerificationRequirement=\"discouraged\"|\"preferred\"|\"required\";type VideoColorPrimaries=\"bt470bg\"|\"bt709\"|\"smpte170m\";type VideoFacingModeEnum=\"environment\"|\"left\"|\"right\"|\"user\";type VideoMatrixCoefficients=\"bt470bg\"|\"bt709\"|\"rgb\"|\"smpte170m\";type VideoTransferCharacteristics=\"bt709\"|\"iec61966-2-1\"|\"smpte170m\";type WebGLPowerPreference=\"default\"|\"high-performance\"|\"low-power\";type WorkerType=\"classic\"|\"module\";type XMLHttpRequestResponseType=\"\"|\"arraybuffer\"|\"blob\"|\"document\"|\"json\"|\"text\";`\n    }, {\n        fileName: \"lib.dom.iterable.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface AudioParam{setValueCurveAtTime(values:Iterable<number>,startTime:number,duration:number):AudioParam;}interface AudioParamMap extends ReadonlyMap<string,AudioParam>{}interface BaseAudioContext{createIIRFilter(feedforward:Iterable<number>,feedback:Iterable<number>):IIRFilterNode;createPeriodicWave(real:Iterable<number>,imag:Iterable<number>,constraints?:PeriodicWaveConstraints):PeriodicWave;}interface CSSRuleList{[Symbol.iterator]():IterableIterator<CSSRule>;}interface CSSStyleDeclaration{[Symbol.iterator]():IterableIterator<string>;}interface Cache{addAll(requests:Iterable<RequestInfo>):Promise<void>;}interface CanvasPathDrawingStyles{setLineDash(segments:Iterable<number>):void;}interface DOMRectList{[Symbol.iterator]():IterableIterator<DOMRect>;}interface DOMStringList{[Symbol.iterator]():IterableIterator<string>;}interface DOMTokenList{[Symbol.iterator]():IterableIterator<string>;entries():IterableIterator<[number,string]>;keys():IterableIterator<number>;values():IterableIterator<string>;}interface DataTransferItemList{[Symbol.iterator]():IterableIterator<DataTransferItem>;}interface EventCounts extends ReadonlyMap<string,number>{}interface FileList{[Symbol.iterator]():IterableIterator<File>;}interface FontFaceSet extends Set<FontFace>{}interface FormData{[Symbol.iterator]():IterableIterator<[string,FormDataEntryValue]>;entries():IterableIterator<[string,FormDataEntryValue]>;keys():IterableIterator<string>;values():IterableIterator<FormDataEntryValue>;}interface HTMLAllCollection{[Symbol.iterator]():IterableIterator<Element>;}interface HTMLCollectionBase{[Symbol.iterator]():IterableIterator<Element>;}interface HTMLCollectionOf<T extends Element>{[Symbol.iterator]():IterableIterator<T>;}interface HTMLFormElement{[Symbol.iterator]():IterableIterator<Element>;}interface HTMLSelectElement{[Symbol.iterator]():IterableIterator<HTMLOptionElement>;}interface Headers{[Symbol.iterator]():IterableIterator<[string,string]>;entries():IterableIterator<[string,string]>;keys():IterableIterator<string>;values():IterableIterator<string>;}interface IDBDatabase{transaction(storeNames:string|Iterable<string>,mode?:IDBTransactionMode):IDBTransaction;}interface IDBObjectStore{createIndex(name:string,keyPath:string|Iterable<string>,options?:IDBIndexParameters):IDBIndex;}interface MIDIInputMap extends ReadonlyMap<string,MIDIInput>{}interface MIDIOutput{send(data:Iterable<number>,timestamp?:DOMHighResTimeStamp):void;}interface MIDIOutputMap extends ReadonlyMap<string,MIDIOutput>{}interface MediaKeyStatusMap{[Symbol.iterator]():IterableIterator<[BufferSource,MediaKeyStatus]>;entries():IterableIterator<[BufferSource,MediaKeyStatus]>;keys():IterableIterator<BufferSource>;values():IterableIterator<MediaKeyStatus>;}interface MediaList{[Symbol.iterator]():IterableIterator<string>;}interface MessageEvent<T=any>{initMessageEvent(type:string,bubbles?:boolean,cancelable?:boolean,data?:any,origin?:string,lastEventId?:string,source?:MessageEventSource|null,ports?:Iterable<MessagePort>):void;}interface MimeTypeArray{[Symbol.iterator]():IterableIterator<MimeType>;}interface NamedNodeMap{[Symbol.iterator]():IterableIterator<Attr>;}interface Navigator{requestMediaKeySystemAccess(keySystem:string,supportedConfigurations:Iterable<MediaKeySystemConfiguration>):Promise<MediaKeySystemAccess>;vibrate(pattern:Iterable<number>):boolean;}interface NodeList{[Symbol.iterator]():IterableIterator<Node>;entries():IterableIterator<[number,Node]>;keys():IterableIterator<number>;values():IterableIterator<Node>;}interface NodeListOf<TNode extends Node>{[Symbol.iterator]():IterableIterator<TNode>;entries():IterableIterator<[number,TNode]>;keys():IterableIterator<number>;values():IterableIterator<TNode>;}interface Plugin{[Symbol.iterator]():IterableIterator<MimeType>;}interface PluginArray{[Symbol.iterator]():IterableIterator<Plugin>;}interface RTCRtpTransceiver{setCodecPreferences(codecs:Iterable<RTCRtpCodecCapability>):void;}interface RTCStatsReport extends ReadonlyMap<string,any>{}interface SVGLengthList{[Symbol.iterator]():IterableIterator<SVGLength>;}interface SVGNumberList{[Symbol.iterator]():IterableIterator<SVGNumber>;}interface SVGPointList{[Symbol.iterator]():IterableIterator<DOMPoint>;}interface SVGStringList{[Symbol.iterator]():IterableIterator<string>;}interface SVGTransformList{[Symbol.iterator]():IterableIterator<SVGTransform>;}interface SourceBufferList{[Symbol.iterator]():IterableIterator<SourceBuffer>;}interface SpeechRecognitionResult{[Symbol.iterator]():IterableIterator<SpeechRecognitionAlternative>;}interface SpeechRecognitionResultList{[Symbol.iterator]():IterableIterator<SpeechRecognitionResult>;}interface StyleSheetList{[Symbol.iterator]():IterableIterator<CSSStyleSheet>;}interface SubtleCrypto{deriveKey(algorithm:AlgorithmIdentifier|EcdhKeyDeriveParams|HkdfParams|Pbkdf2Params,baseKey:CryptoKey,derivedKeyType:AlgorithmIdentifier|AesDerivedKeyParams|HmacImportParams|HkdfParams|Pbkdf2Params,extractable:boolean,keyUsages:Iterable<KeyUsage>):Promise<CryptoKey>;generateKey(algorithm:RsaHashedKeyGenParams|EcKeyGenParams,extractable:boolean,keyUsages:ReadonlyArray<KeyUsage>):Promise<CryptoKeyPair>;generateKey(algorithm:AesKeyGenParams|HmacKeyGenParams|Pbkdf2Params,extractable:boolean,keyUsages:ReadonlyArray<KeyUsage>):Promise<CryptoKey>;generateKey(algorithm:AlgorithmIdentifier,extractable:boolean,keyUsages:Iterable<KeyUsage>):Promise<CryptoKeyPair|CryptoKey>;importKey(format:\"jwk\",keyData:JsonWebKey,algorithm:AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm,extractable:boolean,keyUsages:ReadonlyArray<KeyUsage>):Promise<CryptoKey>;importKey(format:Exclude<KeyFormat,\"jwk\">,keyData:BufferSource,algorithm:AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm,extractable:boolean,keyUsages:Iterable<KeyUsage>):Promise<CryptoKey>;unwrapKey(format:KeyFormat,wrappedKey:BufferSource,unwrappingKey:CryptoKey,unwrapAlgorithm:AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams,unwrappedKeyAlgorithm:AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm,extractable:boolean,keyUsages:Iterable<KeyUsage>):Promise<CryptoKey>;}interface TextTrackCueList{[Symbol.iterator]():IterableIterator<TextTrackCue>;}interface TextTrackList{[Symbol.iterator]():IterableIterator<TextTrack>;}interface TouchList{[Symbol.iterator]():IterableIterator<Touch>;}interface URLSearchParams{[Symbol.iterator]():IterableIterator<[string,string]>;entries():IterableIterator<[string,string]>;keys():IterableIterator<string>;values():IterableIterator<string>;}interface WEBGL_draw_buffers{drawBuffersWEBGL(buffers:Iterable<GLenum>):void;}interface WEBGL_multi_draw{multiDrawArraysInstancedWEBGL(mode:GLenum,firstsList:Int32Array|Iterable<GLint>,firstsOffset:GLuint,countsList:Int32Array|Iterable<GLsizei>,countsOffset:GLuint,instanceCountsList:Int32Array|Iterable<GLsizei>,instanceCountsOffset:GLuint,drawcount:GLsizei):void;multiDrawArraysWEBGL(mode:GLenum,firstsList:Int32Array|Iterable<GLint>,firstsOffset:GLuint,countsList:Int32Array|Iterable<GLsizei>,countsOffset:GLuint,drawcount:GLsizei):void;multiDrawElementsInstancedWEBGL(mode:GLenum,countsList:Int32Array|Iterable<GLint>,countsOffset:GLuint,type:GLenum,offsetsList:Int32Array|Iterable<GLsizei>,offsetsOffset:GLuint,instanceCountsList:Int32Array|Iterable<GLsizei>,instanceCountsOffset:GLuint,drawcount:GLsizei):void;multiDrawElementsWEBGL(mode:GLenum,countsList:Int32Array|Iterable<GLint>,countsOffset:GLuint,type:GLenum,offsetsList:Int32Array|Iterable<GLsizei>,offsetsOffset:GLuint,drawcount:GLsizei):void;}interface WebGL2RenderingContextBase{clearBufferfv(buffer:GLenum,drawbuffer:GLint,values:Iterable<GLfloat>,srcOffset?:GLuint):void;clearBufferiv(buffer:GLenum,drawbuffer:GLint,values:Iterable<GLint>,srcOffset?:GLuint):void;clearBufferuiv(buffer:GLenum,drawbuffer:GLint,values:Iterable<GLuint>,srcOffset?:GLuint):void;drawBuffers(buffers:Iterable<GLenum>):void;getActiveUniforms(program:WebGLProgram,uniformIndices:Iterable<GLuint>,pname:GLenum):any;getUniformIndices(program:WebGLProgram,uniformNames:Iterable<string>):Iterable<GLuint>|null;invalidateFramebuffer(target:GLenum,attachments:Iterable<GLenum>):void;invalidateSubFramebuffer(target:GLenum,attachments:Iterable<GLenum>,x:GLint,y:GLint,width:GLsizei,height:GLsizei):void;transformFeedbackVaryings(program:WebGLProgram,varyings:Iterable<string>,bufferMode:GLenum):void;uniform1uiv(location:WebGLUniformLocation|null,data:Iterable<GLuint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform2uiv(location:WebGLUniformLocation|null,data:Iterable<GLuint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform3uiv(location:WebGLUniformLocation|null,data:Iterable<GLuint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform4uiv(location:WebGLUniformLocation|null,data:Iterable<GLuint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix2x3fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix2x4fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix3x2fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix3x4fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix4x2fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix4x3fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;vertexAttribI4iv(index:GLuint,values:Iterable<GLint>):void;vertexAttribI4uiv(index:GLuint,values:Iterable<GLuint>):void;}interface WebGL2RenderingContextOverloads{uniform1fv(location:WebGLUniformLocation|null,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform1iv(location:WebGLUniformLocation|null,data:Iterable<GLint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform2fv(location:WebGLUniformLocation|null,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform2iv(location:WebGLUniformLocation|null,data:Iterable<GLint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform3fv(location:WebGLUniformLocation|null,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform3iv(location:WebGLUniformLocation|null,data:Iterable<GLint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform4fv(location:WebGLUniformLocation|null,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform4iv(location:WebGLUniformLocation|null,data:Iterable<GLint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix2fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix3fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix4fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;}interface WebGLRenderingContextBase{vertexAttrib1fv(index:GLuint,values:Iterable<GLfloat>):void;vertexAttrib2fv(index:GLuint,values:Iterable<GLfloat>):void;vertexAttrib3fv(index:GLuint,values:Iterable<GLfloat>):void;vertexAttrib4fv(index:GLuint,values:Iterable<GLfloat>):void;}interface WebGLRenderingContextOverloads{uniform1fv(location:WebGLUniformLocation|null,v:Iterable<GLfloat>):void;uniform1iv(location:WebGLUniformLocation|null,v:Iterable<GLint>):void;uniform2fv(location:WebGLUniformLocation|null,v:Iterable<GLfloat>):void;uniform2iv(location:WebGLUniformLocation|null,v:Iterable<GLint>):void;uniform3fv(location:WebGLUniformLocation|null,v:Iterable<GLfloat>):void;uniform3iv(location:WebGLUniformLocation|null,v:Iterable<GLint>):void;uniform4fv(location:WebGLUniformLocation|null,v:Iterable<GLfloat>):void;uniform4iv(location:WebGLUniformLocation|null,v:Iterable<GLint>):void;uniformMatrix2fv(location:WebGLUniformLocation|null,transpose:GLboolean,value:Iterable<GLfloat>):void;uniformMatrix3fv(location:WebGLUniformLocation|null,transpose:GLboolean,value:Iterable<GLfloat>):void;uniformMatrix4fv(location:WebGLUniformLocation|null,transpose:GLboolean,value:Iterable<GLfloat>):void;}`\n    }, {\n        fileName: \"lib.es2015.collection.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface Map<K,V>{clear():void;delete(key:K):boolean;forEach(callbackfn:(value:V,key:K,map:Map<K,V>)=>void,thisArg?:any):void;get(key:K):V|undefined;has(key:K):boolean;set(key:K,value:V):this;readonly size:number;}interface MapConstructor{new():Map<any,any>;new<K,V>(entries?:readonly(readonly[K,V])[]|null):Map<K,V>;readonly prototype:Map<any,any>;}declare var Map:MapConstructor;interface ReadonlyMap<K,V>{forEach(callbackfn:(value:V,key:K,map:ReadonlyMap<K,V>)=>void,thisArg?:any):void;get(key:K):V|undefined;has(key:K):boolean;readonly size:number;}interface WeakMap<K extends object,V>{delete(key:K):boolean;get(key:K):V|undefined;has(key:K):boolean;set(key:K,value:V):this;}interface WeakMapConstructor{new<K extends object=object,V=any>(entries?:readonly[K,V][]|null):WeakMap<K,V>;readonly prototype:WeakMap<object,any>;}declare var WeakMap:WeakMapConstructor;interface Set<T>{add(value:T):this;clear():void;delete(value:T):boolean;forEach(callbackfn:(value:T,value2:T,set:Set<T>)=>void,thisArg?:any):void;has(value:T):boolean;readonly size:number;}interface SetConstructor{new<T=any>(values?:readonly T[]|null):Set<T>;readonly prototype:Set<any>;}declare var Set:SetConstructor;interface ReadonlySet<T>{forEach(callbackfn:(value:T,value2:T,set:ReadonlySet<T>)=>void,thisArg?:any):void;has(value:T):boolean;readonly size:number;}interface WeakSet<T extends object>{add(value:T):this;delete(value:T):boolean;has(value:T):boolean;}interface WeakSetConstructor{new<T extends object=object>(values?:readonly T[]|null):WeakSet<T>;readonly prototype:WeakSet<object>;}declare var WeakSet:WeakSetConstructor;`\n    }, {\n        fileName: \"lib.es2015.core.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface Array<T>{find<S extends T>(predicate:(this:void,value:T,index:number,obj:T[])=>value is S,thisArg?:any):S|undefined;find(predicate:(value:T,index:number,obj:T[])=>unknown,thisArg?:any):T|undefined;findIndex(predicate:(value:T,index:number,obj:T[])=>unknown,thisArg?:any):number;fill(value:T,start?:number,end?:number):this;copyWithin(target:number,start:number,end?:number):this;}interface ArrayConstructor{from<T>(arrayLike:ArrayLike<T>):T[];from<T,U>(arrayLike:ArrayLike<T>,mapfn:(v:T,k:number)=>U,thisArg?:any):U[];of<T>(...items:T[]):T[];}interface DateConstructor{new(value:number|string|Date):Date;}interface Function{readonly name:string;}interface Math{clz32(x:number):number;imul(x:number,y:number):number;sign(x:number):number;log10(x:number):number;log2(x:number):number;log1p(x:number):number;expm1(x:number):number;cosh(x:number):number;sinh(x:number):number;tanh(x:number):number;acosh(x:number):number;asinh(x:number):number;atanh(x:number):number;hypot(...values:number[]):number;trunc(x:number):number;fround(x:number):number;cbrt(x:number):number;}interface NumberConstructor{readonly EPSILON:number;isFinite(number:unknown):boolean;isInteger(number:unknown):boolean;isNaN(number:unknown):boolean;isSafeInteger(number:unknown):boolean;readonly MAX_SAFE_INTEGER:number;readonly MIN_SAFE_INTEGER:number;parseFloat(string:string):number;parseInt(string:string,radix?:number):number;}interface ObjectConstructor{assign<T extends{},U>(target:T,source:U):T&U;assign<T extends{},U,V>(target:T,source1:U,source2:V):T&U&V;assign<T extends{},U,V,W>(target:T,source1:U,source2:V,source3:W):T&U&V&W;assign(target:object,...sources:any[]):any;getOwnPropertySymbols(o:any):symbol[];keys(o:{}):string[];is(value1:any,value2:any):boolean;setPrototypeOf(o:any,proto:object|null):any;}interface ReadonlyArray<T>{find<S extends T>(predicate:(this:void,value:T,index:number,obj:readonly T[])=>value is S,thisArg?:any):S|undefined;find(predicate:(value:T,index:number,obj:readonly T[])=>unknown,thisArg?:any):T|undefined;findIndex(predicate:(value:T,index:number,obj:readonly T[])=>unknown,thisArg?:any):number;}interface RegExp{readonly flags:string;readonly sticky:boolean;readonly unicode:boolean;}interface RegExpConstructor{new(pattern:RegExp|string,flags?:string):RegExp;(pattern:RegExp|string,flags?:string):RegExp;}interface String{codePointAt(pos:number):number|undefined;includes(searchString:string,position?:number):boolean;endsWith(searchString:string,endPosition?:number):boolean;normalize(form:\"NFC\"|\"NFD\"|\"NFKC\"|\"NFKD\"):string;normalize(form?:string):string;repeat(count:number):string;startsWith(searchString:string,position?:number):boolean;anchor(name:string):string;big():string;blink():string;bold():string;fixed():string;fontcolor(color:string):string;fontsize(size:number):string;fontsize(size:string):string;italics():string;link(url:string):string;small():string;strike():string;sub():string;sup():string;}interface StringConstructor{fromCodePoint(...codePoints:number[]):string;raw(template:{raw:readonly string[]|ArrayLike<string>},...substitutions:any[]):string;}`\n    }, {\n        fileName: \"lib.es2015.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es5\" />\\n/// <reference lib=\"es2015.core\" />\\n/// <reference lib=\"es2015.collection\" />\\n/// <reference lib=\"es2015.iterable\" />\\n/// <reference lib=\"es2015.generator\" />\\n/// <reference lib=\"es2015.promise\" />\\n/// <reference lib=\"es2015.proxy\" />\\n/// <reference lib=\"es2015.reflect\" />\\n/// <reference lib=\"es2015.symbol\" />\\n/// <reference lib=\"es2015.symbol.wellknown\" />\\n`\n    }, {\n        fileName: \"lib.es2015.generator.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2015.iterable\" />\\ninterface Generator<T=unknown,TReturn=any,TNext=unknown>extends Iterator<T,TReturn,TNext>{next(...args:[]|[TNext]):IteratorResult<T,TReturn>;return(value:TReturn):IteratorResult<T,TReturn>;throw(e:any):IteratorResult<T,TReturn>;[Symbol.iterator]():Generator<T,TReturn,TNext>;}interface GeneratorFunction{new(...args:any[]):Generator;(...args:any[]):Generator;readonly length:number;readonly name:string;readonly prototype:Generator;}interface GeneratorFunctionConstructor{new(...args:string[]):GeneratorFunction;(...args:string[]):GeneratorFunction;readonly length:number;readonly name:string;readonly prototype:GeneratorFunction;}`\n    }, {\n        fileName: \"lib.es2015.iterable.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2015.symbol\" />\\ninterface SymbolConstructor{readonly iterator:unique symbol;}interface IteratorYieldResult<TYield>{done?:false;value:TYield;}interface IteratorReturnResult<TReturn>{done:true;value:TReturn;}type IteratorResult<T,TReturn=any>=IteratorYieldResult<T>|IteratorReturnResult<TReturn>;interface Iterator<T,TReturn=any,TNext=undefined>{next(...args:[]|[TNext]):IteratorResult<T,TReturn>;return?(value?:TReturn):IteratorResult<T,TReturn>;throw?(e?:any):IteratorResult<T,TReturn>;}interface Iterable<T>{[Symbol.iterator]():Iterator<T>;}interface IterableIterator<T>extends Iterator<T>{[Symbol.iterator]():IterableIterator<T>;}interface Array<T>{[Symbol.iterator]():IterableIterator<T>;entries():IterableIterator<[number,T]>;keys():IterableIterator<number>;values():IterableIterator<T>;}interface ArrayConstructor{from<T>(iterable:Iterable<T>|ArrayLike<T>):T[];from<T,U>(iterable:Iterable<T>|ArrayLike<T>,mapfn:(v:T,k:number)=>U,thisArg?:any):U[];}interface ReadonlyArray<T>{[Symbol.iterator]():IterableIterator<T>;entries():IterableIterator<[number,T]>;keys():IterableIterator<number>;values():IterableIterator<T>;}interface IArguments{[Symbol.iterator]():IterableIterator<any>;}interface Map<K,V>{[Symbol.iterator]():IterableIterator<[K,V]>;entries():IterableIterator<[K,V]>;keys():IterableIterator<K>;values():IterableIterator<V>;}interface ReadonlyMap<K,V>{[Symbol.iterator]():IterableIterator<[K,V]>;entries():IterableIterator<[K,V]>;keys():IterableIterator<K>;values():IterableIterator<V>;}interface MapConstructor{new():Map<any,any>;new<K,V>(iterable?:Iterable<readonly[K,V]>|null):Map<K,V>;}interface WeakMap<K extends object,V>{}interface WeakMapConstructor{new<K extends object,V>(iterable:Iterable<readonly[K,V]>):WeakMap<K,V>;}interface Set<T>{[Symbol.iterator]():IterableIterator<T>;entries():IterableIterator<[T,T]>;keys():IterableIterator<T>;values():IterableIterator<T>;}interface ReadonlySet<T>{[Symbol.iterator]():IterableIterator<T>;entries():IterableIterator<[T,T]>;keys():IterableIterator<T>;values():IterableIterator<T>;}interface SetConstructor{new<T>(iterable?:Iterable<T>|null):Set<T>;}interface WeakSet<T extends object>{}interface WeakSetConstructor{new<T extends object=object>(iterable:Iterable<T>):WeakSet<T>;}interface Promise<T>{}interface PromiseConstructor{all<T>(values:Iterable<T|PromiseLike<T>>):Promise<Awaited<T>[]>;race<T>(values:Iterable<T|PromiseLike<T>>):Promise<Awaited<T>>;}interface String{[Symbol.iterator]():IterableIterator<string>;}interface Int8Array{[Symbol.iterator]():IterableIterator<number>;entries():IterableIterator<[number,number]>;keys():IterableIterator<number>;values():IterableIterator<number>;}interface Int8ArrayConstructor{new(elements:Iterable<number>):Int8Array;from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Int8Array;}interface Uint8Array{[Symbol.iterator]():IterableIterator<number>;entries():IterableIterator<[number,number]>;keys():IterableIterator<number>;values():IterableIterator<number>;}interface Uint8ArrayConstructor{new(elements:Iterable<number>):Uint8Array;from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Uint8Array;}interface Uint8ClampedArray{[Symbol.iterator]():IterableIterator<number>;entries():IterableIterator<[number,number]>;keys():IterableIterator<number>;values():IterableIterator<number>;}interface Uint8ClampedArrayConstructor{new(elements:Iterable<number>):Uint8ClampedArray;from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Uint8ClampedArray;}interface Int16Array{[Symbol.iterator]():IterableIterator<number>;entries():IterableIterator<[number,number]>;keys():IterableIterator<number>;values():IterableIterator<number>;}interface Int16ArrayConstructor{new(elements:Iterable<number>):Int16Array;from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Int16Array;}interface Uint16Array{[Symbol.iterator]():IterableIterator<number>;entries():IterableIterator<[number,number]>;keys():IterableIterator<number>;values():IterableIterator<number>;}interface Uint16ArrayConstructor{new(elements:Iterable<number>):Uint16Array;from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Uint16Array;}interface Int32Array{[Symbol.iterator]():IterableIterator<number>;entries():IterableIterator<[number,number]>;keys():IterableIterator<number>;values():IterableIterator<number>;}interface Int32ArrayConstructor{new(elements:Iterable<number>):Int32Array;from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Int32Array;}interface Uint32Array{[Symbol.iterator]():IterableIterator<number>;entries():IterableIterator<[number,number]>;keys():IterableIterator<number>;values():IterableIterator<number>;}interface Uint32ArrayConstructor{new(elements:Iterable<number>):Uint32Array;from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Uint32Array;}interface Float32Array{[Symbol.iterator]():IterableIterator<number>;entries():IterableIterator<[number,number]>;keys():IterableIterator<number>;values():IterableIterator<number>;}interface Float32ArrayConstructor{new(elements:Iterable<number>):Float32Array;from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Float32Array;}interface Float64Array{[Symbol.iterator]():IterableIterator<number>;entries():IterableIterator<[number,number]>;keys():IterableIterator<number>;values():IterableIterator<number>;}interface Float64ArrayConstructor{new(elements:Iterable<number>):Float64Array;from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Float64Array;}`\n    }, {\n        fileName: \"lib.es2015.promise.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface PromiseConstructor{readonly prototype:Promise<any>;new<T>(executor:(resolve:(value:T|PromiseLike<T>)=>void,reject:(reason?:any)=>void)=>void):Promise<T>;all<T extends readonly unknown[]|[]>(values:T):Promise<{-readonly[P in keyof T]:Awaited<T[P]>}>;race<T extends readonly unknown[]|[]>(values:T):Promise<Awaited<T[number]>>;reject<T=never>(reason?:any):Promise<T>;resolve():Promise<void>;resolve<T>(value:T|PromiseLike<T>):Promise<T>;}declare var Promise:PromiseConstructor;`\n    }, {\n        fileName: \"lib.es2015.proxy.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface ProxyHandler<T extends object>{apply?(target:T,thisArg:any,argArray:any[]):any;construct?(target:T,argArray:any[],newTarget:Function):object;defineProperty?(target:T,p:string|symbol,attributes:PropertyDescriptor):boolean;deleteProperty?(target:T,p:string|symbol):boolean;get?(target:T,p:string|symbol,receiver:any):any;getOwnPropertyDescriptor?(target:T,p:string|symbol):PropertyDescriptor|undefined;getPrototypeOf?(target:T):object|null;has?(target:T,p:string|symbol):boolean;isExtensible?(target:T):boolean;ownKeys?(target:T):ArrayLike<string|symbol>;preventExtensions?(target:T):boolean;set?(target:T,p:string|symbol,value:any,receiver:any):boolean;setPrototypeOf?(target:T,v:object|null):boolean;}interface ProxyConstructor{revocable<T extends object>(target:T,handler:ProxyHandler<T>):{proxy:T;revoke:()=>void;};new<T extends object>(target:T,handler:ProxyHandler<T>):T;}declare var Proxy:ProxyConstructor;`\n    }, {\n        fileName: \"lib.es2015.reflect.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ndeclare namespace Reflect{function apply(target:Function,thisArgument:any,argumentsList:ArrayLike<any>):any;function construct(target:Function,argumentsList:ArrayLike<any>,newTarget?:Function):any;function defineProperty(target:object,propertyKey:PropertyKey,attributes:PropertyDescriptor&ThisType<any>):boolean;function deleteProperty(target:object,propertyKey:PropertyKey):boolean;function get(target:object,propertyKey:PropertyKey,receiver?:any):any;function getOwnPropertyDescriptor(target:object,propertyKey:PropertyKey):PropertyDescriptor|undefined;function getPrototypeOf(target:object):object|null;function has(target:object,propertyKey:PropertyKey):boolean;function isExtensible(target:object):boolean;function ownKeys(target:object):(string|symbol)[];function preventExtensions(target:object):boolean;function set(target:object,propertyKey:PropertyKey,value:any,receiver?:any):boolean;function setPrototypeOf(target:object,proto:object|null):boolean;}`\n    }, {\n        fileName: \"lib.es2015.symbol.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface SymbolConstructor{readonly prototype:Symbol;(description?:string|number):symbol;for(key:string):symbol;keyFor(sym:symbol):string|undefined;}declare var Symbol:SymbolConstructor;`\n    }, {\n        fileName: \"lib.es2015.symbol.wellknown.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2015.symbol\" />\\ninterface SymbolConstructor{readonly hasInstance:unique symbol;readonly isConcatSpreadable:unique symbol;readonly match:unique symbol;readonly replace:unique symbol;readonly search:unique symbol;readonly species:unique symbol;readonly split:unique symbol;readonly toPrimitive:unique symbol;readonly toStringTag:unique symbol;readonly unscopables:unique symbol;}interface Symbol{[Symbol.toPrimitive](hint:string):symbol;readonly[Symbol.toStringTag]:string;}interface Array<T>{[Symbol.unscopables]():{copyWithin:boolean;entries:boolean;fill:boolean;find:boolean;findIndex:boolean;keys:boolean;values:boolean;};}interface Date{[Symbol.toPrimitive](hint:\"default\"):string;[Symbol.toPrimitive](hint:\"string\"):string;[Symbol.toPrimitive](hint:\"number\"):number;[Symbol.toPrimitive](hint:string):string|number;}interface Map<K,V>{readonly[Symbol.toStringTag]:string;}interface WeakMap<K extends object,V>{readonly[Symbol.toStringTag]:string;}interface Set<T>{readonly[Symbol.toStringTag]:string;}interface WeakSet<T extends object>{readonly[Symbol.toStringTag]:string;}interface JSON{readonly[Symbol.toStringTag]:string;}interface Function{[Symbol.hasInstance](value:any):boolean;}interface GeneratorFunction{readonly[Symbol.toStringTag]:string;}interface Math{readonly[Symbol.toStringTag]:string;}interface Promise<T>{readonly[Symbol.toStringTag]:string;}interface PromiseConstructor{readonly[Symbol.species]:PromiseConstructor;}interface RegExp{[Symbol.match](string:string):RegExpMatchArray|null;[Symbol.replace](string:string,replaceValue:string):string;[Symbol.replace](string:string,replacer:(substring:string,...args:any[])=>string):string;[Symbol.search](string:string):number;[Symbol.split](string:string,limit?:number):string[];}interface RegExpConstructor{readonly[Symbol.species]:RegExpConstructor;}interface String{match(matcher:{[Symbol.match](string:string):RegExpMatchArray|null;}):RegExpMatchArray|null;replace(searchValue:{[Symbol.replace](string:string,replaceValue:string):string;},replaceValue:string):string;replace(searchValue:{[Symbol.replace](string:string,replacer:(substring:string,...args:any[])=>string):string;},replacer:(substring:string,...args:any[])=>string):string;search(searcher:{[Symbol.search](string:string):number;}):number;split(splitter:{[Symbol.split](string:string,limit?:number):string[];},limit?:number):string[];}interface ArrayBuffer{readonly[Symbol.toStringTag]:string;}interface DataView{readonly[Symbol.toStringTag]:string;}interface Int8Array{readonly[Symbol.toStringTag]:\"Int8Array\";}interface Uint8Array{readonly[Symbol.toStringTag]:\"Uint8Array\";}interface Uint8ClampedArray{readonly[Symbol.toStringTag]:\"Uint8ClampedArray\";}interface Int16Array{readonly[Symbol.toStringTag]:\"Int16Array\";}interface Uint16Array{readonly[Symbol.toStringTag]:\"Uint16Array\";}interface Int32Array{readonly[Symbol.toStringTag]:\"Int32Array\";}interface Uint32Array{readonly[Symbol.toStringTag]:\"Uint32Array\";}interface Float32Array{readonly[Symbol.toStringTag]:\"Float32Array\";}interface Float64Array{readonly[Symbol.toStringTag]:\"Float64Array\";}interface ArrayConstructor{readonly[Symbol.species]:ArrayConstructor;}interface MapConstructor{readonly[Symbol.species]:MapConstructor;}interface SetConstructor{readonly[Symbol.species]:SetConstructor;}interface ArrayBufferConstructor{readonly[Symbol.species]:ArrayBufferConstructor;}`\n    }, {\n        fileName: \"lib.es2016.array.include.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface Array<T>{includes(searchElement:T,fromIndex?:number):boolean;}interface ReadonlyArray<T>{includes(searchElement:T,fromIndex?:number):boolean;}interface Int8Array{includes(searchElement:number,fromIndex?:number):boolean;}interface Uint8Array{includes(searchElement:number,fromIndex?:number):boolean;}interface Uint8ClampedArray{includes(searchElement:number,fromIndex?:number):boolean;}interface Int16Array{includes(searchElement:number,fromIndex?:number):boolean;}interface Uint16Array{includes(searchElement:number,fromIndex?:number):boolean;}interface Int32Array{includes(searchElement:number,fromIndex?:number):boolean;}interface Uint32Array{includes(searchElement:number,fromIndex?:number):boolean;}interface Float32Array{includes(searchElement:number,fromIndex?:number):boolean;}interface Float64Array{includes(searchElement:number,fromIndex?:number):boolean;}`\n    }, {\n        fileName: \"lib.es2016.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2015\" />\\n/// <reference lib=\"es2016.array.include\" />`\n    }, {\n        fileName: \"lib.es2016.full.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2016\" />\\n/// <reference lib=\"dom\" />\\n/// <reference lib=\"webworker.importscripts\" />\\n/// <reference lib=\"scripthost\" />\\n/// <reference lib=\"dom.iterable\" />`\n    }, {\n        fileName: \"lib.es2017.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2016\" />\\n/// <reference lib=\"es2017.object\" />\\n/// <reference lib=\"es2017.sharedmemory\" />\\n/// <reference lib=\"es2017.string\" />\\n/// <reference lib=\"es2017.intl\" />\\n/// <reference lib=\"es2017.typedarrays\" />\\n`\n    }, {\n        fileName: \"lib.es2017.full.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2017\" />\\n/// <reference lib=\"dom\" />\\n/// <reference lib=\"webworker.importscripts\" />\\n/// <reference lib=\"scripthost\" />\\n/// <reference lib=\"dom.iterable\" />`\n    }, {\n        fileName: \"lib.es2017.intl.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ndeclare namespace Intl{type DateTimeFormatPartTypes=\"day\"|\"dayPeriod\"|\"era\"|\"hour\"|\"literal\"|\"minute\"|\"month\"|\"second\"|\"timeZoneName\"|\"weekday\"|\"year\";interface DateTimeFormatPart{type:DateTimeFormatPartTypes;value:string;}interface DateTimeFormat{formatToParts(date?:Date|number):DateTimeFormatPart[];}}`\n    }, {\n        fileName: \"lib.es2017.object.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface ObjectConstructor{values<T>(o:{[s:string]:T}|ArrayLike<T>):T[];values(o:{}):any[];entries<T>(o:{[s:string]:T}|ArrayLike<T>):[string,T][];entries(o:{}):[string,any][];getOwnPropertyDescriptors<T>(o:T):{[P in keyof T]:TypedPropertyDescriptor<T[P]>}&{[x:string]:PropertyDescriptor};}`\n    }, {\n        fileName: \"lib.es2017.sharedmemory.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2015.symbol\" />\\n/// <reference lib=\"es2015.symbol.wellknown\" />\\ninterface SharedArrayBuffer{readonly byteLength:number;slice(begin:number,end?:number):SharedArrayBuffer;readonly[Symbol.species]:SharedArrayBuffer;readonly[Symbol.toStringTag]:\"SharedArrayBuffer\";}interface SharedArrayBufferConstructor{readonly prototype:SharedArrayBuffer;new(byteLength:number):SharedArrayBuffer;}declare var SharedArrayBuffer:SharedArrayBufferConstructor;interface ArrayBufferTypes{SharedArrayBuffer:SharedArrayBuffer;}interface Atomics{add(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;and(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;compareExchange(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,expectedValue:number,replacementValue:number):number;exchange(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;isLockFree(size:number):boolean;load(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number):number;or(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;store(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;sub(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;wait(typedArray:Int32Array,index:number,value:number,timeout?:number):\"ok\"|\"not-equal\"|\"timed-out\";notify(typedArray:Int32Array,index:number,count?:number):number;xor(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;readonly[Symbol.toStringTag]:\"Atomics\";}declare var Atomics:Atomics;`\n    }, {\n        fileName: \"lib.es2017.string.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface String{padStart(maxLength:number,fillString?:string):string;padEnd(maxLength:number,fillString?:string):string;}`\n    }, {\n        fileName: \"lib.es2017.typedarrays.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface Int8ArrayConstructor{new():Int8Array;}interface Uint8ArrayConstructor{new():Uint8Array;}interface Uint8ClampedArrayConstructor{new():Uint8ClampedArray;}interface Int16ArrayConstructor{new():Int16Array;}interface Uint16ArrayConstructor{new():Uint16Array;}interface Int32ArrayConstructor{new():Int32Array;}interface Uint32ArrayConstructor{new():Uint32Array;}interface Float32ArrayConstructor{new():Float32Array;}interface Float64ArrayConstructor{new():Float64Array;}`\n    }, {\n        fileName: \"lib.es2018.asyncgenerator.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2018.asynciterable\" />\\ninterface AsyncGenerator<T=unknown,TReturn=any,TNext=unknown>extends AsyncIterator<T,TReturn,TNext>{next(...args:[]|[TNext]):Promise<IteratorResult<T,TReturn>>;return(value:TReturn|PromiseLike<TReturn>):Promise<IteratorResult<T,TReturn>>;throw(e:any):Promise<IteratorResult<T,TReturn>>;[Symbol.asyncIterator]():AsyncGenerator<T,TReturn,TNext>;}interface AsyncGeneratorFunction{new(...args:any[]):AsyncGenerator;(...args:any[]):AsyncGenerator;readonly length:number;readonly name:string;readonly prototype:AsyncGenerator;}interface AsyncGeneratorFunctionConstructor{new(...args:string[]):AsyncGeneratorFunction;(...args:string[]):AsyncGeneratorFunction;readonly length:number;readonly name:string;readonly prototype:AsyncGeneratorFunction;}`\n    }, {\n        fileName: \"lib.es2018.asynciterable.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2015.symbol\" />\\n/// <reference lib=\"es2015.iterable\" />\\ninterface SymbolConstructor{readonly asyncIterator:unique symbol;}interface AsyncIterator<T,TReturn=any,TNext=undefined>{next(...args:[]|[TNext]):Promise<IteratorResult<T,TReturn>>;return?(value?:TReturn|PromiseLike<TReturn>):Promise<IteratorResult<T,TReturn>>;throw?(e?:any):Promise<IteratorResult<T,TReturn>>;}interface AsyncIterable<T>{[Symbol.asyncIterator]():AsyncIterator<T>;}interface AsyncIterableIterator<T>extends AsyncIterator<T>{[Symbol.asyncIterator]():AsyncIterableIterator<T>;}`\n    }, {\n        fileName: \"lib.es2018.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2017\" />\\n/// <reference lib=\"es2018.asynciterable\" />\\n/// <reference lib=\"es2018.asyncgenerator\" />\\n/// <reference lib=\"es2018.promise\" />\\n/// <reference lib=\"es2018.regexp\" />\\n/// <reference lib=\"es2018.intl\" />\\n`\n    }, {\n        fileName: \"lib.es2018.full.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2018\" />\\n/// <reference lib=\"dom\" />\\n/// <reference lib=\"webworker.importscripts\" />\\n/// <reference lib=\"scripthost\" />\\n/// <reference lib=\"dom.iterable\" />`\n    }, {\n        fileName: \"lib.es2018.intl.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ndeclare namespace Intl{type LDMLPluralRule=\"zero\"|\"one\"|\"two\"|\"few\"|\"many\"|\"other\";type PluralRuleType=\"cardinal\"|\"ordinal\";interface PluralRulesOptions{localeMatcher?:\"lookup\"|\"best fit\"|undefined;type?:PluralRuleType|undefined;minimumIntegerDigits?:number|undefined;minimumFractionDigits?:number|undefined;maximumFractionDigits?:number|undefined;minimumSignificantDigits?:number|undefined;maximumSignificantDigits?:number|undefined;}interface ResolvedPluralRulesOptions{locale:string;pluralCategories:LDMLPluralRule[];type:PluralRuleType;minimumIntegerDigits:number;minimumFractionDigits:number;maximumFractionDigits:number;minimumSignificantDigits?:number;maximumSignificantDigits?:number;}interface PluralRules{resolvedOptions():ResolvedPluralRulesOptions;select(n:number):LDMLPluralRule;}const PluralRules:{new(locales?:string|string[],options?:PluralRulesOptions):PluralRules;(locales?:string|string[],options?:PluralRulesOptions):PluralRules;supportedLocalesOf(locales:string|string[],options?:{localeMatcher?:\"lookup\"|\"best fit\"}):string[];};type ES2018NumberFormatPartType=\"literal\"|\"nan\"|\"infinity\"|\"percent\"|\"integer\"|\"group\"|\"decimal\"|\"fraction\"|\"plusSign\"|\"minusSign\"|\"percentSign\"|\"currency\"|\"code\"|\"symbol\"|\"name\";type ES2020NumberFormatPartType=\"compact\"|\"exponentInteger\"|\"exponentMinusSign\"|\"exponentSeparator\"|\"unit\"|\"unknown\";type NumberFormatPartTypes=ES2018NumberFormatPartType|ES2020NumberFormatPartType;interface NumberFormatPart{type:NumberFormatPartTypes;value:string;}interface NumberFormat{formatToParts(number?:number|bigint):NumberFormatPart[];}}`\n    }, {\n        fileName: \"lib.es2018.promise.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface Promise<T>{finally(onfinally?:(()=>void)|undefined|null):Promise<T>}`\n    }, {\n        fileName: \"lib.es2018.regexp.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface RegExpMatchArray{groups?:{[key:string]:string}}interface RegExpExecArray{groups?:{[key:string]:string}}interface RegExp{readonly dotAll:boolean;}`\n    }, {\n        fileName: \"lib.es2019.array.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ntype FlatArray<Arr,Depth extends number>={\"done\":Arr,\"recur\":Arr extends ReadonlyArray<infer InnerArr>?FlatArray<InnerArr,[-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20][Depth]>:Arr}[Depth extends-1?\"done\":\"recur\"];interface ReadonlyArray<T>{flatMap<U,This=undefined>(callback:(this:This,value:T,index:number,array:T[])=>U|ReadonlyArray<U>,thisArg?:This):U[]\\nflat<A,D extends number=1>(this:A,depth?:D):FlatArray<A,D>[]}interface Array<T>{flatMap<U,This=undefined>(callback:(this:This,value:T,index:number,array:T[])=>U|ReadonlyArray<U>,thisArg?:This):U[]\\nflat<A,D extends number=1>(this:A,depth?:D):FlatArray<A,D>[]}`\n    }, {\n        fileName: \"lib.es2019.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2018\" />\\n/// <reference lib=\"es2019.array\" />\\n/// <reference lib=\"es2019.object\" />\\n/// <reference lib=\"es2019.string\" />\\n/// <reference lib=\"es2019.symbol\" />\\n`\n    }, {\n        fileName: \"lib.es2019.full.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2019\" />\\n/// <reference lib=\"dom\" />\\n/// <reference lib=\"webworker.importscripts\" />\\n/// <reference lib=\"scripthost\" />\\n/// <reference lib=\"dom.iterable\" />\\n`\n    }, {\n        fileName: \"lib.es2019.object.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2015.iterable\" />\\ninterface ObjectConstructor{fromEntries<T=any>(entries:Iterable<readonly[PropertyKey,T]>):{[k:string]:T};fromEntries(entries:Iterable<readonly any[]>):any;}`\n    }, {\n        fileName: \"lib.es2019.string.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface String{trimEnd():string;trimStart():string;trimLeft():string;trimRight():string;}`\n    }, {\n        fileName: \"lib.es2019.symbol.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface Symbol{readonly description:string|undefined;}`\n    }, {\n        fileName: \"lib.es2020.bigint.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2020.intl\" />\\ninterface BigIntToLocaleStringOptions{localeMatcher?:string;style?:string;numberingSystem?:string;unit?:string;unitDisplay?:string;currency?:string;currencyDisplay?:string;useGrouping?:boolean;minimumIntegerDigits?:1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21;minimumFractionDigits?:0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20;maximumFractionDigits?:0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20;minimumSignificantDigits?:1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21;maximumSignificantDigits?:1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21;notation?:string;compactDisplay?:string;}interface BigInt{toString(radix?:number):string;toLocaleString(locales?:Intl.LocalesArgument,options?:BigIntToLocaleStringOptions):string;valueOf():bigint;readonly[Symbol.toStringTag]:\"BigInt\";}interface BigIntConstructor{(value:bigint|boolean|number|string):bigint;readonly prototype:BigInt;asIntN(bits:number,int:bigint):bigint;asUintN(bits:number,int:bigint):bigint;}declare var BigInt:BigIntConstructor;interface BigInt64Array{readonly BYTES_PER_ELEMENT:number;readonly buffer:ArrayBufferLike;readonly byteLength:number;readonly byteOffset:number;copyWithin(target:number,start:number,end?:number):this;entries():IterableIterator<[number,bigint]>;every(predicate:(value:bigint,index:number,array:BigInt64Array)=>boolean,thisArg?:any):boolean;fill(value:bigint,start?:number,end?:number):this;filter(predicate:(value:bigint,index:number,array:BigInt64Array)=>any,thisArg?:any):BigInt64Array;find(predicate:(value:bigint,index:number,array:BigInt64Array)=>boolean,thisArg?:any):bigint|undefined;findIndex(predicate:(value:bigint,index:number,array:BigInt64Array)=>boolean,thisArg?:any):number;forEach(callbackfn:(value:bigint,index:number,array:BigInt64Array)=>void,thisArg?:any):void;includes(searchElement:bigint,fromIndex?:number):boolean;indexOf(searchElement:bigint,fromIndex?:number):number;join(separator?:string):string;keys():IterableIterator<number>;lastIndexOf(searchElement:bigint,fromIndex?:number):number;readonly length:number;map(callbackfn:(value:bigint,index:number,array:BigInt64Array)=>bigint,thisArg?:any):BigInt64Array;reduce(callbackfn:(previousValue:bigint,currentValue:bigint,currentIndex:number,array:BigInt64Array)=>bigint):bigint;reduce<U>(callbackfn:(previousValue:U,currentValue:bigint,currentIndex:number,array:BigInt64Array)=>U,initialValue:U):U;reduceRight(callbackfn:(previousValue:bigint,currentValue:bigint,currentIndex:number,array:BigInt64Array)=>bigint):bigint;reduceRight<U>(callbackfn:(previousValue:U,currentValue:bigint,currentIndex:number,array:BigInt64Array)=>U,initialValue:U):U;reverse():this;set(array:ArrayLike<bigint>,offset?:number):void;slice(start?:number,end?:number):BigInt64Array;some(predicate:(value:bigint,index:number,array:BigInt64Array)=>boolean,thisArg?:any):boolean;sort(compareFn?:(a:bigint,b:bigint)=>number|bigint):this;subarray(begin?:number,end?:number):BigInt64Array;toLocaleString():string;toString():string;valueOf():BigInt64Array;values():IterableIterator<bigint>;[Symbol.iterator]():IterableIterator<bigint>;readonly[Symbol.toStringTag]:\"BigInt64Array\";[index:number]:bigint;}interface BigInt64ArrayConstructor{readonly prototype:BigInt64Array;new(length?:number):BigInt64Array;new(array:Iterable<bigint>):BigInt64Array;new(buffer:ArrayBufferLike,byteOffset?:number,length?:number):BigInt64Array;readonly BYTES_PER_ELEMENT:number;of(...items:bigint[]):BigInt64Array;from(arrayLike:ArrayLike<bigint>):BigInt64Array;from<U>(arrayLike:ArrayLike<U>,mapfn:(v:U,k:number)=>bigint,thisArg?:any):BigInt64Array;}declare var BigInt64Array:BigInt64ArrayConstructor;interface BigUint64Array{readonly BYTES_PER_ELEMENT:number;readonly buffer:ArrayBufferLike;readonly byteLength:number;readonly byteOffset:number;copyWithin(target:number,start:number,end?:number):this;entries():IterableIterator<[number,bigint]>;every(predicate:(value:bigint,index:number,array:BigUint64Array)=>boolean,thisArg?:any):boolean;fill(value:bigint,start?:number,end?:number):this;filter(predicate:(value:bigint,index:number,array:BigUint64Array)=>any,thisArg?:any):BigUint64Array;find(predicate:(value:bigint,index:number,array:BigUint64Array)=>boolean,thisArg?:any):bigint|undefined;findIndex(predicate:(value:bigint,index:number,array:BigUint64Array)=>boolean,thisArg?:any):number;forEach(callbackfn:(value:bigint,index:number,array:BigUint64Array)=>void,thisArg?:any):void;includes(searchElement:bigint,fromIndex?:number):boolean;indexOf(searchElement:bigint,fromIndex?:number):number;join(separator?:string):string;keys():IterableIterator<number>;lastIndexOf(searchElement:bigint,fromIndex?:number):number;readonly length:number;map(callbackfn:(value:bigint,index:number,array:BigUint64Array)=>bigint,thisArg?:any):BigUint64Array;reduce(callbackfn:(previousValue:bigint,currentValue:bigint,currentIndex:number,array:BigUint64Array)=>bigint):bigint;reduce<U>(callbackfn:(previousValue:U,currentValue:bigint,currentIndex:number,array:BigUint64Array)=>U,initialValue:U):U;reduceRight(callbackfn:(previousValue:bigint,currentValue:bigint,currentIndex:number,array:BigUint64Array)=>bigint):bigint;reduceRight<U>(callbackfn:(previousValue:U,currentValue:bigint,currentIndex:number,array:BigUint64Array)=>U,initialValue:U):U;reverse():this;set(array:ArrayLike<bigint>,offset?:number):void;slice(start?:number,end?:number):BigUint64Array;some(predicate:(value:bigint,index:number,array:BigUint64Array)=>boolean,thisArg?:any):boolean;sort(compareFn?:(a:bigint,b:bigint)=>number|bigint):this;subarray(begin?:number,end?:number):BigUint64Array;toLocaleString():string;toString():string;valueOf():BigUint64Array;values():IterableIterator<bigint>;[Symbol.iterator]():IterableIterator<bigint>;readonly[Symbol.toStringTag]:\"BigUint64Array\";[index:number]:bigint;}interface BigUint64ArrayConstructor{readonly prototype:BigUint64Array;new(length?:number):BigUint64Array;new(array:Iterable<bigint>):BigUint64Array;new(buffer:ArrayBufferLike,byteOffset?:number,length?:number):BigUint64Array;readonly BYTES_PER_ELEMENT:number;of(...items:bigint[]):BigUint64Array;from(arrayLike:ArrayLike<bigint>):BigUint64Array;from<U>(arrayLike:ArrayLike<U>,mapfn:(v:U,k:number)=>bigint,thisArg?:any):BigUint64Array;}declare var BigUint64Array:BigUint64ArrayConstructor;interface DataView{getBigInt64(byteOffset:number,littleEndian?:boolean):bigint;getBigUint64(byteOffset:number,littleEndian?:boolean):bigint;setBigInt64(byteOffset:number,value:bigint,littleEndian?:boolean):void;setBigUint64(byteOffset:number,value:bigint,littleEndian?:boolean):void;}declare namespace Intl{interface NumberFormat{format(value:number|bigint):string;resolvedOptions():ResolvedNumberFormatOptions;}}`\n    }, {\n        fileName: \"lib.es2020.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2019\" />\\n/// <reference lib=\"es2020.bigint\" />\\n/// <reference lib=\"es2020.date\" />\\n/// <reference lib=\"es2020.number\" />\\n/// <reference lib=\"es2020.promise\" />\\n/// <reference lib=\"es2020.sharedmemory\" />\\n/// <reference lib=\"es2020.string\" />\\n/// <reference lib=\"es2020.symbol.wellknown\" />\\n/// <reference lib=\"es2020.intl\" />\\n`\n    }, {\n        fileName: \"lib.es2020.date.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2020.intl\" />\\ninterface Date{toLocaleString(locales?:Intl.LocalesArgument,options?:Intl.DateTimeFormatOptions):string;toLocaleDateString(locales?:Intl.LocalesArgument,options?:Intl.DateTimeFormatOptions):string;toLocaleTimeString(locales?:Intl.LocalesArgument,options?:Intl.DateTimeFormatOptions):string;}`\n    }, {\n        fileName: \"lib.es2020.full.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2020\" />\\n/// <reference lib=\"dom\" />\\n/// <reference lib=\"webworker.importscripts\" />\\n/// <reference lib=\"scripthost\" />\\n/// <reference lib=\"dom.iterable\" />\\n`\n    }, {\n        fileName: \"lib.es2020.intl.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ndeclare namespace Intl{type UnicodeBCP47LocaleIdentifier=string;type RelativeTimeFormatUnit=|\"year\"|\"years\"|\"quarter\"|\"quarters\"|\"month\"|\"months\"|\"week\"|\"weeks\"|\"day\"|\"days\"|\"hour\"|\"hours\"|\"minute\"|\"minutes\"|\"second\"|\"seconds\";type RelativeTimeFormatLocaleMatcher=\"lookup\"|\"best fit\";type RelativeTimeFormatNumeric=\"always\"|\"auto\";type RelativeTimeFormatStyle=\"long\"|\"short\"|\"narrow\";type BCP47LanguageTag=string;type LocalesArgument=UnicodeBCP47LocaleIdentifier|Locale|(UnicodeBCP47LocaleIdentifier|Locale)[]|undefined;interface RelativeTimeFormatOptions{localeMatcher?:RelativeTimeFormatLocaleMatcher;numeric?:RelativeTimeFormatNumeric;style?:RelativeTimeFormatStyle;}interface ResolvedRelativeTimeFormatOptions{locale:UnicodeBCP47LocaleIdentifier;style:RelativeTimeFormatStyle;numeric:RelativeTimeFormatNumeric;numberingSystem:string;}interface RelativeTimeFormatPart{type:string;value:string;unit?:RelativeTimeFormatUnit;}interface RelativeTimeFormat{format(value:number,unit:RelativeTimeFormatUnit):string;formatToParts(value:number,unit:RelativeTimeFormatUnit):RelativeTimeFormatPart[];resolvedOptions():ResolvedRelativeTimeFormatOptions;}const RelativeTimeFormat:{new(locales?:UnicodeBCP47LocaleIdentifier|UnicodeBCP47LocaleIdentifier[],options?:RelativeTimeFormatOptions,):RelativeTimeFormat;supportedLocalesOf(locales?:UnicodeBCP47LocaleIdentifier|UnicodeBCP47LocaleIdentifier[],options?:RelativeTimeFormatOptions,):UnicodeBCP47LocaleIdentifier[];};interface NumberFormatOptions{compactDisplay?:\"short\"|\"long\"|undefined;notation?:\"standard\"|\"scientific\"|\"engineering\"|\"compact\"|undefined;signDisplay?:\"auto\"|\"never\"|\"always\"|\"exceptZero\"|undefined;unit?:string|undefined;unitDisplay?:\"short\"|\"long\"|\"narrow\"|undefined;currencyDisplay?:string|undefined;currencySign?:string|undefined;}interface ResolvedNumberFormatOptions{compactDisplay?:\"short\"|\"long\";notation?:\"standard\"|\"scientific\"|\"engineering\"|\"compact\";signDisplay?:\"auto\"|\"never\"|\"always\"|\"exceptZero\";unit?:string;unitDisplay?:\"short\"|\"long\"|\"narrow\";currencyDisplay?:string;currencySign?:string;}interface DateTimeFormatOptions{calendar?:string|undefined;dayPeriod?:\"narrow\"|\"short\"|\"long\"|undefined;numberingSystem?:string|undefined;dateStyle?:\"full\"|\"long\"|\"medium\"|\"short\"|undefined;timeStyle?:\"full\"|\"long\"|\"medium\"|\"short\"|undefined;hourCycle?:\"h11\"|\"h12\"|\"h23\"|\"h24\"|undefined;}type LocaleHourCycleKey=\"h12\"|\"h23\"|\"h11\"|\"h24\";type LocaleCollationCaseFirst=\"upper\"|\"lower\"|\"false\";interface LocaleOptions{baseName?:string;calendar?:string;caseFirst?:LocaleCollationCaseFirst;collation?:string;hourCycle?:LocaleHourCycleKey;language?:string;numberingSystem?:string;numeric?:boolean;region?:string;script?:string;}interface Locale extends LocaleOptions{baseName:string;language:string;maximize():Locale;minimize():Locale;toString():BCP47LanguageTag;}const Locale:{new(tag:BCP47LanguageTag|Locale,options?:LocaleOptions):Locale;};type DisplayNamesFallback=|\"code\"|\"none\";type DisplayNamesType=|\"language\"|\"region\"|\"script\"|\"calendar\"|\"dateTimeField\"|\"currency\";type DisplayNamesLanguageDisplay=|\"dialect\"|\"standard\";interface DisplayNamesOptions{localeMatcher?:RelativeTimeFormatLocaleMatcher;style?:RelativeTimeFormatStyle;type:DisplayNamesType;languageDisplay?:DisplayNamesLanguageDisplay;fallback?:DisplayNamesFallback;}interface ResolvedDisplayNamesOptions{locale:UnicodeBCP47LocaleIdentifier;style:RelativeTimeFormatStyle;type:DisplayNamesType;fallback:DisplayNamesFallback;languageDisplay?:DisplayNamesLanguageDisplay;}interface DisplayNames{of(code:string):string|undefined;resolvedOptions():ResolvedDisplayNamesOptions;}const DisplayNames:{prototype:DisplayNames;new(locales:LocalesArgument,options:DisplayNamesOptions):DisplayNames;supportedLocalesOf(locales?:LocalesArgument,options?:{localeMatcher?:RelativeTimeFormatLocaleMatcher}):BCP47LanguageTag[];};}`\n    }, {\n        fileName: \"lib.es2020.number.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2020.intl\" />\\ninterface Number{toLocaleString(locales?:Intl.LocalesArgument,options?:Intl.NumberFormatOptions):string;}`\n    }, {\n        fileName: \"lib.es2020.promise.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface PromiseFulfilledResult<T>{status:\"fulfilled\";value:T;}interface PromiseRejectedResult{status:\"rejected\";reason:any;}type PromiseSettledResult<T>=PromiseFulfilledResult<T>|PromiseRejectedResult;interface PromiseConstructor{allSettled<T extends readonly unknown[]|[]>(values:T):Promise<{-readonly[P in keyof T]:PromiseSettledResult<Awaited<T[P]>>}>;allSettled<T>(values:Iterable<T|PromiseLike<T>>):Promise<PromiseSettledResult<Awaited<T>>[]>;}`\n    }, {\n        fileName: \"lib.es2020.sharedmemory.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface Atomics{add(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;and(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;compareExchange(typedArray:BigInt64Array|BigUint64Array,index:number,expectedValue:bigint,replacementValue:bigint):bigint;exchange(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;load(typedArray:BigInt64Array|BigUint64Array,index:number):bigint;or(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;store(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;sub(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;wait(typedArray:BigInt64Array,index:number,value:bigint,timeout?:number):\"ok\"|\"not-equal\"|\"timed-out\";notify(typedArray:BigInt64Array,index:number,count?:number):number;xor(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;}`\n    }, {\n        fileName: \"lib.es2020.string.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2015.iterable\" />\\ninterface String{matchAll(regexp:RegExp):IterableIterator<RegExpMatchArray>;}`\n    }, {\n        fileName: \"lib.es2020.symbol.wellknown.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2015.iterable\" />\\n/// <reference lib=\"es2015.symbol\" />\\ninterface SymbolConstructor{readonly matchAll:unique symbol;}interface RegExp{[Symbol.matchAll](str:string):IterableIterator<RegExpMatchArray>;}`\n    }, {\n        fileName: \"lib.es2021.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2020\" />\\n/// <reference lib=\"es2021.promise\" />\\n/// <reference lib=\"es2021.string\" />\\n/// <reference lib=\"es2021.weakref\" />\\n/// <reference lib=\"es2021.intl\" />\\n`\n    }, {\n        fileName: \"lib.es2021.full.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2021\" />\\n/// <reference lib=\"dom\" />\\n/// <reference lib=\"webworker.importscripts\" />\\n/// <reference lib=\"scripthost\" />\\n/// <reference lib=\"dom.iterable\" />\\n`\n    }, {\n        fileName: \"lib.es2021.intl.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ndeclare namespace Intl{interface DateTimeFormatOptions{formatMatcher?:\"basic\"|\"best fit\"|\"best fit\"|undefined;dateStyle?:\"full\"|\"long\"|\"medium\"|\"short\"|undefined;timeStyle?:\"full\"|\"long\"|\"medium\"|\"short\"|undefined;dayPeriod?:\"narrow\"|\"short\"|\"long\"|undefined;fractionalSecondDigits?:0|1|2|3|undefined;}interface DateTimeFormat{formatRange(startDate:Date|number|bigint,endDate:Date|number|bigint):string;formatRangeToParts(startDate:Date|number|bigint,endDate:Date|number|bigint):DateTimeFormatPart[];}interface ResolvedDateTimeFormatOptions{formatMatcher?:\"basic\"|\"best fit\"|\"best fit\";dateStyle?:\"full\"|\"long\"|\"medium\"|\"short\";timeStyle?:\"full\"|\"long\"|\"medium\"|\"short\";hourCycle?:\"h11\"|\"h12\"|\"h23\"|\"h24\";dayPeriod?:\"narrow\"|\"short\"|\"long\";fractionalSecondDigits?:0|1|2|3;}type ListFormatLocaleMatcher=\"lookup\"|\"best fit\";type ListFormatType=\"conjunction\"|\"disjunction\"|\"unit\";type ListFormatStyle=\"long\"|\"short\"|\"narrow\";interface ListFormatOptions{localeMatcher?:ListFormatLocaleMatcher|undefined;type?:ListFormatType|undefined;style?:ListFormatStyle|undefined;}interface ListFormat{format(list:Iterable<string>):string;formatToParts(list:Iterable<string>):{type:\"element\"|\"literal\",value:string;}[];}const ListFormat:{prototype:ListFormat;new(locales?:BCP47LanguageTag|BCP47LanguageTag[],options?:ListFormatOptions):ListFormat;supportedLocalesOf(locales:BCP47LanguageTag|BCP47LanguageTag[],options?:Pick<ListFormatOptions,\"localeMatcher\">):BCP47LanguageTag[];};}`\n    }, {\n        fileName: \"lib.es2021.promise.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface AggregateError extends Error{errors:any[]}interface AggregateErrorConstructor{new(errors:Iterable<any>,message?:string):AggregateError;(errors:Iterable<any>,message?:string):AggregateError;readonly prototype:AggregateError;}declare var AggregateError:AggregateErrorConstructor;interface PromiseConstructor{any<T extends readonly unknown[]|[]>(values:T):Promise<Awaited<T[number]>>;any<T>(values:Iterable<T|PromiseLike<T>>):Promise<Awaited<T>>}`\n    }, {\n        fileName: \"lib.es2021.string.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface String{replaceAll(searchValue:string|RegExp,replaceValue:string):string;replaceAll(searchValue:string|RegExp,replacer:(substring:string,...args:any[])=>string):string;}`\n    }, {\n        fileName: \"lib.es2021.weakref.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface WeakRef<T extends object>{readonly[Symbol.toStringTag]:\"WeakRef\";deref():T|undefined;}interface WeakRefConstructor{readonly prototype:WeakRef<any>;new<T extends object>(target:T):WeakRef<T>;}declare var WeakRef:WeakRefConstructor;interface FinalizationRegistry<T>{readonly[Symbol.toStringTag]:\"FinalizationRegistry\";register(target:object,heldValue:T,unregisterToken?:object):void;unregister(unregisterToken:object):void;}interface FinalizationRegistryConstructor{readonly prototype:FinalizationRegistry<any>;new<T>(cleanupCallback:(heldValue:T)=>void):FinalizationRegistry<T>;}declare var FinalizationRegistry:FinalizationRegistryConstructor;`\n    }, {\n        fileName: \"lib.es2022.array.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface Array<T>{at(index:number):T|undefined;}interface ReadonlyArray<T>{at(index:number):T|undefined;}interface Int8Array{at(index:number):number|undefined;}interface Uint8Array{at(index:number):number|undefined;}interface Uint8ClampedArray{at(index:number):number|undefined;}interface Int16Array{at(index:number):number|undefined;}interface Uint16Array{at(index:number):number|undefined;}interface Int32Array{at(index:number):number|undefined;}interface Uint32Array{at(index:number):number|undefined;}interface Float32Array{at(index:number):number|undefined;}interface Float64Array{at(index:number):number|undefined;}interface BigInt64Array{at(index:number):bigint|undefined;}interface BigUint64Array{at(index:number):bigint|undefined;}`\n    }, {\n        fileName: \"lib.es2022.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2021\" />\\n/// <reference lib=\"es2022.array\" />\\n/// <reference lib=\"es2022.error\" />\\n/// <reference lib=\"es2022.intl\" />\\n/// <reference lib=\"es2022.object\" />\\n/// <reference lib=\"es2022.string\" />\\n`\n    }, {\n        fileName: \"lib.es2022.error.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface ErrorOptions{cause?:Error;}interface Error{cause?:Error;}interface ErrorConstructor{new(message?:string,options?:ErrorOptions):Error;(message?:string,options?:ErrorOptions):Error;}interface EvalErrorConstructor{new(message?:string,options?:ErrorOptions):EvalError;(message?:string,options?:ErrorOptions):EvalError;}interface RangeErrorConstructor{new(message?:string,options?:ErrorOptions):RangeError;(message?:string,options?:ErrorOptions):RangeError;}interface ReferenceErrorConstructor{new(message?:string,options?:ErrorOptions):ReferenceError;(message?:string,options?:ErrorOptions):ReferenceError;}interface SyntaxErrorConstructor{new(message?:string,options?:ErrorOptions):SyntaxError;(message?:string,options?:ErrorOptions):SyntaxError;}interface TypeErrorConstructor{new(message?:string,options?:ErrorOptions):TypeError;(message?:string,options?:ErrorOptions):TypeError;}interface URIErrorConstructor{new(message?:string,options?:ErrorOptions):URIError;(message?:string,options?:ErrorOptions):URIError;}interface AggregateErrorConstructor{new(errors:Iterable<any>,message?:string,options?:ErrorOptions):AggregateError;(errors:Iterable<any>,message?:string,options?:ErrorOptions):AggregateError;}`\n    }, {\n        fileName: \"lib.es2022.full.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2022\" />\\n/// <reference lib=\"dom\" />\\n/// <reference lib=\"webworker.importscripts\" />\\n/// <reference lib=\"scripthost\" />\\n/// <reference lib=\"dom.iterable\" />\\n`\n    }, {\n        fileName: \"lib.es2022.intl.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ndeclare namespace Intl{interface SegmenterOptions{localeMatcher?:\"best fit\"|\"lookup\"|undefined;granularity?:\"grapheme\"|\"word\"|\"sentence\"|undefined;}interface Segmenter{segment(input:string):Segments;resolvedOptions():ResolvedSegmenterOptions;}interface ResolvedSegmenterOptions{locale:string;granularity:\"grapheme\"|\"word\"|\"sentence\";}interface Segments{containing(codeUnitIndex?:number):SegmentData;[Symbol.iterator]():IterableIterator<SegmentData>;}interface SegmentData{segment:string;index:number;input:string;isWordLike?:boolean;}const Segmenter:{prototype:Segmenter;new(locales?:BCP47LanguageTag|BCP47LanguageTag[],options?:SegmenterOptions):Segmenter;supportedLocalesOf(locales:BCP47LanguageTag|BCP47LanguageTag[],options?:Pick<SegmenterOptions,\"localeMatcher\">):BCP47LanguageTag[];};}`\n    }, {\n        fileName: \"lib.es2022.object.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface ObjectConstructor{hasOwn(o:object,v:PropertyKey):boolean;}`\n    }, {\n        fileName: \"lib.es2022.string.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface String{at(index:number):string|undefined;}`\n    }, {\n        fileName: \"lib.es5.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ndeclare var NaN:number;declare var Infinity:number;declare function eval(x:string):any;declare function parseInt(string:string,radix?:number):number;declare function parseFloat(string:string):number;declare function isNaN(number:number):boolean;declare function isFinite(number:number):boolean;declare function decodeURI(encodedURI:string):string;declare function decodeURIComponent(encodedURIComponent:string):string;declare function encodeURI(uri:string):string;declare function encodeURIComponent(uriComponent:string|number|boolean):string;declare function escape(string:string):string;declare function unescape(string:string):string;interface Symbol{toString():string;valueOf():symbol;}declare type PropertyKey=string|number|symbol;interface PropertyDescriptor{configurable?:boolean;enumerable?:boolean;value?:any;writable?:boolean;get?():any;set?(v:any):void;}interface PropertyDescriptorMap{[key:PropertyKey]:PropertyDescriptor;}interface Object{constructor:Function;toString():string;toLocaleString():string;valueOf():Object;hasOwnProperty(v:PropertyKey):boolean;isPrototypeOf(v:Object):boolean;propertyIsEnumerable(v:PropertyKey):boolean;}interface ObjectConstructor{new(value?:any):Object;():any;(value:any):any;readonly prototype:Object;getPrototypeOf(o:any):any;getOwnPropertyDescriptor(o:any,p:PropertyKey):PropertyDescriptor|undefined;getOwnPropertyNames(o:any):string[];create(o:object|null):any;create(o:object|null,properties:PropertyDescriptorMap&ThisType<any>):any;defineProperty<T>(o:T,p:PropertyKey,attributes:PropertyDescriptor&ThisType<any>):T;defineProperties<T>(o:T,properties:PropertyDescriptorMap&ThisType<any>):T;seal<T>(o:T):T;freeze<T>(a:T[]):readonly T[];freeze<T extends Function>(f:T):T;freeze<T extends{[idx:string]:U|null|undefined|object},U extends string|bigint|number|boolean|symbol>(o:T):Readonly<T>;freeze<T>(o:T):Readonly<T>;preventExtensions<T>(o:T):T;isSealed(o:any):boolean;isFrozen(o:any):boolean;isExtensible(o:any):boolean;keys(o:object):string[];}declare var Object:ObjectConstructor;interface Function{apply(this:Function,thisArg:any,argArray?:any):any;call(this:Function,thisArg:any,...argArray:any[]):any;bind(this:Function,thisArg:any,...argArray:any[]):any;toString():string;prototype:any;readonly length:number;arguments:any;caller:Function;}interface FunctionConstructor{new(...args:string[]):Function;(...args:string[]):Function;readonly prototype:Function;}declare var Function:FunctionConstructor;type ThisParameterType<T>=T extends(this:infer U,...args:never)=>any?U:unknown;type OmitThisParameter<T>=unknown extends ThisParameterType<T>?T:T extends(...args:infer A)=>infer R?(...args:A)=>R:T;interface CallableFunction extends Function{apply<T,R>(this:(this:T)=>R,thisArg:T):R;apply<T,A extends any[],R>(this:(this:T,...args:A)=>R,thisArg:T,args:A):R;call<T,A extends any[],R>(this:(this:T,...args:A)=>R,thisArg:T,...args:A):R;bind<T>(this:T,thisArg:ThisParameterType<T>):OmitThisParameter<T>;bind<T,A0,A extends any[],R>(this:(this:T,arg0:A0,...args:A)=>R,thisArg:T,arg0:A0):(...args:A)=>R;bind<T,A0,A1,A extends any[],R>(this:(this:T,arg0:A0,arg1:A1,...args:A)=>R,thisArg:T,arg0:A0,arg1:A1):(...args:A)=>R;bind<T,A0,A1,A2,A extends any[],R>(this:(this:T,arg0:A0,arg1:A1,arg2:A2,...args:A)=>R,thisArg:T,arg0:A0,arg1:A1,arg2:A2):(...args:A)=>R;bind<T,A0,A1,A2,A3,A extends any[],R>(this:(this:T,arg0:A0,arg1:A1,arg2:A2,arg3:A3,...args:A)=>R,thisArg:T,arg0:A0,arg1:A1,arg2:A2,arg3:A3):(...args:A)=>R;bind<T,AX,R>(this:(this:T,...args:AX[])=>R,thisArg:T,...args:AX[]):(...args:AX[])=>R;}interface NewableFunction extends Function{apply<T>(this:new()=>T,thisArg:T):void;apply<T,A extends any[]>(this:new(...args:A)=>T,thisArg:T,args:A):void;call<T,A extends any[]>(this:new(...args:A)=>T,thisArg:T,...args:A):void;bind<T>(this:T,thisArg:any):T;bind<A0,A extends any[],R>(this:new(arg0:A0,...args:A)=>R,thisArg:any,arg0:A0):new(...args:A)=>R;bind<A0,A1,A extends any[],R>(this:new(arg0:A0,arg1:A1,...args:A)=>R,thisArg:any,arg0:A0,arg1:A1):new(...args:A)=>R;bind<A0,A1,A2,A extends any[],R>(this:new(arg0:A0,arg1:A1,arg2:A2,...args:A)=>R,thisArg:any,arg0:A0,arg1:A1,arg2:A2):new(...args:A)=>R;bind<A0,A1,A2,A3,A extends any[],R>(this:new(arg0:A0,arg1:A1,arg2:A2,arg3:A3,...args:A)=>R,thisArg:any,arg0:A0,arg1:A1,arg2:A2,arg3:A3):new(...args:A)=>R;bind<AX,R>(this:new(...args:AX[])=>R,thisArg:any,...args:AX[]):new(...args:AX[])=>R;}interface IArguments{[index:number]:any;length:number;callee:Function;}interface String{toString():string;charAt(pos:number):string;charCodeAt(index:number):number;concat(...strings:string[]):string;indexOf(searchString:string,position?:number):number;lastIndexOf(searchString:string,position?:number):number;localeCompare(that:string):number;match(regexp:string|RegExp):RegExpMatchArray|null;replace(searchValue:string|RegExp,replaceValue:string):string;replace(searchValue:string|RegExp,replacer:(substring:string,...args:any[])=>string):string;search(regexp:string|RegExp):number;slice(start?:number,end?:number):string;split(separator:string|RegExp,limit?:number):string[];substring(start:number,end?:number):string;toLowerCase():string;toLocaleLowerCase(locales?:string|string[]):string;toUpperCase():string;toLocaleUpperCase(locales?:string|string[]):string;trim():string;readonly length:number;substr(from:number,length?:number):string;valueOf():string;readonly[index:number]:string;}interface StringConstructor{new(value?:any):String;(value?:any):string;readonly prototype:String;fromCharCode(...codes:number[]):string;}declare var String:StringConstructor;interface Boolean{valueOf():boolean;}interface BooleanConstructor{new(value?:any):Boolean;<T>(value?:T):boolean;readonly prototype:Boolean;}declare var Boolean:BooleanConstructor;interface Number{toString(radix?:number):string;toFixed(fractionDigits?:number):string;toExponential(fractionDigits?:number):string;toPrecision(precision?:number):string;valueOf():number;}interface NumberConstructor{new(value?:any):Number;(value?:any):number;readonly prototype:Number;readonly MAX_VALUE:number;readonly MIN_VALUE:number;readonly NaN:number;readonly NEGATIVE_INFINITY:number;readonly POSITIVE_INFINITY:number;}declare var Number:NumberConstructor;interface TemplateStringsArray extends ReadonlyArray<string>{readonly raw:readonly string[];}interface ImportMeta{}interface ImportCallOptions{assert?:ImportAssertions;}interface ImportAssertions{[key:string]:string;}interface Math{readonly E:number;readonly LN10:number;readonly LN2:number;readonly LOG2E:number;readonly LOG10E:number;readonly PI:number;readonly SQRT1_2:number;readonly SQRT2:number;abs(x:number):number;acos(x:number):number;asin(x:number):number;atan(x:number):number;atan2(y:number,x:number):number;ceil(x:number):number;cos(x:number):number;exp(x:number):number;floor(x:number):number;log(x:number):number;max(...values:number[]):number;min(...values:number[]):number;pow(x:number,y:number):number;random():number;round(x:number):number;sin(x:number):number;sqrt(x:number):number;tan(x:number):number;}declare var Math:Math;interface Date{toString():string;toDateString():string;toTimeString():string;toLocaleString():string;toLocaleDateString():string;toLocaleTimeString():string;valueOf():number;getTime():number;getFullYear():number;getUTCFullYear():number;getMonth():number;getUTCMonth():number;getDate():number;getUTCDate():number;getDay():number;getUTCDay():number;getHours():number;getUTCHours():number;getMinutes():number;getUTCMinutes():number;getSeconds():number;getUTCSeconds():number;getMilliseconds():number;getUTCMilliseconds():number;getTimezoneOffset():number;setTime(time:number):number;setMilliseconds(ms:number):number;setUTCMilliseconds(ms:number):number;setSeconds(sec:number,ms?:number):number;setUTCSeconds(sec:number,ms?:number):number;setMinutes(min:number,sec?:number,ms?:number):number;setUTCMinutes(min:number,sec?:number,ms?:number):number;setHours(hours:number,min?:number,sec?:number,ms?:number):number;setUTCHours(hours:number,min?:number,sec?:number,ms?:number):number;setDate(date:number):number;setUTCDate(date:number):number;setMonth(month:number,date?:number):number;setUTCMonth(month:number,date?:number):number;setFullYear(year:number,month?:number,date?:number):number;setUTCFullYear(year:number,month?:number,date?:number):number;toUTCString():string;toISOString():string;toJSON(key?:any):string;}interface DateConstructor{new():Date;new(value:number|string):Date;new(year:number,month:number,date?:number,hours?:number,minutes?:number,seconds?:number,ms?:number):Date;():string;readonly prototype:Date;parse(s:string):number;UTC(year:number,month:number,date?:number,hours?:number,minutes?:number,seconds?:number,ms?:number):number;now():number;}declare var Date:DateConstructor;interface RegExpMatchArray extends Array<string>{index?:number;input?:string;}interface RegExpExecArray extends Array<string>{index:number;input:string;}interface RegExp{exec(string:string):RegExpExecArray|null;test(string:string):boolean;readonly source:string;readonly global:boolean;readonly ignoreCase:boolean;readonly multiline:boolean;lastIndex:number;compile(pattern:string,flags?:string):this;}interface RegExpConstructor{new(pattern:RegExp|string):RegExp;new(pattern:string,flags?:string):RegExp;(pattern:RegExp|string):RegExp;(pattern:string,flags?:string):RegExp;readonly prototype:RegExp;$1:string;$2:string;$3:string;$4:string;$5:string;$6:string;$7:string;$8:string;$9:string;input:string;$_:string;lastMatch:string;\"$&\":string;lastParen:string;\"$+\":string;leftContext:string;\"$\\`\":string;rightContext:string;\"$'\":string;}declare var RegExp:RegExpConstructor;interface Error{name:string;message:string;stack?:string;}interface ErrorConstructor{new(message?:string):Error;(message?:string):Error;readonly prototype:Error;}declare var Error:ErrorConstructor;interface EvalError extends Error{}interface EvalErrorConstructor extends ErrorConstructor{new(message?:string):EvalError;(message?:string):EvalError;readonly prototype:EvalError;}declare var EvalError:EvalErrorConstructor;interface RangeError extends Error{}interface RangeErrorConstructor extends ErrorConstructor{new(message?:string):RangeError;(message?:string):RangeError;readonly prototype:RangeError;}declare var RangeError:RangeErrorConstructor;interface ReferenceError extends Error{}interface ReferenceErrorConstructor extends ErrorConstructor{new(message?:string):ReferenceError;(message?:string):ReferenceError;readonly prototype:ReferenceError;}declare var ReferenceError:ReferenceErrorConstructor;interface SyntaxError extends Error{}interface SyntaxErrorConstructor extends ErrorConstructor{new(message?:string):SyntaxError;(message?:string):SyntaxError;readonly prototype:SyntaxError;}declare var SyntaxError:SyntaxErrorConstructor;interface TypeError extends Error{}interface TypeErrorConstructor extends ErrorConstructor{new(message?:string):TypeError;(message?:string):TypeError;readonly prototype:TypeError;}declare var TypeError:TypeErrorConstructor;interface URIError extends Error{}interface URIErrorConstructor extends ErrorConstructor{new(message?:string):URIError;(message?:string):URIError;readonly prototype:URIError;}declare var URIError:URIErrorConstructor;interface JSON{parse(text:string,reviver?:(this:any,key:string,value:any)=>any):any;stringify(value:any,replacer?:(this:any,key:string,value:any)=>any,space?:string|number):string;stringify(value:any,replacer?:(number|string)[]|null,space?:string|number):string;}declare var JSON:JSON;interface ReadonlyArray<T>{readonly length:number;toString():string;toLocaleString():string;concat(...items:ConcatArray<T>[]):T[];concat(...items:(T|ConcatArray<T>)[]):T[];join(separator?:string):string;slice(start?:number,end?:number):T[];indexOf(searchElement:T,fromIndex?:number):number;lastIndexOf(searchElement:T,fromIndex?:number):number;every<S extends T>(predicate:(value:T,index:number,array:readonly T[])=>value is S,thisArg?:any):this is readonly S[];every(predicate:(value:T,index:number,array:readonly T[])=>unknown,thisArg?:any):boolean;some(predicate:(value:T,index:number,array:readonly T[])=>unknown,thisArg?:any):boolean;forEach(callbackfn:(value:T,index:number,array:readonly T[])=>void,thisArg?:any):void;map<U>(callbackfn:(value:T,index:number,array:readonly T[])=>U,thisArg?:any):U[];filter<S extends T>(predicate:(value:T,index:number,array:readonly T[])=>value is S,thisArg?:any):S[];filter(predicate:(value:T,index:number,array:readonly T[])=>unknown,thisArg?:any):T[];reduce(callbackfn:(previousValue:T,currentValue:T,currentIndex:number,array:readonly T[])=>T):T;reduce(callbackfn:(previousValue:T,currentValue:T,currentIndex:number,array:readonly T[])=>T,initialValue:T):T;reduce<U>(callbackfn:(previousValue:U,currentValue:T,currentIndex:number,array:readonly T[])=>U,initialValue:U):U;reduceRight(callbackfn:(previousValue:T,currentValue:T,currentIndex:number,array:readonly T[])=>T):T;reduceRight(callbackfn:(previousValue:T,currentValue:T,currentIndex:number,array:readonly T[])=>T,initialValue:T):T;reduceRight<U>(callbackfn:(previousValue:U,currentValue:T,currentIndex:number,array:readonly T[])=>U,initialValue:U):U;readonly[n:number]:T;}interface ConcatArray<T>{readonly length:number;readonly[n:number]:T;join(separator?:string):string;slice(start?:number,end?:number):T[];}interface Array<T>{length:number;toString():string;toLocaleString():string;pop():T|undefined;push(...items:T[]):number;concat(...items:ConcatArray<T>[]):T[];concat(...items:(T|ConcatArray<T>)[]):T[];join(separator?:string):string;reverse():T[];shift():T|undefined;slice(start?:number,end?:number):T[];sort(compareFn?:(a:T,b:T)=>number):this;splice(start:number,deleteCount?:number):T[];splice(start:number,deleteCount:number,...items:T[]):T[];unshift(...items:T[]):number;indexOf(searchElement:T,fromIndex?:number):number;lastIndexOf(searchElement:T,fromIndex?:number):number;every<S extends T>(predicate:(value:T,index:number,array:T[])=>value is S,thisArg?:any):this is S[];every(predicate:(value:T,index:number,array:T[])=>unknown,thisArg?:any):boolean;some(predicate:(value:T,index:number,array:T[])=>unknown,thisArg?:any):boolean;forEach(callbackfn:(value:T,index:number,array:T[])=>void,thisArg?:any):void;map<U>(callbackfn:(value:T,index:number,array:T[])=>U,thisArg?:any):U[];filter<S extends T>(predicate:(value:T,index:number,array:T[])=>value is S,thisArg?:any):S[];filter(predicate:(value:T,index:number,array:T[])=>unknown,thisArg?:any):T[];reduce(callbackfn:(previousValue:T,currentValue:T,currentIndex:number,array:T[])=>T):T;reduce(callbackfn:(previousValue:T,currentValue:T,currentIndex:number,array:T[])=>T,initialValue:T):T;reduce<U>(callbackfn:(previousValue:U,currentValue:T,currentIndex:number,array:T[])=>U,initialValue:U):U;reduceRight(callbackfn:(previousValue:T,currentValue:T,currentIndex:number,array:T[])=>T):T;reduceRight(callbackfn:(previousValue:T,currentValue:T,currentIndex:number,array:T[])=>T,initialValue:T):T;reduceRight<U>(callbackfn:(previousValue:U,currentValue:T,currentIndex:number,array:T[])=>U,initialValue:U):U;[n:number]:T;}interface ArrayConstructor{new(arrayLength?:number):any[];new<T>(arrayLength:number):T[];new<T>(...items:T[]):T[];(arrayLength?:number):any[];<T>(arrayLength:number):T[];<T>(...items:T[]):T[];isArray(arg:any):arg is any[];readonly prototype:any[];}declare var Array:ArrayConstructor;interface TypedPropertyDescriptor<T>{enumerable?:boolean;configurable?:boolean;writable?:boolean;value?:T;get?:()=>T;set?:(value:T)=>void;}declare type ClassDecorator=<TFunction extends Function>(target:TFunction)=>TFunction|void;declare type PropertyDecorator=(target:Object,propertyKey:string|symbol)=>void;declare type MethodDecorator=<T>(target:Object,propertyKey:string|symbol,descriptor:TypedPropertyDescriptor<T>)=>TypedPropertyDescriptor<T>|void;declare type ParameterDecorator=(target:Object,propertyKey:string|symbol,parameterIndex:number)=>void;declare type PromiseConstructorLike=new<T>(executor:(resolve:(value:T|PromiseLike<T>)=>void,reject:(reason?:any)=>void)=>void)=>PromiseLike<T>;interface PromiseLike<T>{then<TResult1=T,TResult2=never>(onfulfilled?:((value:T)=>TResult1|PromiseLike<TResult1>)|undefined|null,onrejected?:((reason:any)=>TResult2|PromiseLike<TResult2>)|undefined|null):PromiseLike<TResult1|TResult2>;}interface Promise<T>{then<TResult1=T,TResult2=never>(onfulfilled?:((value:T)=>TResult1|PromiseLike<TResult1>)|undefined|null,onrejected?:((reason:any)=>TResult2|PromiseLike<TResult2>)|undefined|null):Promise<TResult1|TResult2>;catch<TResult=never>(onrejected?:((reason:any)=>TResult|PromiseLike<TResult>)|undefined|null):Promise<T|TResult>;}type Awaited<T>=\\nT extends null|undefined?T:T extends object&{then(onfulfilled:infer F):any}?\\nF extends((value:infer V,...args:any)=>any)?\\nAwaited<V>:never:T;interface ArrayLike<T>{readonly length:number;readonly[n:number]:T;}type Partial<T>={[P in keyof T]?:T[P];};type Required<T>={[P in keyof T]-?:T[P];};type Readonly<T>={readonly[P in keyof T]:T[P];};type Pick<T,K extends keyof T>={[P in K]:T[P];};type Record<K extends keyof any,T>={[P in K]:T;};type Exclude<T,U>=T extends U?never:T;type Extract<T,U>=T extends U?T:never;type Omit<T,K extends keyof any>=Pick<T,Exclude<keyof T,K>>;type NonNullable<T>=T extends null|undefined?never:T;type Parameters<T extends(...args:any)=>any>=T extends(...args:infer P)=>any?P:never;type ConstructorParameters<T extends abstract new(...args:any)=>any>=T extends abstract new(...args:infer P)=>any?P:never;type ReturnType<T extends(...args:any)=>any>=T extends(...args:any)=>infer R?R:any;type InstanceType<T extends abstract new(...args:any)=>any>=T extends abstract new(...args:any)=>infer R?R:any;type Uppercase<S extends string>=intrinsic;type Lowercase<S extends string>=intrinsic;type Capitalize<S extends string>=intrinsic;type Uncapitalize<S extends string>=intrinsic;interface ThisType<T>{}interface ArrayBuffer{readonly byteLength:number;slice(begin:number,end?:number):ArrayBuffer;}interface ArrayBufferTypes{ArrayBuffer:ArrayBuffer;}type ArrayBufferLike=ArrayBufferTypes[keyof ArrayBufferTypes];interface ArrayBufferConstructor{readonly prototype:ArrayBuffer;new(byteLength:number):ArrayBuffer;isView(arg:any):arg is ArrayBufferView;}declare var ArrayBuffer:ArrayBufferConstructor;interface ArrayBufferView{buffer:ArrayBufferLike;byteLength:number;byteOffset:number;}interface DataView{readonly buffer:ArrayBuffer;readonly byteLength:number;readonly byteOffset:number;getFloat32(byteOffset:number,littleEndian?:boolean):number;getFloat64(byteOffset:number,littleEndian?:boolean):number;getInt8(byteOffset:number):number;getInt16(byteOffset:number,littleEndian?:boolean):number;getInt32(byteOffset:number,littleEndian?:boolean):number;getUint8(byteOffset:number):number;getUint16(byteOffset:number,littleEndian?:boolean):number;getUint32(byteOffset:number,littleEndian?:boolean):number;setFloat32(byteOffset:number,value:number,littleEndian?:boolean):void;setFloat64(byteOffset:number,value:number,littleEndian?:boolean):void;setInt8(byteOffset:number,value:number):void;setInt16(byteOffset:number,value:number,littleEndian?:boolean):void;setInt32(byteOffset:number,value:number,littleEndian?:boolean):void;setUint8(byteOffset:number,value:number):void;setUint16(byteOffset:number,value:number,littleEndian?:boolean):void;setUint32(byteOffset:number,value:number,littleEndian?:boolean):void;}interface DataViewConstructor{readonly prototype:DataView;new(buffer:ArrayBufferLike,byteOffset?:number,byteLength?:number):DataView;}declare var DataView:DataViewConstructor;interface Int8Array{readonly BYTES_PER_ELEMENT:number;readonly buffer:ArrayBufferLike;readonly byteLength:number;readonly byteOffset:number;copyWithin(target:number,start:number,end?:number):this;every(predicate:(value:number,index:number,array:Int8Array)=>unknown,thisArg?:any):boolean;fill(value:number,start?:number,end?:number):this;filter(predicate:(value:number,index:number,array:Int8Array)=>any,thisArg?:any):Int8Array;find(predicate:(value:number,index:number,obj:Int8Array)=>boolean,thisArg?:any):number|undefined;findIndex(predicate:(value:number,index:number,obj:Int8Array)=>boolean,thisArg?:any):number;forEach(callbackfn:(value:number,index:number,array:Int8Array)=>void,thisArg?:any):void;indexOf(searchElement:number,fromIndex?:number):number;join(separator?:string):string;lastIndexOf(searchElement:number,fromIndex?:number):number;readonly length:number;map(callbackfn:(value:number,index:number,array:Int8Array)=>number,thisArg?:any):Int8Array;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Int8Array)=>number):number;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Int8Array)=>number,initialValue:number):number;reduce<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Int8Array)=>U,initialValue:U):U;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Int8Array)=>number):number;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Int8Array)=>number,initialValue:number):number;reduceRight<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Int8Array)=>U,initialValue:U):U;reverse():Int8Array;set(array:ArrayLike<number>,offset?:number):void;slice(start?:number,end?:number):Int8Array;some(predicate:(value:number,index:number,array:Int8Array)=>unknown,thisArg?:any):boolean;sort(compareFn?:(a:number,b:number)=>number):this;subarray(begin?:number,end?:number):Int8Array;toLocaleString():string;toString():string;valueOf():Int8Array;[index:number]:number;}interface Int8ArrayConstructor{readonly prototype:Int8Array;new(length:number):Int8Array;new(array:ArrayLike<number>|ArrayBufferLike):Int8Array;new(buffer:ArrayBufferLike,byteOffset?:number,length?:number):Int8Array;readonly BYTES_PER_ELEMENT:number;of(...items:number[]):Int8Array;from(arrayLike:ArrayLike<number>):Int8Array;from<T>(arrayLike:ArrayLike<T>,mapfn:(v:T,k:number)=>number,thisArg?:any):Int8Array;}declare var Int8Array:Int8ArrayConstructor;interface Uint8Array{readonly BYTES_PER_ELEMENT:number;readonly buffer:ArrayBufferLike;readonly byteLength:number;readonly byteOffset:number;copyWithin(target:number,start:number,end?:number):this;every(predicate:(value:number,index:number,array:Uint8Array)=>unknown,thisArg?:any):boolean;fill(value:number,start?:number,end?:number):this;filter(predicate:(value:number,index:number,array:Uint8Array)=>any,thisArg?:any):Uint8Array;find(predicate:(value:number,index:number,obj:Uint8Array)=>boolean,thisArg?:any):number|undefined;findIndex(predicate:(value:number,index:number,obj:Uint8Array)=>boolean,thisArg?:any):number;forEach(callbackfn:(value:number,index:number,array:Uint8Array)=>void,thisArg?:any):void;indexOf(searchElement:number,fromIndex?:number):number;join(separator?:string):string;lastIndexOf(searchElement:number,fromIndex?:number):number;readonly length:number;map(callbackfn:(value:number,index:number,array:Uint8Array)=>number,thisArg?:any):Uint8Array;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint8Array)=>number):number;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint8Array)=>number,initialValue:number):number;reduce<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Uint8Array)=>U,initialValue:U):U;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint8Array)=>number):number;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint8Array)=>number,initialValue:number):number;reduceRight<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Uint8Array)=>U,initialValue:U):U;reverse():Uint8Array;set(array:ArrayLike<number>,offset?:number):void;slice(start?:number,end?:number):Uint8Array;some(predicate:(value:number,index:number,array:Uint8Array)=>unknown,thisArg?:any):boolean;sort(compareFn?:(a:number,b:number)=>number):this;subarray(begin?:number,end?:number):Uint8Array;toLocaleString():string;toString():string;valueOf():Uint8Array;[index:number]:number;}interface Uint8ArrayConstructor{readonly prototype:Uint8Array;new(length:number):Uint8Array;new(array:ArrayLike<number>|ArrayBufferLike):Uint8Array;new(buffer:ArrayBufferLike,byteOffset?:number,length?:number):Uint8Array;readonly BYTES_PER_ELEMENT:number;of(...items:number[]):Uint8Array;from(arrayLike:ArrayLike<number>):Uint8Array;from<T>(arrayLike:ArrayLike<T>,mapfn:(v:T,k:number)=>number,thisArg?:any):Uint8Array;}declare var Uint8Array:Uint8ArrayConstructor;interface Uint8ClampedArray{readonly BYTES_PER_ELEMENT:number;readonly buffer:ArrayBufferLike;readonly byteLength:number;readonly byteOffset:number;copyWithin(target:number,start:number,end?:number):this;every(predicate:(value:number,index:number,array:Uint8ClampedArray)=>unknown,thisArg?:any):boolean;fill(value:number,start?:number,end?:number):this;filter(predicate:(value:number,index:number,array:Uint8ClampedArray)=>any,thisArg?:any):Uint8ClampedArray;find(predicate:(value:number,index:number,obj:Uint8ClampedArray)=>boolean,thisArg?:any):number|undefined;findIndex(predicate:(value:number,index:number,obj:Uint8ClampedArray)=>boolean,thisArg?:any):number;forEach(callbackfn:(value:number,index:number,array:Uint8ClampedArray)=>void,thisArg?:any):void;indexOf(searchElement:number,fromIndex?:number):number;join(separator?:string):string;lastIndexOf(searchElement:number,fromIndex?:number):number;readonly length:number;map(callbackfn:(value:number,index:number,array:Uint8ClampedArray)=>number,thisArg?:any):Uint8ClampedArray;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint8ClampedArray)=>number):number;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint8ClampedArray)=>number,initialValue:number):number;reduce<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Uint8ClampedArray)=>U,initialValue:U):U;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint8ClampedArray)=>number):number;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint8ClampedArray)=>number,initialValue:number):number;reduceRight<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Uint8ClampedArray)=>U,initialValue:U):U;reverse():Uint8ClampedArray;set(array:ArrayLike<number>,offset?:number):void;slice(start?:number,end?:number):Uint8ClampedArray;some(predicate:(value:number,index:number,array:Uint8ClampedArray)=>unknown,thisArg?:any):boolean;sort(compareFn?:(a:number,b:number)=>number):this;subarray(begin?:number,end?:number):Uint8ClampedArray;toLocaleString():string;toString():string;valueOf():Uint8ClampedArray;[index:number]:number;}interface Uint8ClampedArrayConstructor{readonly prototype:Uint8ClampedArray;new(length:number):Uint8ClampedArray;new(array:ArrayLike<number>|ArrayBufferLike):Uint8ClampedArray;new(buffer:ArrayBufferLike,byteOffset?:number,length?:number):Uint8ClampedArray;readonly BYTES_PER_ELEMENT:number;of(...items:number[]):Uint8ClampedArray;from(arrayLike:ArrayLike<number>):Uint8ClampedArray;from<T>(arrayLike:ArrayLike<T>,mapfn:(v:T,k:number)=>number,thisArg?:any):Uint8ClampedArray;}declare var Uint8ClampedArray:Uint8ClampedArrayConstructor;interface Int16Array{readonly BYTES_PER_ELEMENT:number;readonly buffer:ArrayBufferLike;readonly byteLength:number;readonly byteOffset:number;copyWithin(target:number,start:number,end?:number):this;every(predicate:(value:number,index:number,array:Int16Array)=>unknown,thisArg?:any):boolean;fill(value:number,start?:number,end?:number):this;filter(predicate:(value:number,index:number,array:Int16Array)=>any,thisArg?:any):Int16Array;find(predicate:(value:number,index:number,obj:Int16Array)=>boolean,thisArg?:any):number|undefined;findIndex(predicate:(value:number,index:number,obj:Int16Array)=>boolean,thisArg?:any):number;forEach(callbackfn:(value:number,index:number,array:Int16Array)=>void,thisArg?:any):void;indexOf(searchElement:number,fromIndex?:number):number;join(separator?:string):string;lastIndexOf(searchElement:number,fromIndex?:number):number;readonly length:number;map(callbackfn:(value:number,index:number,array:Int16Array)=>number,thisArg?:any):Int16Array;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Int16Array)=>number):number;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Int16Array)=>number,initialValue:number):number;reduce<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Int16Array)=>U,initialValue:U):U;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Int16Array)=>number):number;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Int16Array)=>number,initialValue:number):number;reduceRight<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Int16Array)=>U,initialValue:U):U;reverse():Int16Array;set(array:ArrayLike<number>,offset?:number):void;slice(start?:number,end?:number):Int16Array;some(predicate:(value:number,index:number,array:Int16Array)=>unknown,thisArg?:any):boolean;sort(compareFn?:(a:number,b:number)=>number):this;subarray(begin?:number,end?:number):Int16Array;toLocaleString():string;toString():string;valueOf():Int16Array;[index:number]:number;}interface Int16ArrayConstructor{readonly prototype:Int16Array;new(length:number):Int16Array;new(array:ArrayLike<number>|ArrayBufferLike):Int16Array;new(buffer:ArrayBufferLike,byteOffset?:number,length?:number):Int16Array;readonly BYTES_PER_ELEMENT:number;of(...items:number[]):Int16Array;from(arrayLike:ArrayLike<number>):Int16Array;from<T>(arrayLike:ArrayLike<T>,mapfn:(v:T,k:number)=>number,thisArg?:any):Int16Array;}declare var Int16Array:Int16ArrayConstructor;interface Uint16Array{readonly BYTES_PER_ELEMENT:number;readonly buffer:ArrayBufferLike;readonly byteLength:number;readonly byteOffset:number;copyWithin(target:number,start:number,end?:number):this;every(predicate:(value:number,index:number,array:Uint16Array)=>unknown,thisArg?:any):boolean;fill(value:number,start?:number,end?:number):this;filter(predicate:(value:number,index:number,array:Uint16Array)=>any,thisArg?:any):Uint16Array;find(predicate:(value:number,index:number,obj:Uint16Array)=>boolean,thisArg?:any):number|undefined;findIndex(predicate:(value:number,index:number,obj:Uint16Array)=>boolean,thisArg?:any):number;forEach(callbackfn:(value:number,index:number,array:Uint16Array)=>void,thisArg?:any):void;indexOf(searchElement:number,fromIndex?:number):number;join(separator?:string):string;lastIndexOf(searchElement:number,fromIndex?:number):number;readonly length:number;map(callbackfn:(value:number,index:number,array:Uint16Array)=>number,thisArg?:any):Uint16Array;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint16Array)=>number):number;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint16Array)=>number,initialValue:number):number;reduce<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Uint16Array)=>U,initialValue:U):U;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint16Array)=>number):number;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint16Array)=>number,initialValue:number):number;reduceRight<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Uint16Array)=>U,initialValue:U):U;reverse():Uint16Array;set(array:ArrayLike<number>,offset?:number):void;slice(start?:number,end?:number):Uint16Array;some(predicate:(value:number,index:number,array:Uint16Array)=>unknown,thisArg?:any):boolean;sort(compareFn?:(a:number,b:number)=>number):this;subarray(begin?:number,end?:number):Uint16Array;toLocaleString():string;toString():string;valueOf():Uint16Array;[index:number]:number;}interface Uint16ArrayConstructor{readonly prototype:Uint16Array;new(length:number):Uint16Array;new(array:ArrayLike<number>|ArrayBufferLike):Uint16Array;new(buffer:ArrayBufferLike,byteOffset?:number,length?:number):Uint16Array;readonly BYTES_PER_ELEMENT:number;of(...items:number[]):Uint16Array;from(arrayLike:ArrayLike<number>):Uint16Array;from<T>(arrayLike:ArrayLike<T>,mapfn:(v:T,k:number)=>number,thisArg?:any):Uint16Array;}declare var Uint16Array:Uint16ArrayConstructor;interface Int32Array{readonly BYTES_PER_ELEMENT:number;readonly buffer:ArrayBufferLike;readonly byteLength:number;readonly byteOffset:number;copyWithin(target:number,start:number,end?:number):this;every(predicate:(value:number,index:number,array:Int32Array)=>unknown,thisArg?:any):boolean;fill(value:number,start?:number,end?:number):this;filter(predicate:(value:number,index:number,array:Int32Array)=>any,thisArg?:any):Int32Array;find(predicate:(value:number,index:number,obj:Int32Array)=>boolean,thisArg?:any):number|undefined;findIndex(predicate:(value:number,index:number,obj:Int32Array)=>boolean,thisArg?:any):number;forEach(callbackfn:(value:number,index:number,array:Int32Array)=>void,thisArg?:any):void;indexOf(searchElement:number,fromIndex?:number):number;join(separator?:string):string;lastIndexOf(searchElement:number,fromIndex?:number):number;readonly length:number;map(callbackfn:(value:number,index:number,array:Int32Array)=>number,thisArg?:any):Int32Array;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Int32Array)=>number):number;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Int32Array)=>number,initialValue:number):number;reduce<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Int32Array)=>U,initialValue:U):U;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Int32Array)=>number):number;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Int32Array)=>number,initialValue:number):number;reduceRight<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Int32Array)=>U,initialValue:U):U;reverse():Int32Array;set(array:ArrayLike<number>,offset?:number):void;slice(start?:number,end?:number):Int32Array;some(predicate:(value:number,index:number,array:Int32Array)=>unknown,thisArg?:any):boolean;sort(compareFn?:(a:number,b:number)=>number):this;subarray(begin?:number,end?:number):Int32Array;toLocaleString():string;toString():string;valueOf():Int32Array;[index:number]:number;}interface Int32ArrayConstructor{readonly prototype:Int32Array;new(length:number):Int32Array;new(array:ArrayLike<number>|ArrayBufferLike):Int32Array;new(buffer:ArrayBufferLike,byteOffset?:number,length?:number):Int32Array;readonly BYTES_PER_ELEMENT:number;of(...items:number[]):Int32Array;from(arrayLike:ArrayLike<number>):Int32Array;from<T>(arrayLike:ArrayLike<T>,mapfn:(v:T,k:number)=>number,thisArg?:any):Int32Array;}declare var Int32Array:Int32ArrayConstructor;interface Uint32Array{readonly BYTES_PER_ELEMENT:number;readonly buffer:ArrayBufferLike;readonly byteLength:number;readonly byteOffset:number;copyWithin(target:number,start:number,end?:number):this;every(predicate:(value:number,index:number,array:Uint32Array)=>unknown,thisArg?:any):boolean;fill(value:number,start?:number,end?:number):this;filter(predicate:(value:number,index:number,array:Uint32Array)=>any,thisArg?:any):Uint32Array;find(predicate:(value:number,index:number,obj:Uint32Array)=>boolean,thisArg?:any):number|undefined;findIndex(predicate:(value:number,index:number,obj:Uint32Array)=>boolean,thisArg?:any):number;forEach(callbackfn:(value:number,index:number,array:Uint32Array)=>void,thisArg?:any):void;indexOf(searchElement:number,fromIndex?:number):number;join(separator?:string):string;lastIndexOf(searchElement:number,fromIndex?:number):number;readonly length:number;map(callbackfn:(value:number,index:number,array:Uint32Array)=>number,thisArg?:any):Uint32Array;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint32Array)=>number):number;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint32Array)=>number,initialValue:number):number;reduce<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Uint32Array)=>U,initialValue:U):U;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint32Array)=>number):number;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Uint32Array)=>number,initialValue:number):number;reduceRight<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Uint32Array)=>U,initialValue:U):U;reverse():Uint32Array;set(array:ArrayLike<number>,offset?:number):void;slice(start?:number,end?:number):Uint32Array;some(predicate:(value:number,index:number,array:Uint32Array)=>unknown,thisArg?:any):boolean;sort(compareFn?:(a:number,b:number)=>number):this;subarray(begin?:number,end?:number):Uint32Array;toLocaleString():string;toString():string;valueOf():Uint32Array;[index:number]:number;}interface Uint32ArrayConstructor{readonly prototype:Uint32Array;new(length:number):Uint32Array;new(array:ArrayLike<number>|ArrayBufferLike):Uint32Array;new(buffer:ArrayBufferLike,byteOffset?:number,length?:number):Uint32Array;readonly BYTES_PER_ELEMENT:number;of(...items:number[]):Uint32Array;from(arrayLike:ArrayLike<number>):Uint32Array;from<T>(arrayLike:ArrayLike<T>,mapfn:(v:T,k:number)=>number,thisArg?:any):Uint32Array;}declare var Uint32Array:Uint32ArrayConstructor;interface Float32Array{readonly BYTES_PER_ELEMENT:number;readonly buffer:ArrayBufferLike;readonly byteLength:number;readonly byteOffset:number;copyWithin(target:number,start:number,end?:number):this;every(predicate:(value:number,index:number,array:Float32Array)=>unknown,thisArg?:any):boolean;fill(value:number,start?:number,end?:number):this;filter(predicate:(value:number,index:number,array:Float32Array)=>any,thisArg?:any):Float32Array;find(predicate:(value:number,index:number,obj:Float32Array)=>boolean,thisArg?:any):number|undefined;findIndex(predicate:(value:number,index:number,obj:Float32Array)=>boolean,thisArg?:any):number;forEach(callbackfn:(value:number,index:number,array:Float32Array)=>void,thisArg?:any):void;indexOf(searchElement:number,fromIndex?:number):number;join(separator?:string):string;lastIndexOf(searchElement:number,fromIndex?:number):number;readonly length:number;map(callbackfn:(value:number,index:number,array:Float32Array)=>number,thisArg?:any):Float32Array;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Float32Array)=>number):number;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Float32Array)=>number,initialValue:number):number;reduce<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Float32Array)=>U,initialValue:U):U;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Float32Array)=>number):number;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Float32Array)=>number,initialValue:number):number;reduceRight<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Float32Array)=>U,initialValue:U):U;reverse():Float32Array;set(array:ArrayLike<number>,offset?:number):void;slice(start?:number,end?:number):Float32Array;some(predicate:(value:number,index:number,array:Float32Array)=>unknown,thisArg?:any):boolean;sort(compareFn?:(a:number,b:number)=>number):this;subarray(begin?:number,end?:number):Float32Array;toLocaleString():string;toString():string;valueOf():Float32Array;[index:number]:number;}interface Float32ArrayConstructor{readonly prototype:Float32Array;new(length:number):Float32Array;new(array:ArrayLike<number>|ArrayBufferLike):Float32Array;new(buffer:ArrayBufferLike,byteOffset?:number,length?:number):Float32Array;readonly BYTES_PER_ELEMENT:number;of(...items:number[]):Float32Array;from(arrayLike:ArrayLike<number>):Float32Array;from<T>(arrayLike:ArrayLike<T>,mapfn:(v:T,k:number)=>number,thisArg?:any):Float32Array;}declare var Float32Array:Float32ArrayConstructor;interface Float64Array{readonly BYTES_PER_ELEMENT:number;readonly buffer:ArrayBufferLike;readonly byteLength:number;readonly byteOffset:number;copyWithin(target:number,start:number,end?:number):this;every(predicate:(value:number,index:number,array:Float64Array)=>unknown,thisArg?:any):boolean;fill(value:number,start?:number,end?:number):this;filter(predicate:(value:number,index:number,array:Float64Array)=>any,thisArg?:any):Float64Array;find(predicate:(value:number,index:number,obj:Float64Array)=>boolean,thisArg?:any):number|undefined;findIndex(predicate:(value:number,index:number,obj:Float64Array)=>boolean,thisArg?:any):number;forEach(callbackfn:(value:number,index:number,array:Float64Array)=>void,thisArg?:any):void;indexOf(searchElement:number,fromIndex?:number):number;join(separator?:string):string;lastIndexOf(searchElement:number,fromIndex?:number):number;readonly length:number;map(callbackfn:(value:number,index:number,array:Float64Array)=>number,thisArg?:any):Float64Array;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Float64Array)=>number):number;reduce(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Float64Array)=>number,initialValue:number):number;reduce<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Float64Array)=>U,initialValue:U):U;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Float64Array)=>number):number;reduceRight(callbackfn:(previousValue:number,currentValue:number,currentIndex:number,array:Float64Array)=>number,initialValue:number):number;reduceRight<U>(callbackfn:(previousValue:U,currentValue:number,currentIndex:number,array:Float64Array)=>U,initialValue:U):U;reverse():Float64Array;set(array:ArrayLike<number>,offset?:number):void;slice(start?:number,end?:number):Float64Array;some(predicate:(value:number,index:number,array:Float64Array)=>unknown,thisArg?:any):boolean;sort(compareFn?:(a:number,b:number)=>number):this;subarray(begin?:number,end?:number):Float64Array;toString():string;valueOf():Float64Array;[index:number]:number;}interface Float64ArrayConstructor{readonly prototype:Float64Array;new(length:number):Float64Array;new(array:ArrayLike<number>|ArrayBufferLike):Float64Array;new(buffer:ArrayBufferLike,byteOffset?:number,length?:number):Float64Array;readonly BYTES_PER_ELEMENT:number;of(...items:number[]):Float64Array;from(arrayLike:ArrayLike<number>):Float64Array;from<T>(arrayLike:ArrayLike<T>,mapfn:(v:T,k:number)=>number,thisArg?:any):Float64Array;}declare var Float64Array:Float64ArrayConstructor;declare namespace Intl{interface CollatorOptions{usage?:string|undefined;localeMatcher?:string|undefined;numeric?:boolean|undefined;caseFirst?:string|undefined;sensitivity?:string|undefined;ignorePunctuation?:boolean|undefined;}interface ResolvedCollatorOptions{locale:string;usage:string;sensitivity:string;ignorePunctuation:boolean;collation:string;caseFirst:string;numeric:boolean;}interface Collator{compare(x:string,y:string):number;resolvedOptions():ResolvedCollatorOptions;}var Collator:{new(locales?:string|string[],options?:CollatorOptions):Collator;(locales?:string|string[],options?:CollatorOptions):Collator;supportedLocalesOf(locales:string|string[],options?:CollatorOptions):string[];};interface NumberFormatOptions{localeMatcher?:string|undefined;style?:string|undefined;currency?:string|undefined;currencySign?:string|undefined;useGrouping?:boolean|undefined;minimumIntegerDigits?:number|undefined;minimumFractionDigits?:number|undefined;maximumFractionDigits?:number|undefined;minimumSignificantDigits?:number|undefined;maximumSignificantDigits?:number|undefined;}interface ResolvedNumberFormatOptions{locale:string;numberingSystem:string;style:string;currency?:string;minimumIntegerDigits:number;minimumFractionDigits:number;maximumFractionDigits:number;minimumSignificantDigits?:number;maximumSignificantDigits?:number;useGrouping:boolean;}interface NumberFormat{format(value:number):string;resolvedOptions():ResolvedNumberFormatOptions;}var NumberFormat:{new(locales?:string|string[],options?:NumberFormatOptions):NumberFormat;(locales?:string|string[],options?:NumberFormatOptions):NumberFormat;supportedLocalesOf(locales:string|string[],options?:NumberFormatOptions):string[];readonly prototype:NumberFormat;};interface DateTimeFormatOptions{localeMatcher?:\"best fit\"|\"lookup\"|undefined;weekday?:\"long\"|\"short\"|\"narrow\"|undefined;era?:\"long\"|\"short\"|\"narrow\"|undefined;year?:\"numeric\"|\"2-digit\"|undefined;month?:\"numeric\"|\"2-digit\"|\"long\"|\"short\"|\"narrow\"|undefined;day?:\"numeric\"|\"2-digit\"|undefined;hour?:\"numeric\"|\"2-digit\"|undefined;minute?:\"numeric\"|\"2-digit\"|undefined;second?:\"numeric\"|\"2-digit\"|undefined;timeZoneName?:\"short\"|\"long\"|\"shortOffset\"|\"longOffset\"|\"shortGeneric\"|\"longGeneric\"|undefined;formatMatcher?:\"best fit\"|\"basic\"|undefined;hour12?:boolean|undefined;timeZone?:string|undefined;}interface ResolvedDateTimeFormatOptions{locale:string;calendar:string;numberingSystem:string;timeZone:string;hour12?:boolean;weekday?:string;era?:string;year?:string;month?:string;day?:string;hour?:string;minute?:string;second?:string;timeZoneName?:string;}interface DateTimeFormat{format(date?:Date|number):string;resolvedOptions():ResolvedDateTimeFormatOptions;}var DateTimeFormat:{new(locales?:string|string[],options?:DateTimeFormatOptions):DateTimeFormat;(locales?:string|string[],options?:DateTimeFormatOptions):DateTimeFormat;supportedLocalesOf(locales:string|string[],options?:DateTimeFormatOptions):string[];readonly prototype:DateTimeFormat;};}interface String{localeCompare(that:string,locales?:string|string[],options?:Intl.CollatorOptions):number;}interface Number{toLocaleString(locales?:string|string[],options?:Intl.NumberFormatOptions):string;}interface Date{toLocaleString(locales?:string|string[],options?:Intl.DateTimeFormatOptions):string;toLocaleDateString(locales?:string|string[],options?:Intl.DateTimeFormatOptions):string;toLocaleTimeString(locales?:string|string[],options?:Intl.DateTimeFormatOptions):string;}`\n    }, {\n        fileName: \"lib.es6.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2015\" />\\n/// <reference lib=\"dom\" />\\n/// <reference lib=\"dom.iterable\" />\\n/// <reference lib=\"webworker.importscripts\" />\\n/// <reference lib=\"scripthost\" />\\n`\n    }, {\n        fileName: \"lib.esnext.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"es2022\" />\\n/// <reference lib=\"esnext.intl\" />\\n`\n    }, {\n        fileName: \"lib.esnext.full.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\n/// <reference lib=\"esnext\" />\\n/// <reference lib=\"dom\" />\\n/// <reference lib=\"webworker.importscripts\" />\\n/// <reference lib=\"scripthost\" />\\n/// <reference lib=\"dom.iterable\" />`\n    }, {\n        fileName: \"lib.esnext.intl.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ndeclare namespace Intl{interface NumberFormat{formatRange(start:number|bigint,end:number|bigint):string;formatRangeToParts(start:number|bigint,end:number|bigint):NumberFormatPart[];}}`\n    }, {\n        fileName: \"lib.esnext.promise.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface AggregateError extends Error{errors:any[]}interface AggregateErrorConstructor{new(errors:Iterable<any>,message?:string):AggregateError;(errors:Iterable<any>,message?:string):AggregateError;readonly prototype:AggregateError;}declare var AggregateError:AggregateErrorConstructor;interface PromiseConstructor{any<T>(values:(T|PromiseLike<T>)[]|Iterable<T|PromiseLike<T>>):Promise<T>}`\n    }, {\n        fileName: \"lib.esnext.string.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface String{replaceAll(searchValue:string|RegExp,replaceValue:string):string;replaceAll(searchValue:string|RegExp,replacer:(substring:string,...args:any[])=>string):string;}`\n    }, {\n        fileName: \"lib.esnext.weakref.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface WeakRef<T extends object>{readonly[Symbol.toStringTag]:\"WeakRef\";deref():T|undefined;}interface WeakRefConstructor{readonly prototype:WeakRef<any>;new<T extends object>(target?:T):WeakRef<T>;}declare var WeakRef:WeakRefConstructor;interface FinalizationRegistry{readonly[Symbol.toStringTag]:\"FinalizationRegistry\";register(target:object,heldValue:any,unregisterToken?:object):void;unregister(unregisterToken:object):void;}interface FinalizationRegistryConstructor{readonly prototype:FinalizationRegistry;new(cleanupCallback:(heldValue:any)=>void):FinalizationRegistry;}declare var FinalizationRegistry:FinalizationRegistryConstructor;`\n    }, {\n        fileName: \"lib.scripthost.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface ActiveXObject{new(s:string):any;}declare var ActiveXObject:ActiveXObject;interface ITextWriter{Write(s:string):void;WriteLine(s:string):void;Close():void;}interface TextStreamBase{Column:number;Line:number;Close():void;}interface TextStreamWriter extends TextStreamBase{Write(s:string):void;WriteBlankLines(intLines:number):void;WriteLine(s:string):void;}interface TextStreamReader extends TextStreamBase{Read(characters:number):string;ReadAll():string;ReadLine():string;Skip(characters:number):void;SkipLine():void;AtEndOfLine:boolean;AtEndOfStream:boolean;}declare var WScript:{Echo(s:any):void;StdErr:TextStreamWriter;StdOut:TextStreamWriter;Arguments:{length:number;Item(n:number):string;};ScriptFullName:string;Quit(exitCode?:number):number;BuildVersion:number;FullName:string;Interactive:boolean;Name:string;Path:string;ScriptName:string;StdIn:TextStreamReader;Version:string;ConnectObject(objEventSource:any,strPrefix:string):void;CreateObject(strProgID:string,strPrefix?:string):any;DisconnectObject(obj:any):void;GetObject(strPathname:string,strProgID?:string,strPrefix?:string):any;Sleep(intTime:number):void;};declare var WSH:typeof WScript;declare class SafeArray<T=any>{private constructor();private SafeArray_typekey:SafeArray<T>;}interface Enumerator<T=any>{atEnd():boolean;item():T;moveFirst():void;moveNext():void;}interface EnumeratorConstructor{new<T=any>(safearray:SafeArray<T>):Enumerator<T>;new<T=any>(collection:{Item(index:any):T}):Enumerator<T>;new<T=any>(collection:any):Enumerator<T>;}declare var Enumerator:EnumeratorConstructor;interface VBArray<T=any>{dimensions():number;getItem(dimension1Index:number,...dimensionNIndexes:number[]):T;lbound(dimension?:number):number;ubound(dimension?:number):number;toArray():T[];}interface VBArrayConstructor{new<T=any>(safeArray:SafeArray<T>):VBArray<T>;}declare var VBArray:VBArrayConstructor;declare class VarDate{private constructor();private VarDate_typekey:VarDate;}interface DateConstructor{new(vd:VarDate):Date;}interface Date{getVarDate:()=>VarDate;}`\n    }, {\n        fileName: \"lib.webworker.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface AddEventListenerOptions extends EventListenerOptions{once?:boolean;passive?:boolean;signal?:AbortSignal;}interface AesCbcParams extends Algorithm{iv:BufferSource;}interface AesCtrParams extends Algorithm{counter:BufferSource;length:number;}interface AesDerivedKeyParams extends Algorithm{length:number;}interface AesGcmParams extends Algorithm{additionalData?:BufferSource;iv:BufferSource;tagLength?:number;}interface AesKeyAlgorithm extends KeyAlgorithm{length:number;}interface AesKeyGenParams extends Algorithm{length:number;}interface Algorithm{name:string;}interface AudioConfiguration{bitrate?:number;channels?:string;contentType:string;samplerate?:number;spatialRendering?:boolean;}interface BlobPropertyBag{endings?:EndingType;type?:string;}interface CacheQueryOptions{ignoreMethod?:boolean;ignoreSearch?:boolean;ignoreVary?:boolean;}interface ClientQueryOptions{includeUncontrolled?:boolean;type?:ClientTypes;}interface CloseEventInit extends EventInit{code?:number;reason?:string;wasClean?:boolean;}interface CryptoKeyPair{privateKey:CryptoKey;publicKey:CryptoKey;}interface CustomEventInit<T=any>extends EventInit{detail?:T;}interface DOMMatrix2DInit{a?:number;b?:number;c?:number;d?:number;e?:number;f?:number;m11?:number;m12?:number;m21?:number;m22?:number;m41?:number;m42?:number;}interface DOMMatrixInit extends DOMMatrix2DInit{is2D?:boolean;m13?:number;m14?:number;m23?:number;m24?:number;m31?:number;m32?:number;m33?:number;m34?:number;m43?:number;m44?:number;}interface DOMPointInit{w?:number;x?:number;y?:number;z?:number;}interface DOMQuadInit{p1?:DOMPointInit;p2?:DOMPointInit;p3?:DOMPointInit;p4?:DOMPointInit;}interface DOMRectInit{height?:number;width?:number;x?:number;y?:number;}interface EcKeyGenParams extends Algorithm{namedCurve:NamedCurve;}interface EcKeyImportParams extends Algorithm{namedCurve:NamedCurve;}interface EcdhKeyDeriveParams extends Algorithm{public:CryptoKey;}interface EcdsaParams extends Algorithm{hash:HashAlgorithmIdentifier;}interface ErrorEventInit extends EventInit{colno?:number;error?:any;filename?:string;lineno?:number;message?:string;}interface EventInit{bubbles?:boolean;cancelable?:boolean;composed?:boolean;}interface EventListenerOptions{capture?:boolean;}interface EventSourceInit{withCredentials?:boolean;}interface ExtendableEventInit extends EventInit{}interface ExtendableMessageEventInit extends ExtendableEventInit{data?:any;lastEventId?:string;origin?:string;ports?:MessagePort[];source?:Client|ServiceWorker|MessagePort|null;}interface FetchEventInit extends ExtendableEventInit{clientId?:string;handled?:Promise<undefined>;preloadResponse?:Promise<any>;replacesClientId?:string;request:Request;resultingClientId?:string;}interface FilePropertyBag extends BlobPropertyBag{lastModified?:number;}interface FileSystemGetDirectoryOptions{create?:boolean;}interface FileSystemGetFileOptions{create?:boolean;}interface FileSystemRemoveOptions{recursive?:boolean;}interface FontFaceDescriptors{display?:string;featureSettings?:string;stretch?:string;style?:string;unicodeRange?:string;variant?:string;weight?:string;}interface FontFaceSetLoadEventInit extends EventInit{fontfaces?:FontFace[];}interface GetNotificationOptions{tag?:string;}interface HkdfParams extends Algorithm{hash:HashAlgorithmIdentifier;info:BufferSource;salt:BufferSource;}interface HmacImportParams extends Algorithm{hash:HashAlgorithmIdentifier;length?:number;}interface HmacKeyGenParams extends Algorithm{hash:HashAlgorithmIdentifier;length?:number;}interface IDBDatabaseInfo{name?:string;version?:number;}interface IDBIndexParameters{multiEntry?:boolean;unique?:boolean;}interface IDBObjectStoreParameters{autoIncrement?:boolean;keyPath?:string|string[]|null;}interface IDBVersionChangeEventInit extends EventInit{newVersion?:number|null;oldVersion?:number;}interface ImageBitmapOptions{colorSpaceConversion?:ColorSpaceConversion;imageOrientation?:ImageOrientation;premultiplyAlpha?:PremultiplyAlpha;resizeHeight?:number;resizeQuality?:ResizeQuality;resizeWidth?:number;}interface ImageBitmapRenderingContextSettings{alpha?:boolean;}interface ImageDataSettings{colorSpace?:PredefinedColorSpace;}interface ImportMeta{url:string;}interface JsonWebKey{alg?:string;crv?:string;d?:string;dp?:string;dq?:string;e?:string;ext?:boolean;k?:string;key_ops?:string[];kty?:string;n?:string;oth?:RsaOtherPrimesInfo[];p?:string;q?:string;qi?:string;use?:string;x?:string;y?:string;}interface KeyAlgorithm{name:string;}interface LockInfo{clientId?:string;mode?:LockMode;name?:string;}interface LockManagerSnapshot{held?:LockInfo[];pending?:LockInfo[];}interface LockOptions{ifAvailable?:boolean;mode?:LockMode;signal?:AbortSignal;steal?:boolean;}interface MediaCapabilitiesDecodingInfo extends MediaCapabilitiesInfo{configuration?:MediaDecodingConfiguration;}interface MediaCapabilitiesEncodingInfo extends MediaCapabilitiesInfo{configuration?:MediaEncodingConfiguration;}interface MediaCapabilitiesInfo{powerEfficient:boolean;smooth:boolean;supported:boolean;}interface MediaConfiguration{audio?:AudioConfiguration;video?:VideoConfiguration;}interface MediaDecodingConfiguration extends MediaConfiguration{type:MediaDecodingType;}interface MediaEncodingConfiguration extends MediaConfiguration{type:MediaEncodingType;}interface MessageEventInit<T=any>extends EventInit{data?:T;lastEventId?:string;origin?:string;ports?:MessagePort[];source?:MessageEventSource|null;}interface MultiCacheQueryOptions extends CacheQueryOptions{cacheName?:string;}interface NavigationPreloadState{enabled?:boolean;headerValue?:string;}interface NotificationAction{action:string;icon?:string;title:string;}interface NotificationEventInit extends ExtendableEventInit{action?:string;notification:Notification;}interface NotificationOptions{actions?:NotificationAction[];badge?:string;body?:string;data?:any;dir?:NotificationDirection;icon?:string;image?:string;lang?:string;renotify?:boolean;requireInteraction?:boolean;silent?:boolean;tag?:string;timestamp?:EpochTimeStamp;vibrate?:VibratePattern;}interface Pbkdf2Params extends Algorithm{hash:HashAlgorithmIdentifier;iterations:number;salt:BufferSource;}interface PerformanceMarkOptions{detail?:any;startTime?:DOMHighResTimeStamp;}interface PerformanceMeasureOptions{detail?:any;duration?:DOMHighResTimeStamp;end?:string|DOMHighResTimeStamp;start?:string|DOMHighResTimeStamp;}interface PerformanceObserverInit{buffered?:boolean;entryTypes?:string[];type?:string;}interface PermissionDescriptor{name:PermissionName;}interface ProgressEventInit extends EventInit{lengthComputable?:boolean;loaded?:number;total?:number;}interface PromiseRejectionEventInit extends EventInit{promise:Promise<any>;reason?:any;}interface PushEventInit extends ExtendableEventInit{data?:PushMessageDataInit;}interface PushSubscriptionJSON{endpoint?:string;expirationTime?:EpochTimeStamp|null;keys?:Record<string,string>;}interface PushSubscriptionOptionsInit{applicationServerKey?:BufferSource|string|null;userVisibleOnly?:boolean;}interface QueuingStrategy<T=any>{highWaterMark?:number;size?:QueuingStrategySize<T>;}interface QueuingStrategyInit{highWaterMark:number;}interface RTCEncodedAudioFrameMetadata{contributingSources?:number[];synchronizationSource?:number;}interface RTCEncodedVideoFrameMetadata{contributingSources?:number[];dependencies?:number[];frameId?:number;height?:number;spatialIndex?:number;synchronizationSource?:number;temporalIndex?:number;width?:number;}interface ReadableStreamDefaultReadDoneResult{done:true;value?:undefined;}interface ReadableStreamDefaultReadValueResult<T>{done:false;value:T;}interface ReadableWritablePair<R=any,W=any>{readable:ReadableStream<R>;writable:WritableStream<W>;}interface RegistrationOptions{scope?:string;type?:WorkerType;updateViaCache?:ServiceWorkerUpdateViaCache;}interface RequestInit{body?:BodyInit|null;cache?:RequestCache;credentials?:RequestCredentials;headers?:HeadersInit;integrity?:string;keepalive?:boolean;method?:string;mode?:RequestMode;redirect?:RequestRedirect;referrer?:string;referrerPolicy?:ReferrerPolicy;signal?:AbortSignal|null;window?:null;}interface ResponseInit{headers?:HeadersInit;status?:number;statusText?:string;}interface RsaHashedImportParams extends Algorithm{hash:HashAlgorithmIdentifier;}interface RsaHashedKeyGenParams extends RsaKeyGenParams{hash:HashAlgorithmIdentifier;}interface RsaKeyGenParams extends Algorithm{modulusLength:number;publicExponent:BigInteger;}interface RsaOaepParams extends Algorithm{label?:BufferSource;}interface RsaOtherPrimesInfo{d?:string;r?:string;t?:string;}interface RsaPssParams extends Algorithm{saltLength:number;}interface SecurityPolicyViolationEventInit extends EventInit{blockedURI?:string;columnNumber?:number;disposition:SecurityPolicyViolationEventDisposition;documentURI:string;effectiveDirective:string;lineNumber?:number;originalPolicy:string;referrer?:string;sample?:string;sourceFile?:string;statusCode:number;violatedDirective:string;}interface StorageEstimate{quota?:number;usage?:number;}interface StreamPipeOptions{preventAbort?:boolean;preventCancel?:boolean;preventClose?:boolean;signal?:AbortSignal;}interface StructuredSerializeOptions{transfer?:Transferable[];}interface TextDecodeOptions{stream?:boolean;}interface TextDecoderOptions{fatal?:boolean;ignoreBOM?:boolean;}interface TextEncoderEncodeIntoResult{read?:number;written?:number;}interface Transformer<I=any,O=any>{flush?:TransformerFlushCallback<O>;readableType?:undefined;start?:TransformerStartCallback<O>;transform?:TransformerTransformCallback<I,O>;writableType?:undefined;}interface UnderlyingSink<W=any>{abort?:UnderlyingSinkAbortCallback;close?:UnderlyingSinkCloseCallback;start?:UnderlyingSinkStartCallback;type?:undefined;write?:UnderlyingSinkWriteCallback<W>;}interface UnderlyingSource<R=any>{cancel?:UnderlyingSourceCancelCallback;pull?:UnderlyingSourcePullCallback<R>;start?:UnderlyingSourceStartCallback<R>;type?:undefined;}interface VideoColorSpaceInit{fullRange?:boolean;matrix?:VideoMatrixCoefficients;primaries?:VideoColorPrimaries;transfer?:VideoTransferCharacteristics;}interface VideoConfiguration{bitrate:number;colorGamut?:ColorGamut;contentType:string;framerate:number;hdrMetadataType?:HdrMetadataType;height:number;scalabilityMode?:string;transferFunction?:TransferFunction;width:number;}interface WebGLContextAttributes{alpha?:boolean;antialias?:boolean;depth?:boolean;desynchronized?:boolean;failIfMajorPerformanceCaveat?:boolean;powerPreference?:WebGLPowerPreference;premultipliedAlpha?:boolean;preserveDrawingBuffer?:boolean;stencil?:boolean;}interface WebGLContextEventInit extends EventInit{statusMessage?:string;}interface WorkerOptions{credentials?:RequestCredentials;name?:string;type?:WorkerType;}interface ANGLE_instanced_arrays{drawArraysInstancedANGLE(mode:GLenum,first:GLint,count:GLsizei,primcount:GLsizei):void;drawElementsInstancedANGLE(mode:GLenum,count:GLsizei,type:GLenum,offset:GLintptr,primcount:GLsizei):void;vertexAttribDivisorANGLE(index:GLuint,divisor:GLuint):void;readonly VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE:GLenum;}interface AbortController{readonly signal:AbortSignal;}declare var AbortController:{prototype:AbortController;new():AbortController;};interface AbortSignalEventMap{\"abort\":Event;}interface AbortSignal extends EventTarget{readonly aborted:boolean;onabort:((this:AbortSignal,ev:Event)=>any)|null;readonly reason:any;throwIfAborted():void;addEventListener<K extends keyof AbortSignalEventMap>(type:K,listener:(this:AbortSignal,ev:AbortSignalEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof AbortSignalEventMap>(type:K,listener:(this:AbortSignal,ev:AbortSignalEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var AbortSignal:{prototype:AbortSignal;new():AbortSignal;abort(reason?:any):AbortSignal;};interface AbstractWorkerEventMap{\"error\":ErrorEvent;}interface AbstractWorker{onerror:((this:AbstractWorker,ev:ErrorEvent)=>any)|null;addEventListener<K extends keyof AbstractWorkerEventMap>(type:K,listener:(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof AbstractWorkerEventMap>(type:K,listener:(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}interface AnimationFrameProvider{cancelAnimationFrame(handle:number):void;requestAnimationFrame(callback:FrameRequestCallback):number;}interface Blob{readonly size:number;readonly type:string;arrayBuffer():Promise<ArrayBuffer>;slice(start?:number,end?:number,contentType?:string):Blob;stream():ReadableStream<Uint8Array>;text():Promise<string>;}declare var Blob:{prototype:Blob;new(blobParts?:BlobPart[],options?:BlobPropertyBag):Blob;};interface Body{readonly body:ReadableStream<Uint8Array>|null;readonly bodyUsed:boolean;arrayBuffer():Promise<ArrayBuffer>;blob():Promise<Blob>;formData():Promise<FormData>;json():Promise<any>;text():Promise<string>;}interface BroadcastChannelEventMap{\"message\":MessageEvent;\"messageerror\":MessageEvent;}interface BroadcastChannel extends EventTarget{readonly name:string;onmessage:((this:BroadcastChannel,ev:MessageEvent)=>any)|null;onmessageerror:((this:BroadcastChannel,ev:MessageEvent)=>any)|null;close():void;postMessage(message:any):void;addEventListener<K extends keyof BroadcastChannelEventMap>(type:K,listener:(this:BroadcastChannel,ev:BroadcastChannelEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof BroadcastChannelEventMap>(type:K,listener:(this:BroadcastChannel,ev:BroadcastChannelEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var BroadcastChannel:{prototype:BroadcastChannel;new(name:string):BroadcastChannel;};interface ByteLengthQueuingStrategy extends QueuingStrategy<ArrayBufferView>{readonly highWaterMark:number;readonly size:QueuingStrategySize<ArrayBufferView>;}declare var ByteLengthQueuingStrategy:{prototype:ByteLengthQueuingStrategy;new(init:QueuingStrategyInit):ByteLengthQueuingStrategy;};interface Cache{add(request:RequestInfo|URL):Promise<void>;addAll(requests:RequestInfo[]):Promise<void>;delete(request:RequestInfo|URL,options?:CacheQueryOptions):Promise<boolean>;keys(request?:RequestInfo|URL,options?:CacheQueryOptions):Promise<ReadonlyArray<Request>>;match(request:RequestInfo|URL,options?:CacheQueryOptions):Promise<Response|undefined>;matchAll(request?:RequestInfo|URL,options?:CacheQueryOptions):Promise<ReadonlyArray<Response>>;put(request:RequestInfo|URL,response:Response):Promise<void>;}declare var Cache:{prototype:Cache;new():Cache;};interface CacheStorage{delete(cacheName:string):Promise<boolean>;has(cacheName:string):Promise<boolean>;keys():Promise<string[]>;match(request:RequestInfo|URL,options?:MultiCacheQueryOptions):Promise<Response|undefined>;open(cacheName:string):Promise<Cache>;}declare var CacheStorage:{prototype:CacheStorage;new():CacheStorage;};interface CanvasGradient{addColorStop(offset:number,color:string):void;}declare var CanvasGradient:{prototype:CanvasGradient;new():CanvasGradient;};interface CanvasPath{arc(x:number,y:number,radius:number,startAngle:number,endAngle:number,counterclockwise?:boolean):void;arcTo(x1:number,y1:number,x2:number,y2:number,radius:number):void;bezierCurveTo(cp1x:number,cp1y:number,cp2x:number,cp2y:number,x:number,y:number):void;closePath():void;ellipse(x:number,y:number,radiusX:number,radiusY:number,rotation:number,startAngle:number,endAngle:number,counterclockwise?:boolean):void;lineTo(x:number,y:number):void;moveTo(x:number,y:number):void;quadraticCurveTo(cpx:number,cpy:number,x:number,y:number):void;rect(x:number,y:number,w:number,h:number):void;}interface CanvasPattern{setTransform(transform?:DOMMatrix2DInit):void;}declare var CanvasPattern:{prototype:CanvasPattern;new():CanvasPattern;};interface Client{readonly frameType:FrameType;readonly id:string;readonly type:ClientTypes;readonly url:string;postMessage(message:any,transfer:Transferable[]):void;postMessage(message:any,options?:StructuredSerializeOptions):void;}declare var Client:{prototype:Client;new():Client;};interface Clients{claim():Promise<void>;get(id:string):Promise<Client|undefined>;matchAll<T extends ClientQueryOptions>(options?:T):Promise<ReadonlyArray<T[\"type\"]extends\"window\"?WindowClient:Client>>;openWindow(url:string|URL):Promise<WindowClient|null>;}declare var Clients:{prototype:Clients;new():Clients;};interface CloseEvent extends Event{readonly code:number;readonly reason:string;readonly wasClean:boolean;}declare var CloseEvent:{prototype:CloseEvent;new(type:string,eventInitDict?:CloseEventInit):CloseEvent;};interface CountQueuingStrategy extends QueuingStrategy{readonly highWaterMark:number;readonly size:QueuingStrategySize;}declare var CountQueuingStrategy:{prototype:CountQueuingStrategy;new(init:QueuingStrategyInit):CountQueuingStrategy;};interface Crypto{readonly subtle:SubtleCrypto;getRandomValues<T extends ArrayBufferView|null>(array:T):T;randomUUID():string;}declare var Crypto:{prototype:Crypto;new():Crypto;};interface CryptoKey{readonly algorithm:KeyAlgorithm;readonly extractable:boolean;readonly type:KeyType;readonly usages:KeyUsage[];}declare var CryptoKey:{prototype:CryptoKey;new():CryptoKey;};interface CustomEvent<T=any>extends Event{readonly detail:T;initCustomEvent(type:string,bubbles?:boolean,cancelable?:boolean,detail?:T):void;}declare var CustomEvent:{prototype:CustomEvent;new<T>(type:string,eventInitDict?:CustomEventInit<T>):CustomEvent<T>;};interface DOMException extends Error{readonly code:number;readonly message:string;readonly name:string;readonly ABORT_ERR:number;readonly DATA_CLONE_ERR:number;readonly DOMSTRING_SIZE_ERR:number;readonly HIERARCHY_REQUEST_ERR:number;readonly INDEX_SIZE_ERR:number;readonly INUSE_ATTRIBUTE_ERR:number;readonly INVALID_ACCESS_ERR:number;readonly INVALID_CHARACTER_ERR:number;readonly INVALID_MODIFICATION_ERR:number;readonly INVALID_NODE_TYPE_ERR:number;readonly INVALID_STATE_ERR:number;readonly NAMESPACE_ERR:number;readonly NETWORK_ERR:number;readonly NOT_FOUND_ERR:number;readonly NOT_SUPPORTED_ERR:number;readonly NO_DATA_ALLOWED_ERR:number;readonly NO_MODIFICATION_ALLOWED_ERR:number;readonly QUOTA_EXCEEDED_ERR:number;readonly SECURITY_ERR:number;readonly SYNTAX_ERR:number;readonly TIMEOUT_ERR:number;readonly TYPE_MISMATCH_ERR:number;readonly URL_MISMATCH_ERR:number;readonly VALIDATION_ERR:number;readonly WRONG_DOCUMENT_ERR:number;}declare var DOMException:{prototype:DOMException;new(message?:string,name?:string):DOMException;readonly ABORT_ERR:number;readonly DATA_CLONE_ERR:number;readonly DOMSTRING_SIZE_ERR:number;readonly HIERARCHY_REQUEST_ERR:number;readonly INDEX_SIZE_ERR:number;readonly INUSE_ATTRIBUTE_ERR:number;readonly INVALID_ACCESS_ERR:number;readonly INVALID_CHARACTER_ERR:number;readonly INVALID_MODIFICATION_ERR:number;readonly INVALID_NODE_TYPE_ERR:number;readonly INVALID_STATE_ERR:number;readonly NAMESPACE_ERR:number;readonly NETWORK_ERR:number;readonly NOT_FOUND_ERR:number;readonly NOT_SUPPORTED_ERR:number;readonly NO_DATA_ALLOWED_ERR:number;readonly NO_MODIFICATION_ALLOWED_ERR:number;readonly QUOTA_EXCEEDED_ERR:number;readonly SECURITY_ERR:number;readonly SYNTAX_ERR:number;readonly TIMEOUT_ERR:number;readonly TYPE_MISMATCH_ERR:number;readonly URL_MISMATCH_ERR:number;readonly VALIDATION_ERR:number;readonly WRONG_DOCUMENT_ERR:number;};interface DOMMatrix extends DOMMatrixReadOnly{a:number;b:number;c:number;d:number;e:number;f:number;m11:number;m12:number;m13:number;m14:number;m21:number;m22:number;m23:number;m24:number;m31:number;m32:number;m33:number;m34:number;m41:number;m42:number;m43:number;m44:number;invertSelf():DOMMatrix;multiplySelf(other?:DOMMatrixInit):DOMMatrix;preMultiplySelf(other?:DOMMatrixInit):DOMMatrix;rotateAxisAngleSelf(x?:number,y?:number,z?:number,angle?:number):DOMMatrix;rotateFromVectorSelf(x?:number,y?:number):DOMMatrix;rotateSelf(rotX?:number,rotY?:number,rotZ?:number):DOMMatrix;scale3dSelf(scale?:number,originX?:number,originY?:number,originZ?:number):DOMMatrix;scaleSelf(scaleX?:number,scaleY?:number,scaleZ?:number,originX?:number,originY?:number,originZ?:number):DOMMatrix;skewXSelf(sx?:number):DOMMatrix;skewYSelf(sy?:number):DOMMatrix;translateSelf(tx?:number,ty?:number,tz?:number):DOMMatrix;}declare var DOMMatrix:{prototype:DOMMatrix;new(init?:string|number[]):DOMMatrix;fromFloat32Array(array32:Float32Array):DOMMatrix;fromFloat64Array(array64:Float64Array):DOMMatrix;fromMatrix(other?:DOMMatrixInit):DOMMatrix;};interface DOMMatrixReadOnly{readonly a:number;readonly b:number;readonly c:number;readonly d:number;readonly e:number;readonly f:number;readonly is2D:boolean;readonly isIdentity:boolean;readonly m11:number;readonly m12:number;readonly m13:number;readonly m14:number;readonly m21:number;readonly m22:number;readonly m23:number;readonly m24:number;readonly m31:number;readonly m32:number;readonly m33:number;readonly m34:number;readonly m41:number;readonly m42:number;readonly m43:number;readonly m44:number;flipX():DOMMatrix;flipY():DOMMatrix;inverse():DOMMatrix;multiply(other?:DOMMatrixInit):DOMMatrix;rotate(rotX?:number,rotY?:number,rotZ?:number):DOMMatrix;rotateAxisAngle(x?:number,y?:number,z?:number,angle?:number):DOMMatrix;rotateFromVector(x?:number,y?:number):DOMMatrix;scale(scaleX?:number,scaleY?:number,scaleZ?:number,originX?:number,originY?:number,originZ?:number):DOMMatrix;scale3d(scale?:number,originX?:number,originY?:number,originZ?:number):DOMMatrix;scaleNonUniform(scaleX?:number,scaleY?:number):DOMMatrix;skewX(sx?:number):DOMMatrix;skewY(sy?:number):DOMMatrix;toFloat32Array():Float32Array;toFloat64Array():Float64Array;toJSON():any;transformPoint(point?:DOMPointInit):DOMPoint;translate(tx?:number,ty?:number,tz?:number):DOMMatrix;}declare var DOMMatrixReadOnly:{prototype:DOMMatrixReadOnly;new(init?:string|number[]):DOMMatrixReadOnly;fromFloat32Array(array32:Float32Array):DOMMatrixReadOnly;fromFloat64Array(array64:Float64Array):DOMMatrixReadOnly;fromMatrix(other?:DOMMatrixInit):DOMMatrixReadOnly;};interface DOMPoint extends DOMPointReadOnly{w:number;x:number;y:number;z:number;}declare var DOMPoint:{prototype:DOMPoint;new(x?:number,y?:number,z?:number,w?:number):DOMPoint;fromPoint(other?:DOMPointInit):DOMPoint;};interface DOMPointReadOnly{readonly w:number;readonly x:number;readonly y:number;readonly z:number;matrixTransform(matrix?:DOMMatrixInit):DOMPoint;toJSON():any;}declare var DOMPointReadOnly:{prototype:DOMPointReadOnly;new(x?:number,y?:number,z?:number,w?:number):DOMPointReadOnly;fromPoint(other?:DOMPointInit):DOMPointReadOnly;};interface DOMQuad{readonly p1:DOMPoint;readonly p2:DOMPoint;readonly p3:DOMPoint;readonly p4:DOMPoint;getBounds():DOMRect;toJSON():any;}declare var DOMQuad:{prototype:DOMQuad;new(p1?:DOMPointInit,p2?:DOMPointInit,p3?:DOMPointInit,p4?:DOMPointInit):DOMQuad;fromQuad(other?:DOMQuadInit):DOMQuad;fromRect(other?:DOMRectInit):DOMQuad;};interface DOMRect extends DOMRectReadOnly{height:number;width:number;x:number;y:number;}declare var DOMRect:{prototype:DOMRect;new(x?:number,y?:number,width?:number,height?:number):DOMRect;fromRect(other?:DOMRectInit):DOMRect;};interface DOMRectReadOnly{readonly bottom:number;readonly height:number;readonly left:number;readonly right:number;readonly top:number;readonly width:number;readonly x:number;readonly y:number;toJSON():any;}declare var DOMRectReadOnly:{prototype:DOMRectReadOnly;new(x?:number,y?:number,width?:number,height?:number):DOMRectReadOnly;fromRect(other?:DOMRectInit):DOMRectReadOnly;};interface DOMStringList{readonly length:number;contains(string:string):boolean;item(index:number):string|null;[index:number]:string;}declare var DOMStringList:{prototype:DOMStringList;new():DOMStringList;};interface DedicatedWorkerGlobalScopeEventMap extends WorkerGlobalScopeEventMap{\"message\":MessageEvent;\"messageerror\":MessageEvent;}interface DedicatedWorkerGlobalScope extends WorkerGlobalScope,AnimationFrameProvider{readonly name:string;onmessage:((this:DedicatedWorkerGlobalScope,ev:MessageEvent)=>any)|null;onmessageerror:((this:DedicatedWorkerGlobalScope,ev:MessageEvent)=>any)|null;close():void;postMessage(message:any,transfer:Transferable[]):void;postMessage(message:any,options?:StructuredSerializeOptions):void;addEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type:K,listener:(this:DedicatedWorkerGlobalScope,ev:DedicatedWorkerGlobalScopeEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type:K,listener:(this:DedicatedWorkerGlobalScope,ev:DedicatedWorkerGlobalScopeEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var DedicatedWorkerGlobalScope:{prototype:DedicatedWorkerGlobalScope;new():DedicatedWorkerGlobalScope;};interface EXT_blend_minmax{readonly MAX_EXT:GLenum;readonly MIN_EXT:GLenum;}interface EXT_color_buffer_float{}interface EXT_color_buffer_half_float{readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT:GLenum;readonly RGB16F_EXT:GLenum;readonly RGBA16F_EXT:GLenum;readonly UNSIGNED_NORMALIZED_EXT:GLenum;}interface EXT_float_blend{}interface EXT_frag_depth{}interface EXT_sRGB{readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT:GLenum;readonly SRGB8_ALPHA8_EXT:GLenum;readonly SRGB_ALPHA_EXT:GLenum;readonly SRGB_EXT:GLenum;}interface EXT_shader_texture_lod{}interface EXT_texture_compression_rgtc{readonly COMPRESSED_RED_GREEN_RGTC2_EXT:GLenum;readonly COMPRESSED_RED_RGTC1_EXT:GLenum;readonly COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT:GLenum;readonly COMPRESSED_SIGNED_RED_RGTC1_EXT:GLenum;}interface EXT_texture_filter_anisotropic{readonly MAX_TEXTURE_MAX_ANISOTROPY_EXT:GLenum;readonly TEXTURE_MAX_ANISOTROPY_EXT:GLenum;}interface ErrorEvent extends Event{readonly colno:number;readonly error:any;readonly filename:string;readonly lineno:number;readonly message:string;}declare var ErrorEvent:{prototype:ErrorEvent;new(type:string,eventInitDict?:ErrorEventInit):ErrorEvent;};interface Event{readonly bubbles:boolean;cancelBubble:boolean;readonly cancelable:boolean;readonly composed:boolean;readonly currentTarget:EventTarget|null;readonly defaultPrevented:boolean;readonly eventPhase:number;readonly isTrusted:boolean;returnValue:boolean;readonly srcElement:EventTarget|null;readonly target:EventTarget|null;readonly timeStamp:DOMHighResTimeStamp;readonly type:string;composedPath():EventTarget[];initEvent(type:string,bubbles?:boolean,cancelable?:boolean):void;preventDefault():void;stopImmediatePropagation():void;stopPropagation():void;readonly AT_TARGET:number;readonly BUBBLING_PHASE:number;readonly CAPTURING_PHASE:number;readonly NONE:number;}declare var Event:{prototype:Event;new(type:string,eventInitDict?:EventInit):Event;readonly AT_TARGET:number;readonly BUBBLING_PHASE:number;readonly CAPTURING_PHASE:number;readonly NONE:number;};interface EventListener{(evt:Event):void;}interface EventListenerObject{handleEvent(object:Event):void;}interface EventSourceEventMap{\"error\":Event;\"message\":MessageEvent;\"open\":Event;}interface EventSource extends EventTarget{onerror:((this:EventSource,ev:Event)=>any)|null;onmessage:((this:EventSource,ev:MessageEvent)=>any)|null;onopen:((this:EventSource,ev:Event)=>any)|null;readonly readyState:number;readonly url:string;readonly withCredentials:boolean;close():void;readonly CLOSED:number;readonly CONNECTING:number;readonly OPEN:number;addEventListener<K extends keyof EventSourceEventMap>(type:K,listener:(this:EventSource,ev:EventSourceEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:(this:EventSource,event:MessageEvent)=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof EventSourceEventMap>(type:K,listener:(this:EventSource,ev:EventSourceEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:(this:EventSource,event:MessageEvent)=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var EventSource:{prototype:EventSource;new(url:string|URL,eventSourceInitDict?:EventSourceInit):EventSource;readonly CLOSED:number;readonly CONNECTING:number;readonly OPEN:number;};interface EventTarget{addEventListener(type:string,callback:EventListenerOrEventListenerObject|null,options?:AddEventListenerOptions|boolean):void;dispatchEvent(event:Event):boolean;removeEventListener(type:string,callback:EventListenerOrEventListenerObject|null,options?:EventListenerOptions|boolean):void;}declare var EventTarget:{prototype:EventTarget;new():EventTarget;};interface ExtendableEvent extends Event{waitUntil(f:any):void;}declare var ExtendableEvent:{prototype:ExtendableEvent;new(type:string,eventInitDict?:ExtendableEventInit):ExtendableEvent;};interface ExtendableMessageEvent extends ExtendableEvent{readonly data:any;readonly lastEventId:string;readonly origin:string;readonly ports:ReadonlyArray<MessagePort>;readonly source:Client|ServiceWorker|MessagePort|null;}declare var ExtendableMessageEvent:{prototype:ExtendableMessageEvent;new(type:string,eventInitDict?:ExtendableMessageEventInit):ExtendableMessageEvent;};interface FetchEvent extends ExtendableEvent{readonly clientId:string;readonly handled:Promise<undefined>;readonly preloadResponse:Promise<any>;readonly request:Request;readonly resultingClientId:string;respondWith(r:Response|PromiseLike<Response>):void;}declare var FetchEvent:{prototype:FetchEvent;new(type:string,eventInitDict:FetchEventInit):FetchEvent;};interface File extends Blob{readonly lastModified:number;readonly name:string;readonly webkitRelativePath:string;}declare var File:{prototype:File;new(fileBits:BlobPart[],fileName:string,options?:FilePropertyBag):File;};interface FileList{readonly length:number;item(index:number):File|null;[index:number]:File;}declare var FileList:{prototype:FileList;new():FileList;};interface FileReaderEventMap{\"abort\":ProgressEvent<FileReader>;\"error\":ProgressEvent<FileReader>;\"load\":ProgressEvent<FileReader>;\"loadend\":ProgressEvent<FileReader>;\"loadstart\":ProgressEvent<FileReader>;\"progress\":ProgressEvent<FileReader>;}interface FileReader extends EventTarget{readonly error:DOMException|null;onabort:((this:FileReader,ev:ProgressEvent<FileReader>)=>any)|null;onerror:((this:FileReader,ev:ProgressEvent<FileReader>)=>any)|null;onload:((this:FileReader,ev:ProgressEvent<FileReader>)=>any)|null;onloadend:((this:FileReader,ev:ProgressEvent<FileReader>)=>any)|null;onloadstart:((this:FileReader,ev:ProgressEvent<FileReader>)=>any)|null;onprogress:((this:FileReader,ev:ProgressEvent<FileReader>)=>any)|null;readonly readyState:number;readonly result:string|ArrayBuffer|null;abort():void;readAsArrayBuffer(blob:Blob):void;readAsBinaryString(blob:Blob):void;readAsDataURL(blob:Blob):void;readAsText(blob:Blob,encoding?:string):void;readonly DONE:number;readonly EMPTY:number;readonly LOADING:number;addEventListener<K extends keyof FileReaderEventMap>(type:K,listener:(this:FileReader,ev:FileReaderEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof FileReaderEventMap>(type:K,listener:(this:FileReader,ev:FileReaderEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var FileReader:{prototype:FileReader;new():FileReader;readonly DONE:number;readonly EMPTY:number;readonly LOADING:number;};interface FileReaderSync{readAsArrayBuffer(blob:Blob):ArrayBuffer;readAsBinaryString(blob:Blob):string;readAsDataURL(blob:Blob):string;readAsText(blob:Blob,encoding?:string):string;}declare var FileReaderSync:{prototype:FileReaderSync;new():FileReaderSync;};interface FileSystemDirectoryHandle extends FileSystemHandle{readonly kind:\"directory\";getDirectoryHandle(name:string,options?:FileSystemGetDirectoryOptions):Promise<FileSystemDirectoryHandle>;getFileHandle(name:string,options?:FileSystemGetFileOptions):Promise<FileSystemFileHandle>;removeEntry(name:string,options?:FileSystemRemoveOptions):Promise<void>;resolve(possibleDescendant:FileSystemHandle):Promise<string[]|null>;}declare var FileSystemDirectoryHandle:{prototype:FileSystemDirectoryHandle;new():FileSystemDirectoryHandle;};interface FileSystemFileHandle extends FileSystemHandle{readonly kind:\"file\";getFile():Promise<File>;}declare var FileSystemFileHandle:{prototype:FileSystemFileHandle;new():FileSystemFileHandle;};interface FileSystemHandle{readonly kind:FileSystemHandleKind;readonly name:string;isSameEntry(other:FileSystemHandle):Promise<boolean>;}declare var FileSystemHandle:{prototype:FileSystemHandle;new():FileSystemHandle;};interface FontFace{ascentOverride:string;descentOverride:string;display:string;family:string;featureSettings:string;lineGapOverride:string;readonly loaded:Promise<FontFace>;readonly status:FontFaceLoadStatus;stretch:string;style:string;unicodeRange:string;variant:string;variationSettings:string;weight:string;load():Promise<FontFace>;}declare var FontFace:{prototype:FontFace;new(family:string,source:string|BinaryData,descriptors?:FontFaceDescriptors):FontFace;};interface FontFaceSetEventMap{\"loading\":Event;\"loadingdone\":Event;\"loadingerror\":Event;}interface FontFaceSet extends EventTarget{onloading:((this:FontFaceSet,ev:Event)=>any)|null;onloadingdone:((this:FontFaceSet,ev:Event)=>any)|null;onloadingerror:((this:FontFaceSet,ev:Event)=>any)|null;readonly ready:Promise<FontFaceSet>;readonly status:FontFaceSetLoadStatus;check(font:string,text?:string):boolean;load(font:string,text?:string):Promise<FontFace[]>;forEach(callbackfn:(value:FontFace,key:FontFace,parent:FontFaceSet)=>void,thisArg?:any):void;addEventListener<K extends keyof FontFaceSetEventMap>(type:K,listener:(this:FontFaceSet,ev:FontFaceSetEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof FontFaceSetEventMap>(type:K,listener:(this:FontFaceSet,ev:FontFaceSetEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var FontFaceSet:{prototype:FontFaceSet;new(initialFaces:FontFace[]):FontFaceSet;};interface FontFaceSetLoadEvent extends Event{readonly fontfaces:ReadonlyArray<FontFace>;}declare var FontFaceSetLoadEvent:{prototype:FontFaceSetLoadEvent;new(type:string,eventInitDict?:FontFaceSetLoadEventInit):FontFaceSetLoadEvent;};interface FontFaceSource{readonly fonts:FontFaceSet;}interface FormData{append(name:string,value:string|Blob,fileName?:string):void;delete(name:string):void;get(name:string):FormDataEntryValue|null;getAll(name:string):FormDataEntryValue[];has(name:string):boolean;set(name:string,value:string|Blob,fileName?:string):void;forEach(callbackfn:(value:FormDataEntryValue,key:string,parent:FormData)=>void,thisArg?:any):void;}declare var FormData:{prototype:FormData;new():FormData;};interface GenericTransformStream{readonly readable:ReadableStream;readonly writable:WritableStream;}interface Headers{append(name:string,value:string):void;delete(name:string):void;get(name:string):string|null;has(name:string):boolean;set(name:string,value:string):void;forEach(callbackfn:(value:string,key:string,parent:Headers)=>void,thisArg?:any):void;}declare var Headers:{prototype:Headers;new(init?:HeadersInit):Headers;};interface IDBCursor{readonly direction:IDBCursorDirection;readonly key:IDBValidKey;readonly primaryKey:IDBValidKey;readonly request:IDBRequest;readonly source:IDBObjectStore|IDBIndex;advance(count:number):void;continue(key?:IDBValidKey):void;continuePrimaryKey(key:IDBValidKey,primaryKey:IDBValidKey):void;delete():IDBRequest<undefined>;update(value:any):IDBRequest<IDBValidKey>;}declare var IDBCursor:{prototype:IDBCursor;new():IDBCursor;};interface IDBCursorWithValue extends IDBCursor{readonly value:any;}declare var IDBCursorWithValue:{prototype:IDBCursorWithValue;new():IDBCursorWithValue;};interface IDBDatabaseEventMap{\"abort\":Event;\"close\":Event;\"error\":Event;\"versionchange\":IDBVersionChangeEvent;}interface IDBDatabase extends EventTarget{readonly name:string;readonly objectStoreNames:DOMStringList;onabort:((this:IDBDatabase,ev:Event)=>any)|null;onclose:((this:IDBDatabase,ev:Event)=>any)|null;onerror:((this:IDBDatabase,ev:Event)=>any)|null;onversionchange:((this:IDBDatabase,ev:IDBVersionChangeEvent)=>any)|null;readonly version:number;close():void;createObjectStore(name:string,options?:IDBObjectStoreParameters):IDBObjectStore;deleteObjectStore(name:string):void;transaction(storeNames:string|string[],mode?:IDBTransactionMode):IDBTransaction;addEventListener<K extends keyof IDBDatabaseEventMap>(type:K,listener:(this:IDBDatabase,ev:IDBDatabaseEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof IDBDatabaseEventMap>(type:K,listener:(this:IDBDatabase,ev:IDBDatabaseEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var IDBDatabase:{prototype:IDBDatabase;new():IDBDatabase;};interface IDBFactory{cmp(first:any,second:any):number;databases():Promise<IDBDatabaseInfo[]>;deleteDatabase(name:string):IDBOpenDBRequest;open(name:string,version?:number):IDBOpenDBRequest;}declare var IDBFactory:{prototype:IDBFactory;new():IDBFactory;};interface IDBIndex{readonly keyPath:string|string[];readonly multiEntry:boolean;name:string;readonly objectStore:IDBObjectStore;readonly unique:boolean;count(query?:IDBValidKey|IDBKeyRange):IDBRequest<number>;get(query:IDBValidKey|IDBKeyRange):IDBRequest<any>;getAll(query?:IDBValidKey|IDBKeyRange|null,count?:number):IDBRequest<any[]>;getAllKeys(query?:IDBValidKey|IDBKeyRange|null,count?:number):IDBRequest<IDBValidKey[]>;getKey(query:IDBValidKey|IDBKeyRange):IDBRequest<IDBValidKey|undefined>;openCursor(query?:IDBValidKey|IDBKeyRange|null,direction?:IDBCursorDirection):IDBRequest<IDBCursorWithValue|null>;openKeyCursor(query?:IDBValidKey|IDBKeyRange|null,direction?:IDBCursorDirection):IDBRequest<IDBCursor|null>;}declare var IDBIndex:{prototype:IDBIndex;new():IDBIndex;};interface IDBKeyRange{readonly lower:any;readonly lowerOpen:boolean;readonly upper:any;readonly upperOpen:boolean;includes(key:any):boolean;}declare var IDBKeyRange:{prototype:IDBKeyRange;new():IDBKeyRange;bound(lower:any,upper:any,lowerOpen?:boolean,upperOpen?:boolean):IDBKeyRange;lowerBound(lower:any,open?:boolean):IDBKeyRange;only(value:any):IDBKeyRange;upperBound(upper:any,open?:boolean):IDBKeyRange;};interface IDBObjectStore{readonly autoIncrement:boolean;readonly indexNames:DOMStringList;readonly keyPath:string|string[];name:string;readonly transaction:IDBTransaction;add(value:any,key?:IDBValidKey):IDBRequest<IDBValidKey>;clear():IDBRequest<undefined>;count(query?:IDBValidKey|IDBKeyRange):IDBRequest<number>;createIndex(name:string,keyPath:string|string[],options?:IDBIndexParameters):IDBIndex;delete(query:IDBValidKey|IDBKeyRange):IDBRequest<undefined>;deleteIndex(name:string):void;get(query:IDBValidKey|IDBKeyRange):IDBRequest<any>;getAll(query?:IDBValidKey|IDBKeyRange|null,count?:number):IDBRequest<any[]>;getAllKeys(query?:IDBValidKey|IDBKeyRange|null,count?:number):IDBRequest<IDBValidKey[]>;getKey(query:IDBValidKey|IDBKeyRange):IDBRequest<IDBValidKey|undefined>;index(name:string):IDBIndex;openCursor(query?:IDBValidKey|IDBKeyRange|null,direction?:IDBCursorDirection):IDBRequest<IDBCursorWithValue|null>;openKeyCursor(query?:IDBValidKey|IDBKeyRange|null,direction?:IDBCursorDirection):IDBRequest<IDBCursor|null>;put(value:any,key?:IDBValidKey):IDBRequest<IDBValidKey>;}declare var IDBObjectStore:{prototype:IDBObjectStore;new():IDBObjectStore;};interface IDBOpenDBRequestEventMap extends IDBRequestEventMap{\"blocked\":Event;\"upgradeneeded\":IDBVersionChangeEvent;}interface IDBOpenDBRequest extends IDBRequest<IDBDatabase>{onblocked:((this:IDBOpenDBRequest,ev:Event)=>any)|null;onupgradeneeded:((this:IDBOpenDBRequest,ev:IDBVersionChangeEvent)=>any)|null;addEventListener<K extends keyof IDBOpenDBRequestEventMap>(type:K,listener:(this:IDBOpenDBRequest,ev:IDBOpenDBRequestEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof IDBOpenDBRequestEventMap>(type:K,listener:(this:IDBOpenDBRequest,ev:IDBOpenDBRequestEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var IDBOpenDBRequest:{prototype:IDBOpenDBRequest;new():IDBOpenDBRequest;};interface IDBRequestEventMap{\"error\":Event;\"success\":Event;}interface IDBRequest<T=any>extends EventTarget{readonly error:DOMException|null;onerror:((this:IDBRequest<T>,ev:Event)=>any)|null;onsuccess:((this:IDBRequest<T>,ev:Event)=>any)|null;readonly readyState:IDBRequestReadyState;readonly result:T;readonly source:IDBObjectStore|IDBIndex|IDBCursor;readonly transaction:IDBTransaction|null;addEventListener<K extends keyof IDBRequestEventMap>(type:K,listener:(this:IDBRequest<T>,ev:IDBRequestEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof IDBRequestEventMap>(type:K,listener:(this:IDBRequest<T>,ev:IDBRequestEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var IDBRequest:{prototype:IDBRequest;new():IDBRequest;};interface IDBTransactionEventMap{\"abort\":Event;\"complete\":Event;\"error\":Event;}interface IDBTransaction extends EventTarget{readonly db:IDBDatabase;readonly durability:IDBTransactionDurability;readonly error:DOMException|null;readonly mode:IDBTransactionMode;readonly objectStoreNames:DOMStringList;onabort:((this:IDBTransaction,ev:Event)=>any)|null;oncomplete:((this:IDBTransaction,ev:Event)=>any)|null;onerror:((this:IDBTransaction,ev:Event)=>any)|null;abort():void;commit():void;objectStore(name:string):IDBObjectStore;addEventListener<K extends keyof IDBTransactionEventMap>(type:K,listener:(this:IDBTransaction,ev:IDBTransactionEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof IDBTransactionEventMap>(type:K,listener:(this:IDBTransaction,ev:IDBTransactionEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var IDBTransaction:{prototype:IDBTransaction;new():IDBTransaction;};interface IDBVersionChangeEvent extends Event{readonly newVersion:number|null;readonly oldVersion:number;}declare var IDBVersionChangeEvent:{prototype:IDBVersionChangeEvent;new(type:string,eventInitDict?:IDBVersionChangeEventInit):IDBVersionChangeEvent;};interface ImageBitmap{readonly height:number;readonly width:number;close():void;}declare var ImageBitmap:{prototype:ImageBitmap;new():ImageBitmap;};interface ImageBitmapRenderingContext{transferFromImageBitmap(bitmap:ImageBitmap|null):void;}declare var ImageBitmapRenderingContext:{prototype:ImageBitmapRenderingContext;new():ImageBitmapRenderingContext;};interface ImageData{readonly colorSpace:PredefinedColorSpace;readonly data:Uint8ClampedArray;readonly height:number;readonly width:number;}declare var ImageData:{prototype:ImageData;new(sw:number,sh:number,settings?:ImageDataSettings):ImageData;new(data:Uint8ClampedArray,sw:number,sh?:number,settings?:ImageDataSettings):ImageData;};interface KHR_parallel_shader_compile{readonly COMPLETION_STATUS_KHR:GLenum;}interface Lock{readonly mode:LockMode;readonly name:string;}declare var Lock:{prototype:Lock;new():Lock;};interface LockManager{query():Promise<LockManagerSnapshot>;request(name:string,callback:LockGrantedCallback):Promise<any>;request(name:string,options:LockOptions,callback:LockGrantedCallback):Promise<any>;}declare var LockManager:{prototype:LockManager;new():LockManager;};interface MediaCapabilities{decodingInfo(configuration:MediaDecodingConfiguration):Promise<MediaCapabilitiesDecodingInfo>;encodingInfo(configuration:MediaEncodingConfiguration):Promise<MediaCapabilitiesEncodingInfo>;}declare var MediaCapabilities:{prototype:MediaCapabilities;new():MediaCapabilities;};interface MessageChannel{readonly port1:MessagePort;readonly port2:MessagePort;}declare var MessageChannel:{prototype:MessageChannel;new():MessageChannel;};interface MessageEvent<T=any>extends Event{readonly data:T;readonly lastEventId:string;readonly origin:string;readonly ports:ReadonlyArray<MessagePort>;readonly source:MessageEventSource|null;initMessageEvent(type:string,bubbles?:boolean,cancelable?:boolean,data?:any,origin?:string,lastEventId?:string,source?:MessageEventSource|null,ports?:MessagePort[]):void;}declare var MessageEvent:{prototype:MessageEvent;new<T>(type:string,eventInitDict?:MessageEventInit<T>):MessageEvent<T>;};interface MessagePortEventMap{\"message\":MessageEvent;\"messageerror\":MessageEvent;}interface MessagePort extends EventTarget{onmessage:((this:MessagePort,ev:MessageEvent)=>any)|null;onmessageerror:((this:MessagePort,ev:MessageEvent)=>any)|null;close():void;postMessage(message:any,transfer:Transferable[]):void;postMessage(message:any,options?:StructuredSerializeOptions):void;start():void;addEventListener<K extends keyof MessagePortEventMap>(type:K,listener:(this:MessagePort,ev:MessagePortEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof MessagePortEventMap>(type:K,listener:(this:MessagePort,ev:MessagePortEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var MessagePort:{prototype:MessagePort;new():MessagePort;};interface NavigationPreloadManager{disable():Promise<void>;enable():Promise<void>;getState():Promise<NavigationPreloadState>;setHeaderValue(value:string):Promise<void>;}declare var NavigationPreloadManager:{prototype:NavigationPreloadManager;new():NavigationPreloadManager;};interface NavigatorConcurrentHardware{readonly hardwareConcurrency:number;}interface NavigatorID{readonly appCodeName:string;readonly appName:string;readonly appVersion:string;readonly platform:string;readonly product:string;readonly userAgent:string;}interface NavigatorLanguage{readonly language:string;readonly languages:ReadonlyArray<string>;}interface NavigatorLocks{readonly locks:LockManager;}interface NavigatorNetworkInformation{readonly connection:NetworkInformation;}interface NavigatorOnLine{readonly onLine:boolean;}interface NavigatorStorage{readonly storage:StorageManager;}interface NetworkInformation extends EventTarget{readonly type:ConnectionType;}declare var NetworkInformation:{prototype:NetworkInformation;new():NetworkInformation;};interface NotificationEventMap{\"click\":Event;\"close\":Event;\"error\":Event;\"show\":Event;}interface Notification extends EventTarget{readonly body:string;readonly data:any;readonly dir:NotificationDirection;readonly icon:string;readonly lang:string;onclick:((this:Notification,ev:Event)=>any)|null;onclose:((this:Notification,ev:Event)=>any)|null;onerror:((this:Notification,ev:Event)=>any)|null;onshow:((this:Notification,ev:Event)=>any)|null;readonly tag:string;readonly title:string;close():void;addEventListener<K extends keyof NotificationEventMap>(type:K,listener:(this:Notification,ev:NotificationEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof NotificationEventMap>(type:K,listener:(this:Notification,ev:NotificationEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var Notification:{prototype:Notification;new(title:string,options?:NotificationOptions):Notification;readonly permission:NotificationPermission;};interface NotificationEvent extends ExtendableEvent{readonly action:string;readonly notification:Notification;}declare var NotificationEvent:{prototype:NotificationEvent;new(type:string,eventInitDict:NotificationEventInit):NotificationEvent;};interface OES_element_index_uint{}interface OES_fbo_render_mipmap{}interface OES_standard_derivatives{readonly FRAGMENT_SHADER_DERIVATIVE_HINT_OES:GLenum;}interface OES_texture_float{}interface OES_texture_float_linear{}interface OES_texture_half_float{readonly HALF_FLOAT_OES:GLenum;}interface OES_texture_half_float_linear{}interface OES_vertex_array_object{bindVertexArrayOES(arrayObject:WebGLVertexArrayObjectOES|null):void;createVertexArrayOES():WebGLVertexArrayObjectOES|null;deleteVertexArrayOES(arrayObject:WebGLVertexArrayObjectOES|null):void;isVertexArrayOES(arrayObject:WebGLVertexArrayObjectOES|null):GLboolean;readonly VERTEX_ARRAY_BINDING_OES:GLenum;}interface OVR_multiview2{framebufferTextureMultiviewOVR(target:GLenum,attachment:GLenum,texture:WebGLTexture|null,level:GLint,baseViewIndex:GLint,numViews:GLsizei):void;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR:GLenum;readonly FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR:GLenum;readonly MAX_VIEWS_OVR:GLenum;}interface OffscreenCanvas extends EventTarget{}interface Path2D extends CanvasPath{addPath(path:Path2D,transform?:DOMMatrix2DInit):void;}declare var Path2D:{prototype:Path2D;new(path?:Path2D|string):Path2D;};interface PerformanceEventMap{\"resourcetimingbufferfull\":Event;}interface Performance extends EventTarget{onresourcetimingbufferfull:((this:Performance,ev:Event)=>any)|null;readonly timeOrigin:DOMHighResTimeStamp;clearMarks(markName?:string):void;clearMeasures(measureName?:string):void;clearResourceTimings():void;getEntries():PerformanceEntryList;getEntriesByName(name:string,type?:string):PerformanceEntryList;getEntriesByType(type:string):PerformanceEntryList;mark(markName:string,markOptions?:PerformanceMarkOptions):PerformanceMark;measure(measureName:string,startOrMeasureOptions?:string|PerformanceMeasureOptions,endMark?:string):PerformanceMeasure;now():DOMHighResTimeStamp;setResourceTimingBufferSize(maxSize:number):void;toJSON():any;addEventListener<K extends keyof PerformanceEventMap>(type:K,listener:(this:Performance,ev:PerformanceEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof PerformanceEventMap>(type:K,listener:(this:Performance,ev:PerformanceEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var Performance:{prototype:Performance;new():Performance;};interface PerformanceEntry{readonly duration:DOMHighResTimeStamp;readonly entryType:string;readonly name:string;readonly startTime:DOMHighResTimeStamp;toJSON():any;}declare var PerformanceEntry:{prototype:PerformanceEntry;new():PerformanceEntry;};interface PerformanceMark extends PerformanceEntry{readonly detail:any;}declare var PerformanceMark:{prototype:PerformanceMark;new(markName:string,markOptions?:PerformanceMarkOptions):PerformanceMark;};interface PerformanceMeasure extends PerformanceEntry{readonly detail:any;}declare var PerformanceMeasure:{prototype:PerformanceMeasure;new():PerformanceMeasure;};interface PerformanceObserver{disconnect():void;observe(options?:PerformanceObserverInit):void;takeRecords():PerformanceEntryList;}declare var PerformanceObserver:{prototype:PerformanceObserver;new(callback:PerformanceObserverCallback):PerformanceObserver;readonly supportedEntryTypes:ReadonlyArray<string>;};interface PerformanceObserverEntryList{getEntries():PerformanceEntryList;getEntriesByName(name:string,type?:string):PerformanceEntryList;getEntriesByType(type:string):PerformanceEntryList;}declare var PerformanceObserverEntryList:{prototype:PerformanceObserverEntryList;new():PerformanceObserverEntryList;};interface PerformanceResourceTiming extends PerformanceEntry{readonly connectEnd:DOMHighResTimeStamp;readonly connectStart:DOMHighResTimeStamp;readonly decodedBodySize:number;readonly domainLookupEnd:DOMHighResTimeStamp;readonly domainLookupStart:DOMHighResTimeStamp;readonly encodedBodySize:number;readonly fetchStart:DOMHighResTimeStamp;readonly initiatorType:string;readonly nextHopProtocol:string;readonly redirectEnd:DOMHighResTimeStamp;readonly redirectStart:DOMHighResTimeStamp;readonly requestStart:DOMHighResTimeStamp;readonly responseEnd:DOMHighResTimeStamp;readonly responseStart:DOMHighResTimeStamp;readonly secureConnectionStart:DOMHighResTimeStamp;readonly serverTiming:ReadonlyArray<PerformanceServerTiming>;readonly transferSize:number;readonly workerStart:DOMHighResTimeStamp;toJSON():any;}declare var PerformanceResourceTiming:{prototype:PerformanceResourceTiming;new():PerformanceResourceTiming;};interface PerformanceServerTiming{readonly description:string;readonly duration:DOMHighResTimeStamp;readonly name:string;toJSON():any;}declare var PerformanceServerTiming:{prototype:PerformanceServerTiming;new():PerformanceServerTiming;};interface PermissionStatusEventMap{\"change\":Event;}interface PermissionStatus extends EventTarget{onchange:((this:PermissionStatus,ev:Event)=>any)|null;readonly state:PermissionState;addEventListener<K extends keyof PermissionStatusEventMap>(type:K,listener:(this:PermissionStatus,ev:PermissionStatusEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof PermissionStatusEventMap>(type:K,listener:(this:PermissionStatus,ev:PermissionStatusEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var PermissionStatus:{prototype:PermissionStatus;new():PermissionStatus;};interface Permissions{query(permissionDesc:PermissionDescriptor):Promise<PermissionStatus>;}declare var Permissions:{prototype:Permissions;new():Permissions;};interface ProgressEvent<T extends EventTarget=EventTarget>extends Event{readonly lengthComputable:boolean;readonly loaded:number;readonly target:T|null;readonly total:number;}declare var ProgressEvent:{prototype:ProgressEvent;new(type:string,eventInitDict?:ProgressEventInit):ProgressEvent;};interface PromiseRejectionEvent extends Event{readonly promise:Promise<any>;readonly reason:any;}declare var PromiseRejectionEvent:{prototype:PromiseRejectionEvent;new(type:string,eventInitDict:PromiseRejectionEventInit):PromiseRejectionEvent;};interface PushEvent extends ExtendableEvent{readonly data:PushMessageData|null;}declare var PushEvent:{prototype:PushEvent;new(type:string,eventInitDict?:PushEventInit):PushEvent;};interface PushManager{getSubscription():Promise<PushSubscription|null>;permissionState(options?:PushSubscriptionOptionsInit):Promise<PermissionState>;subscribe(options?:PushSubscriptionOptionsInit):Promise<PushSubscription>;}declare var PushManager:{prototype:PushManager;new():PushManager;readonly supportedContentEncodings:ReadonlyArray<string>;};interface PushMessageData{arrayBuffer():ArrayBuffer;blob():Blob;json():any;text():string;}declare var PushMessageData:{prototype:PushMessageData;new():PushMessageData;};interface PushSubscription{readonly endpoint:string;readonly options:PushSubscriptionOptions;getKey(name:PushEncryptionKeyName):ArrayBuffer|null;toJSON():PushSubscriptionJSON;unsubscribe():Promise<boolean>;}declare var PushSubscription:{prototype:PushSubscription;new():PushSubscription;};interface PushSubscriptionOptions{readonly applicationServerKey:ArrayBuffer|null;}declare var PushSubscriptionOptions:{prototype:PushSubscriptionOptions;new():PushSubscriptionOptions;};interface RTCEncodedAudioFrame{data:ArrayBuffer;readonly timestamp:number;getMetadata():RTCEncodedAudioFrameMetadata;}declare var RTCEncodedAudioFrame:{prototype:RTCEncodedAudioFrame;new():RTCEncodedAudioFrame;};interface RTCEncodedVideoFrame{data:ArrayBuffer;readonly timestamp:number;readonly type:RTCEncodedVideoFrameType;getMetadata():RTCEncodedVideoFrameMetadata;}declare var RTCEncodedVideoFrame:{prototype:RTCEncodedVideoFrame;new():RTCEncodedVideoFrame;};interface ReadableStream<R=any>{readonly locked:boolean;cancel(reason?:any):Promise<void>;getReader():ReadableStreamDefaultReader<R>;pipeThrough<T>(transform:ReadableWritablePair<T,R>,options?:StreamPipeOptions):ReadableStream<T>;pipeTo(destination:WritableStream<R>,options?:StreamPipeOptions):Promise<void>;tee():[ReadableStream<R>,ReadableStream<R>];}declare var ReadableStream:{prototype:ReadableStream;new<R=any>(underlyingSource?:UnderlyingSource<R>,strategy?:QueuingStrategy<R>):ReadableStream<R>;};interface ReadableStreamDefaultController<R=any>{readonly desiredSize:number|null;close():void;enqueue(chunk?:R):void;error(e?:any):void;}declare var ReadableStreamDefaultController:{prototype:ReadableStreamDefaultController;new():ReadableStreamDefaultController;};interface ReadableStreamDefaultReader<R=any>extends ReadableStreamGenericReader{read():Promise<ReadableStreamDefaultReadResult<R>>;releaseLock():void;}declare var ReadableStreamDefaultReader:{prototype:ReadableStreamDefaultReader;new<R=any>(stream:ReadableStream<R>):ReadableStreamDefaultReader<R>;};interface ReadableStreamGenericReader{readonly closed:Promise<undefined>;cancel(reason?:any):Promise<void>;}interface Request extends Body{readonly cache:RequestCache;readonly credentials:RequestCredentials;readonly destination:RequestDestination;readonly headers:Headers;readonly integrity:string;readonly keepalive:boolean;readonly method:string;readonly mode:RequestMode;readonly redirect:RequestRedirect;readonly referrer:string;readonly referrerPolicy:ReferrerPolicy;readonly signal:AbortSignal;readonly url:string;clone():Request;}declare var Request:{prototype:Request;new(input:RequestInfo|URL,init?:RequestInit):Request;};interface Response extends Body{readonly headers:Headers;readonly ok:boolean;readonly redirected:boolean;readonly status:number;readonly statusText:string;readonly type:ResponseType;readonly url:string;clone():Response;}declare var Response:{prototype:Response;new(body?:BodyInit|null,init?:ResponseInit):Response;error():Response;redirect(url:string|URL,status?:number):Response;};interface SecurityPolicyViolationEvent extends Event{readonly blockedURI:string;readonly columnNumber:number;readonly disposition:SecurityPolicyViolationEventDisposition;readonly documentURI:string;readonly effectiveDirective:string;readonly lineNumber:number;readonly originalPolicy:string;readonly referrer:string;readonly sample:string;readonly sourceFile:string;readonly statusCode:number;readonly violatedDirective:string;}declare var SecurityPolicyViolationEvent:{prototype:SecurityPolicyViolationEvent;new(type:string,eventInitDict?:SecurityPolicyViolationEventInit):SecurityPolicyViolationEvent;};interface ServiceWorkerEventMap extends AbstractWorkerEventMap{\"statechange\":Event;}interface ServiceWorker extends EventTarget,AbstractWorker{onstatechange:((this:ServiceWorker,ev:Event)=>any)|null;readonly scriptURL:string;readonly state:ServiceWorkerState;postMessage(message:any,transfer:Transferable[]):void;postMessage(message:any,options?:StructuredSerializeOptions):void;addEventListener<K extends keyof ServiceWorkerEventMap>(type:K,listener:(this:ServiceWorker,ev:ServiceWorkerEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof ServiceWorkerEventMap>(type:K,listener:(this:ServiceWorker,ev:ServiceWorkerEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var ServiceWorker:{prototype:ServiceWorker;new():ServiceWorker;};interface ServiceWorkerContainerEventMap{\"controllerchange\":Event;\"message\":MessageEvent;\"messageerror\":MessageEvent;}interface ServiceWorkerContainer extends EventTarget{readonly controller:ServiceWorker|null;oncontrollerchange:((this:ServiceWorkerContainer,ev:Event)=>any)|null;onmessage:((this:ServiceWorkerContainer,ev:MessageEvent)=>any)|null;onmessageerror:((this:ServiceWorkerContainer,ev:MessageEvent)=>any)|null;readonly ready:Promise<ServiceWorkerRegistration>;getRegistration(clientURL?:string|URL):Promise<ServiceWorkerRegistration|undefined>;getRegistrations():Promise<ReadonlyArray<ServiceWorkerRegistration>>;register(scriptURL:string|URL,options?:RegistrationOptions):Promise<ServiceWorkerRegistration>;startMessages():void;addEventListener<K extends keyof ServiceWorkerContainerEventMap>(type:K,listener:(this:ServiceWorkerContainer,ev:ServiceWorkerContainerEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof ServiceWorkerContainerEventMap>(type:K,listener:(this:ServiceWorkerContainer,ev:ServiceWorkerContainerEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var ServiceWorkerContainer:{prototype:ServiceWorkerContainer;new():ServiceWorkerContainer;};interface ServiceWorkerGlobalScopeEventMap extends WorkerGlobalScopeEventMap{\"activate\":ExtendableEvent;\"fetch\":FetchEvent;\"install\":ExtendableEvent;\"message\":ExtendableMessageEvent;\"messageerror\":MessageEvent;\"notificationclick\":NotificationEvent;\"notificationclose\":NotificationEvent;\"push\":PushEvent;}interface ServiceWorkerGlobalScope extends WorkerGlobalScope{readonly clients:Clients;onactivate:((this:ServiceWorkerGlobalScope,ev:ExtendableEvent)=>any)|null;onfetch:((this:ServiceWorkerGlobalScope,ev:FetchEvent)=>any)|null;oninstall:((this:ServiceWorkerGlobalScope,ev:ExtendableEvent)=>any)|null;onmessage:((this:ServiceWorkerGlobalScope,ev:ExtendableMessageEvent)=>any)|null;onmessageerror:((this:ServiceWorkerGlobalScope,ev:MessageEvent)=>any)|null;onnotificationclick:((this:ServiceWorkerGlobalScope,ev:NotificationEvent)=>any)|null;onnotificationclose:((this:ServiceWorkerGlobalScope,ev:NotificationEvent)=>any)|null;onpush:((this:ServiceWorkerGlobalScope,ev:PushEvent)=>any)|null;readonly registration:ServiceWorkerRegistration;skipWaiting():Promise<void>;addEventListener<K extends keyof ServiceWorkerGlobalScopeEventMap>(type:K,listener:(this:ServiceWorkerGlobalScope,ev:ServiceWorkerGlobalScopeEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof ServiceWorkerGlobalScopeEventMap>(type:K,listener:(this:ServiceWorkerGlobalScope,ev:ServiceWorkerGlobalScopeEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var ServiceWorkerGlobalScope:{prototype:ServiceWorkerGlobalScope;new():ServiceWorkerGlobalScope;};interface ServiceWorkerRegistrationEventMap{\"updatefound\":Event;}interface ServiceWorkerRegistration extends EventTarget{readonly active:ServiceWorker|null;readonly installing:ServiceWorker|null;readonly navigationPreload:NavigationPreloadManager;onupdatefound:((this:ServiceWorkerRegistration,ev:Event)=>any)|null;readonly pushManager:PushManager;readonly scope:string;readonly updateViaCache:ServiceWorkerUpdateViaCache;readonly waiting:ServiceWorker|null;getNotifications(filter?:GetNotificationOptions):Promise<Notification[]>;showNotification(title:string,options?:NotificationOptions):Promise<void>;unregister():Promise<boolean>;update():Promise<void>;addEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type:K,listener:(this:ServiceWorkerRegistration,ev:ServiceWorkerRegistrationEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type:K,listener:(this:ServiceWorkerRegistration,ev:ServiceWorkerRegistrationEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var ServiceWorkerRegistration:{prototype:ServiceWorkerRegistration;new():ServiceWorkerRegistration;};interface SharedWorkerGlobalScopeEventMap extends WorkerGlobalScopeEventMap{\"connect\":MessageEvent;}interface SharedWorkerGlobalScope extends WorkerGlobalScope{readonly name:string;onconnect:((this:SharedWorkerGlobalScope,ev:MessageEvent)=>any)|null;close():void;addEventListener<K extends keyof SharedWorkerGlobalScopeEventMap>(type:K,listener:(this:SharedWorkerGlobalScope,ev:SharedWorkerGlobalScopeEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof SharedWorkerGlobalScopeEventMap>(type:K,listener:(this:SharedWorkerGlobalScope,ev:SharedWorkerGlobalScopeEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var SharedWorkerGlobalScope:{prototype:SharedWorkerGlobalScope;new():SharedWorkerGlobalScope;};interface StorageManager{estimate():Promise<StorageEstimate>;getDirectory():Promise<FileSystemDirectoryHandle>;persisted():Promise<boolean>;}declare var StorageManager:{prototype:StorageManager;new():StorageManager;};interface SubtleCrypto{decrypt(algorithm:AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams,key:CryptoKey,data:BufferSource):Promise<any>;deriveBits(algorithm:AlgorithmIdentifier|EcdhKeyDeriveParams|HkdfParams|Pbkdf2Params,baseKey:CryptoKey,length:number):Promise<ArrayBuffer>;deriveKey(algorithm:AlgorithmIdentifier|EcdhKeyDeriveParams|HkdfParams|Pbkdf2Params,baseKey:CryptoKey,derivedKeyType:AlgorithmIdentifier|AesDerivedKeyParams|HmacImportParams|HkdfParams|Pbkdf2Params,extractable:boolean,keyUsages:KeyUsage[]):Promise<CryptoKey>;digest(algorithm:AlgorithmIdentifier,data:BufferSource):Promise<ArrayBuffer>;encrypt(algorithm:AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams,key:CryptoKey,data:BufferSource):Promise<any>;exportKey(format:\"jwk\",key:CryptoKey):Promise<JsonWebKey>;exportKey(format:Exclude<KeyFormat,\"jwk\">,key:CryptoKey):Promise<ArrayBuffer>;generateKey(algorithm:RsaHashedKeyGenParams|EcKeyGenParams,extractable:boolean,keyUsages:ReadonlyArray<KeyUsage>):Promise<CryptoKeyPair>;generateKey(algorithm:AesKeyGenParams|HmacKeyGenParams|Pbkdf2Params,extractable:boolean,keyUsages:ReadonlyArray<KeyUsage>):Promise<CryptoKey>;generateKey(algorithm:AlgorithmIdentifier,extractable:boolean,keyUsages:KeyUsage[]):Promise<CryptoKeyPair|CryptoKey>;importKey(format:\"jwk\",keyData:JsonWebKey,algorithm:AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm,extractable:boolean,keyUsages:ReadonlyArray<KeyUsage>):Promise<CryptoKey>;importKey(format:Exclude<KeyFormat,\"jwk\">,keyData:BufferSource,algorithm:AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm,extractable:boolean,keyUsages:KeyUsage[]):Promise<CryptoKey>;sign(algorithm:AlgorithmIdentifier|RsaPssParams|EcdsaParams,key:CryptoKey,data:BufferSource):Promise<ArrayBuffer>;unwrapKey(format:KeyFormat,wrappedKey:BufferSource,unwrappingKey:CryptoKey,unwrapAlgorithm:AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams,unwrappedKeyAlgorithm:AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm,extractable:boolean,keyUsages:KeyUsage[]):Promise<CryptoKey>;verify(algorithm:AlgorithmIdentifier|RsaPssParams|EcdsaParams,key:CryptoKey,signature:BufferSource,data:BufferSource):Promise<boolean>;wrapKey(format:KeyFormat,key:CryptoKey,wrappingKey:CryptoKey,wrapAlgorithm:AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams):Promise<ArrayBuffer>;}declare var SubtleCrypto:{prototype:SubtleCrypto;new():SubtleCrypto;};interface TextDecoder extends TextDecoderCommon{decode(input?:BufferSource,options?:TextDecodeOptions):string;}declare var TextDecoder:{prototype:TextDecoder;new(label?:string,options?:TextDecoderOptions):TextDecoder;};interface TextDecoderCommon{readonly encoding:string;readonly fatal:boolean;readonly ignoreBOM:boolean;}interface TextDecoderStream extends GenericTransformStream,TextDecoderCommon{readonly readable:ReadableStream<string>;readonly writable:WritableStream<BufferSource>;}declare var TextDecoderStream:{prototype:TextDecoderStream;new(label?:string,options?:TextDecoderOptions):TextDecoderStream;};interface TextEncoder extends TextEncoderCommon{encode(input?:string):Uint8Array;encodeInto(source:string,destination:Uint8Array):TextEncoderEncodeIntoResult;}declare var TextEncoder:{prototype:TextEncoder;new():TextEncoder;};interface TextEncoderCommon{readonly encoding:string;}interface TextEncoderStream extends GenericTransformStream,TextEncoderCommon{readonly readable:ReadableStream<Uint8Array>;readonly writable:WritableStream<string>;}declare var TextEncoderStream:{prototype:TextEncoderStream;new():TextEncoderStream;};interface TextMetrics{readonly actualBoundingBoxAscent:number;readonly actualBoundingBoxDescent:number;readonly actualBoundingBoxLeft:number;readonly actualBoundingBoxRight:number;readonly fontBoundingBoxAscent:number;readonly fontBoundingBoxDescent:number;readonly width:number;}declare var TextMetrics:{prototype:TextMetrics;new():TextMetrics;};interface TransformStream<I=any,O=any>{readonly readable:ReadableStream<O>;readonly writable:WritableStream<I>;}declare var TransformStream:{prototype:TransformStream;new<I=any,O=any>(transformer?:Transformer<I,O>,writableStrategy?:QueuingStrategy<I>,readableStrategy?:QueuingStrategy<O>):TransformStream<I,O>;};interface TransformStreamDefaultController<O=any>{readonly desiredSize:number|null;enqueue(chunk?:O):void;error(reason?:any):void;terminate():void;}declare var TransformStreamDefaultController:{prototype:TransformStreamDefaultController;new():TransformStreamDefaultController;};interface URL{hash:string;host:string;hostname:string;href:string;toString():string;readonly origin:string;password:string;pathname:string;port:string;protocol:string;search:string;readonly searchParams:URLSearchParams;username:string;toJSON():string;}declare var URL:{prototype:URL;new(url:string|URL,base?:string|URL):URL;createObjectURL(obj:Blob):string;revokeObjectURL(url:string):void;};interface URLSearchParams{append(name:string,value:string):void;delete(name:string):void;get(name:string):string|null;getAll(name:string):string[];has(name:string):boolean;set(name:string,value:string):void;sort():void;toString():string;forEach(callbackfn:(value:string,key:string,parent:URLSearchParams)=>void,thisArg?:any):void;}declare var URLSearchParams:{prototype:URLSearchParams;new(init?:string[][]|Record<string,string>|string|URLSearchParams):URLSearchParams;toString():string;};interface VideoColorSpace{readonly fullRange:boolean|null;readonly matrix:VideoMatrixCoefficients|null;readonly primaries:VideoColorPrimaries|null;readonly transfer:VideoTransferCharacteristics|null;toJSON():VideoColorSpaceInit;}declare var VideoColorSpace:{prototype:VideoColorSpace;new(init?:VideoColorSpaceInit):VideoColorSpace;};interface WEBGL_color_buffer_float{readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT:GLenum;readonly RGBA32F_EXT:GLenum;readonly UNSIGNED_NORMALIZED_EXT:GLenum;}interface WEBGL_compressed_texture_astc{getSupportedProfiles():string[];readonly COMPRESSED_RGBA_ASTC_10x10_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_10x5_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_10x6_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_10x8_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_12x10_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_12x12_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_4x4_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_5x4_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_5x5_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_6x5_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_6x6_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_8x5_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_8x6_KHR:GLenum;readonly COMPRESSED_RGBA_ASTC_8x8_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:GLenum;}interface WEBGL_compressed_texture_etc{readonly COMPRESSED_R11_EAC:GLenum;readonly COMPRESSED_RG11_EAC:GLenum;readonly COMPRESSED_RGB8_ETC2:GLenum;readonly COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:GLenum;readonly COMPRESSED_RGBA8_ETC2_EAC:GLenum;readonly COMPRESSED_SIGNED_R11_EAC:GLenum;readonly COMPRESSED_SIGNED_RG11_EAC:GLenum;readonly COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:GLenum;readonly COMPRESSED_SRGB8_ETC2:GLenum;readonly COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:GLenum;}interface WEBGL_compressed_texture_etc1{readonly COMPRESSED_RGB_ETC1_WEBGL:GLenum;}interface WEBGL_compressed_texture_s3tc{readonly COMPRESSED_RGBA_S3TC_DXT1_EXT:GLenum;readonly COMPRESSED_RGBA_S3TC_DXT3_EXT:GLenum;readonly COMPRESSED_RGBA_S3TC_DXT5_EXT:GLenum;readonly COMPRESSED_RGB_S3TC_DXT1_EXT:GLenum;}interface WEBGL_compressed_texture_s3tc_srgb{readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT:GLenum;readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT:GLenum;readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT:GLenum;readonly COMPRESSED_SRGB_S3TC_DXT1_EXT:GLenum;}interface WEBGL_debug_renderer_info{readonly UNMASKED_RENDERER_WEBGL:GLenum;readonly UNMASKED_VENDOR_WEBGL:GLenum;}interface WEBGL_debug_shaders{getTranslatedShaderSource(shader:WebGLShader):string;}interface WEBGL_depth_texture{readonly UNSIGNED_INT_24_8_WEBGL:GLenum;}interface WEBGL_draw_buffers{drawBuffersWEBGL(buffers:GLenum[]):void;readonly COLOR_ATTACHMENT0_WEBGL:GLenum;readonly COLOR_ATTACHMENT10_WEBGL:GLenum;readonly COLOR_ATTACHMENT11_WEBGL:GLenum;readonly COLOR_ATTACHMENT12_WEBGL:GLenum;readonly COLOR_ATTACHMENT13_WEBGL:GLenum;readonly COLOR_ATTACHMENT14_WEBGL:GLenum;readonly COLOR_ATTACHMENT15_WEBGL:GLenum;readonly COLOR_ATTACHMENT1_WEBGL:GLenum;readonly COLOR_ATTACHMENT2_WEBGL:GLenum;readonly COLOR_ATTACHMENT3_WEBGL:GLenum;readonly COLOR_ATTACHMENT4_WEBGL:GLenum;readonly COLOR_ATTACHMENT5_WEBGL:GLenum;readonly COLOR_ATTACHMENT6_WEBGL:GLenum;readonly COLOR_ATTACHMENT7_WEBGL:GLenum;readonly COLOR_ATTACHMENT8_WEBGL:GLenum;readonly COLOR_ATTACHMENT9_WEBGL:GLenum;readonly DRAW_BUFFER0_WEBGL:GLenum;readonly DRAW_BUFFER10_WEBGL:GLenum;readonly DRAW_BUFFER11_WEBGL:GLenum;readonly DRAW_BUFFER12_WEBGL:GLenum;readonly DRAW_BUFFER13_WEBGL:GLenum;readonly DRAW_BUFFER14_WEBGL:GLenum;readonly DRAW_BUFFER15_WEBGL:GLenum;readonly DRAW_BUFFER1_WEBGL:GLenum;readonly DRAW_BUFFER2_WEBGL:GLenum;readonly DRAW_BUFFER3_WEBGL:GLenum;readonly DRAW_BUFFER4_WEBGL:GLenum;readonly DRAW_BUFFER5_WEBGL:GLenum;readonly DRAW_BUFFER6_WEBGL:GLenum;readonly DRAW_BUFFER7_WEBGL:GLenum;readonly DRAW_BUFFER8_WEBGL:GLenum;readonly DRAW_BUFFER9_WEBGL:GLenum;readonly MAX_COLOR_ATTACHMENTS_WEBGL:GLenum;readonly MAX_DRAW_BUFFERS_WEBGL:GLenum;}interface WEBGL_lose_context{loseContext():void;restoreContext():void;}interface WEBGL_multi_draw{multiDrawArraysInstancedWEBGL(mode:GLenum,firstsList:Int32Array|GLint[],firstsOffset:GLuint,countsList:Int32Array|GLsizei[],countsOffset:GLuint,instanceCountsList:Int32Array|GLsizei[],instanceCountsOffset:GLuint,drawcount:GLsizei):void;multiDrawArraysWEBGL(mode:GLenum,firstsList:Int32Array|GLint[],firstsOffset:GLuint,countsList:Int32Array|GLsizei[],countsOffset:GLuint,drawcount:GLsizei):void;multiDrawElementsInstancedWEBGL(mode:GLenum,countsList:Int32Array|GLint[],countsOffset:GLuint,type:GLenum,offsetsList:Int32Array|GLsizei[],offsetsOffset:GLuint,instanceCountsList:Int32Array|GLsizei[],instanceCountsOffset:GLuint,drawcount:GLsizei):void;multiDrawElementsWEBGL(mode:GLenum,countsList:Int32Array|GLint[],countsOffset:GLuint,type:GLenum,offsetsList:Int32Array|GLsizei[],offsetsOffset:GLuint,drawcount:GLsizei):void;}interface WebGL2RenderingContext extends WebGL2RenderingContextBase,WebGL2RenderingContextOverloads,WebGLRenderingContextBase{}declare var WebGL2RenderingContext:{prototype:WebGL2RenderingContext;new():WebGL2RenderingContext;readonly ACTIVE_UNIFORM_BLOCKS:GLenum;readonly ALREADY_SIGNALED:GLenum;readonly ANY_SAMPLES_PASSED:GLenum;readonly ANY_SAMPLES_PASSED_CONSERVATIVE:GLenum;readonly COLOR:GLenum;readonly COLOR_ATTACHMENT1:GLenum;readonly COLOR_ATTACHMENT10:GLenum;readonly COLOR_ATTACHMENT11:GLenum;readonly COLOR_ATTACHMENT12:GLenum;readonly COLOR_ATTACHMENT13:GLenum;readonly COLOR_ATTACHMENT14:GLenum;readonly COLOR_ATTACHMENT15:GLenum;readonly COLOR_ATTACHMENT2:GLenum;readonly COLOR_ATTACHMENT3:GLenum;readonly COLOR_ATTACHMENT4:GLenum;readonly COLOR_ATTACHMENT5:GLenum;readonly COLOR_ATTACHMENT6:GLenum;readonly COLOR_ATTACHMENT7:GLenum;readonly COLOR_ATTACHMENT8:GLenum;readonly COLOR_ATTACHMENT9:GLenum;readonly COMPARE_REF_TO_TEXTURE:GLenum;readonly CONDITION_SATISFIED:GLenum;readonly COPY_READ_BUFFER:GLenum;readonly COPY_READ_BUFFER_BINDING:GLenum;readonly COPY_WRITE_BUFFER:GLenum;readonly COPY_WRITE_BUFFER_BINDING:GLenum;readonly CURRENT_QUERY:GLenum;readonly DEPTH:GLenum;readonly DEPTH24_STENCIL8:GLenum;readonly DEPTH32F_STENCIL8:GLenum;readonly DEPTH_COMPONENT24:GLenum;readonly DEPTH_COMPONENT32F:GLenum;readonly DRAW_BUFFER0:GLenum;readonly DRAW_BUFFER1:GLenum;readonly DRAW_BUFFER10:GLenum;readonly DRAW_BUFFER11:GLenum;readonly DRAW_BUFFER12:GLenum;readonly DRAW_BUFFER13:GLenum;readonly DRAW_BUFFER14:GLenum;readonly DRAW_BUFFER15:GLenum;readonly DRAW_BUFFER2:GLenum;readonly DRAW_BUFFER3:GLenum;readonly DRAW_BUFFER4:GLenum;readonly DRAW_BUFFER5:GLenum;readonly DRAW_BUFFER6:GLenum;readonly DRAW_BUFFER7:GLenum;readonly DRAW_BUFFER8:GLenum;readonly DRAW_BUFFER9:GLenum;readonly DRAW_FRAMEBUFFER:GLenum;readonly DRAW_FRAMEBUFFER_BINDING:GLenum;readonly DYNAMIC_COPY:GLenum;readonly DYNAMIC_READ:GLenum;readonly FLOAT_32_UNSIGNED_INT_24_8_REV:GLenum;readonly FLOAT_MAT2x3:GLenum;readonly FLOAT_MAT2x4:GLenum;readonly FLOAT_MAT3x2:GLenum;readonly FLOAT_MAT3x4:GLenum;readonly FLOAT_MAT4x2:GLenum;readonly FLOAT_MAT4x3:GLenum;readonly FRAGMENT_SHADER_DERIVATIVE_HINT:GLenum;readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:GLenum;readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:GLenum;readonly FRAMEBUFFER_DEFAULT:GLenum;readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:GLenum;readonly HALF_FLOAT:GLenum;readonly INTERLEAVED_ATTRIBS:GLenum;readonly INT_2_10_10_10_REV:GLenum;readonly INT_SAMPLER_2D:GLenum;readonly INT_SAMPLER_2D_ARRAY:GLenum;readonly INT_SAMPLER_3D:GLenum;readonly INT_SAMPLER_CUBE:GLenum;readonly INVALID_INDEX:GLenum;readonly MAX:GLenum;readonly MAX_3D_TEXTURE_SIZE:GLenum;readonly MAX_ARRAY_TEXTURE_LAYERS:GLenum;readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL:GLenum;readonly MAX_COLOR_ATTACHMENTS:GLenum;readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:GLenum;readonly MAX_COMBINED_UNIFORM_BLOCKS:GLenum;readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:GLenum;readonly MAX_DRAW_BUFFERS:GLenum;readonly MAX_ELEMENTS_INDICES:GLenum;readonly MAX_ELEMENTS_VERTICES:GLenum;readonly MAX_ELEMENT_INDEX:GLenum;readonly MAX_FRAGMENT_INPUT_COMPONENTS:GLenum;readonly MAX_FRAGMENT_UNIFORM_BLOCKS:GLenum;readonly MAX_FRAGMENT_UNIFORM_COMPONENTS:GLenum;readonly MAX_PROGRAM_TEXEL_OFFSET:GLenum;readonly MAX_SAMPLES:GLenum;readonly MAX_SERVER_WAIT_TIMEOUT:GLenum;readonly MAX_TEXTURE_LOD_BIAS:GLenum;readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS:GLenum;readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS:GLenum;readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS:GLenum;readonly MAX_UNIFORM_BLOCK_SIZE:GLenum;readonly MAX_UNIFORM_BUFFER_BINDINGS:GLenum;readonly MAX_VARYING_COMPONENTS:GLenum;readonly MAX_VERTEX_OUTPUT_COMPONENTS:GLenum;readonly MAX_VERTEX_UNIFORM_BLOCKS:GLenum;readonly MAX_VERTEX_UNIFORM_COMPONENTS:GLenum;readonly MIN:GLenum;readonly MIN_PROGRAM_TEXEL_OFFSET:GLenum;readonly OBJECT_TYPE:GLenum;readonly PACK_ROW_LENGTH:GLenum;readonly PACK_SKIP_PIXELS:GLenum;readonly PACK_SKIP_ROWS:GLenum;readonly PIXEL_PACK_BUFFER:GLenum;readonly PIXEL_PACK_BUFFER_BINDING:GLenum;readonly PIXEL_UNPACK_BUFFER:GLenum;readonly PIXEL_UNPACK_BUFFER_BINDING:GLenum;readonly QUERY_RESULT:GLenum;readonly QUERY_RESULT_AVAILABLE:GLenum;readonly R11F_G11F_B10F:GLenum;readonly R16F:GLenum;readonly R16I:GLenum;readonly R16UI:GLenum;readonly R32F:GLenum;readonly R32I:GLenum;readonly R32UI:GLenum;readonly R8:GLenum;readonly R8I:GLenum;readonly R8UI:GLenum;readonly R8_SNORM:GLenum;readonly RASTERIZER_DISCARD:GLenum;readonly READ_BUFFER:GLenum;readonly READ_FRAMEBUFFER:GLenum;readonly READ_FRAMEBUFFER_BINDING:GLenum;readonly RED:GLenum;readonly RED_INTEGER:GLenum;readonly RENDERBUFFER_SAMPLES:GLenum;readonly RG:GLenum;readonly RG16F:GLenum;readonly RG16I:GLenum;readonly RG16UI:GLenum;readonly RG32F:GLenum;readonly RG32I:GLenum;readonly RG32UI:GLenum;readonly RG8:GLenum;readonly RG8I:GLenum;readonly RG8UI:GLenum;readonly RG8_SNORM:GLenum;readonly RGB10_A2:GLenum;readonly RGB10_A2UI:GLenum;readonly RGB16F:GLenum;readonly RGB16I:GLenum;readonly RGB16UI:GLenum;readonly RGB32F:GLenum;readonly RGB32I:GLenum;readonly RGB32UI:GLenum;readonly RGB8:GLenum;readonly RGB8I:GLenum;readonly RGB8UI:GLenum;readonly RGB8_SNORM:GLenum;readonly RGB9_E5:GLenum;readonly RGBA16F:GLenum;readonly RGBA16I:GLenum;readonly RGBA16UI:GLenum;readonly RGBA32F:GLenum;readonly RGBA32I:GLenum;readonly RGBA32UI:GLenum;readonly RGBA8:GLenum;readonly RGBA8I:GLenum;readonly RGBA8UI:GLenum;readonly RGBA8_SNORM:GLenum;readonly RGBA_INTEGER:GLenum;readonly RGB_INTEGER:GLenum;readonly RG_INTEGER:GLenum;readonly SAMPLER_2D_ARRAY:GLenum;readonly SAMPLER_2D_ARRAY_SHADOW:GLenum;readonly SAMPLER_2D_SHADOW:GLenum;readonly SAMPLER_3D:GLenum;readonly SAMPLER_BINDING:GLenum;readonly SAMPLER_CUBE_SHADOW:GLenum;readonly SEPARATE_ATTRIBS:GLenum;readonly SIGNALED:GLenum;readonly SIGNED_NORMALIZED:GLenum;readonly SRGB:GLenum;readonly SRGB8:GLenum;readonly SRGB8_ALPHA8:GLenum;readonly STATIC_COPY:GLenum;readonly STATIC_READ:GLenum;readonly STENCIL:GLenum;readonly STREAM_COPY:GLenum;readonly STREAM_READ:GLenum;readonly SYNC_CONDITION:GLenum;readonly SYNC_FENCE:GLenum;readonly SYNC_FLAGS:GLenum;readonly SYNC_FLUSH_COMMANDS_BIT:GLenum;readonly SYNC_GPU_COMMANDS_COMPLETE:GLenum;readonly SYNC_STATUS:GLenum;readonly TEXTURE_2D_ARRAY:GLenum;readonly TEXTURE_3D:GLenum;readonly TEXTURE_BASE_LEVEL:GLenum;readonly TEXTURE_BINDING_2D_ARRAY:GLenum;readonly TEXTURE_BINDING_3D:GLenum;readonly TEXTURE_COMPARE_FUNC:GLenum;readonly TEXTURE_COMPARE_MODE:GLenum;readonly TEXTURE_IMMUTABLE_FORMAT:GLenum;readonly TEXTURE_IMMUTABLE_LEVELS:GLenum;readonly TEXTURE_MAX_LEVEL:GLenum;readonly TEXTURE_MAX_LOD:GLenum;readonly TEXTURE_MIN_LOD:GLenum;readonly TEXTURE_WRAP_R:GLenum;readonly TIMEOUT_EXPIRED:GLenum;readonly TIMEOUT_IGNORED:GLint64;readonly TRANSFORM_FEEDBACK:GLenum;readonly TRANSFORM_FEEDBACK_ACTIVE:GLenum;readonly TRANSFORM_FEEDBACK_BINDING:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_BINDING:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_MODE:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_SIZE:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_START:GLenum;readonly TRANSFORM_FEEDBACK_PAUSED:GLenum;readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:GLenum;readonly TRANSFORM_FEEDBACK_VARYINGS:GLenum;readonly UNIFORM_ARRAY_STRIDE:GLenum;readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS:GLenum;readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:GLenum;readonly UNIFORM_BLOCK_BINDING:GLenum;readonly UNIFORM_BLOCK_DATA_SIZE:GLenum;readonly UNIFORM_BLOCK_INDEX:GLenum;readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:GLenum;readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:GLenum;readonly UNIFORM_BUFFER:GLenum;readonly UNIFORM_BUFFER_BINDING:GLenum;readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT:GLenum;readonly UNIFORM_BUFFER_SIZE:GLenum;readonly UNIFORM_BUFFER_START:GLenum;readonly UNIFORM_IS_ROW_MAJOR:GLenum;readonly UNIFORM_MATRIX_STRIDE:GLenum;readonly UNIFORM_OFFSET:GLenum;readonly UNIFORM_SIZE:GLenum;readonly UNIFORM_TYPE:GLenum;readonly UNPACK_IMAGE_HEIGHT:GLenum;readonly UNPACK_ROW_LENGTH:GLenum;readonly UNPACK_SKIP_IMAGES:GLenum;readonly UNPACK_SKIP_PIXELS:GLenum;readonly UNPACK_SKIP_ROWS:GLenum;readonly UNSIGNALED:GLenum;readonly UNSIGNED_INT_10F_11F_11F_REV:GLenum;readonly UNSIGNED_INT_24_8:GLenum;readonly UNSIGNED_INT_2_10_10_10_REV:GLenum;readonly UNSIGNED_INT_5_9_9_9_REV:GLenum;readonly UNSIGNED_INT_SAMPLER_2D:GLenum;readonly UNSIGNED_INT_SAMPLER_2D_ARRAY:GLenum;readonly UNSIGNED_INT_SAMPLER_3D:GLenum;readonly UNSIGNED_INT_SAMPLER_CUBE:GLenum;readonly UNSIGNED_INT_VEC2:GLenum;readonly UNSIGNED_INT_VEC3:GLenum;readonly UNSIGNED_INT_VEC4:GLenum;readonly UNSIGNED_NORMALIZED:GLenum;readonly VERTEX_ARRAY_BINDING:GLenum;readonly VERTEX_ATTRIB_ARRAY_DIVISOR:GLenum;readonly VERTEX_ATTRIB_ARRAY_INTEGER:GLenum;readonly WAIT_FAILED:GLenum;readonly ACTIVE_ATTRIBUTES:GLenum;readonly ACTIVE_TEXTURE:GLenum;readonly ACTIVE_UNIFORMS:GLenum;readonly ALIASED_LINE_WIDTH_RANGE:GLenum;readonly ALIASED_POINT_SIZE_RANGE:GLenum;readonly ALPHA:GLenum;readonly ALPHA_BITS:GLenum;readonly ALWAYS:GLenum;readonly ARRAY_BUFFER:GLenum;readonly ARRAY_BUFFER_BINDING:GLenum;readonly ATTACHED_SHADERS:GLenum;readonly BACK:GLenum;readonly BLEND:GLenum;readonly BLEND_COLOR:GLenum;readonly BLEND_DST_ALPHA:GLenum;readonly BLEND_DST_RGB:GLenum;readonly BLEND_EQUATION:GLenum;readonly BLEND_EQUATION_ALPHA:GLenum;readonly BLEND_EQUATION_RGB:GLenum;readonly BLEND_SRC_ALPHA:GLenum;readonly BLEND_SRC_RGB:GLenum;readonly BLUE_BITS:GLenum;readonly BOOL:GLenum;readonly BOOL_VEC2:GLenum;readonly BOOL_VEC3:GLenum;readonly BOOL_VEC4:GLenum;readonly BROWSER_DEFAULT_WEBGL:GLenum;readonly BUFFER_SIZE:GLenum;readonly BUFFER_USAGE:GLenum;readonly BYTE:GLenum;readonly CCW:GLenum;readonly CLAMP_TO_EDGE:GLenum;readonly COLOR_ATTACHMENT0:GLenum;readonly COLOR_BUFFER_BIT:GLenum;readonly COLOR_CLEAR_VALUE:GLenum;readonly COLOR_WRITEMASK:GLenum;readonly COMPILE_STATUS:GLenum;readonly COMPRESSED_TEXTURE_FORMATS:GLenum;readonly CONSTANT_ALPHA:GLenum;readonly CONSTANT_COLOR:GLenum;readonly CONTEXT_LOST_WEBGL:GLenum;readonly CULL_FACE:GLenum;readonly CULL_FACE_MODE:GLenum;readonly CURRENT_PROGRAM:GLenum;readonly CURRENT_VERTEX_ATTRIB:GLenum;readonly CW:GLenum;readonly DECR:GLenum;readonly DECR_WRAP:GLenum;readonly DELETE_STATUS:GLenum;readonly DEPTH_ATTACHMENT:GLenum;readonly DEPTH_BITS:GLenum;readonly DEPTH_BUFFER_BIT:GLenum;readonly DEPTH_CLEAR_VALUE:GLenum;readonly DEPTH_COMPONENT:GLenum;readonly DEPTH_COMPONENT16:GLenum;readonly DEPTH_FUNC:GLenum;readonly DEPTH_RANGE:GLenum;readonly DEPTH_STENCIL:GLenum;readonly DEPTH_STENCIL_ATTACHMENT:GLenum;readonly DEPTH_TEST:GLenum;readonly DEPTH_WRITEMASK:GLenum;readonly DITHER:GLenum;readonly DONT_CARE:GLenum;readonly DST_ALPHA:GLenum;readonly DST_COLOR:GLenum;readonly DYNAMIC_DRAW:GLenum;readonly ELEMENT_ARRAY_BUFFER:GLenum;readonly ELEMENT_ARRAY_BUFFER_BINDING:GLenum;readonly EQUAL:GLenum;readonly FASTEST:GLenum;readonly FLOAT:GLenum;readonly FLOAT_MAT2:GLenum;readonly FLOAT_MAT3:GLenum;readonly FLOAT_MAT4:GLenum;readonly FLOAT_VEC2:GLenum;readonly FLOAT_VEC3:GLenum;readonly FLOAT_VEC4:GLenum;readonly FRAGMENT_SHADER:GLenum;readonly FRAMEBUFFER:GLenum;readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:GLenum;readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:GLenum;readonly FRAMEBUFFER_BINDING:GLenum;readonly FRAMEBUFFER_COMPLETE:GLenum;readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT:GLenum;readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS:GLenum;readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:GLenum;readonly FRAMEBUFFER_UNSUPPORTED:GLenum;readonly FRONT:GLenum;readonly FRONT_AND_BACK:GLenum;readonly FRONT_FACE:GLenum;readonly FUNC_ADD:GLenum;readonly FUNC_REVERSE_SUBTRACT:GLenum;readonly FUNC_SUBTRACT:GLenum;readonly GENERATE_MIPMAP_HINT:GLenum;readonly GEQUAL:GLenum;readonly GREATER:GLenum;readonly GREEN_BITS:GLenum;readonly HIGH_FLOAT:GLenum;readonly HIGH_INT:GLenum;readonly IMPLEMENTATION_COLOR_READ_FORMAT:GLenum;readonly IMPLEMENTATION_COLOR_READ_TYPE:GLenum;readonly INCR:GLenum;readonly INCR_WRAP:GLenum;readonly INT:GLenum;readonly INT_VEC2:GLenum;readonly INT_VEC3:GLenum;readonly INT_VEC4:GLenum;readonly INVALID_ENUM:GLenum;readonly INVALID_FRAMEBUFFER_OPERATION:GLenum;readonly INVALID_OPERATION:GLenum;readonly INVALID_VALUE:GLenum;readonly INVERT:GLenum;readonly KEEP:GLenum;readonly LEQUAL:GLenum;readonly LESS:GLenum;readonly LINEAR:GLenum;readonly LINEAR_MIPMAP_LINEAR:GLenum;readonly LINEAR_MIPMAP_NEAREST:GLenum;readonly LINES:GLenum;readonly LINE_LOOP:GLenum;readonly LINE_STRIP:GLenum;readonly LINE_WIDTH:GLenum;readonly LINK_STATUS:GLenum;readonly LOW_FLOAT:GLenum;readonly LOW_INT:GLenum;readonly LUMINANCE:GLenum;readonly LUMINANCE_ALPHA:GLenum;readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_CUBE_MAP_TEXTURE_SIZE:GLenum;readonly MAX_FRAGMENT_UNIFORM_VECTORS:GLenum;readonly MAX_RENDERBUFFER_SIZE:GLenum;readonly MAX_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_TEXTURE_SIZE:GLenum;readonly MAX_VARYING_VECTORS:GLenum;readonly MAX_VERTEX_ATTRIBS:GLenum;readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_VERTEX_UNIFORM_VECTORS:GLenum;readonly MAX_VIEWPORT_DIMS:GLenum;readonly MEDIUM_FLOAT:GLenum;readonly MEDIUM_INT:GLenum;readonly MIRRORED_REPEAT:GLenum;readonly NEAREST:GLenum;readonly NEAREST_MIPMAP_LINEAR:GLenum;readonly NEAREST_MIPMAP_NEAREST:GLenum;readonly NEVER:GLenum;readonly NICEST:GLenum;readonly NONE:GLenum;readonly NOTEQUAL:GLenum;readonly NO_ERROR:GLenum;readonly ONE:GLenum;readonly ONE_MINUS_CONSTANT_ALPHA:GLenum;readonly ONE_MINUS_CONSTANT_COLOR:GLenum;readonly ONE_MINUS_DST_ALPHA:GLenum;readonly ONE_MINUS_DST_COLOR:GLenum;readonly ONE_MINUS_SRC_ALPHA:GLenum;readonly ONE_MINUS_SRC_COLOR:GLenum;readonly OUT_OF_MEMORY:GLenum;readonly PACK_ALIGNMENT:GLenum;readonly POINTS:GLenum;readonly POLYGON_OFFSET_FACTOR:GLenum;readonly POLYGON_OFFSET_FILL:GLenum;readonly POLYGON_OFFSET_UNITS:GLenum;readonly RED_BITS:GLenum;readonly RENDERBUFFER:GLenum;readonly RENDERBUFFER_ALPHA_SIZE:GLenum;readonly RENDERBUFFER_BINDING:GLenum;readonly RENDERBUFFER_BLUE_SIZE:GLenum;readonly RENDERBUFFER_DEPTH_SIZE:GLenum;readonly RENDERBUFFER_GREEN_SIZE:GLenum;readonly RENDERBUFFER_HEIGHT:GLenum;readonly RENDERBUFFER_INTERNAL_FORMAT:GLenum;readonly RENDERBUFFER_RED_SIZE:GLenum;readonly RENDERBUFFER_STENCIL_SIZE:GLenum;readonly RENDERBUFFER_WIDTH:GLenum;readonly RENDERER:GLenum;readonly REPEAT:GLenum;readonly REPLACE:GLenum;readonly RGB:GLenum;readonly RGB565:GLenum;readonly RGB5_A1:GLenum;readonly RGBA:GLenum;readonly RGBA4:GLenum;readonly SAMPLER_2D:GLenum;readonly SAMPLER_CUBE:GLenum;readonly SAMPLES:GLenum;readonly SAMPLE_ALPHA_TO_COVERAGE:GLenum;readonly SAMPLE_BUFFERS:GLenum;readonly SAMPLE_COVERAGE:GLenum;readonly SAMPLE_COVERAGE_INVERT:GLenum;readonly SAMPLE_COVERAGE_VALUE:GLenum;readonly SCISSOR_BOX:GLenum;readonly SCISSOR_TEST:GLenum;readonly SHADER_TYPE:GLenum;readonly SHADING_LANGUAGE_VERSION:GLenum;readonly SHORT:GLenum;readonly SRC_ALPHA:GLenum;readonly SRC_ALPHA_SATURATE:GLenum;readonly SRC_COLOR:GLenum;readonly STATIC_DRAW:GLenum;readonly STENCIL_ATTACHMENT:GLenum;readonly STENCIL_BACK_FAIL:GLenum;readonly STENCIL_BACK_FUNC:GLenum;readonly STENCIL_BACK_PASS_DEPTH_FAIL:GLenum;readonly STENCIL_BACK_PASS_DEPTH_PASS:GLenum;readonly STENCIL_BACK_REF:GLenum;readonly STENCIL_BACK_VALUE_MASK:GLenum;readonly STENCIL_BACK_WRITEMASK:GLenum;readonly STENCIL_BITS:GLenum;readonly STENCIL_BUFFER_BIT:GLenum;readonly STENCIL_CLEAR_VALUE:GLenum;readonly STENCIL_FAIL:GLenum;readonly STENCIL_FUNC:GLenum;readonly STENCIL_INDEX8:GLenum;readonly STENCIL_PASS_DEPTH_FAIL:GLenum;readonly STENCIL_PASS_DEPTH_PASS:GLenum;readonly STENCIL_REF:GLenum;readonly STENCIL_TEST:GLenum;readonly STENCIL_VALUE_MASK:GLenum;readonly STENCIL_WRITEMASK:GLenum;readonly STREAM_DRAW:GLenum;readonly SUBPIXEL_BITS:GLenum;readonly TEXTURE:GLenum;readonly TEXTURE0:GLenum;readonly TEXTURE1:GLenum;readonly TEXTURE10:GLenum;readonly TEXTURE11:GLenum;readonly TEXTURE12:GLenum;readonly TEXTURE13:GLenum;readonly TEXTURE14:GLenum;readonly TEXTURE15:GLenum;readonly TEXTURE16:GLenum;readonly TEXTURE17:GLenum;readonly TEXTURE18:GLenum;readonly TEXTURE19:GLenum;readonly TEXTURE2:GLenum;readonly TEXTURE20:GLenum;readonly TEXTURE21:GLenum;readonly TEXTURE22:GLenum;readonly TEXTURE23:GLenum;readonly TEXTURE24:GLenum;readonly TEXTURE25:GLenum;readonly TEXTURE26:GLenum;readonly TEXTURE27:GLenum;readonly TEXTURE28:GLenum;readonly TEXTURE29:GLenum;readonly TEXTURE3:GLenum;readonly TEXTURE30:GLenum;readonly TEXTURE31:GLenum;readonly TEXTURE4:GLenum;readonly TEXTURE5:GLenum;readonly TEXTURE6:GLenum;readonly TEXTURE7:GLenum;readonly TEXTURE8:GLenum;readonly TEXTURE9:GLenum;readonly TEXTURE_2D:GLenum;readonly TEXTURE_BINDING_2D:GLenum;readonly TEXTURE_BINDING_CUBE_MAP:GLenum;readonly TEXTURE_CUBE_MAP:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_X:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_Y:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_Z:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_X:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_Y:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_Z:GLenum;readonly TEXTURE_MAG_FILTER:GLenum;readonly TEXTURE_MIN_FILTER:GLenum;readonly TEXTURE_WRAP_S:GLenum;readonly TEXTURE_WRAP_T:GLenum;readonly TRIANGLES:GLenum;readonly TRIANGLE_FAN:GLenum;readonly TRIANGLE_STRIP:GLenum;readonly UNPACK_ALIGNMENT:GLenum;readonly UNPACK_COLORSPACE_CONVERSION_WEBGL:GLenum;readonly UNPACK_FLIP_Y_WEBGL:GLenum;readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL:GLenum;readonly UNSIGNED_BYTE:GLenum;readonly UNSIGNED_INT:GLenum;readonly UNSIGNED_SHORT:GLenum;readonly UNSIGNED_SHORT_4_4_4_4:GLenum;readonly UNSIGNED_SHORT_5_5_5_1:GLenum;readonly UNSIGNED_SHORT_5_6_5:GLenum;readonly VALIDATE_STATUS:GLenum;readonly VENDOR:GLenum;readonly VERSION:GLenum;readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:GLenum;readonly VERTEX_ATTRIB_ARRAY_ENABLED:GLenum;readonly VERTEX_ATTRIB_ARRAY_NORMALIZED:GLenum;readonly VERTEX_ATTRIB_ARRAY_POINTER:GLenum;readonly VERTEX_ATTRIB_ARRAY_SIZE:GLenum;readonly VERTEX_ATTRIB_ARRAY_STRIDE:GLenum;readonly VERTEX_ATTRIB_ARRAY_TYPE:GLenum;readonly VERTEX_SHADER:GLenum;readonly VIEWPORT:GLenum;readonly ZERO:GLenum;};interface WebGL2RenderingContextBase{beginQuery(target:GLenum,query:WebGLQuery):void;beginTransformFeedback(primitiveMode:GLenum):void;bindBufferBase(target:GLenum,index:GLuint,buffer:WebGLBuffer|null):void;bindBufferRange(target:GLenum,index:GLuint,buffer:WebGLBuffer|null,offset:GLintptr,size:GLsizeiptr):void;bindSampler(unit:GLuint,sampler:WebGLSampler|null):void;bindTransformFeedback(target:GLenum,tf:WebGLTransformFeedback|null):void;bindVertexArray(array:WebGLVertexArrayObject|null):void;blitFramebuffer(srcX0:GLint,srcY0:GLint,srcX1:GLint,srcY1:GLint,dstX0:GLint,dstY0:GLint,dstX1:GLint,dstY1:GLint,mask:GLbitfield,filter:GLenum):void;clearBufferfi(buffer:GLenum,drawbuffer:GLint,depth:GLfloat,stencil:GLint):void;clearBufferfv(buffer:GLenum,drawbuffer:GLint,values:Float32List,srcOffset?:GLuint):void;clearBufferiv(buffer:GLenum,drawbuffer:GLint,values:Int32List,srcOffset?:GLuint):void;clearBufferuiv(buffer:GLenum,drawbuffer:GLint,values:Uint32List,srcOffset?:GLuint):void;clientWaitSync(sync:WebGLSync,flags:GLbitfield,timeout:GLuint64):GLenum;compressedTexImage3D(target:GLenum,level:GLint,internalformat:GLenum,width:GLsizei,height:GLsizei,depth:GLsizei,border:GLint,imageSize:GLsizei,offset:GLintptr):void;compressedTexImage3D(target:GLenum,level:GLint,internalformat:GLenum,width:GLsizei,height:GLsizei,depth:GLsizei,border:GLint,srcData:ArrayBufferView,srcOffset?:GLuint,srcLengthOverride?:GLuint):void;compressedTexSubImage3D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,zoffset:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,format:GLenum,imageSize:GLsizei,offset:GLintptr):void;compressedTexSubImage3D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,zoffset:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,format:GLenum,srcData:ArrayBufferView,srcOffset?:GLuint,srcLengthOverride?:GLuint):void;copyBufferSubData(readTarget:GLenum,writeTarget:GLenum,readOffset:GLintptr,writeOffset:GLintptr,size:GLsizeiptr):void;copyTexSubImage3D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,zoffset:GLint,x:GLint,y:GLint,width:GLsizei,height:GLsizei):void;createQuery():WebGLQuery|null;createSampler():WebGLSampler|null;createTransformFeedback():WebGLTransformFeedback|null;createVertexArray():WebGLVertexArrayObject|null;deleteQuery(query:WebGLQuery|null):void;deleteSampler(sampler:WebGLSampler|null):void;deleteSync(sync:WebGLSync|null):void;deleteTransformFeedback(tf:WebGLTransformFeedback|null):void;deleteVertexArray(vertexArray:WebGLVertexArrayObject|null):void;drawArraysInstanced(mode:GLenum,first:GLint,count:GLsizei,instanceCount:GLsizei):void;drawBuffers(buffers:GLenum[]):void;drawElementsInstanced(mode:GLenum,count:GLsizei,type:GLenum,offset:GLintptr,instanceCount:GLsizei):void;drawRangeElements(mode:GLenum,start:GLuint,end:GLuint,count:GLsizei,type:GLenum,offset:GLintptr):void;endQuery(target:GLenum):void;endTransformFeedback():void;fenceSync(condition:GLenum,flags:GLbitfield):WebGLSync|null;framebufferTextureLayer(target:GLenum,attachment:GLenum,texture:WebGLTexture|null,level:GLint,layer:GLint):void;getActiveUniformBlockName(program:WebGLProgram,uniformBlockIndex:GLuint):string|null;getActiveUniformBlockParameter(program:WebGLProgram,uniformBlockIndex:GLuint,pname:GLenum):any;getActiveUniforms(program:WebGLProgram,uniformIndices:GLuint[],pname:GLenum):any;getBufferSubData(target:GLenum,srcByteOffset:GLintptr,dstBuffer:ArrayBufferView,dstOffset?:GLuint,length?:GLuint):void;getFragDataLocation(program:WebGLProgram,name:string):GLint;getIndexedParameter(target:GLenum,index:GLuint):any;getInternalformatParameter(target:GLenum,internalformat:GLenum,pname:GLenum):any;getQuery(target:GLenum,pname:GLenum):WebGLQuery|null;getQueryParameter(query:WebGLQuery,pname:GLenum):any;getSamplerParameter(sampler:WebGLSampler,pname:GLenum):any;getSyncParameter(sync:WebGLSync,pname:GLenum):any;getTransformFeedbackVarying(program:WebGLProgram,index:GLuint):WebGLActiveInfo|null;getUniformBlockIndex(program:WebGLProgram,uniformBlockName:string):GLuint;getUniformIndices(program:WebGLProgram,uniformNames:string[]):GLuint[]|null;invalidateFramebuffer(target:GLenum,attachments:GLenum[]):void;invalidateSubFramebuffer(target:GLenum,attachments:GLenum[],x:GLint,y:GLint,width:GLsizei,height:GLsizei):void;isQuery(query:WebGLQuery|null):GLboolean;isSampler(sampler:WebGLSampler|null):GLboolean;isSync(sync:WebGLSync|null):GLboolean;isTransformFeedback(tf:WebGLTransformFeedback|null):GLboolean;isVertexArray(vertexArray:WebGLVertexArrayObject|null):GLboolean;pauseTransformFeedback():void;readBuffer(src:GLenum):void;renderbufferStorageMultisample(target:GLenum,samples:GLsizei,internalformat:GLenum,width:GLsizei,height:GLsizei):void;resumeTransformFeedback():void;samplerParameterf(sampler:WebGLSampler,pname:GLenum,param:GLfloat):void;samplerParameteri(sampler:WebGLSampler,pname:GLenum,param:GLint):void;texImage3D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,border:GLint,format:GLenum,type:GLenum,pboOffset:GLintptr):void;texImage3D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,border:GLint,format:GLenum,type:GLenum,source:TexImageSource):void;texImage3D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,border:GLint,format:GLenum,type:GLenum,srcData:ArrayBufferView|null):void;texImage3D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,border:GLint,format:GLenum,type:GLenum,srcData:ArrayBufferView,srcOffset:GLuint):void;texStorage2D(target:GLenum,levels:GLsizei,internalformat:GLenum,width:GLsizei,height:GLsizei):void;texStorage3D(target:GLenum,levels:GLsizei,internalformat:GLenum,width:GLsizei,height:GLsizei,depth:GLsizei):void;texSubImage3D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,zoffset:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,format:GLenum,type:GLenum,pboOffset:GLintptr):void;texSubImage3D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,zoffset:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,format:GLenum,type:GLenum,source:TexImageSource):void;texSubImage3D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,zoffset:GLint,width:GLsizei,height:GLsizei,depth:GLsizei,format:GLenum,type:GLenum,srcData:ArrayBufferView|null,srcOffset?:GLuint):void;transformFeedbackVaryings(program:WebGLProgram,varyings:string[],bufferMode:GLenum):void;uniform1ui(location:WebGLUniformLocation|null,v0:GLuint):void;uniform1uiv(location:WebGLUniformLocation|null,data:Uint32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform2ui(location:WebGLUniformLocation|null,v0:GLuint,v1:GLuint):void;uniform2uiv(location:WebGLUniformLocation|null,data:Uint32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform3ui(location:WebGLUniformLocation|null,v0:GLuint,v1:GLuint,v2:GLuint):void;uniform3uiv(location:WebGLUniformLocation|null,data:Uint32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform4ui(location:WebGLUniformLocation|null,v0:GLuint,v1:GLuint,v2:GLuint,v3:GLuint):void;uniform4uiv(location:WebGLUniformLocation|null,data:Uint32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformBlockBinding(program:WebGLProgram,uniformBlockIndex:GLuint,uniformBlockBinding:GLuint):void;uniformMatrix2x3fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix2x4fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix3x2fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix3x4fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix4x2fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix4x3fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;vertexAttribDivisor(index:GLuint,divisor:GLuint):void;vertexAttribI4i(index:GLuint,x:GLint,y:GLint,z:GLint,w:GLint):void;vertexAttribI4iv(index:GLuint,values:Int32List):void;vertexAttribI4ui(index:GLuint,x:GLuint,y:GLuint,z:GLuint,w:GLuint):void;vertexAttribI4uiv(index:GLuint,values:Uint32List):void;vertexAttribIPointer(index:GLuint,size:GLint,type:GLenum,stride:GLsizei,offset:GLintptr):void;waitSync(sync:WebGLSync,flags:GLbitfield,timeout:GLint64):void;readonly ACTIVE_UNIFORM_BLOCKS:GLenum;readonly ALREADY_SIGNALED:GLenum;readonly ANY_SAMPLES_PASSED:GLenum;readonly ANY_SAMPLES_PASSED_CONSERVATIVE:GLenum;readonly COLOR:GLenum;readonly COLOR_ATTACHMENT1:GLenum;readonly COLOR_ATTACHMENT10:GLenum;readonly COLOR_ATTACHMENT11:GLenum;readonly COLOR_ATTACHMENT12:GLenum;readonly COLOR_ATTACHMENT13:GLenum;readonly COLOR_ATTACHMENT14:GLenum;readonly COLOR_ATTACHMENT15:GLenum;readonly COLOR_ATTACHMENT2:GLenum;readonly COLOR_ATTACHMENT3:GLenum;readonly COLOR_ATTACHMENT4:GLenum;readonly COLOR_ATTACHMENT5:GLenum;readonly COLOR_ATTACHMENT6:GLenum;readonly COLOR_ATTACHMENT7:GLenum;readonly COLOR_ATTACHMENT8:GLenum;readonly COLOR_ATTACHMENT9:GLenum;readonly COMPARE_REF_TO_TEXTURE:GLenum;readonly CONDITION_SATISFIED:GLenum;readonly COPY_READ_BUFFER:GLenum;readonly COPY_READ_BUFFER_BINDING:GLenum;readonly COPY_WRITE_BUFFER:GLenum;readonly COPY_WRITE_BUFFER_BINDING:GLenum;readonly CURRENT_QUERY:GLenum;readonly DEPTH:GLenum;readonly DEPTH24_STENCIL8:GLenum;readonly DEPTH32F_STENCIL8:GLenum;readonly DEPTH_COMPONENT24:GLenum;readonly DEPTH_COMPONENT32F:GLenum;readonly DRAW_BUFFER0:GLenum;readonly DRAW_BUFFER1:GLenum;readonly DRAW_BUFFER10:GLenum;readonly DRAW_BUFFER11:GLenum;readonly DRAW_BUFFER12:GLenum;readonly DRAW_BUFFER13:GLenum;readonly DRAW_BUFFER14:GLenum;readonly DRAW_BUFFER15:GLenum;readonly DRAW_BUFFER2:GLenum;readonly DRAW_BUFFER3:GLenum;readonly DRAW_BUFFER4:GLenum;readonly DRAW_BUFFER5:GLenum;readonly DRAW_BUFFER6:GLenum;readonly DRAW_BUFFER7:GLenum;readonly DRAW_BUFFER8:GLenum;readonly DRAW_BUFFER9:GLenum;readonly DRAW_FRAMEBUFFER:GLenum;readonly DRAW_FRAMEBUFFER_BINDING:GLenum;readonly DYNAMIC_COPY:GLenum;readonly DYNAMIC_READ:GLenum;readonly FLOAT_32_UNSIGNED_INT_24_8_REV:GLenum;readonly FLOAT_MAT2x3:GLenum;readonly FLOAT_MAT2x4:GLenum;readonly FLOAT_MAT3x2:GLenum;readonly FLOAT_MAT3x4:GLenum;readonly FLOAT_MAT4x2:GLenum;readonly FLOAT_MAT4x3:GLenum;readonly FRAGMENT_SHADER_DERIVATIVE_HINT:GLenum;readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:GLenum;readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:GLenum;readonly FRAMEBUFFER_DEFAULT:GLenum;readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:GLenum;readonly HALF_FLOAT:GLenum;readonly INTERLEAVED_ATTRIBS:GLenum;readonly INT_2_10_10_10_REV:GLenum;readonly INT_SAMPLER_2D:GLenum;readonly INT_SAMPLER_2D_ARRAY:GLenum;readonly INT_SAMPLER_3D:GLenum;readonly INT_SAMPLER_CUBE:GLenum;readonly INVALID_INDEX:GLenum;readonly MAX:GLenum;readonly MAX_3D_TEXTURE_SIZE:GLenum;readonly MAX_ARRAY_TEXTURE_LAYERS:GLenum;readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL:GLenum;readonly MAX_COLOR_ATTACHMENTS:GLenum;readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:GLenum;readonly MAX_COMBINED_UNIFORM_BLOCKS:GLenum;readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:GLenum;readonly MAX_DRAW_BUFFERS:GLenum;readonly MAX_ELEMENTS_INDICES:GLenum;readonly MAX_ELEMENTS_VERTICES:GLenum;readonly MAX_ELEMENT_INDEX:GLenum;readonly MAX_FRAGMENT_INPUT_COMPONENTS:GLenum;readonly MAX_FRAGMENT_UNIFORM_BLOCKS:GLenum;readonly MAX_FRAGMENT_UNIFORM_COMPONENTS:GLenum;readonly MAX_PROGRAM_TEXEL_OFFSET:GLenum;readonly MAX_SAMPLES:GLenum;readonly MAX_SERVER_WAIT_TIMEOUT:GLenum;readonly MAX_TEXTURE_LOD_BIAS:GLenum;readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS:GLenum;readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS:GLenum;readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS:GLenum;readonly MAX_UNIFORM_BLOCK_SIZE:GLenum;readonly MAX_UNIFORM_BUFFER_BINDINGS:GLenum;readonly MAX_VARYING_COMPONENTS:GLenum;readonly MAX_VERTEX_OUTPUT_COMPONENTS:GLenum;readonly MAX_VERTEX_UNIFORM_BLOCKS:GLenum;readonly MAX_VERTEX_UNIFORM_COMPONENTS:GLenum;readonly MIN:GLenum;readonly MIN_PROGRAM_TEXEL_OFFSET:GLenum;readonly OBJECT_TYPE:GLenum;readonly PACK_ROW_LENGTH:GLenum;readonly PACK_SKIP_PIXELS:GLenum;readonly PACK_SKIP_ROWS:GLenum;readonly PIXEL_PACK_BUFFER:GLenum;readonly PIXEL_PACK_BUFFER_BINDING:GLenum;readonly PIXEL_UNPACK_BUFFER:GLenum;readonly PIXEL_UNPACK_BUFFER_BINDING:GLenum;readonly QUERY_RESULT:GLenum;readonly QUERY_RESULT_AVAILABLE:GLenum;readonly R11F_G11F_B10F:GLenum;readonly R16F:GLenum;readonly R16I:GLenum;readonly R16UI:GLenum;readonly R32F:GLenum;readonly R32I:GLenum;readonly R32UI:GLenum;readonly R8:GLenum;readonly R8I:GLenum;readonly R8UI:GLenum;readonly R8_SNORM:GLenum;readonly RASTERIZER_DISCARD:GLenum;readonly READ_BUFFER:GLenum;readonly READ_FRAMEBUFFER:GLenum;readonly READ_FRAMEBUFFER_BINDING:GLenum;readonly RED:GLenum;readonly RED_INTEGER:GLenum;readonly RENDERBUFFER_SAMPLES:GLenum;readonly RG:GLenum;readonly RG16F:GLenum;readonly RG16I:GLenum;readonly RG16UI:GLenum;readonly RG32F:GLenum;readonly RG32I:GLenum;readonly RG32UI:GLenum;readonly RG8:GLenum;readonly RG8I:GLenum;readonly RG8UI:GLenum;readonly RG8_SNORM:GLenum;readonly RGB10_A2:GLenum;readonly RGB10_A2UI:GLenum;readonly RGB16F:GLenum;readonly RGB16I:GLenum;readonly RGB16UI:GLenum;readonly RGB32F:GLenum;readonly RGB32I:GLenum;readonly RGB32UI:GLenum;readonly RGB8:GLenum;readonly RGB8I:GLenum;readonly RGB8UI:GLenum;readonly RGB8_SNORM:GLenum;readonly RGB9_E5:GLenum;readonly RGBA16F:GLenum;readonly RGBA16I:GLenum;readonly RGBA16UI:GLenum;readonly RGBA32F:GLenum;readonly RGBA32I:GLenum;readonly RGBA32UI:GLenum;readonly RGBA8:GLenum;readonly RGBA8I:GLenum;readonly RGBA8UI:GLenum;readonly RGBA8_SNORM:GLenum;readonly RGBA_INTEGER:GLenum;readonly RGB_INTEGER:GLenum;readonly RG_INTEGER:GLenum;readonly SAMPLER_2D_ARRAY:GLenum;readonly SAMPLER_2D_ARRAY_SHADOW:GLenum;readonly SAMPLER_2D_SHADOW:GLenum;readonly SAMPLER_3D:GLenum;readonly SAMPLER_BINDING:GLenum;readonly SAMPLER_CUBE_SHADOW:GLenum;readonly SEPARATE_ATTRIBS:GLenum;readonly SIGNALED:GLenum;readonly SIGNED_NORMALIZED:GLenum;readonly SRGB:GLenum;readonly SRGB8:GLenum;readonly SRGB8_ALPHA8:GLenum;readonly STATIC_COPY:GLenum;readonly STATIC_READ:GLenum;readonly STENCIL:GLenum;readonly STREAM_COPY:GLenum;readonly STREAM_READ:GLenum;readonly SYNC_CONDITION:GLenum;readonly SYNC_FENCE:GLenum;readonly SYNC_FLAGS:GLenum;readonly SYNC_FLUSH_COMMANDS_BIT:GLenum;readonly SYNC_GPU_COMMANDS_COMPLETE:GLenum;readonly SYNC_STATUS:GLenum;readonly TEXTURE_2D_ARRAY:GLenum;readonly TEXTURE_3D:GLenum;readonly TEXTURE_BASE_LEVEL:GLenum;readonly TEXTURE_BINDING_2D_ARRAY:GLenum;readonly TEXTURE_BINDING_3D:GLenum;readonly TEXTURE_COMPARE_FUNC:GLenum;readonly TEXTURE_COMPARE_MODE:GLenum;readonly TEXTURE_IMMUTABLE_FORMAT:GLenum;readonly TEXTURE_IMMUTABLE_LEVELS:GLenum;readonly TEXTURE_MAX_LEVEL:GLenum;readonly TEXTURE_MAX_LOD:GLenum;readonly TEXTURE_MIN_LOD:GLenum;readonly TEXTURE_WRAP_R:GLenum;readonly TIMEOUT_EXPIRED:GLenum;readonly TIMEOUT_IGNORED:GLint64;readonly TRANSFORM_FEEDBACK:GLenum;readonly TRANSFORM_FEEDBACK_ACTIVE:GLenum;readonly TRANSFORM_FEEDBACK_BINDING:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_BINDING:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_MODE:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_SIZE:GLenum;readonly TRANSFORM_FEEDBACK_BUFFER_START:GLenum;readonly TRANSFORM_FEEDBACK_PAUSED:GLenum;readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:GLenum;readonly TRANSFORM_FEEDBACK_VARYINGS:GLenum;readonly UNIFORM_ARRAY_STRIDE:GLenum;readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS:GLenum;readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:GLenum;readonly UNIFORM_BLOCK_BINDING:GLenum;readonly UNIFORM_BLOCK_DATA_SIZE:GLenum;readonly UNIFORM_BLOCK_INDEX:GLenum;readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:GLenum;readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:GLenum;readonly UNIFORM_BUFFER:GLenum;readonly UNIFORM_BUFFER_BINDING:GLenum;readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT:GLenum;readonly UNIFORM_BUFFER_SIZE:GLenum;readonly UNIFORM_BUFFER_START:GLenum;readonly UNIFORM_IS_ROW_MAJOR:GLenum;readonly UNIFORM_MATRIX_STRIDE:GLenum;readonly UNIFORM_OFFSET:GLenum;readonly UNIFORM_SIZE:GLenum;readonly UNIFORM_TYPE:GLenum;readonly UNPACK_IMAGE_HEIGHT:GLenum;readonly UNPACK_ROW_LENGTH:GLenum;readonly UNPACK_SKIP_IMAGES:GLenum;readonly UNPACK_SKIP_PIXELS:GLenum;readonly UNPACK_SKIP_ROWS:GLenum;readonly UNSIGNALED:GLenum;readonly UNSIGNED_INT_10F_11F_11F_REV:GLenum;readonly UNSIGNED_INT_24_8:GLenum;readonly UNSIGNED_INT_2_10_10_10_REV:GLenum;readonly UNSIGNED_INT_5_9_9_9_REV:GLenum;readonly UNSIGNED_INT_SAMPLER_2D:GLenum;readonly UNSIGNED_INT_SAMPLER_2D_ARRAY:GLenum;readonly UNSIGNED_INT_SAMPLER_3D:GLenum;readonly UNSIGNED_INT_SAMPLER_CUBE:GLenum;readonly UNSIGNED_INT_VEC2:GLenum;readonly UNSIGNED_INT_VEC3:GLenum;readonly UNSIGNED_INT_VEC4:GLenum;readonly UNSIGNED_NORMALIZED:GLenum;readonly VERTEX_ARRAY_BINDING:GLenum;readonly VERTEX_ATTRIB_ARRAY_DIVISOR:GLenum;readonly VERTEX_ATTRIB_ARRAY_INTEGER:GLenum;readonly WAIT_FAILED:GLenum;}interface WebGL2RenderingContextOverloads{bufferData(target:GLenum,size:GLsizeiptr,usage:GLenum):void;bufferData(target:GLenum,srcData:BufferSource|null,usage:GLenum):void;bufferData(target:GLenum,srcData:ArrayBufferView,usage:GLenum,srcOffset:GLuint,length?:GLuint):void;bufferSubData(target:GLenum,dstByteOffset:GLintptr,srcData:BufferSource):void;bufferSubData(target:GLenum,dstByteOffset:GLintptr,srcData:ArrayBufferView,srcOffset:GLuint,length?:GLuint):void;compressedTexImage2D(target:GLenum,level:GLint,internalformat:GLenum,width:GLsizei,height:GLsizei,border:GLint,imageSize:GLsizei,offset:GLintptr):void;compressedTexImage2D(target:GLenum,level:GLint,internalformat:GLenum,width:GLsizei,height:GLsizei,border:GLint,srcData:ArrayBufferView,srcOffset?:GLuint,srcLengthOverride?:GLuint):void;compressedTexSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,imageSize:GLsizei,offset:GLintptr):void;compressedTexSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,srcData:ArrayBufferView,srcOffset?:GLuint,srcLengthOverride?:GLuint):void;readPixels(x:GLint,y:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,dstData:ArrayBufferView|null):void;readPixels(x:GLint,y:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,offset:GLintptr):void;readPixels(x:GLint,y:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,dstData:ArrayBufferView,dstOffset:GLuint):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,border:GLint,format:GLenum,type:GLenum,pixels:ArrayBufferView|null):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,format:GLenum,type:GLenum,source:TexImageSource):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,border:GLint,format:GLenum,type:GLenum,pboOffset:GLintptr):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,border:GLint,format:GLenum,type:GLenum,source:TexImageSource):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,border:GLint,format:GLenum,type:GLenum,srcData:ArrayBufferView,srcOffset:GLuint):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,pixels:ArrayBufferView|null):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,format:GLenum,type:GLenum,source:TexImageSource):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,pboOffset:GLintptr):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,source:TexImageSource):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,srcData:ArrayBufferView,srcOffset:GLuint):void;uniform1fv(location:WebGLUniformLocation|null,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform1iv(location:WebGLUniformLocation|null,data:Int32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform2fv(location:WebGLUniformLocation|null,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform2iv(location:WebGLUniformLocation|null,data:Int32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform3fv(location:WebGLUniformLocation|null,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform3iv(location:WebGLUniformLocation|null,data:Int32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform4fv(location:WebGLUniformLocation|null,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniform4iv(location:WebGLUniformLocation|null,data:Int32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix2fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix3fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix4fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Float32List,srcOffset?:GLuint,srcLength?:GLuint):void;}interface WebGLActiveInfo{readonly name:string;readonly size:GLint;readonly type:GLenum;}declare var WebGLActiveInfo:{prototype:WebGLActiveInfo;new():WebGLActiveInfo;};interface WebGLBuffer{}declare var WebGLBuffer:{prototype:WebGLBuffer;new():WebGLBuffer;};interface WebGLContextEvent extends Event{readonly statusMessage:string;}declare var WebGLContextEvent:{prototype:WebGLContextEvent;new(type:string,eventInit?:WebGLContextEventInit):WebGLContextEvent;};interface WebGLFramebuffer{}declare var WebGLFramebuffer:{prototype:WebGLFramebuffer;new():WebGLFramebuffer;};interface WebGLProgram{}declare var WebGLProgram:{prototype:WebGLProgram;new():WebGLProgram;};interface WebGLQuery{}declare var WebGLQuery:{prototype:WebGLQuery;new():WebGLQuery;};interface WebGLRenderbuffer{}declare var WebGLRenderbuffer:{prototype:WebGLRenderbuffer;new():WebGLRenderbuffer;};interface WebGLRenderingContext extends WebGLRenderingContextBase,WebGLRenderingContextOverloads{}declare var WebGLRenderingContext:{prototype:WebGLRenderingContext;new():WebGLRenderingContext;readonly ACTIVE_ATTRIBUTES:GLenum;readonly ACTIVE_TEXTURE:GLenum;readonly ACTIVE_UNIFORMS:GLenum;readonly ALIASED_LINE_WIDTH_RANGE:GLenum;readonly ALIASED_POINT_SIZE_RANGE:GLenum;readonly ALPHA:GLenum;readonly ALPHA_BITS:GLenum;readonly ALWAYS:GLenum;readonly ARRAY_BUFFER:GLenum;readonly ARRAY_BUFFER_BINDING:GLenum;readonly ATTACHED_SHADERS:GLenum;readonly BACK:GLenum;readonly BLEND:GLenum;readonly BLEND_COLOR:GLenum;readonly BLEND_DST_ALPHA:GLenum;readonly BLEND_DST_RGB:GLenum;readonly BLEND_EQUATION:GLenum;readonly BLEND_EQUATION_ALPHA:GLenum;readonly BLEND_EQUATION_RGB:GLenum;readonly BLEND_SRC_ALPHA:GLenum;readonly BLEND_SRC_RGB:GLenum;readonly BLUE_BITS:GLenum;readonly BOOL:GLenum;readonly BOOL_VEC2:GLenum;readonly BOOL_VEC3:GLenum;readonly BOOL_VEC4:GLenum;readonly BROWSER_DEFAULT_WEBGL:GLenum;readonly BUFFER_SIZE:GLenum;readonly BUFFER_USAGE:GLenum;readonly BYTE:GLenum;readonly CCW:GLenum;readonly CLAMP_TO_EDGE:GLenum;readonly COLOR_ATTACHMENT0:GLenum;readonly COLOR_BUFFER_BIT:GLenum;readonly COLOR_CLEAR_VALUE:GLenum;readonly COLOR_WRITEMASK:GLenum;readonly COMPILE_STATUS:GLenum;readonly COMPRESSED_TEXTURE_FORMATS:GLenum;readonly CONSTANT_ALPHA:GLenum;readonly CONSTANT_COLOR:GLenum;readonly CONTEXT_LOST_WEBGL:GLenum;readonly CULL_FACE:GLenum;readonly CULL_FACE_MODE:GLenum;readonly CURRENT_PROGRAM:GLenum;readonly CURRENT_VERTEX_ATTRIB:GLenum;readonly CW:GLenum;readonly DECR:GLenum;readonly DECR_WRAP:GLenum;readonly DELETE_STATUS:GLenum;readonly DEPTH_ATTACHMENT:GLenum;readonly DEPTH_BITS:GLenum;readonly DEPTH_BUFFER_BIT:GLenum;readonly DEPTH_CLEAR_VALUE:GLenum;readonly DEPTH_COMPONENT:GLenum;readonly DEPTH_COMPONENT16:GLenum;readonly DEPTH_FUNC:GLenum;readonly DEPTH_RANGE:GLenum;readonly DEPTH_STENCIL:GLenum;readonly DEPTH_STENCIL_ATTACHMENT:GLenum;readonly DEPTH_TEST:GLenum;readonly DEPTH_WRITEMASK:GLenum;readonly DITHER:GLenum;readonly DONT_CARE:GLenum;readonly DST_ALPHA:GLenum;readonly DST_COLOR:GLenum;readonly DYNAMIC_DRAW:GLenum;readonly ELEMENT_ARRAY_BUFFER:GLenum;readonly ELEMENT_ARRAY_BUFFER_BINDING:GLenum;readonly EQUAL:GLenum;readonly FASTEST:GLenum;readonly FLOAT:GLenum;readonly FLOAT_MAT2:GLenum;readonly FLOAT_MAT3:GLenum;readonly FLOAT_MAT4:GLenum;readonly FLOAT_VEC2:GLenum;readonly FLOAT_VEC3:GLenum;readonly FLOAT_VEC4:GLenum;readonly FRAGMENT_SHADER:GLenum;readonly FRAMEBUFFER:GLenum;readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:GLenum;readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:GLenum;readonly FRAMEBUFFER_BINDING:GLenum;readonly FRAMEBUFFER_COMPLETE:GLenum;readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT:GLenum;readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS:GLenum;readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:GLenum;readonly FRAMEBUFFER_UNSUPPORTED:GLenum;readonly FRONT:GLenum;readonly FRONT_AND_BACK:GLenum;readonly FRONT_FACE:GLenum;readonly FUNC_ADD:GLenum;readonly FUNC_REVERSE_SUBTRACT:GLenum;readonly FUNC_SUBTRACT:GLenum;readonly GENERATE_MIPMAP_HINT:GLenum;readonly GEQUAL:GLenum;readonly GREATER:GLenum;readonly GREEN_BITS:GLenum;readonly HIGH_FLOAT:GLenum;readonly HIGH_INT:GLenum;readonly IMPLEMENTATION_COLOR_READ_FORMAT:GLenum;readonly IMPLEMENTATION_COLOR_READ_TYPE:GLenum;readonly INCR:GLenum;readonly INCR_WRAP:GLenum;readonly INT:GLenum;readonly INT_VEC2:GLenum;readonly INT_VEC3:GLenum;readonly INT_VEC4:GLenum;readonly INVALID_ENUM:GLenum;readonly INVALID_FRAMEBUFFER_OPERATION:GLenum;readonly INVALID_OPERATION:GLenum;readonly INVALID_VALUE:GLenum;readonly INVERT:GLenum;readonly KEEP:GLenum;readonly LEQUAL:GLenum;readonly LESS:GLenum;readonly LINEAR:GLenum;readonly LINEAR_MIPMAP_LINEAR:GLenum;readonly LINEAR_MIPMAP_NEAREST:GLenum;readonly LINES:GLenum;readonly LINE_LOOP:GLenum;readonly LINE_STRIP:GLenum;readonly LINE_WIDTH:GLenum;readonly LINK_STATUS:GLenum;readonly LOW_FLOAT:GLenum;readonly LOW_INT:GLenum;readonly LUMINANCE:GLenum;readonly LUMINANCE_ALPHA:GLenum;readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_CUBE_MAP_TEXTURE_SIZE:GLenum;readonly MAX_FRAGMENT_UNIFORM_VECTORS:GLenum;readonly MAX_RENDERBUFFER_SIZE:GLenum;readonly MAX_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_TEXTURE_SIZE:GLenum;readonly MAX_VARYING_VECTORS:GLenum;readonly MAX_VERTEX_ATTRIBS:GLenum;readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_VERTEX_UNIFORM_VECTORS:GLenum;readonly MAX_VIEWPORT_DIMS:GLenum;readonly MEDIUM_FLOAT:GLenum;readonly MEDIUM_INT:GLenum;readonly MIRRORED_REPEAT:GLenum;readonly NEAREST:GLenum;readonly NEAREST_MIPMAP_LINEAR:GLenum;readonly NEAREST_MIPMAP_NEAREST:GLenum;readonly NEVER:GLenum;readonly NICEST:GLenum;readonly NONE:GLenum;readonly NOTEQUAL:GLenum;readonly NO_ERROR:GLenum;readonly ONE:GLenum;readonly ONE_MINUS_CONSTANT_ALPHA:GLenum;readonly ONE_MINUS_CONSTANT_COLOR:GLenum;readonly ONE_MINUS_DST_ALPHA:GLenum;readonly ONE_MINUS_DST_COLOR:GLenum;readonly ONE_MINUS_SRC_ALPHA:GLenum;readonly ONE_MINUS_SRC_COLOR:GLenum;readonly OUT_OF_MEMORY:GLenum;readonly PACK_ALIGNMENT:GLenum;readonly POINTS:GLenum;readonly POLYGON_OFFSET_FACTOR:GLenum;readonly POLYGON_OFFSET_FILL:GLenum;readonly POLYGON_OFFSET_UNITS:GLenum;readonly RED_BITS:GLenum;readonly RENDERBUFFER:GLenum;readonly RENDERBUFFER_ALPHA_SIZE:GLenum;readonly RENDERBUFFER_BINDING:GLenum;readonly RENDERBUFFER_BLUE_SIZE:GLenum;readonly RENDERBUFFER_DEPTH_SIZE:GLenum;readonly RENDERBUFFER_GREEN_SIZE:GLenum;readonly RENDERBUFFER_HEIGHT:GLenum;readonly RENDERBUFFER_INTERNAL_FORMAT:GLenum;readonly RENDERBUFFER_RED_SIZE:GLenum;readonly RENDERBUFFER_STENCIL_SIZE:GLenum;readonly RENDERBUFFER_WIDTH:GLenum;readonly RENDERER:GLenum;readonly REPEAT:GLenum;readonly REPLACE:GLenum;readonly RGB:GLenum;readonly RGB565:GLenum;readonly RGB5_A1:GLenum;readonly RGBA:GLenum;readonly RGBA4:GLenum;readonly SAMPLER_2D:GLenum;readonly SAMPLER_CUBE:GLenum;readonly SAMPLES:GLenum;readonly SAMPLE_ALPHA_TO_COVERAGE:GLenum;readonly SAMPLE_BUFFERS:GLenum;readonly SAMPLE_COVERAGE:GLenum;readonly SAMPLE_COVERAGE_INVERT:GLenum;readonly SAMPLE_COVERAGE_VALUE:GLenum;readonly SCISSOR_BOX:GLenum;readonly SCISSOR_TEST:GLenum;readonly SHADER_TYPE:GLenum;readonly SHADING_LANGUAGE_VERSION:GLenum;readonly SHORT:GLenum;readonly SRC_ALPHA:GLenum;readonly SRC_ALPHA_SATURATE:GLenum;readonly SRC_COLOR:GLenum;readonly STATIC_DRAW:GLenum;readonly STENCIL_ATTACHMENT:GLenum;readonly STENCIL_BACK_FAIL:GLenum;readonly STENCIL_BACK_FUNC:GLenum;readonly STENCIL_BACK_PASS_DEPTH_FAIL:GLenum;readonly STENCIL_BACK_PASS_DEPTH_PASS:GLenum;readonly STENCIL_BACK_REF:GLenum;readonly STENCIL_BACK_VALUE_MASK:GLenum;readonly STENCIL_BACK_WRITEMASK:GLenum;readonly STENCIL_BITS:GLenum;readonly STENCIL_BUFFER_BIT:GLenum;readonly STENCIL_CLEAR_VALUE:GLenum;readonly STENCIL_FAIL:GLenum;readonly STENCIL_FUNC:GLenum;readonly STENCIL_INDEX8:GLenum;readonly STENCIL_PASS_DEPTH_FAIL:GLenum;readonly STENCIL_PASS_DEPTH_PASS:GLenum;readonly STENCIL_REF:GLenum;readonly STENCIL_TEST:GLenum;readonly STENCIL_VALUE_MASK:GLenum;readonly STENCIL_WRITEMASK:GLenum;readonly STREAM_DRAW:GLenum;readonly SUBPIXEL_BITS:GLenum;readonly TEXTURE:GLenum;readonly TEXTURE0:GLenum;readonly TEXTURE1:GLenum;readonly TEXTURE10:GLenum;readonly TEXTURE11:GLenum;readonly TEXTURE12:GLenum;readonly TEXTURE13:GLenum;readonly TEXTURE14:GLenum;readonly TEXTURE15:GLenum;readonly TEXTURE16:GLenum;readonly TEXTURE17:GLenum;readonly TEXTURE18:GLenum;readonly TEXTURE19:GLenum;readonly TEXTURE2:GLenum;readonly TEXTURE20:GLenum;readonly TEXTURE21:GLenum;readonly TEXTURE22:GLenum;readonly TEXTURE23:GLenum;readonly TEXTURE24:GLenum;readonly TEXTURE25:GLenum;readonly TEXTURE26:GLenum;readonly TEXTURE27:GLenum;readonly TEXTURE28:GLenum;readonly TEXTURE29:GLenum;readonly TEXTURE3:GLenum;readonly TEXTURE30:GLenum;readonly TEXTURE31:GLenum;readonly TEXTURE4:GLenum;readonly TEXTURE5:GLenum;readonly TEXTURE6:GLenum;readonly TEXTURE7:GLenum;readonly TEXTURE8:GLenum;readonly TEXTURE9:GLenum;readonly TEXTURE_2D:GLenum;readonly TEXTURE_BINDING_2D:GLenum;readonly TEXTURE_BINDING_CUBE_MAP:GLenum;readonly TEXTURE_CUBE_MAP:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_X:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_Y:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_Z:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_X:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_Y:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_Z:GLenum;readonly TEXTURE_MAG_FILTER:GLenum;readonly TEXTURE_MIN_FILTER:GLenum;readonly TEXTURE_WRAP_S:GLenum;readonly TEXTURE_WRAP_T:GLenum;readonly TRIANGLES:GLenum;readonly TRIANGLE_FAN:GLenum;readonly TRIANGLE_STRIP:GLenum;readonly UNPACK_ALIGNMENT:GLenum;readonly UNPACK_COLORSPACE_CONVERSION_WEBGL:GLenum;readonly UNPACK_FLIP_Y_WEBGL:GLenum;readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL:GLenum;readonly UNSIGNED_BYTE:GLenum;readonly UNSIGNED_INT:GLenum;readonly UNSIGNED_SHORT:GLenum;readonly UNSIGNED_SHORT_4_4_4_4:GLenum;readonly UNSIGNED_SHORT_5_5_5_1:GLenum;readonly UNSIGNED_SHORT_5_6_5:GLenum;readonly VALIDATE_STATUS:GLenum;readonly VENDOR:GLenum;readonly VERSION:GLenum;readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:GLenum;readonly VERTEX_ATTRIB_ARRAY_ENABLED:GLenum;readonly VERTEX_ATTRIB_ARRAY_NORMALIZED:GLenum;readonly VERTEX_ATTRIB_ARRAY_POINTER:GLenum;readonly VERTEX_ATTRIB_ARRAY_SIZE:GLenum;readonly VERTEX_ATTRIB_ARRAY_STRIDE:GLenum;readonly VERTEX_ATTRIB_ARRAY_TYPE:GLenum;readonly VERTEX_SHADER:GLenum;readonly VIEWPORT:GLenum;readonly ZERO:GLenum;};interface WebGLRenderingContextBase{readonly drawingBufferHeight:GLsizei;readonly drawingBufferWidth:GLsizei;activeTexture(texture:GLenum):void;attachShader(program:WebGLProgram,shader:WebGLShader):void;bindAttribLocation(program:WebGLProgram,index:GLuint,name:string):void;bindBuffer(target:GLenum,buffer:WebGLBuffer|null):void;bindFramebuffer(target:GLenum,framebuffer:WebGLFramebuffer|null):void;bindRenderbuffer(target:GLenum,renderbuffer:WebGLRenderbuffer|null):void;bindTexture(target:GLenum,texture:WebGLTexture|null):void;blendColor(red:GLclampf,green:GLclampf,blue:GLclampf,alpha:GLclampf):void;blendEquation(mode:GLenum):void;blendEquationSeparate(modeRGB:GLenum,modeAlpha:GLenum):void;blendFunc(sfactor:GLenum,dfactor:GLenum):void;blendFuncSeparate(srcRGB:GLenum,dstRGB:GLenum,srcAlpha:GLenum,dstAlpha:GLenum):void;checkFramebufferStatus(target:GLenum):GLenum;clear(mask:GLbitfield):void;clearColor(red:GLclampf,green:GLclampf,blue:GLclampf,alpha:GLclampf):void;clearDepth(depth:GLclampf):void;clearStencil(s:GLint):void;colorMask(red:GLboolean,green:GLboolean,blue:GLboolean,alpha:GLboolean):void;compileShader(shader:WebGLShader):void;copyTexImage2D(target:GLenum,level:GLint,internalformat:GLenum,x:GLint,y:GLint,width:GLsizei,height:GLsizei,border:GLint):void;copyTexSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,x:GLint,y:GLint,width:GLsizei,height:GLsizei):void;createBuffer():WebGLBuffer|null;createFramebuffer():WebGLFramebuffer|null;createProgram():WebGLProgram|null;createRenderbuffer():WebGLRenderbuffer|null;createShader(type:GLenum):WebGLShader|null;createTexture():WebGLTexture|null;cullFace(mode:GLenum):void;deleteBuffer(buffer:WebGLBuffer|null):void;deleteFramebuffer(framebuffer:WebGLFramebuffer|null):void;deleteProgram(program:WebGLProgram|null):void;deleteRenderbuffer(renderbuffer:WebGLRenderbuffer|null):void;deleteShader(shader:WebGLShader|null):void;deleteTexture(texture:WebGLTexture|null):void;depthFunc(func:GLenum):void;depthMask(flag:GLboolean):void;depthRange(zNear:GLclampf,zFar:GLclampf):void;detachShader(program:WebGLProgram,shader:WebGLShader):void;disable(cap:GLenum):void;disableVertexAttribArray(index:GLuint):void;drawArrays(mode:GLenum,first:GLint,count:GLsizei):void;drawElements(mode:GLenum,count:GLsizei,type:GLenum,offset:GLintptr):void;enable(cap:GLenum):void;enableVertexAttribArray(index:GLuint):void;finish():void;flush():void;framebufferRenderbuffer(target:GLenum,attachment:GLenum,renderbuffertarget:GLenum,renderbuffer:WebGLRenderbuffer|null):void;framebufferTexture2D(target:GLenum,attachment:GLenum,textarget:GLenum,texture:WebGLTexture|null,level:GLint):void;frontFace(mode:GLenum):void;generateMipmap(target:GLenum):void;getActiveAttrib(program:WebGLProgram,index:GLuint):WebGLActiveInfo|null;getActiveUniform(program:WebGLProgram,index:GLuint):WebGLActiveInfo|null;getAttachedShaders(program:WebGLProgram):WebGLShader[]|null;getAttribLocation(program:WebGLProgram,name:string):GLint;getBufferParameter(target:GLenum,pname:GLenum):any;getContextAttributes():WebGLContextAttributes|null;getError():GLenum;getExtension(extensionName:\"EXT_blend_minmax\"):EXT_blend_minmax|null;getExtension(extensionName:\"EXT_color_buffer_float\"):EXT_color_buffer_float|null;getExtension(extensionName:\"EXT_color_buffer_half_float\"):EXT_color_buffer_half_float|null;getExtension(extensionName:\"EXT_float_blend\"):EXT_float_blend|null;getExtension(extensionName:\"EXT_texture_filter_anisotropic\"):EXT_texture_filter_anisotropic|null;getExtension(extensionName:\"EXT_frag_depth\"):EXT_frag_depth|null;getExtension(extensionName:\"EXT_shader_texture_lod\"):EXT_shader_texture_lod|null;getExtension(extensionName:\"EXT_sRGB\"):EXT_sRGB|null;getExtension(extensionName:\"KHR_parallel_shader_compile\"):KHR_parallel_shader_compile|null;getExtension(extensionName:\"OES_vertex_array_object\"):OES_vertex_array_object|null;getExtension(extensionName:\"OVR_multiview2\"):OVR_multiview2|null;getExtension(extensionName:\"WEBGL_color_buffer_float\"):WEBGL_color_buffer_float|null;getExtension(extensionName:\"WEBGL_compressed_texture_astc\"):WEBGL_compressed_texture_astc|null;getExtension(extensionName:\"WEBGL_compressed_texture_etc\"):WEBGL_compressed_texture_etc|null;getExtension(extensionName:\"WEBGL_compressed_texture_etc1\"):WEBGL_compressed_texture_etc1|null;getExtension(extensionName:\"WEBGL_compressed_texture_s3tc_srgb\"):WEBGL_compressed_texture_s3tc_srgb|null;getExtension(extensionName:\"WEBGL_debug_shaders\"):WEBGL_debug_shaders|null;getExtension(extensionName:\"WEBGL_draw_buffers\"):WEBGL_draw_buffers|null;getExtension(extensionName:\"WEBGL_lose_context\"):WEBGL_lose_context|null;getExtension(extensionName:\"WEBGL_depth_texture\"):WEBGL_depth_texture|null;getExtension(extensionName:\"WEBGL_debug_renderer_info\"):WEBGL_debug_renderer_info|null;getExtension(extensionName:\"WEBGL_compressed_texture_s3tc\"):WEBGL_compressed_texture_s3tc|null;getExtension(extensionName:\"OES_texture_half_float_linear\"):OES_texture_half_float_linear|null;getExtension(extensionName:\"OES_texture_half_float\"):OES_texture_half_float|null;getExtension(extensionName:\"OES_texture_float_linear\"):OES_texture_float_linear|null;getExtension(extensionName:\"OES_texture_float\"):OES_texture_float|null;getExtension(extensionName:\"OES_standard_derivatives\"):OES_standard_derivatives|null;getExtension(extensionName:\"OES_element_index_uint\"):OES_element_index_uint|null;getExtension(extensionName:\"ANGLE_instanced_arrays\"):ANGLE_instanced_arrays|null;getExtension(name:string):any;getFramebufferAttachmentParameter(target:GLenum,attachment:GLenum,pname:GLenum):any;getParameter(pname:GLenum):any;getProgramInfoLog(program:WebGLProgram):string|null;getProgramParameter(program:WebGLProgram,pname:GLenum):any;getRenderbufferParameter(target:GLenum,pname:GLenum):any;getShaderInfoLog(shader:WebGLShader):string|null;getShaderParameter(shader:WebGLShader,pname:GLenum):any;getShaderPrecisionFormat(shadertype:GLenum,precisiontype:GLenum):WebGLShaderPrecisionFormat|null;getShaderSource(shader:WebGLShader):string|null;getSupportedExtensions():string[]|null;getTexParameter(target:GLenum,pname:GLenum):any;getUniform(program:WebGLProgram,location:WebGLUniformLocation):any;getUniformLocation(program:WebGLProgram,name:string):WebGLUniformLocation|null;getVertexAttrib(index:GLuint,pname:GLenum):any;getVertexAttribOffset(index:GLuint,pname:GLenum):GLintptr;hint(target:GLenum,mode:GLenum):void;isBuffer(buffer:WebGLBuffer|null):GLboolean;isContextLost():boolean;isEnabled(cap:GLenum):GLboolean;isFramebuffer(framebuffer:WebGLFramebuffer|null):GLboolean;isProgram(program:WebGLProgram|null):GLboolean;isRenderbuffer(renderbuffer:WebGLRenderbuffer|null):GLboolean;isShader(shader:WebGLShader|null):GLboolean;isTexture(texture:WebGLTexture|null):GLboolean;lineWidth(width:GLfloat):void;linkProgram(program:WebGLProgram):void;pixelStorei(pname:GLenum,param:GLint|GLboolean):void;polygonOffset(factor:GLfloat,units:GLfloat):void;renderbufferStorage(target:GLenum,internalformat:GLenum,width:GLsizei,height:GLsizei):void;sampleCoverage(value:GLclampf,invert:GLboolean):void;scissor(x:GLint,y:GLint,width:GLsizei,height:GLsizei):void;shaderSource(shader:WebGLShader,source:string):void;stencilFunc(func:GLenum,ref:GLint,mask:GLuint):void;stencilFuncSeparate(face:GLenum,func:GLenum,ref:GLint,mask:GLuint):void;stencilMask(mask:GLuint):void;stencilMaskSeparate(face:GLenum,mask:GLuint):void;stencilOp(fail:GLenum,zfail:GLenum,zpass:GLenum):void;stencilOpSeparate(face:GLenum,fail:GLenum,zfail:GLenum,zpass:GLenum):void;texParameterf(target:GLenum,pname:GLenum,param:GLfloat):void;texParameteri(target:GLenum,pname:GLenum,param:GLint):void;uniform1f(location:WebGLUniformLocation|null,x:GLfloat):void;uniform1i(location:WebGLUniformLocation|null,x:GLint):void;uniform2f(location:WebGLUniformLocation|null,x:GLfloat,y:GLfloat):void;uniform2i(location:WebGLUniformLocation|null,x:GLint,y:GLint):void;uniform3f(location:WebGLUniformLocation|null,x:GLfloat,y:GLfloat,z:GLfloat):void;uniform3i(location:WebGLUniformLocation|null,x:GLint,y:GLint,z:GLint):void;uniform4f(location:WebGLUniformLocation|null,x:GLfloat,y:GLfloat,z:GLfloat,w:GLfloat):void;uniform4i(location:WebGLUniformLocation|null,x:GLint,y:GLint,z:GLint,w:GLint):void;useProgram(program:WebGLProgram|null):void;validateProgram(program:WebGLProgram):void;vertexAttrib1f(index:GLuint,x:GLfloat):void;vertexAttrib1fv(index:GLuint,values:Float32List):void;vertexAttrib2f(index:GLuint,x:GLfloat,y:GLfloat):void;vertexAttrib2fv(index:GLuint,values:Float32List):void;vertexAttrib3f(index:GLuint,x:GLfloat,y:GLfloat,z:GLfloat):void;vertexAttrib3fv(index:GLuint,values:Float32List):void;vertexAttrib4f(index:GLuint,x:GLfloat,y:GLfloat,z:GLfloat,w:GLfloat):void;vertexAttrib4fv(index:GLuint,values:Float32List):void;vertexAttribPointer(index:GLuint,size:GLint,type:GLenum,normalized:GLboolean,stride:GLsizei,offset:GLintptr):void;viewport(x:GLint,y:GLint,width:GLsizei,height:GLsizei):void;readonly ACTIVE_ATTRIBUTES:GLenum;readonly ACTIVE_TEXTURE:GLenum;readonly ACTIVE_UNIFORMS:GLenum;readonly ALIASED_LINE_WIDTH_RANGE:GLenum;readonly ALIASED_POINT_SIZE_RANGE:GLenum;readonly ALPHA:GLenum;readonly ALPHA_BITS:GLenum;readonly ALWAYS:GLenum;readonly ARRAY_BUFFER:GLenum;readonly ARRAY_BUFFER_BINDING:GLenum;readonly ATTACHED_SHADERS:GLenum;readonly BACK:GLenum;readonly BLEND:GLenum;readonly BLEND_COLOR:GLenum;readonly BLEND_DST_ALPHA:GLenum;readonly BLEND_DST_RGB:GLenum;readonly BLEND_EQUATION:GLenum;readonly BLEND_EQUATION_ALPHA:GLenum;readonly BLEND_EQUATION_RGB:GLenum;readonly BLEND_SRC_ALPHA:GLenum;readonly BLEND_SRC_RGB:GLenum;readonly BLUE_BITS:GLenum;readonly BOOL:GLenum;readonly BOOL_VEC2:GLenum;readonly BOOL_VEC3:GLenum;readonly BOOL_VEC4:GLenum;readonly BROWSER_DEFAULT_WEBGL:GLenum;readonly BUFFER_SIZE:GLenum;readonly BUFFER_USAGE:GLenum;readonly BYTE:GLenum;readonly CCW:GLenum;readonly CLAMP_TO_EDGE:GLenum;readonly COLOR_ATTACHMENT0:GLenum;readonly COLOR_BUFFER_BIT:GLenum;readonly COLOR_CLEAR_VALUE:GLenum;readonly COLOR_WRITEMASK:GLenum;readonly COMPILE_STATUS:GLenum;readonly COMPRESSED_TEXTURE_FORMATS:GLenum;readonly CONSTANT_ALPHA:GLenum;readonly CONSTANT_COLOR:GLenum;readonly CONTEXT_LOST_WEBGL:GLenum;readonly CULL_FACE:GLenum;readonly CULL_FACE_MODE:GLenum;readonly CURRENT_PROGRAM:GLenum;readonly CURRENT_VERTEX_ATTRIB:GLenum;readonly CW:GLenum;readonly DECR:GLenum;readonly DECR_WRAP:GLenum;readonly DELETE_STATUS:GLenum;readonly DEPTH_ATTACHMENT:GLenum;readonly DEPTH_BITS:GLenum;readonly DEPTH_BUFFER_BIT:GLenum;readonly DEPTH_CLEAR_VALUE:GLenum;readonly DEPTH_COMPONENT:GLenum;readonly DEPTH_COMPONENT16:GLenum;readonly DEPTH_FUNC:GLenum;readonly DEPTH_RANGE:GLenum;readonly DEPTH_STENCIL:GLenum;readonly DEPTH_STENCIL_ATTACHMENT:GLenum;readonly DEPTH_TEST:GLenum;readonly DEPTH_WRITEMASK:GLenum;readonly DITHER:GLenum;readonly DONT_CARE:GLenum;readonly DST_ALPHA:GLenum;readonly DST_COLOR:GLenum;readonly DYNAMIC_DRAW:GLenum;readonly ELEMENT_ARRAY_BUFFER:GLenum;readonly ELEMENT_ARRAY_BUFFER_BINDING:GLenum;readonly EQUAL:GLenum;readonly FASTEST:GLenum;readonly FLOAT:GLenum;readonly FLOAT_MAT2:GLenum;readonly FLOAT_MAT3:GLenum;readonly FLOAT_MAT4:GLenum;readonly FLOAT_VEC2:GLenum;readonly FLOAT_VEC3:GLenum;readonly FLOAT_VEC4:GLenum;readonly FRAGMENT_SHADER:GLenum;readonly FRAMEBUFFER:GLenum;readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:GLenum;readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:GLenum;readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:GLenum;readonly FRAMEBUFFER_BINDING:GLenum;readonly FRAMEBUFFER_COMPLETE:GLenum;readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT:GLenum;readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS:GLenum;readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:GLenum;readonly FRAMEBUFFER_UNSUPPORTED:GLenum;readonly FRONT:GLenum;readonly FRONT_AND_BACK:GLenum;readonly FRONT_FACE:GLenum;readonly FUNC_ADD:GLenum;readonly FUNC_REVERSE_SUBTRACT:GLenum;readonly FUNC_SUBTRACT:GLenum;readonly GENERATE_MIPMAP_HINT:GLenum;readonly GEQUAL:GLenum;readonly GREATER:GLenum;readonly GREEN_BITS:GLenum;readonly HIGH_FLOAT:GLenum;readonly HIGH_INT:GLenum;readonly IMPLEMENTATION_COLOR_READ_FORMAT:GLenum;readonly IMPLEMENTATION_COLOR_READ_TYPE:GLenum;readonly INCR:GLenum;readonly INCR_WRAP:GLenum;readonly INT:GLenum;readonly INT_VEC2:GLenum;readonly INT_VEC3:GLenum;readonly INT_VEC4:GLenum;readonly INVALID_ENUM:GLenum;readonly INVALID_FRAMEBUFFER_OPERATION:GLenum;readonly INVALID_OPERATION:GLenum;readonly INVALID_VALUE:GLenum;readonly INVERT:GLenum;readonly KEEP:GLenum;readonly LEQUAL:GLenum;readonly LESS:GLenum;readonly LINEAR:GLenum;readonly LINEAR_MIPMAP_LINEAR:GLenum;readonly LINEAR_MIPMAP_NEAREST:GLenum;readonly LINES:GLenum;readonly LINE_LOOP:GLenum;readonly LINE_STRIP:GLenum;readonly LINE_WIDTH:GLenum;readonly LINK_STATUS:GLenum;readonly LOW_FLOAT:GLenum;readonly LOW_INT:GLenum;readonly LUMINANCE:GLenum;readonly LUMINANCE_ALPHA:GLenum;readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_CUBE_MAP_TEXTURE_SIZE:GLenum;readonly MAX_FRAGMENT_UNIFORM_VECTORS:GLenum;readonly MAX_RENDERBUFFER_SIZE:GLenum;readonly MAX_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_TEXTURE_SIZE:GLenum;readonly MAX_VARYING_VECTORS:GLenum;readonly MAX_VERTEX_ATTRIBS:GLenum;readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS:GLenum;readonly MAX_VERTEX_UNIFORM_VECTORS:GLenum;readonly MAX_VIEWPORT_DIMS:GLenum;readonly MEDIUM_FLOAT:GLenum;readonly MEDIUM_INT:GLenum;readonly MIRRORED_REPEAT:GLenum;readonly NEAREST:GLenum;readonly NEAREST_MIPMAP_LINEAR:GLenum;readonly NEAREST_MIPMAP_NEAREST:GLenum;readonly NEVER:GLenum;readonly NICEST:GLenum;readonly NONE:GLenum;readonly NOTEQUAL:GLenum;readonly NO_ERROR:GLenum;readonly ONE:GLenum;readonly ONE_MINUS_CONSTANT_ALPHA:GLenum;readonly ONE_MINUS_CONSTANT_COLOR:GLenum;readonly ONE_MINUS_DST_ALPHA:GLenum;readonly ONE_MINUS_DST_COLOR:GLenum;readonly ONE_MINUS_SRC_ALPHA:GLenum;readonly ONE_MINUS_SRC_COLOR:GLenum;readonly OUT_OF_MEMORY:GLenum;readonly PACK_ALIGNMENT:GLenum;readonly POINTS:GLenum;readonly POLYGON_OFFSET_FACTOR:GLenum;readonly POLYGON_OFFSET_FILL:GLenum;readonly POLYGON_OFFSET_UNITS:GLenum;readonly RED_BITS:GLenum;readonly RENDERBUFFER:GLenum;readonly RENDERBUFFER_ALPHA_SIZE:GLenum;readonly RENDERBUFFER_BINDING:GLenum;readonly RENDERBUFFER_BLUE_SIZE:GLenum;readonly RENDERBUFFER_DEPTH_SIZE:GLenum;readonly RENDERBUFFER_GREEN_SIZE:GLenum;readonly RENDERBUFFER_HEIGHT:GLenum;readonly RENDERBUFFER_INTERNAL_FORMAT:GLenum;readonly RENDERBUFFER_RED_SIZE:GLenum;readonly RENDERBUFFER_STENCIL_SIZE:GLenum;readonly RENDERBUFFER_WIDTH:GLenum;readonly RENDERER:GLenum;readonly REPEAT:GLenum;readonly REPLACE:GLenum;readonly RGB:GLenum;readonly RGB565:GLenum;readonly RGB5_A1:GLenum;readonly RGBA:GLenum;readonly RGBA4:GLenum;readonly SAMPLER_2D:GLenum;readonly SAMPLER_CUBE:GLenum;readonly SAMPLES:GLenum;readonly SAMPLE_ALPHA_TO_COVERAGE:GLenum;readonly SAMPLE_BUFFERS:GLenum;readonly SAMPLE_COVERAGE:GLenum;readonly SAMPLE_COVERAGE_INVERT:GLenum;readonly SAMPLE_COVERAGE_VALUE:GLenum;readonly SCISSOR_BOX:GLenum;readonly SCISSOR_TEST:GLenum;readonly SHADER_TYPE:GLenum;readonly SHADING_LANGUAGE_VERSION:GLenum;readonly SHORT:GLenum;readonly SRC_ALPHA:GLenum;readonly SRC_ALPHA_SATURATE:GLenum;readonly SRC_COLOR:GLenum;readonly STATIC_DRAW:GLenum;readonly STENCIL_ATTACHMENT:GLenum;readonly STENCIL_BACK_FAIL:GLenum;readonly STENCIL_BACK_FUNC:GLenum;readonly STENCIL_BACK_PASS_DEPTH_FAIL:GLenum;readonly STENCIL_BACK_PASS_DEPTH_PASS:GLenum;readonly STENCIL_BACK_REF:GLenum;readonly STENCIL_BACK_VALUE_MASK:GLenum;readonly STENCIL_BACK_WRITEMASK:GLenum;readonly STENCIL_BITS:GLenum;readonly STENCIL_BUFFER_BIT:GLenum;readonly STENCIL_CLEAR_VALUE:GLenum;readonly STENCIL_FAIL:GLenum;readonly STENCIL_FUNC:GLenum;readonly STENCIL_INDEX8:GLenum;readonly STENCIL_PASS_DEPTH_FAIL:GLenum;readonly STENCIL_PASS_DEPTH_PASS:GLenum;readonly STENCIL_REF:GLenum;readonly STENCIL_TEST:GLenum;readonly STENCIL_VALUE_MASK:GLenum;readonly STENCIL_WRITEMASK:GLenum;readonly STREAM_DRAW:GLenum;readonly SUBPIXEL_BITS:GLenum;readonly TEXTURE:GLenum;readonly TEXTURE0:GLenum;readonly TEXTURE1:GLenum;readonly TEXTURE10:GLenum;readonly TEXTURE11:GLenum;readonly TEXTURE12:GLenum;readonly TEXTURE13:GLenum;readonly TEXTURE14:GLenum;readonly TEXTURE15:GLenum;readonly TEXTURE16:GLenum;readonly TEXTURE17:GLenum;readonly TEXTURE18:GLenum;readonly TEXTURE19:GLenum;readonly TEXTURE2:GLenum;readonly TEXTURE20:GLenum;readonly TEXTURE21:GLenum;readonly TEXTURE22:GLenum;readonly TEXTURE23:GLenum;readonly TEXTURE24:GLenum;readonly TEXTURE25:GLenum;readonly TEXTURE26:GLenum;readonly TEXTURE27:GLenum;readonly TEXTURE28:GLenum;readonly TEXTURE29:GLenum;readonly TEXTURE3:GLenum;readonly TEXTURE30:GLenum;readonly TEXTURE31:GLenum;readonly TEXTURE4:GLenum;readonly TEXTURE5:GLenum;readonly TEXTURE6:GLenum;readonly TEXTURE7:GLenum;readonly TEXTURE8:GLenum;readonly TEXTURE9:GLenum;readonly TEXTURE_2D:GLenum;readonly TEXTURE_BINDING_2D:GLenum;readonly TEXTURE_BINDING_CUBE_MAP:GLenum;readonly TEXTURE_CUBE_MAP:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_X:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_Y:GLenum;readonly TEXTURE_CUBE_MAP_NEGATIVE_Z:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_X:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_Y:GLenum;readonly TEXTURE_CUBE_MAP_POSITIVE_Z:GLenum;readonly TEXTURE_MAG_FILTER:GLenum;readonly TEXTURE_MIN_FILTER:GLenum;readonly TEXTURE_WRAP_S:GLenum;readonly TEXTURE_WRAP_T:GLenum;readonly TRIANGLES:GLenum;readonly TRIANGLE_FAN:GLenum;readonly TRIANGLE_STRIP:GLenum;readonly UNPACK_ALIGNMENT:GLenum;readonly UNPACK_COLORSPACE_CONVERSION_WEBGL:GLenum;readonly UNPACK_FLIP_Y_WEBGL:GLenum;readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL:GLenum;readonly UNSIGNED_BYTE:GLenum;readonly UNSIGNED_INT:GLenum;readonly UNSIGNED_SHORT:GLenum;readonly UNSIGNED_SHORT_4_4_4_4:GLenum;readonly UNSIGNED_SHORT_5_5_5_1:GLenum;readonly UNSIGNED_SHORT_5_6_5:GLenum;readonly VALIDATE_STATUS:GLenum;readonly VENDOR:GLenum;readonly VERSION:GLenum;readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:GLenum;readonly VERTEX_ATTRIB_ARRAY_ENABLED:GLenum;readonly VERTEX_ATTRIB_ARRAY_NORMALIZED:GLenum;readonly VERTEX_ATTRIB_ARRAY_POINTER:GLenum;readonly VERTEX_ATTRIB_ARRAY_SIZE:GLenum;readonly VERTEX_ATTRIB_ARRAY_STRIDE:GLenum;readonly VERTEX_ATTRIB_ARRAY_TYPE:GLenum;readonly VERTEX_SHADER:GLenum;readonly VIEWPORT:GLenum;readonly ZERO:GLenum;}interface WebGLRenderingContextOverloads{bufferData(target:GLenum,size:GLsizeiptr,usage:GLenum):void;bufferData(target:GLenum,data:BufferSource|null,usage:GLenum):void;bufferSubData(target:GLenum,offset:GLintptr,data:BufferSource):void;compressedTexImage2D(target:GLenum,level:GLint,internalformat:GLenum,width:GLsizei,height:GLsizei,border:GLint,data:ArrayBufferView):void;compressedTexSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,data:ArrayBufferView):void;readPixels(x:GLint,y:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,pixels:ArrayBufferView|null):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,width:GLsizei,height:GLsizei,border:GLint,format:GLenum,type:GLenum,pixels:ArrayBufferView|null):void;texImage2D(target:GLenum,level:GLint,internalformat:GLint,format:GLenum,type:GLenum,source:TexImageSource):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,width:GLsizei,height:GLsizei,format:GLenum,type:GLenum,pixels:ArrayBufferView|null):void;texSubImage2D(target:GLenum,level:GLint,xoffset:GLint,yoffset:GLint,format:GLenum,type:GLenum,source:TexImageSource):void;uniform1fv(location:WebGLUniformLocation|null,v:Float32List):void;uniform1iv(location:WebGLUniformLocation|null,v:Int32List):void;uniform2fv(location:WebGLUniformLocation|null,v:Float32List):void;uniform2iv(location:WebGLUniformLocation|null,v:Int32List):void;uniform3fv(location:WebGLUniformLocation|null,v:Float32List):void;uniform3iv(location:WebGLUniformLocation|null,v:Int32List):void;uniform4fv(location:WebGLUniformLocation|null,v:Float32List):void;uniform4iv(location:WebGLUniformLocation|null,v:Int32List):void;uniformMatrix2fv(location:WebGLUniformLocation|null,transpose:GLboolean,value:Float32List):void;uniformMatrix3fv(location:WebGLUniformLocation|null,transpose:GLboolean,value:Float32List):void;uniformMatrix4fv(location:WebGLUniformLocation|null,transpose:GLboolean,value:Float32List):void;}interface WebGLSampler{}declare var WebGLSampler:{prototype:WebGLSampler;new():WebGLSampler;};interface WebGLShader{}declare var WebGLShader:{prototype:WebGLShader;new():WebGLShader;};interface WebGLShaderPrecisionFormat{readonly precision:GLint;readonly rangeMax:GLint;readonly rangeMin:GLint;}declare var WebGLShaderPrecisionFormat:{prototype:WebGLShaderPrecisionFormat;new():WebGLShaderPrecisionFormat;};interface WebGLSync{}declare var WebGLSync:{prototype:WebGLSync;new():WebGLSync;};interface WebGLTexture{}declare var WebGLTexture:{prototype:WebGLTexture;new():WebGLTexture;};interface WebGLTransformFeedback{}declare var WebGLTransformFeedback:{prototype:WebGLTransformFeedback;new():WebGLTransformFeedback;};interface WebGLUniformLocation{}declare var WebGLUniformLocation:{prototype:WebGLUniformLocation;new():WebGLUniformLocation;};interface WebGLVertexArrayObject{}declare var WebGLVertexArrayObject:{prototype:WebGLVertexArrayObject;new():WebGLVertexArrayObject;};interface WebGLVertexArrayObjectOES{}interface WebSocketEventMap{\"close\":CloseEvent;\"error\":Event;\"message\":MessageEvent;\"open\":Event;}interface WebSocket extends EventTarget{binaryType:BinaryType;readonly bufferedAmount:number;readonly extensions:string;onclose:((this:WebSocket,ev:CloseEvent)=>any)|null;onerror:((this:WebSocket,ev:Event)=>any)|null;onmessage:((this:WebSocket,ev:MessageEvent)=>any)|null;onopen:((this:WebSocket,ev:Event)=>any)|null;readonly protocol:string;readonly readyState:number;readonly url:string;close(code?:number,reason?:string):void;send(data:string|ArrayBufferLike|Blob|ArrayBufferView):void;readonly CLOSED:number;readonly CLOSING:number;readonly CONNECTING:number;readonly OPEN:number;addEventListener<K extends keyof WebSocketEventMap>(type:K,listener:(this:WebSocket,ev:WebSocketEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof WebSocketEventMap>(type:K,listener:(this:WebSocket,ev:WebSocketEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var WebSocket:{prototype:WebSocket;new(url:string|URL,protocols?:string|string[]):WebSocket;readonly CLOSED:number;readonly CLOSING:number;readonly CONNECTING:number;readonly OPEN:number;};interface WindowClient extends Client{readonly focused:boolean;readonly visibilityState:DocumentVisibilityState;focus():Promise<WindowClient>;navigate(url:string|URL):Promise<WindowClient|null>;}declare var WindowClient:{prototype:WindowClient;new():WindowClient;};interface WindowOrWorkerGlobalScope{readonly caches:CacheStorage;readonly crossOriginIsolated:boolean;readonly crypto:Crypto;readonly indexedDB:IDBFactory;readonly isSecureContext:boolean;readonly origin:string;readonly performance:Performance;atob(data:string):string;btoa(data:string):string;clearInterval(id?:number):void;clearTimeout(id?:number):void;createImageBitmap(image:ImageBitmapSource,options?:ImageBitmapOptions):Promise<ImageBitmap>;createImageBitmap(image:ImageBitmapSource,sx:number,sy:number,sw:number,sh:number,options?:ImageBitmapOptions):Promise<ImageBitmap>;fetch(input:RequestInfo|URL,init?:RequestInit):Promise<Response>;queueMicrotask(callback:VoidFunction):void;reportError(e:any):void;setInterval(handler:TimerHandler,timeout?:number,...arguments:any[]):number;setTimeout(handler:TimerHandler,timeout?:number,...arguments:any[]):number;structuredClone(value:any,options?:StructuredSerializeOptions):any;}interface WorkerEventMap extends AbstractWorkerEventMap{\"message\":MessageEvent;\"messageerror\":MessageEvent;}interface Worker extends EventTarget,AbstractWorker{onmessage:((this:Worker,ev:MessageEvent)=>any)|null;onmessageerror:((this:Worker,ev:MessageEvent)=>any)|null;postMessage(message:any,transfer:Transferable[]):void;postMessage(message:any,options?:StructuredSerializeOptions):void;terminate():void;addEventListener<K extends keyof WorkerEventMap>(type:K,listener:(this:Worker,ev:WorkerEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof WorkerEventMap>(type:K,listener:(this:Worker,ev:WorkerEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var Worker:{prototype:Worker;new(scriptURL:string|URL,options?:WorkerOptions):Worker;};interface WorkerGlobalScopeEventMap{\"error\":ErrorEvent;\"languagechange\":Event;\"offline\":Event;\"online\":Event;\"rejectionhandled\":PromiseRejectionEvent;\"unhandledrejection\":PromiseRejectionEvent;}interface WorkerGlobalScope extends EventTarget,FontFaceSource,WindowOrWorkerGlobalScope{readonly location:WorkerLocation;readonly navigator:WorkerNavigator;onerror:((this:WorkerGlobalScope,ev:ErrorEvent)=>any)|null;onlanguagechange:((this:WorkerGlobalScope,ev:Event)=>any)|null;onoffline:((this:WorkerGlobalScope,ev:Event)=>any)|null;ononline:((this:WorkerGlobalScope,ev:Event)=>any)|null;onrejectionhandled:((this:WorkerGlobalScope,ev:PromiseRejectionEvent)=>any)|null;onunhandledrejection:((this:WorkerGlobalScope,ev:PromiseRejectionEvent)=>any)|null;readonly self:WorkerGlobalScope&typeof globalThis;importScripts(...urls:(string|URL)[]):void;addEventListener<K extends keyof WorkerGlobalScopeEventMap>(type:K,listener:(this:WorkerGlobalScope,ev:WorkerGlobalScopeEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof WorkerGlobalScopeEventMap>(type:K,listener:(this:WorkerGlobalScope,ev:WorkerGlobalScopeEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var WorkerGlobalScope:{prototype:WorkerGlobalScope;new():WorkerGlobalScope;};interface WorkerLocation{readonly hash:string;readonly host:string;readonly hostname:string;readonly href:string;toString():string;readonly origin:string;readonly pathname:string;readonly port:string;readonly protocol:string;readonly search:string;}declare var WorkerLocation:{prototype:WorkerLocation;new():WorkerLocation;};interface WorkerNavigator extends NavigatorConcurrentHardware,NavigatorID,NavigatorLanguage,NavigatorLocks,NavigatorNetworkInformation,NavigatorOnLine,NavigatorStorage{readonly mediaCapabilities:MediaCapabilities;}declare var WorkerNavigator:{prototype:WorkerNavigator;new():WorkerNavigator;};interface WritableStream<W=any>{readonly locked:boolean;abort(reason?:any):Promise<void>;close():Promise<void>;getWriter():WritableStreamDefaultWriter<W>;}declare var WritableStream:{prototype:WritableStream;new<W=any>(underlyingSink?:UnderlyingSink<W>,strategy?:QueuingStrategy<W>):WritableStream<W>;};interface WritableStreamDefaultController{error(e?:any):void;}declare var WritableStreamDefaultController:{prototype:WritableStreamDefaultController;new():WritableStreamDefaultController;};interface WritableStreamDefaultWriter<W=any>{readonly closed:Promise<undefined>;readonly desiredSize:number|null;readonly ready:Promise<undefined>;abort(reason?:any):Promise<void>;close():Promise<void>;releaseLock():void;write(chunk?:W):Promise<void>;}declare var WritableStreamDefaultWriter:{prototype:WritableStreamDefaultWriter;new<W=any>(stream:WritableStream<W>):WritableStreamDefaultWriter<W>;};interface XMLHttpRequestEventMap extends XMLHttpRequestEventTargetEventMap{\"readystatechange\":Event;}interface XMLHttpRequest extends XMLHttpRequestEventTarget{onreadystatechange:((this:XMLHttpRequest,ev:Event)=>any)|null;readonly readyState:number;readonly response:any;readonly responseText:string;responseType:XMLHttpRequestResponseType;readonly responseURL:string;readonly status:number;readonly statusText:string;timeout:number;readonly upload:XMLHttpRequestUpload;withCredentials:boolean;abort():void;getAllResponseHeaders():string;getResponseHeader(name:string):string|null;open(method:string,url:string|URL):void;open(method:string,url:string|URL,async:boolean,username?:string|null,password?:string|null):void;overrideMimeType(mime:string):void;send(body?:XMLHttpRequestBodyInit|null):void;setRequestHeader(name:string,value:string):void;readonly DONE:number;readonly HEADERS_RECEIVED:number;readonly LOADING:number;readonly OPENED:number;readonly UNSENT:number;addEventListener<K extends keyof XMLHttpRequestEventMap>(type:K,listener:(this:XMLHttpRequest,ev:XMLHttpRequestEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof XMLHttpRequestEventMap>(type:K,listener:(this:XMLHttpRequest,ev:XMLHttpRequestEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var XMLHttpRequest:{prototype:XMLHttpRequest;new():XMLHttpRequest;readonly DONE:number;readonly HEADERS_RECEIVED:number;readonly LOADING:number;readonly OPENED:number;readonly UNSENT:number;};interface XMLHttpRequestEventTargetEventMap{\"abort\":ProgressEvent<XMLHttpRequestEventTarget>;\"error\":ProgressEvent<XMLHttpRequestEventTarget>;\"load\":ProgressEvent<XMLHttpRequestEventTarget>;\"loadend\":ProgressEvent<XMLHttpRequestEventTarget>;\"loadstart\":ProgressEvent<XMLHttpRequestEventTarget>;\"progress\":ProgressEvent<XMLHttpRequestEventTarget>;\"timeout\":ProgressEvent<XMLHttpRequestEventTarget>;}interface XMLHttpRequestEventTarget extends EventTarget{onabort:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;onerror:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;onload:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;onloadend:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;onloadstart:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;onprogress:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;ontimeout:((this:XMLHttpRequest,ev:ProgressEvent)=>any)|null;addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type:K,listener:(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type:K,listener:(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var XMLHttpRequestEventTarget:{prototype:XMLHttpRequestEventTarget;new():XMLHttpRequestEventTarget;};interface XMLHttpRequestUpload extends XMLHttpRequestEventTarget{addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type:K,listener:(this:XMLHttpRequestUpload,ev:XMLHttpRequestEventTargetEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type:K,listener:(this:XMLHttpRequestUpload,ev:XMLHttpRequestEventTargetEventMap[K])=>any,options?:boolean|EventListenerOptions):void;removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;}declare var XMLHttpRequestUpload:{prototype:XMLHttpRequestUpload;new():XMLHttpRequestUpload;};interface Console{assert(condition?:boolean,...data:any[]):void;clear():void;count(label?:string):void;countReset(label?:string):void;debug(...data:any[]):void;dir(item?:any,options?:any):void;dirxml(...data:any[]):void;error(...data:any[]):void;group(...data:any[]):void;groupCollapsed(...data:any[]):void;groupEnd():void;info(...data:any[]):void;log(...data:any[]):void;table(tabularData?:any,properties?:string[]):void;time(label?:string):void;timeEnd(label?:string):void;timeLog(label?:string,...data:any[]):void;timeStamp(label?:string):void;trace(...data:any[]):void;warn(...data:any[]):void;}declare var console:Console;declare namespace WebAssembly{interface CompileError extends Error{}var CompileError:{prototype:CompileError;new(message?:string):CompileError;(message?:string):CompileError;};interface Global{value:any;valueOf():any;}var Global:{prototype:Global;new(descriptor:GlobalDescriptor,v?:any):Global;};interface Instance{readonly exports:Exports;}var Instance:{prototype:Instance;new(module:Module,importObject?:Imports):Instance;};interface LinkError extends Error{}var LinkError:{prototype:LinkError;new(message?:string):LinkError;(message?:string):LinkError;};interface Memory{readonly buffer:ArrayBuffer;grow(delta:number):number;}var Memory:{prototype:Memory;new(descriptor:MemoryDescriptor):Memory;};interface Module{}var Module:{prototype:Module;new(bytes:BufferSource):Module;customSections(moduleObject:Module,sectionName:string):ArrayBuffer[];exports(moduleObject:Module):ModuleExportDescriptor[];imports(moduleObject:Module):ModuleImportDescriptor[];};interface RuntimeError extends Error{}var RuntimeError:{prototype:RuntimeError;new(message?:string):RuntimeError;(message?:string):RuntimeError;};interface Table{readonly length:number;get(index:number):any;grow(delta:number,value?:any):number;set(index:number,value?:any):void;}var Table:{prototype:Table;new(descriptor:TableDescriptor,value?:any):Table;};interface GlobalDescriptor{mutable?:boolean;value:ValueType;}interface MemoryDescriptor{initial:number;maximum?:number;shared?:boolean;}interface ModuleExportDescriptor{kind:ImportExportKind;name:string;}interface ModuleImportDescriptor{kind:ImportExportKind;module:string;name:string;}interface TableDescriptor{element:TableKind;initial:number;maximum?:number;}interface WebAssemblyInstantiatedSource{instance:Instance;module:Module;}type ImportExportKind=\"function\"|\"global\"|\"memory\"|\"table\";type TableKind=\"anyfunc\"|\"externref\";type ValueType=\"anyfunc\"|\"externref\"|\"f32\"|\"f64\"|\"i32\"|\"i64\"|\"v128\";type ExportValue=Function|Global|Memory|Table;type Exports=Record<string,ExportValue>;type ImportValue=ExportValue|number;type Imports=Record<string,ModuleImports>;type ModuleImports=Record<string,ImportValue>;function compile(bytes:BufferSource):Promise<Module>;function compileStreaming(source:Response|PromiseLike<Response>):Promise<Module>;function instantiate(bytes:BufferSource,importObject?:Imports):Promise<WebAssemblyInstantiatedSource>;function instantiate(moduleObject:Module,importObject?:Imports):Promise<Instance>;function instantiateStreaming(source:Response|PromiseLike<Response>,importObject?:Imports):Promise<WebAssemblyInstantiatedSource>;function validate(bytes:BufferSource):boolean;}interface FrameRequestCallback{(time:DOMHighResTimeStamp):void;}interface LockGrantedCallback{(lock:Lock|null):any;}interface OnErrorEventHandlerNonNull{(event:Event|string,source?:string,lineno?:number,colno?:number,error?:Error):any;}interface PerformanceObserverCallback{(entries:PerformanceObserverEntryList,observer:PerformanceObserver):void;}interface QueuingStrategySize<T=any>{(chunk:T):number;}interface TransformerFlushCallback<O>{(controller:TransformStreamDefaultController<O>):void|PromiseLike<void>;}interface TransformerStartCallback<O>{(controller:TransformStreamDefaultController<O>):any;}interface TransformerTransformCallback<I,O>{(chunk:I,controller:TransformStreamDefaultController<O>):void|PromiseLike<void>;}interface UnderlyingSinkAbortCallback{(reason?:any):void|PromiseLike<void>;}interface UnderlyingSinkCloseCallback{():void|PromiseLike<void>;}interface UnderlyingSinkStartCallback{(controller:WritableStreamDefaultController):any;}interface UnderlyingSinkWriteCallback<W>{(chunk:W,controller:WritableStreamDefaultController):void|PromiseLike<void>;}interface UnderlyingSourceCancelCallback{(reason?:any):void|PromiseLike<void>;}interface UnderlyingSourcePullCallback<R>{(controller:ReadableStreamController<R>):void|PromiseLike<void>;}interface UnderlyingSourceStartCallback<R>{(controller:ReadableStreamController<R>):any;}interface VoidFunction{():void;}declare var name:string;declare var onmessage:((this:DedicatedWorkerGlobalScope,ev:MessageEvent)=>any)|null;declare var onmessageerror:((this:DedicatedWorkerGlobalScope,ev:MessageEvent)=>any)|null;declare function close():void;declare function postMessage(message:any,transfer:Transferable[]):void;declare function postMessage(message:any,options?:StructuredSerializeOptions):void;declare function dispatchEvent(event:Event):boolean;declare var location:WorkerLocation;declare var navigator:WorkerNavigator;declare var onerror:((this:DedicatedWorkerGlobalScope,ev:ErrorEvent)=>any)|null;declare var onlanguagechange:((this:DedicatedWorkerGlobalScope,ev:Event)=>any)|null;declare var onoffline:((this:DedicatedWorkerGlobalScope,ev:Event)=>any)|null;declare var ononline:((this:DedicatedWorkerGlobalScope,ev:Event)=>any)|null;declare var onrejectionhandled:((this:DedicatedWorkerGlobalScope,ev:PromiseRejectionEvent)=>any)|null;declare var onunhandledrejection:((this:DedicatedWorkerGlobalScope,ev:PromiseRejectionEvent)=>any)|null;declare var self:WorkerGlobalScope&typeof globalThis;declare function importScripts(...urls:(string|URL)[]):void;declare function dispatchEvent(event:Event):boolean;declare var fonts:FontFaceSet;declare var caches:CacheStorage;declare var crossOriginIsolated:boolean;declare var crypto:Crypto;declare var indexedDB:IDBFactory;declare var isSecureContext:boolean;declare var origin:string;declare var performance:Performance;declare function atob(data:string):string;declare function btoa(data:string):string;declare function clearInterval(id?:number):void;declare function clearTimeout(id?:number):void;declare function createImageBitmap(image:ImageBitmapSource,options?:ImageBitmapOptions):Promise<ImageBitmap>;declare function createImageBitmap(image:ImageBitmapSource,sx:number,sy:number,sw:number,sh:number,options?:ImageBitmapOptions):Promise<ImageBitmap>;declare function fetch(input:RequestInfo|URL,init?:RequestInit):Promise<Response>;declare function queueMicrotask(callback:VoidFunction):void;declare function reportError(e:any):void;declare function setInterval(handler:TimerHandler,timeout?:number,...arguments:any[]):number;declare function setTimeout(handler:TimerHandler,timeout?:number,...arguments:any[]):number;declare function structuredClone(value:any,options?:StructuredSerializeOptions):any;declare function cancelAnimationFrame(handle:number):void;declare function requestAnimationFrame(callback:FrameRequestCallback):number;declare function addEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type:K,listener:(this:DedicatedWorkerGlobalScope,ev:DedicatedWorkerGlobalScopeEventMap[K])=>any,options?:boolean|AddEventListenerOptions):void;declare function addEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|AddEventListenerOptions):void;declare function removeEventListener<K extends keyof DedicatedWorkerGlobalScopeEventMap>(type:K,listener:(this:DedicatedWorkerGlobalScope,ev:DedicatedWorkerGlobalScopeEventMap[K])=>any,options?:boolean|EventListenerOptions):void;declare function removeEventListener(type:string,listener:EventListenerOrEventListenerObject,options?:boolean|EventListenerOptions):void;type AlgorithmIdentifier=Algorithm|string;type BigInteger=Uint8Array;type BinaryData=ArrayBuffer|ArrayBufferView;type BlobPart=BufferSource|Blob|string;type BodyInit=ReadableStream|XMLHttpRequestBodyInit;type BufferSource=ArrayBufferView|ArrayBuffer;type CanvasImageSource=ImageBitmap|OffscreenCanvas;type DOMHighResTimeStamp=number;type EpochTimeStamp=number;type EventListenerOrEventListenerObject=EventListener|EventListenerObject;type Float32List=Float32Array|GLfloat[];type FormDataEntryValue=File|string;type GLbitfield=number;type GLboolean=boolean;type GLclampf=number;type GLenum=number;type GLfloat=number;type GLint=number;type GLint64=number;type GLintptr=number;type GLsizei=number;type GLsizeiptr=number;type GLuint=number;type GLuint64=number;type HashAlgorithmIdentifier=AlgorithmIdentifier;type HeadersInit=string[][]|Record<string,string>|Headers;type IDBValidKey=number|string|Date|BufferSource|IDBValidKey[];type ImageBitmapSource=CanvasImageSource|Blob|ImageData;type Int32List=Int32Array|GLint[];type MessageEventSource=MessagePort|ServiceWorker;type NamedCurve=string;type OnErrorEventHandler=OnErrorEventHandlerNonNull|null;type PerformanceEntryList=PerformanceEntry[];type PushMessageDataInit=BufferSource|string;type ReadableStreamController<T>=ReadableStreamDefaultController<T>;type ReadableStreamDefaultReadResult<T>=ReadableStreamDefaultReadValueResult<T>|ReadableStreamDefaultReadDoneResult;type ReadableStreamReader<T>=ReadableStreamDefaultReader<T>;type RequestInfo=Request|string;type TexImageSource=ImageBitmap|ImageData|OffscreenCanvas;type TimerHandler=string|Function;type Transferable=ArrayBuffer|MessagePort|ImageBitmap;type Uint32List=Uint32Array|GLuint[];type VibratePattern=number|number[];type XMLHttpRequestBodyInit=Blob|BufferSource|FormData|URLSearchParams|string;type BinaryType=\"arraybuffer\"|\"blob\";type ClientTypes=\"all\"|\"sharedworker\"|\"window\"|\"worker\";type ColorGamut=\"p3\"|\"rec2020\"|\"srgb\";type ColorSpaceConversion=\"default\"|\"none\";type ConnectionType=\"bluetooth\"|\"cellular\"|\"ethernet\"|\"mixed\"|\"none\"|\"other\"|\"unknown\"|\"wifi\";type DocumentVisibilityState=\"hidden\"|\"visible\";type EndingType=\"native\"|\"transparent\";type FileSystemHandleKind=\"directory\"|\"file\";type FontFaceLoadStatus=\"error\"|\"loaded\"|\"loading\"|\"unloaded\";type FontFaceSetLoadStatus=\"loaded\"|\"loading\";type FrameType=\"auxiliary\"|\"nested\"|\"none\"|\"top-level\";type HdrMetadataType=\"smpteSt2086\"|\"smpteSt2094-10\"|\"smpteSt2094-40\";type IDBCursorDirection=\"next\"|\"nextunique\"|\"prev\"|\"prevunique\";type IDBRequestReadyState=\"done\"|\"pending\";type IDBTransactionDurability=\"default\"|\"relaxed\"|\"strict\";type IDBTransactionMode=\"readonly\"|\"readwrite\"|\"versionchange\";type ImageOrientation=\"flipY\"|\"none\";type KeyFormat=\"jwk\"|\"pkcs8\"|\"raw\"|\"spki\";type KeyType=\"private\"|\"public\"|\"secret\";type KeyUsage=\"decrypt\"|\"deriveBits\"|\"deriveKey\"|\"encrypt\"|\"sign\"|\"unwrapKey\"|\"verify\"|\"wrapKey\";type LockMode=\"exclusive\"|\"shared\";type MediaDecodingType=\"file\"|\"media-source\"|\"webrtc\";type MediaEncodingType=\"record\"|\"webrtc\";type NotificationDirection=\"auto\"|\"ltr\"|\"rtl\";type NotificationPermission=\"default\"|\"denied\"|\"granted\";type PermissionName=\"geolocation\"|\"notifications\"|\"persistent-storage\"|\"push\"|\"screen-wake-lock\"|\"xr-spatial-tracking\";type PermissionState=\"denied\"|\"granted\"|\"prompt\";type PredefinedColorSpace=\"display-p3\"|\"srgb\";type PremultiplyAlpha=\"default\"|\"none\"|\"premultiply\";type PushEncryptionKeyName=\"auth\"|\"p256dh\";type RTCEncodedVideoFrameType=\"delta\"|\"empty\"|\"key\";type ReferrerPolicy=\"\"|\"no-referrer\"|\"no-referrer-when-downgrade\"|\"origin\"|\"origin-when-cross-origin\"|\"same-origin\"|\"strict-origin\"|\"strict-origin-when-cross-origin\"|\"unsafe-url\";type RequestCache=\"default\"|\"force-cache\"|\"no-cache\"|\"no-store\"|\"only-if-cached\"|\"reload\";type RequestCredentials=\"include\"|\"omit\"|\"same-origin\";type RequestDestination=\"\"|\"audio\"|\"audioworklet\"|\"document\"|\"embed\"|\"font\"|\"frame\"|\"iframe\"|\"image\"|\"manifest\"|\"object\"|\"paintworklet\"|\"report\"|\"script\"|\"sharedworker\"|\"style\"|\"track\"|\"video\"|\"worker\"|\"xslt\";type RequestMode=\"cors\"|\"navigate\"|\"no-cors\"|\"same-origin\";type RequestRedirect=\"error\"|\"follow\"|\"manual\";type ResizeQuality=\"high\"|\"low\"|\"medium\"|\"pixelated\";type ResponseType=\"basic\"|\"cors\"|\"default\"|\"error\"|\"opaque\"|\"opaqueredirect\";type SecurityPolicyViolationEventDisposition=\"enforce\"|\"report\";type ServiceWorkerState=\"activated\"|\"activating\"|\"installed\"|\"installing\"|\"parsed\"|\"redundant\";type ServiceWorkerUpdateViaCache=\"all\"|\"imports\"|\"none\";type TransferFunction=\"hlg\"|\"pq\"|\"srgb\";type VideoColorPrimaries=\"bt470bg\"|\"bt709\"|\"smpte170m\";type VideoMatrixCoefficients=\"bt470bg\"|\"bt709\"|\"rgb\"|\"smpte170m\";type VideoTransferCharacteristics=\"bt709\"|\"iec61966-2-1\"|\"smpte170m\";type WebGLPowerPreference=\"default\"|\"high-performance\"|\"low-power\";type WorkerType=\"classic\"|\"module\";type XMLHttpRequestResponseType=\"\"|\"arraybuffer\"|\"blob\"|\"document\"|\"json\"|\"text\";`\n    }, {\n        fileName: \"lib.webworker.importscripts.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ndeclare function importScripts(...urls:string[]):void;`\n    }, {\n        fileName: \"lib.webworker.iterable.d.ts\",\n        text: `/// <reference no-default-lib=\"true\"/>\\ninterface Cache{addAll(requests:Iterable<RequestInfo>):Promise<void>;}interface DOMStringList{[Symbol.iterator]():IterableIterator<string>;}interface FileList{[Symbol.iterator]():IterableIterator<File>;}interface FontFaceSet extends Set<FontFace>{}interface FormData{[Symbol.iterator]():IterableIterator<[string,FormDataEntryValue]>;entries():IterableIterator<[string,FormDataEntryValue]>;keys():IterableIterator<string>;values():IterableIterator<FormDataEntryValue>;}interface Headers{[Symbol.iterator]():IterableIterator<[string,string]>;entries():IterableIterator<[string,string]>;keys():IterableIterator<string>;values():IterableIterator<string>;}interface IDBDatabase{transaction(storeNames:string|Iterable<string>,mode?:IDBTransactionMode):IDBTransaction;}interface IDBObjectStore{createIndex(name:string,keyPath:string|Iterable<string>,options?:IDBIndexParameters):IDBIndex;}interface MessageEvent<T=any>{initMessageEvent(type:string,bubbles?:boolean,cancelable?:boolean,data?:any,origin?:string,lastEventId?:string,source?:MessageEventSource|null,ports?:Iterable<MessagePort>):void;}interface SubtleCrypto{deriveKey(algorithm:AlgorithmIdentifier|EcdhKeyDeriveParams|HkdfParams|Pbkdf2Params,baseKey:CryptoKey,derivedKeyType:AlgorithmIdentifier|AesDerivedKeyParams|HmacImportParams|HkdfParams|Pbkdf2Params,extractable:boolean,keyUsages:Iterable<KeyUsage>):Promise<CryptoKey>;generateKey(algorithm:RsaHashedKeyGenParams|EcKeyGenParams,extractable:boolean,keyUsages:ReadonlyArray<KeyUsage>):Promise<CryptoKeyPair>;generateKey(algorithm:AesKeyGenParams|HmacKeyGenParams|Pbkdf2Params,extractable:boolean,keyUsages:ReadonlyArray<KeyUsage>):Promise<CryptoKey>;generateKey(algorithm:AlgorithmIdentifier,extractable:boolean,keyUsages:Iterable<KeyUsage>):Promise<CryptoKeyPair|CryptoKey>;importKey(format:\"jwk\",keyData:JsonWebKey,algorithm:AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm,extractable:boolean,keyUsages:ReadonlyArray<KeyUsage>):Promise<CryptoKey>;importKey(format:Exclude<KeyFormat,\"jwk\">,keyData:BufferSource,algorithm:AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm,extractable:boolean,keyUsages:Iterable<KeyUsage>):Promise<CryptoKey>;unwrapKey(format:KeyFormat,wrappedKey:BufferSource,unwrappingKey:CryptoKey,unwrapAlgorithm:AlgorithmIdentifier|RsaOaepParams|AesCtrParams|AesCbcParams|AesGcmParams,unwrappedKeyAlgorithm:AlgorithmIdentifier|RsaHashedImportParams|EcKeyImportParams|HmacImportParams|AesKeyAlgorithm,extractable:boolean,keyUsages:Iterable<KeyUsage>):Promise<CryptoKey>;}interface URLSearchParams{[Symbol.iterator]():IterableIterator<[string,string]>;entries():IterableIterator<[string,string]>;keys():IterableIterator<string>;values():IterableIterator<string>;}interface WEBGL_draw_buffers{drawBuffersWEBGL(buffers:Iterable<GLenum>):void;}interface WEBGL_multi_draw{multiDrawArraysInstancedWEBGL(mode:GLenum,firstsList:Int32Array|Iterable<GLint>,firstsOffset:GLuint,countsList:Int32Array|Iterable<GLsizei>,countsOffset:GLuint,instanceCountsList:Int32Array|Iterable<GLsizei>,instanceCountsOffset:GLuint,drawcount:GLsizei):void;multiDrawArraysWEBGL(mode:GLenum,firstsList:Int32Array|Iterable<GLint>,firstsOffset:GLuint,countsList:Int32Array|Iterable<GLsizei>,countsOffset:GLuint,drawcount:GLsizei):void;multiDrawElementsInstancedWEBGL(mode:GLenum,countsList:Int32Array|Iterable<GLint>,countsOffset:GLuint,type:GLenum,offsetsList:Int32Array|Iterable<GLsizei>,offsetsOffset:GLuint,instanceCountsList:Int32Array|Iterable<GLsizei>,instanceCountsOffset:GLuint,drawcount:GLsizei):void;multiDrawElementsWEBGL(mode:GLenum,countsList:Int32Array|Iterable<GLint>,countsOffset:GLuint,type:GLenum,offsetsList:Int32Array|Iterable<GLsizei>,offsetsOffset:GLuint,drawcount:GLsizei):void;}interface WebGL2RenderingContextBase{clearBufferfv(buffer:GLenum,drawbuffer:GLint,values:Iterable<GLfloat>,srcOffset?:GLuint):void;clearBufferiv(buffer:GLenum,drawbuffer:GLint,values:Iterable<GLint>,srcOffset?:GLuint):void;clearBufferuiv(buffer:GLenum,drawbuffer:GLint,values:Iterable<GLuint>,srcOffset?:GLuint):void;drawBuffers(buffers:Iterable<GLenum>):void;getActiveUniforms(program:WebGLProgram,uniformIndices:Iterable<GLuint>,pname:GLenum):any;getUniformIndices(program:WebGLProgram,uniformNames:Iterable<string>):Iterable<GLuint>|null;invalidateFramebuffer(target:GLenum,attachments:Iterable<GLenum>):void;invalidateSubFramebuffer(target:GLenum,attachments:Iterable<GLenum>,x:GLint,y:GLint,width:GLsizei,height:GLsizei):void;transformFeedbackVaryings(program:WebGLProgram,varyings:Iterable<string>,bufferMode:GLenum):void;uniform1uiv(location:WebGLUniformLocation|null,data:Iterable<GLuint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform2uiv(location:WebGLUniformLocation|null,data:Iterable<GLuint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform3uiv(location:WebGLUniformLocation|null,data:Iterable<GLuint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform4uiv(location:WebGLUniformLocation|null,data:Iterable<GLuint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix2x3fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix2x4fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix3x2fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix3x4fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix4x2fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix4x3fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;vertexAttribI4iv(index:GLuint,values:Iterable<GLint>):void;vertexAttribI4uiv(index:GLuint,values:Iterable<GLuint>):void;}interface WebGL2RenderingContextOverloads{uniform1fv(location:WebGLUniformLocation|null,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform1iv(location:WebGLUniformLocation|null,data:Iterable<GLint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform2fv(location:WebGLUniformLocation|null,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform2iv(location:WebGLUniformLocation|null,data:Iterable<GLint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform3fv(location:WebGLUniformLocation|null,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform3iv(location:WebGLUniformLocation|null,data:Iterable<GLint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform4fv(location:WebGLUniformLocation|null,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniform4iv(location:WebGLUniformLocation|null,data:Iterable<GLint>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix2fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix3fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;uniformMatrix4fv(location:WebGLUniformLocation|null,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void;}interface WebGLRenderingContextBase{vertexAttrib1fv(index:GLuint,values:Iterable<GLfloat>):void;vertexAttrib2fv(index:GLuint,values:Iterable<GLfloat>):void;vertexAttrib3fv(index:GLuint,values:Iterable<GLfloat>):void;vertexAttrib4fv(index:GLuint,values:Iterable<GLfloat>):void;}interface WebGLRenderingContextOverloads{uniform1fv(location:WebGLUniformLocation|null,v:Iterable<GLfloat>):void;uniform1iv(location:WebGLUniformLocation|null,v:Iterable<GLint>):void;uniform2fv(location:WebGLUniformLocation|null,v:Iterable<GLfloat>):void;uniform2iv(location:WebGLUniformLocation|null,v:Iterable<GLint>):void;uniform3fv(location:WebGLUniformLocation|null,v:Iterable<GLfloat>):void;uniform3iv(location:WebGLUniformLocation|null,v:Iterable<GLint>):void;uniform4fv(location:WebGLUniformLocation|null,v:Iterable<GLfloat>):void;uniform4iv(location:WebGLUniformLocation|null,v:Iterable<GLint>):void;uniformMatrix2fv(location:WebGLUniformLocation|null,transpose:GLboolean,value:Iterable<GLfloat>):void;uniformMatrix3fv(location:WebGLUniformLocation|null,transpose:GLboolean,value:Iterable<GLfloat>):void;uniformMatrix4fv(location:WebGLUniformLocation|null,transpose:GLboolean,value:Iterable<GLfloat>):void;}`\n    }];\n\nfunction getLibFiles() {\n    return libFiles;\n}\nconst libFolderInMemoryPath = \"/node_modules/typescript/lib\";\nfunction getLibFolderPath(options) {\n    if (options.libFolderPath != null) {\n        if (options.skipLoadingLibFiles === true) {\n            throw new exports.errors.InvalidOperationError(`Cannot set ${nameof(options, \"skipLoadingLibFiles\")} to true when ${nameof(options, \"libFolderPath\")} is provided.`);\n        }\n        return options.libFolderPath;\n    }\n    return libFolderInMemoryPath;\n}\n\nconst path$1 = require(\"path-browserify\");\nclass BrowserRuntime {\n    constructor() {\n        this.fs = new BrowserRuntimeFileSystem();\n        this.path = new BrowserRuntimePath();\n    }\n    getEnvVar(_name) {\n        return undefined;\n    }\n    getEndOfLine() {\n        return \"\\n\";\n    }\n    getPathMatchesPattern(path, pattern) {\n        return minimatch__default[\"default\"](path, pattern);\n    }\n}\nclass BrowserRuntimePath {\n    join(...paths) {\n        return path$1.join(...paths);\n    }\n    normalize(pathToNormalize) {\n        return path$1.normalize(pathToNormalize);\n    }\n    relative(from, to) {\n        return path$1.relative(from, to);\n    }\n}\nclass BrowserRuntimeFileSystem {\n    constructor() {\n        this._errorMessage = \"Access to the file system is not supported in the browser. Please use an in-memory file system (specify `useInMemoryFileSystem: true` when creating the project).\";\n    }\n    delete(_path) {\n        return Promise.reject(new Error(this._errorMessage));\n    }\n    deleteSync(_path) {\n        throw new Error(this._errorMessage);\n    }\n    readDirSync(_dirPath) {\n        throw new Error(this._errorMessage);\n    }\n    readFile(_filePath, _encoding) {\n        return Promise.reject(new Error(this._errorMessage));\n    }\n    readFileSync(_filePath, _encoding) {\n        throw new Error(this._errorMessage);\n    }\n    writeFile(_filePath, _fileText) {\n        return Promise.reject(new Error(this._errorMessage));\n    }\n    writeFileSync(_filePath, _fileText) {\n        throw new Error(this._errorMessage);\n    }\n    mkdir(_dirPath) {\n        return Promise.reject(new Error(this._errorMessage));\n    }\n    mkdirSync(_dirPath) {\n        throw new Error(this._errorMessage);\n    }\n    move(_srcPath, _destPath) {\n        return Promise.reject(new Error(this._errorMessage));\n    }\n    moveSync(_srcPath, _destPath) {\n        throw new Error(this._errorMessage);\n    }\n    copy(_srcPath, _destPath) {\n        return Promise.reject(new Error(this._errorMessage));\n    }\n    copySync(_srcPath, _destPath) {\n        throw new Error(this._errorMessage);\n    }\n    stat(_path) {\n        return Promise.reject(new Error(this._errorMessage));\n    }\n    statSync(_path) {\n        throw new Error(this._errorMessage);\n    }\n    realpathSync(_path) {\n        throw new Error(this._errorMessage);\n    }\n    getCurrentDirectory() {\n        throw new Error(this._errorMessage);\n    }\n    glob(_patterns) {\n        return Promise.reject(new Error(this._errorMessage));\n    }\n    globSync(_patterns) {\n        throw new Error(this._errorMessage);\n    }\n    isCaseSensitive() {\n        return true;\n    }\n}\n\nclass NodeRuntime {\n    constructor() {\n        this.fs = new NodeRuntimeFileSystem();\n        this.path = new NodeRuntimePath();\n    }\n    getEnvVar(name) {\n        return process === null || process === void 0 ? void 0 : process.env[name];\n    }\n    getEndOfLine() {\n        return os__namespace.EOL;\n    }\n    getPathMatchesPattern(path, pattern) {\n        return minimatch__default[\"default\"](path, pattern);\n    }\n}\nclass NodeRuntimePath {\n    join(...paths) {\n        return path__namespace.join(...paths);\n    }\n    normalize(pathToNormalize) {\n        return path__namespace.normalize(pathToNormalize);\n    }\n    relative(from, to) {\n        return path__namespace.relative(from, to);\n    }\n}\nclass NodeRuntimeFileSystem {\n    delete(path) {\n        return new Promise((resolve, reject) => {\n            fs__namespace.rm(path, { recursive: true }, err => {\n                if (err)\n                    reject(err);\n                else\n                    resolve();\n            });\n        });\n    }\n    deleteSync(path) {\n        fs__namespace.rmSync(path, { recursive: true });\n    }\n    readDirSync(dirPath) {\n        const entries = fs__namespace.readdirSync(dirPath, {\n            withFileTypes: true,\n        });\n        return entries.map(e => ({\n            name: e.name,\n            isFile: e.isFile(),\n            isDirectory: e.isDirectory(),\n            isSymlink: e.isSymbolicLink(),\n        }));\n    }\n    readFile(filePath, encoding = \"utf-8\") {\n        return new Promise((resolve, reject) => {\n            fs__namespace.readFile(filePath, encoding, (err, data) => {\n                if (err)\n                    reject(err);\n                else\n                    resolve(data);\n            });\n        });\n    }\n    readFileSync(filePath, encoding = \"utf-8\") {\n        return fs__namespace.readFileSync(filePath, encoding);\n    }\n    async writeFile(filePath, fileText) {\n        await new Promise((resolve, reject) => {\n            fs__namespace.writeFile(filePath, fileText, err => {\n                if (err)\n                    reject(err);\n                else\n                    resolve();\n            });\n        });\n    }\n    writeFileSync(filePath, fileText) {\n        fs__namespace.writeFileSync(filePath, fileText);\n    }\n    async mkdir(dirPath) {\n        await mkdirp__default[\"default\"](dirPath);\n    }\n    mkdirSync(dirPath) {\n        mkdirp__default[\"default\"].sync(dirPath);\n    }\n    move(srcPath, destPath) {\n        return new Promise((resolve, reject) => {\n            fs__namespace.rename(srcPath, destPath, err => {\n                if (err)\n                    reject(err);\n                else\n                    resolve();\n            });\n        });\n    }\n    moveSync(srcPath, destPath) {\n        fs__namespace.renameSync(srcPath, destPath);\n    }\n    copy(srcPath, destPath) {\n        return new Promise((resolve, reject) => {\n            fs__namespace.copyFile(srcPath, destPath, err => {\n                if (err)\n                    reject(err);\n                else\n                    resolve();\n            });\n        });\n    }\n    copySync(srcPath, destPath) {\n        fs__namespace.copyFileSync(srcPath, destPath);\n    }\n    stat(path) {\n        return new Promise(resolve => {\n            fs__namespace.stat(path, (err, stat) => {\n                if (err)\n                    throw err;\n                else\n                    resolve(stat);\n            });\n        });\n    }\n    statSync(path) {\n        return fs__namespace.statSync(path);\n    }\n    realpathSync(path) {\n        return fs__namespace.realpathSync(path);\n    }\n    getCurrentDirectory() {\n        return path__namespace.resolve();\n    }\n    glob(patterns) {\n        return fastGlob__default[\"default\"](patterns, {\n            cwd: this.getCurrentDirectory(),\n            absolute: true,\n        });\n    }\n    globSync(patterns) {\n        return fastGlob__default[\"default\"].sync(patterns, {\n            cwd: this.getCurrentDirectory(),\n            absolute: true,\n        });\n    }\n    isCaseSensitive() {\n        const platform = process === null || process === void 0 ? void 0 : process.platform;\n        return platform !== \"win32\" && platform !== \"darwin\";\n    }\n}\n\nconst runtime = getRuntime();\nfunction getRuntime() {\n    if (isNodeJs())\n        return new NodeRuntime();\n    else\n        return new BrowserRuntime();\n}\nfunction isNodeJs() {\n    return typeof globalThis.process === \"object\"\n        && typeof globalThis.process.versions === \"object\"\n        && typeof globalThis.process.versions.node !== \"undefined\";\n}\n\nfunction createHosts(options) {\n    const { transactionalFileSystem, sourceFileContainer, compilerOptions, getNewLine, resolutionHost, getProjectVersion, isKnownTypesPackageName } = options;\n    let version = 0;\n    const libFolderPath = transactionalFileSystem.getStandardizedAbsolutePath(getLibFolderPath(options));\n    const fileExistsSync = (path) => sourceFileContainer.containsSourceFileAtPath(path)\n        || transactionalFileSystem.fileExistsSync(path);\n    const languageServiceHost = {\n        getCompilationSettings: () => compilerOptions.get(),\n        getNewLine,\n        getProjectVersion,\n        getScriptFileNames: () => Array.from(sourceFileContainer.getSourceFilePaths()),\n        getScriptVersion: fileName => {\n            const filePath = transactionalFileSystem.getStandardizedAbsolutePath(fileName);\n            const sourceFile = sourceFileContainer.getSourceFileFromCacheFromFilePath(filePath);\n            if (sourceFile == null)\n                return (version++).toString();\n            return sourceFileContainer.getSourceFileVersion(sourceFile);\n        },\n        getScriptSnapshot: fileName => {\n            const filePath = transactionalFileSystem.getStandardizedAbsolutePath(fileName);\n            const sourceFile = sourceFileContainer.addOrGetSourceFileFromFilePathSync(filePath, {\n                markInProject: false,\n                scriptKind: undefined,\n            });\n            return sourceFile ? ts__namespace.ScriptSnapshot.fromString(sourceFile.getFullText()) : undefined;\n        },\n        getCurrentDirectory: () => transactionalFileSystem.getCurrentDirectory(),\n        getDefaultLibFileName: options => {\n            return libFolderPath + \"/\" + ts__namespace.getDefaultLibFileName(options);\n        },\n        isKnownTypesPackageName,\n        useCaseSensitiveFileNames: () => true,\n        readFile: (path, encoding) => {\n            const standardizedPath = transactionalFileSystem.getStandardizedAbsolutePath(path);\n            if (sourceFileContainer.containsSourceFileAtPath(standardizedPath))\n                return sourceFileContainer.getSourceFileFromCacheFromFilePath(standardizedPath).getFullText();\n            return transactionalFileSystem.readFileSync(standardizedPath, encoding);\n        },\n        fileExists: filePath => {\n            const standardizedFilePath = transactionalFileSystem.getStandardizedAbsolutePath(filePath);\n            return fileExistsSync(standardizedFilePath);\n        },\n        directoryExists: dirName => {\n            const dirPath = transactionalFileSystem.getStandardizedAbsolutePath(dirName);\n            return sourceFileContainer.containsDirectoryAtPath(dirPath)\n                || transactionalFileSystem.directoryExistsSync(dirPath);\n        },\n        resolveModuleNames: resolutionHost.resolveModuleNames,\n        resolveTypeReferenceDirectives: resolutionHost.resolveTypeReferenceDirectives,\n        getResolvedModuleWithFailedLookupLocationsFromCache: resolutionHost.getResolvedModuleWithFailedLookupLocationsFromCache,\n        realpath: path => transactionalFileSystem.realpathSync(transactionalFileSystem.getStandardizedAbsolutePath(path)),\n    };\n    const compilerHost = {\n        getSourceFile: (fileName, languageVersion, onError) => {\n            const filePath = transactionalFileSystem.getStandardizedAbsolutePath(fileName);\n            return sourceFileContainer.addOrGetSourceFileFromFilePathSync(filePath, {\n                markInProject: false,\n                scriptKind: undefined,\n            });\n        },\n        getDefaultLibFileName: languageServiceHost.getDefaultLibFileName,\n        writeFile: (fileName, data, writeByteOrderMark, onError, sourceFiles) => {\n            const filePath = transactionalFileSystem.getStandardizedAbsolutePath(fileName);\n            transactionalFileSystem.writeFileSync(filePath, writeByteOrderMark ? \"\\uFEFF\" + data : data);\n        },\n        getCurrentDirectory: () => languageServiceHost.getCurrentDirectory(),\n        getDirectories: (path) => transactionalFileSystem.getDirectories(transactionalFileSystem.getStandardizedAbsolutePath(path)),\n        fileExists: languageServiceHost.fileExists,\n        readFile: languageServiceHost.readFile,\n        getCanonicalFileName: (fileName) => transactionalFileSystem.getStandardizedAbsolutePath(fileName),\n        useCaseSensitiveFileNames: languageServiceHost.useCaseSensitiveFileNames,\n        getNewLine: languageServiceHost.getNewLine,\n        getEnvironmentVariable: (name) => runtime.getEnvVar(name),\n        directoryExists: dirName => languageServiceHost.directoryExists(dirName),\n        resolveModuleNames: resolutionHost.resolveModuleNames,\n        resolveTypeReferenceDirectives: resolutionHost.resolveTypeReferenceDirectives,\n        realpath: languageServiceHost.realpath,\n    };\n    return { languageServiceHost, compilerHost };\n}\n\nconst isWindowsRootDirRegex = /^[a-z]+:[\\\\\\/]$/i;\nconst path = runtime.path;\nclass FileUtils {\n    constructor() {\n    }\n    static isNotExistsError(err) {\n        var _a;\n        return err != null && err.code === FileUtils.ENOENT\n            || err != null && ((_a = err === null || err === void 0 ? void 0 : err.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"NotFound\";\n    }\n    static pathJoin(basePath, ...paths) {\n        if (FileUtils.pathIsAbsolute(basePath)) {\n            return FileUtils.standardizeSlashes(path.normalize(path.join(basePath, ...paths)));\n        }\n        return FileUtils.standardizeSlashes(path.join(basePath, ...paths));\n    }\n    static pathIsAbsolute(fileOrDirPath) {\n        return isAbsolutePath(fileOrDirPath);\n    }\n    static getStandardizedAbsolutePath(fileSystem, fileOrDirPath, relativeBase) {\n        return FileUtils.standardizeSlashes(path.normalize(getAbsolutePath()));\n        function getAbsolutePath() {\n            if (isAbsolutePath(fileOrDirPath))\n                return fileOrDirPath;\n            if (!fileOrDirPath.startsWith(\"./\") && relativeBase != null)\n                return path.join(relativeBase, fileOrDirPath);\n            return path.join(fileSystem.getCurrentDirectory(), fileOrDirPath);\n        }\n    }\n    static getDirPath(fileOrDirPath) {\n        fileOrDirPath = FileUtils.standardizeSlashes(fileOrDirPath);\n        const lastIndexOfSlash = fileOrDirPath.lastIndexOf(\"/\");\n        if (lastIndexOfSlash === -1)\n            return \".\";\n        return FileUtils.standardizeSlashes(fileOrDirPath.substring(0, lastIndexOfSlash + 1));\n    }\n    static getBaseName(fileOrDirPath) {\n        const lastIndexOfSlash = fileOrDirPath.lastIndexOf(\"/\");\n        return fileOrDirPath.substring(lastIndexOfSlash + 1);\n    }\n    static getExtension(fileOrDirPath) {\n        const baseName = FileUtils.getBaseName(fileOrDirPath);\n        const lastDotIndex = baseName.lastIndexOf(\".\");\n        if (lastDotIndex <= 0)\n            return \"\";\n        const lastExt = baseName.substring(lastDotIndex);\n        const lastExtLowerCase = lastExt.toLowerCase();\n        if (lastExtLowerCase === \".ts\" && baseName.substring(lastDotIndex - 2, lastDotIndex).toLowerCase() === \".d\")\n            return baseName.substring(lastDotIndex - 2);\n        if (lastExtLowerCase === \".map\" && baseName.substring(lastDotIndex - 3, lastDotIndex).toLowerCase() === \".js\")\n            return baseName.substring(lastDotIndex - 3);\n        return lastExt;\n    }\n    static standardizeSlashes(fileOrDirPath) {\n        let result = fileOrDirPath.replace(this.standardizeSlashesRegex, \"/\");\n        if (!FileUtils.isRootDirPath(result) && result.endsWith(\"/\"))\n            result = result.substring(0, result.length - 1);\n        return result;\n    }\n    static pathEndsWith(fileOrDirPath, endsWithPath) {\n        const pathItems = FileUtils.splitPathBySlashes(fileOrDirPath);\n        const endsWithItems = FileUtils.splitPathBySlashes(endsWithPath);\n        if (endsWithItems.length > pathItems.length)\n            return false;\n        for (let i = 0; i < endsWithItems.length; i++) {\n            if (endsWithItems[endsWithItems.length - i - 1] !== pathItems[pathItems.length - i - 1])\n                return false;\n        }\n        return endsWithItems.length > 0;\n    }\n    static pathStartsWith(fileOrDirPath, startsWithPath) {\n        const isfileOrDirPathEmpty = StringUtils.isNullOrWhitespace(fileOrDirPath);\n        const isStartsWithPathEmpty = StringUtils.isNullOrWhitespace(startsWithPath);\n        const pathItems = FileUtils.splitPathBySlashes(fileOrDirPath);\n        const startsWithItems = FileUtils.splitPathBySlashes(startsWithPath);\n        if (isfileOrDirPathEmpty && isStartsWithPathEmpty)\n            return true;\n        if (isStartsWithPathEmpty || startsWithItems.length > pathItems.length)\n            return false;\n        if (startsWithItems.length === 1 && startsWithItems[0].length === 0)\n            return true;\n        for (let i = 0; i < startsWithItems.length; i++) {\n            if (startsWithItems[i] !== pathItems[i])\n                return false;\n        }\n        return startsWithItems.length > 0;\n    }\n    static splitPathBySlashes(fileOrDirPath) {\n        fileOrDirPath = (fileOrDirPath || \"\").replace(FileUtils.trimSlashStartRegex, \"\").replace(FileUtils.trimSlashEndRegex, \"\");\n        return FileUtils.standardizeSlashes(fileOrDirPath).replace(/^\\//, \"\").split(\"/\");\n    }\n    static getParentMostPaths(paths) {\n        const finalPaths = [];\n        for (const fileOrDirPath of ArrayUtils.sortByProperty(paths, p => p.length)) {\n            if (finalPaths.every(p => !FileUtils.pathStartsWith(fileOrDirPath, p)))\n                finalPaths.push(fileOrDirPath);\n        }\n        return finalPaths;\n    }\n    static async readFileOrNotExists(fileSystem, filePath, encoding) {\n        try {\n            return await fileSystem.readFile(filePath, encoding);\n        }\n        catch (err) {\n            if (!FileUtils.isNotExistsError(err))\n                throw err;\n            return false;\n        }\n    }\n    static readFileOrNotExistsSync(fileSystem, filePath, encoding) {\n        try {\n            return fileSystem.readFileSync(filePath, encoding);\n        }\n        catch (err) {\n            if (!FileUtils.isNotExistsError(err))\n                throw err;\n            return false;\n        }\n    }\n    static getTextWithByteOrderMark(text) {\n        if (StringUtils.hasBom(text))\n            return text;\n        return \"\\uFEFF\" + text;\n    }\n    static getRelativePathTo(absoluteDirPathFrom, absolutePathTo) {\n        const relativePath = path.relative(absoluteDirPathFrom, FileUtils.getDirPath(absolutePathTo));\n        return FileUtils.standardizeSlashes(path.join(relativePath, FileUtils.getBaseName(absolutePathTo)));\n    }\n    static isRootDirPath(dirOrFilePath) {\n        return dirOrFilePath === \"/\" || isWindowsRootDirRegex.test(dirOrFilePath);\n    }\n    static *getDescendantDirectories(fileSystemWrapper, dirPath) {\n        for (const entry of fileSystemWrapper.readDirSync(dirPath)) {\n            if (!entry.isDirectory)\n                continue;\n            yield entry.path;\n            yield* FileUtils.getDescendantDirectories(fileSystemWrapper, entry.path);\n        }\n    }\n    static toAbsoluteGlob(glob, cwd) {\n        if (glob.slice(0, 2) === \"./\")\n            glob = glob.slice(2);\n        if (glob.length === 1 && glob === \".\")\n            glob = \"\";\n        const suffix = glob.slice(-1);\n        const isNegated = FileUtils.isNegatedGlob(glob);\n        if (isNegated)\n            glob = glob.slice(1);\n        if (!isAbsolutePath(glob) || glob.slice(0, 1) === \"\\\\\")\n            glob = globJoin(cwd, glob);\n        if (suffix === \"/\" && glob.slice(-1) !== \"/\")\n            glob += \"/\";\n        return isNegated ? \"!\" + glob : glob;\n    }\n    static isNegatedGlob(glob) {\n        return glob[0] === \"!\" && glob[1] !== \"(\";\n    }\n}\nFileUtils.standardizeSlashesRegex = /\\\\/g;\nFileUtils.trimSlashStartRegex = /^\\//;\nFileUtils.trimSlashEndRegex = /\\/$/;\nFileUtils.ENOENT = \"ENOENT\";\nfunction globJoin(dir, glob) {\n    if (dir.charAt(dir.length - 1) === \"/\")\n        dir = dir.slice(0, -1);\n    if (glob.charAt(0) === \"/\")\n        glob = glob.slice(1);\n    if (!glob)\n        return dir;\n    return dir + \"/\" + glob;\n}\nfunction isAbsolutePath(filePath) {\n    return filePath.startsWith(\"/\") || isWindowsAbsolutePath(filePath);\n}\nconst isWindowsAbsolutePathRegex = /^[a-z]+:[\\\\\\/]/i;\nfunction isWindowsAbsolutePath(filePath) {\n    return isWindowsAbsolutePathRegex.test(filePath) || isAzureAbsolutePath(filePath) || isUncPath(filePath);\n}\nfunction isAzureAbsolutePath(filePath) {\n    return filePath.startsWith(\"\\\\\\\\\");\n}\nconst uncPathRegex = /^[\\\\\\/]{2,}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+/;\nfunction isUncPath(filePath) {\n    return uncPathRegex.test(filePath);\n}\n\nfunction matchGlobs(paths, patterns, cwd) {\n    if (typeof patterns === \"string\")\n        patterns = [FileUtils.toAbsoluteGlob(patterns, cwd)];\n    else\n        patterns = patterns.map(p => FileUtils.toAbsoluteGlob(p, cwd));\n    const result = [];\n    for (const path of paths) {\n        for (let pattern of patterns) {\n            let process = addArray;\n            if (FileUtils.isNegatedGlob(pattern)) {\n                process = removeArray;\n                pattern = pattern.slice(1);\n            }\n            if (runtime.getPathMatchesPattern(path, pattern))\n                process(result, path);\n        }\n    }\n    return result;\n}\nfunction addArray(items, newItem) {\n    if (items.indexOf(newItem) === -1)\n        items.push(newItem);\n}\nfunction removeArray(items, removeItem) {\n    const index = items.indexOf(removeItem);\n    if (index >= 0)\n        items.splice(index, 1);\n}\n\nclass InMemoryFileSystemHost {\n    constructor() {\n        this.directories = new Map();\n        this.getOrCreateDir(\"/\");\n    }\n    isCaseSensitive() {\n        return true;\n    }\n    delete(path) {\n        try {\n            this.deleteSync(path);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    deleteSync(path) {\n        const standardizedPath = FileUtils.getStandardizedAbsolutePath(this, path);\n        if (this.directories.has(standardizedPath)) {\n            for (const descendantDirPath of getDescendantDirectories(this.directories.keys(), standardizedPath))\n                this.directories.delete(descendantDirPath);\n            this.directories.delete(standardizedPath);\n            return;\n        }\n        const parentDir = this.directories.get(FileUtils.getDirPath(standardizedPath));\n        if (parentDir == null || !parentDir.files.has(standardizedPath))\n            throw new exports.errors.FileNotFoundError(standardizedPath);\n        parentDir.files.delete(standardizedPath);\n    }\n    readDirSync(dirPath) {\n        const standardizedDirPath = FileUtils.getStandardizedAbsolutePath(this, dirPath);\n        const dir = this.directories.get(standardizedDirPath);\n        if (dir == null)\n            throw new exports.errors.DirectoryNotFoundError(standardizedDirPath);\n        return [\n            ...getDirectories(this.directories.keys()),\n            ...Array.from(dir.files.keys()).map(name => ({\n                name,\n                isDirectory: false,\n                isFile: true,\n                isSymlink: false,\n            })),\n        ];\n        function* getDirectories(dirPaths) {\n            for (const path of dirPaths) {\n                const parentDir = FileUtils.getDirPath(path);\n                if (parentDir === standardizedDirPath && parentDir !== path) {\n                    yield {\n                        name: path,\n                        isDirectory: true,\n                        isFile: false,\n                        isSymlink: false,\n                    };\n                }\n            }\n        }\n    }\n    readFile(filePath, encoding = \"utf-8\") {\n        try {\n            return Promise.resolve(this.readFileSync(filePath, encoding));\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    readFileSync(filePath, encoding = \"utf-8\") {\n        const standardizedFilePath = FileUtils.getStandardizedAbsolutePath(this, filePath);\n        const parentDir = this.directories.get(FileUtils.getDirPath(standardizedFilePath));\n        if (parentDir == null)\n            throw new exports.errors.FileNotFoundError(standardizedFilePath);\n        const fileText = parentDir.files.get(standardizedFilePath);\n        if (fileText === undefined)\n            throw new exports.errors.FileNotFoundError(standardizedFilePath);\n        return fileText;\n    }\n    writeFile(filePath, fileText) {\n        this.writeFileSync(filePath, fileText);\n        return Promise.resolve();\n    }\n    writeFileSync(filePath, fileText) {\n        this._writeFileSync(filePath, fileText);\n    }\n    _writeFileSync(filePath, fileText) {\n        const standardizedFilePath = FileUtils.getStandardizedAbsolutePath(this, filePath);\n        const dirPath = FileUtils.getDirPath(standardizedFilePath);\n        this.getOrCreateDir(dirPath).files.set(standardizedFilePath, fileText);\n    }\n    mkdir(dirPath) {\n        this.mkdirSync(dirPath);\n        return Promise.resolve();\n    }\n    mkdirSync(dirPath) {\n        this.getOrCreateDir(FileUtils.getStandardizedAbsolutePath(this, dirPath));\n    }\n    move(srcPath, destPath) {\n        this.moveSync(srcPath, destPath);\n        return Promise.resolve();\n    }\n    moveSync(srcPath, destPath) {\n        const standardizedSrcPath = FileUtils.getStandardizedAbsolutePath(this, srcPath);\n        const standardizedDestPath = FileUtils.getStandardizedAbsolutePath(this, destPath);\n        if (this.fileExistsSync(standardizedSrcPath)) {\n            const fileText = this.readFileSync(standardizedSrcPath);\n            this.deleteSync(standardizedSrcPath);\n            this.writeFileSync(standardizedDestPath, fileText);\n        }\n        else if (this.directories.has(standardizedSrcPath)) {\n            const moveDirectory = (from, to) => {\n                this._copyDirInternal(from, to);\n                this.directories.delete(from);\n            };\n            moveDirectory(standardizedSrcPath, standardizedDestPath);\n            for (const descendantDirPath of getDescendantDirectories(this.directories.keys(), standardizedSrcPath)) {\n                const relativePath = FileUtils.getRelativePathTo(standardizedSrcPath, descendantDirPath);\n                moveDirectory(descendantDirPath, FileUtils.pathJoin(standardizedDestPath, relativePath));\n            }\n        }\n        else {\n            throw new exports.errors.PathNotFoundError(standardizedSrcPath);\n        }\n    }\n    copy(srcPath, destPath) {\n        this.copySync(srcPath, destPath);\n        return Promise.resolve();\n    }\n    copySync(srcPath, destPath) {\n        const standardizedSrcPath = FileUtils.getStandardizedAbsolutePath(this, srcPath);\n        const standardizedDestPath = FileUtils.getStandardizedAbsolutePath(this, destPath);\n        if (this.fileExistsSync(standardizedSrcPath))\n            this.writeFileSync(standardizedDestPath, this.readFileSync(standardizedSrcPath));\n        else if (this.directories.has(standardizedSrcPath)) {\n            this._copyDirInternal(standardizedSrcPath, standardizedDestPath);\n            for (const descendantDirPath of getDescendantDirectories(this.directories.keys(), standardizedSrcPath)) {\n                const relativePath = FileUtils.getRelativePathTo(standardizedSrcPath, descendantDirPath);\n                this._copyDirInternal(descendantDirPath, FileUtils.pathJoin(standardizedDestPath, relativePath));\n            }\n        }\n        else {\n            throw new exports.errors.PathNotFoundError(standardizedSrcPath);\n        }\n    }\n    _copyDirInternal(from, to) {\n        const dir = this.directories.get(from);\n        const newDir = this.getOrCreateDir(to);\n        for (const [filePath, text] of dir.files.entries()) {\n            const toDir = FileUtils.pathJoin(to, FileUtils.getBaseName(filePath));\n            newDir.files.set(toDir, text);\n        }\n    }\n    fileExists(filePath) {\n        return Promise.resolve(this.fileExistsSync(filePath));\n    }\n    fileExistsSync(filePath) {\n        const standardizedFilePath = FileUtils.getStandardizedAbsolutePath(this, filePath);\n        const dirPath = FileUtils.getDirPath(standardizedFilePath);\n        const dir = this.directories.get(dirPath);\n        if (dir == null)\n            return false;\n        return dir.files.has(standardizedFilePath);\n    }\n    directoryExists(dirPath) {\n        return Promise.resolve(this.directoryExistsSync(dirPath));\n    }\n    directoryExistsSync(dirPath) {\n        return this.directories.has(FileUtils.getStandardizedAbsolutePath(this, dirPath));\n    }\n    realpathSync(path) {\n        return path;\n    }\n    getCurrentDirectory() {\n        return \"/\";\n    }\n    glob(patterns) {\n        try {\n            return Promise.resolve(this.globSync(patterns));\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    globSync(patterns) {\n        const allFilePaths = Array.from(getAllFilePaths(this.directories.values()));\n        return matchGlobs(allFilePaths, patterns, this.getCurrentDirectory());\n        function* getAllFilePaths(directories) {\n            for (const dir of directories)\n                yield* dir.files.keys();\n        }\n    }\n    getOrCreateDir(dirPath) {\n        let dir = this.directories.get(dirPath);\n        if (dir == null) {\n            dir = { path: dirPath, files: new Map() };\n            this.directories.set(dirPath, dir);\n            const parentDirPath = FileUtils.getDirPath(dirPath);\n            if (parentDirPath !== dirPath)\n                this.getOrCreateDir(parentDirPath);\n        }\n        return dir;\n    }\n}\nfunction* getDescendantDirectories(directoryPaths, dirPath) {\n    for (const path of directoryPaths) {\n        if (FileUtils.pathStartsWith(path, dirPath))\n            yield path;\n    }\n}\n\nconst fs = runtime.fs;\nclass RealFileSystemHost {\n    async delete(path) {\n        try {\n            await fs.delete(path);\n        }\n        catch (err) {\n            throw this.getFileNotFoundErrorIfNecessary(err, path);\n        }\n    }\n    deleteSync(path) {\n        try {\n            fs.deleteSync(path);\n        }\n        catch (err) {\n            throw this.getFileNotFoundErrorIfNecessary(err, path);\n        }\n    }\n    readDirSync(dirPath) {\n        try {\n            const entries = fs.readDirSync(dirPath);\n            for (const entry of entries) {\n                entry.name = FileUtils.pathJoin(dirPath, entry.name);\n                if (entry.isSymlink) {\n                    try {\n                        const info = fs.statSync(entry.name);\n                        entry.isDirectory = info.isDirectory();\n                        entry.isFile = info.isFile();\n                    }\n                    catch (_a) {\n                    }\n                }\n            }\n            return entries;\n        }\n        catch (err) {\n            throw this.getDirectoryNotFoundErrorIfNecessary(err, dirPath);\n        }\n    }\n    async readFile(filePath, encoding = \"utf-8\") {\n        try {\n            return await fs.readFile(filePath, encoding);\n        }\n        catch (err) {\n            throw this.getFileNotFoundErrorIfNecessary(err, filePath);\n        }\n    }\n    readFileSync(filePath, encoding = \"utf-8\") {\n        try {\n            return fs.readFileSync(filePath, encoding);\n        }\n        catch (err) {\n            throw this.getFileNotFoundErrorIfNecessary(err, filePath);\n        }\n    }\n    async writeFile(filePath, fileText) {\n        return fs.writeFile(filePath, fileText);\n    }\n    writeFileSync(filePath, fileText) {\n        fs.writeFileSync(filePath, fileText);\n    }\n    mkdir(dirPath) {\n        return fs.mkdir(dirPath);\n    }\n    mkdirSync(dirPath) {\n        fs.mkdirSync(dirPath);\n    }\n    move(srcPath, destPath) {\n        return fs.move(srcPath, destPath);\n    }\n    moveSync(srcPath, destPath) {\n        fs.moveSync(srcPath, destPath);\n    }\n    copy(srcPath, destPath) {\n        return fs.copy(srcPath, destPath);\n    }\n    copySync(srcPath, destPath) {\n        fs.copySync(srcPath, destPath);\n    }\n    async fileExists(filePath) {\n        try {\n            return (await fs.stat(filePath)).isFile();\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    fileExistsSync(filePath) {\n        try {\n            return fs.statSync(filePath).isFile();\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    async directoryExists(dirPath) {\n        try {\n            return (await fs.stat(dirPath)).isDirectory();\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    directoryExistsSync(dirPath) {\n        try {\n            return fs.statSync(dirPath).isDirectory();\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    realpathSync(path) {\n        return fs.realpathSync(path);\n    }\n    getCurrentDirectory() {\n        return FileUtils.standardizeSlashes(fs.getCurrentDirectory());\n    }\n    glob(patterns) {\n        return fs.glob(backSlashesToForward(patterns));\n    }\n    globSync(patterns) {\n        return fs.globSync(backSlashesToForward(patterns));\n    }\n    isCaseSensitive() {\n        return fs.isCaseSensitive();\n    }\n    getDirectoryNotFoundErrorIfNecessary(err, path) {\n        return FileUtils.isNotExistsError(err) ? new exports.errors.DirectoryNotFoundError(FileUtils.getStandardizedAbsolutePath(this, path)) : err;\n    }\n    getFileNotFoundErrorIfNecessary(err, path) {\n        return FileUtils.isNotExistsError(err) ? new exports.errors.FileNotFoundError(FileUtils.getStandardizedAbsolutePath(this, path)) : err;\n    }\n}\nfunction backSlashesToForward(patterns) {\n    return patterns.map(p => p.replace(/\\\\/g, \"/\"));\n}\n\nclass Directory {\n    constructor(path) {\n        this.path = path;\n        this.operations = [];\n        this.inboundOperations = [];\n        this.isDeleted = false;\n        this.wasEverDeleted = false;\n        this.childDirs = new SortedKeyValueArray(item => item.path, LocaleStringComparer.instance);\n    }\n    getExternalOperations() {\n        return [\n            ...ArrayUtils.flatten(this.getAncestors().map(a => getMoveCopyOrDeleteOperations(a))).filter(o => isAncestorAffectedOperation(this, o)),\n            ...ArrayUtils.flatten([this, ...this.getDescendants()].map(d => getMoveOrCopyOperations(d))).filter(o => !isInternalOperation(this, o)),\n        ];\n        function isInternalOperation(thisDir, operation) {\n            return operation.oldDir.isDescendantOrEqual(thisDir) && operation.newDir.isDescendantOrEqual(thisDir);\n        }\n        function isAncestorAffectedOperation(thisDir, operation) {\n            switch (operation.kind) {\n                case \"move\":\n                case \"copy\":\n                    return thisDir.isDescendantOrEqual(operation.oldDir) || thisDir.isDescendantOrEqual(operation.newDir);\n                case \"deleteDir\":\n                    return thisDir.isDescendantOrEqual(operation.dir);\n                default:\n                    return exports.errors.throwNotImplementedForNeverValueError(operation);\n            }\n        }\n        function getMoveOrCopyOperations(dir) {\n            return dir.operations.filter(o => o.kind === \"move\" || o.kind === \"copy\");\n        }\n        function getMoveCopyOrDeleteOperations(dir) {\n            return dir.operations.filter(o => o.kind === \"move\" || o.kind === \"deleteDir\" || o.kind === \"copy\");\n        }\n    }\n    isDescendantOrEqual(directory) {\n        return this.isDescendant(directory) || this === directory;\n    }\n    isDescendant(directory) {\n        return FileUtils.pathStartsWith(this.path, directory.path);\n    }\n    getIsDeleted() {\n        return this.isDeleted;\n    }\n    getWasEverDeleted() {\n        if (this.wasEverDeleted)\n            return true;\n        for (const ancestor of this.getAncestorsIterator()) {\n            if (ancestor.wasEverDeleted)\n                return true;\n        }\n        return false;\n    }\n    setIsDeleted(isDeleted) {\n        if (this.isDeleted === isDeleted)\n            return;\n        if (isDeleted) {\n            this.wasEverDeleted = true;\n            for (const child of this.childDirs.entries())\n                child.setIsDeleted(true);\n        }\n        else {\n            if (this.parent != null)\n                this.parent.setIsDeleted(false);\n        }\n        this.isDeleted = isDeleted;\n    }\n    getParent() {\n        return this.parent;\n    }\n    setParent(parent) {\n        if (this.parent != null)\n            throw new exports.errors.InvalidOperationError(\"For some reason, a parent was being set when the directory already had a parent. Please open an issue.\");\n        this.parent = parent;\n        parent.childDirs.set(this);\n        if (parent.isDeleted && !this.isDeleted)\n            parent.setIsDeleted(false);\n    }\n    removeParent() {\n        const parent = this.parent;\n        if (parent == null)\n            return;\n        parent.childDirs.removeByValue(this);\n        this.parent = undefined;\n    }\n    getAncestors() {\n        return Array.from(this.getAncestorsIterator());\n    }\n    *getAncestorsIterator() {\n        let parent = this.parent;\n        while (parent != null) {\n            yield parent;\n            parent = parent.parent;\n        }\n    }\n    *getChildrenEntriesIterator() {\n        for (const childDir of this.childDirs.entries()) {\n            yield {\n                path: childDir.path,\n                isDirectory: true,\n                isFile: false,\n                isSymlink: false,\n            };\n        }\n    }\n    getDescendants() {\n        const descendants = [];\n        for (const child of this.childDirs.entries()) {\n            descendants.push(child);\n            descendants.push(...child.getDescendants());\n        }\n        return descendants;\n    }\n    isFileQueuedForDelete(filePath) {\n        return this.hasOperation(operation => operation.kind === \"deleteFile\" && operation.filePath === filePath);\n    }\n    hasOperation(operationMatches) {\n        for (const operation of this.operations) {\n            if (operationMatches(operation))\n                return true;\n        }\n        return false;\n    }\n    dequeueFileDelete(filePath) {\n        this.removeMatchingOperations(operation => operation.kind === \"deleteFile\" && operation.filePath === filePath);\n    }\n    dequeueDirDelete(dirPath) {\n        this.removeMatchingOperations(operation => operation.kind === \"deleteDir\" && operation.dir.path === dirPath);\n    }\n    isRootDir() {\n        return FileUtils.isRootDirPath(this.path);\n    }\n    removeMatchingOperations(operationMatches) {\n        ArrayUtils.removeAll(this.operations, operationMatches);\n    }\n}\nclass TransactionalFileSystem {\n    constructor(options) {\n        this.directories = new KeyValueCache();\n        this.operationIndex = 0;\n        this.fileSystem = options.fileSystem;\n        this.pathCasingMaintainer = new PathCasingMaintainer(options.fileSystem);\n        if (!options.skipLoadingLibFiles && options.libFolderPath == null) {\n            const libFolderPath = getLibFolderPath(options);\n            this.libFileMap = new Map();\n            const libFiles = getLibFiles();\n            for (const libFile of libFiles) {\n                this.libFileMap.set(this.getStandardizedAbsolutePath(libFolderPath + \"/\" + libFile.fileName), libFile.text);\n            }\n        }\n    }\n    queueFileDelete(filePath) {\n        this.throwIfLibFile(filePath);\n        const parentDir = this.getOrCreateParentDirectory(filePath);\n        parentDir.operations.push({\n            kind: \"deleteFile\",\n            index: this.getNextOperationIndex(),\n            filePath,\n        });\n        this.pathCasingMaintainer.removePath(filePath);\n    }\n    removeFileDelete(filePath) {\n        this.getOrCreateParentDirectory(filePath).dequeueFileDelete(filePath);\n    }\n    queueMkdir(dirPath) {\n        const dir = this.getOrCreateDirectory(dirPath);\n        dir.setIsDeleted(false);\n        const parentDir = this.getOrCreateParentDirectory(dirPath);\n        parentDir.operations.push({\n            kind: \"mkdir\",\n            index: this.getNextOperationIndex(),\n            dir,\n        });\n    }\n    queueDirectoryDelete(dirPath) {\n        const dir = this.getOrCreateDirectory(dirPath);\n        dir.setIsDeleted(true);\n        const parentDir = this.getOrCreateParentDirectory(dirPath);\n        parentDir.operations.push({\n            kind: \"deleteDir\",\n            index: this.getNextOperationIndex(),\n            dir,\n        });\n        this.pathCasingMaintainer.removePath(dirPath);\n    }\n    queueMoveDirectory(srcPath, destPath) {\n        const parentDir = this.getOrCreateParentDirectory(srcPath);\n        const moveDir = this.getOrCreateDirectory(srcPath);\n        const destinationDir = this.getOrCreateDirectory(destPath);\n        const moveOperation = {\n            kind: \"move\",\n            index: this.getNextOperationIndex(),\n            oldDir: moveDir,\n            newDir: destinationDir,\n        };\n        parentDir.operations.push(moveOperation);\n        (destinationDir.getParent() || destinationDir).inboundOperations.push(moveOperation);\n        moveDir.setIsDeleted(true);\n        this.pathCasingMaintainer.removePath(srcPath);\n    }\n    queueCopyDirectory(srcPath, destPath) {\n        const parentDir = this.getOrCreateParentDirectory(srcPath);\n        const copyDir = this.getOrCreateDirectory(srcPath);\n        const destinationDir = this.getOrCreateDirectory(destPath);\n        const copyOperation = {\n            kind: \"copy\",\n            index: this.getNextOperationIndex(),\n            oldDir: copyDir,\n            newDir: destinationDir,\n        };\n        parentDir.operations.push(copyOperation);\n        (destinationDir.getParent() || destinationDir).inboundOperations.push(copyOperation);\n    }\n    async flush() {\n        const operations = this.getAndClearOperations();\n        for (const operation of operations)\n            await this.executeOperation(operation);\n    }\n    flushSync() {\n        for (const operation of this.getAndClearOperations())\n            this.executeOperationSync(operation);\n    }\n    async saveForDirectory(dirPath) {\n        const dir = this.getOrCreateDirectory(dirPath);\n        this.throwIfHasExternalOperations(dir, \"save directory\");\n        const operations = this.getAndClearOperationsForDir(dir);\n        await this.ensureDirectoryExists(dir);\n        for (const operation of operations)\n            await this.executeOperation(operation);\n    }\n    saveForDirectorySync(dirPath) {\n        const dir = this.getOrCreateDirectory(dirPath);\n        this.throwIfHasExternalOperations(dir, \"save directory\");\n        this.ensureDirectoryExistsSync(dir);\n        for (const operation of this.getAndClearOperationsForDir(dir))\n            this.executeOperationSync(operation);\n    }\n    getAndClearOperationsForDir(dir) {\n        const operations = getAndClearParentMkDirOperations(dir.getParent(), dir);\n        for (const currentDir of [dir, ...dir.getDescendants()])\n            operations.push(...currentDir.operations);\n        ArrayUtils.sortByProperty(operations, item => item.index);\n        this.removeDirAndSubDirs(dir);\n        return operations;\n        function getAndClearParentMkDirOperations(parentDir, childDir) {\n            if (parentDir == null)\n                return [];\n            const parentOperations = ArrayUtils.removeAll(parentDir.operations, operation => operation.kind === \"mkdir\" && operation.dir === childDir);\n            return [...parentOperations, ...getAndClearParentMkDirOperations(parentDir.getParent(), parentDir)];\n        }\n    }\n    async executeOperation(operation) {\n        switch (operation.kind) {\n            case \"deleteDir\":\n                await this.deleteSuppressNotFound(operation.dir.path);\n                break;\n            case \"deleteFile\":\n                await this.deleteSuppressNotFound(operation.filePath);\n                break;\n            case \"move\":\n                await this.fileSystem.move(operation.oldDir.path, operation.newDir.path);\n                break;\n            case \"copy\":\n                await this.fileSystem.copy(operation.oldDir.path, operation.newDir.path);\n                break;\n            case \"mkdir\":\n                await this.fileSystem.mkdir(operation.dir.path);\n                break;\n            default:\n                exports.errors.throwNotImplementedForNeverValueError(operation);\n        }\n    }\n    executeOperationSync(operation) {\n        switch (operation.kind) {\n            case \"deleteDir\":\n                this.deleteSuppressNotFoundSync(operation.dir.path);\n                break;\n            case \"deleteFile\":\n                this.deleteSuppressNotFoundSync(operation.filePath);\n                break;\n            case \"move\":\n                this.fileSystem.moveSync(operation.oldDir.path, operation.newDir.path);\n                break;\n            case \"copy\":\n                this.fileSystem.copySync(operation.oldDir.path, operation.newDir.path);\n                break;\n            case \"mkdir\":\n                this.fileSystem.mkdirSync(operation.dir.path);\n                break;\n            default:\n                exports.errors.throwNotImplementedForNeverValueError(operation);\n        }\n    }\n    getAndClearOperations() {\n        const operations = [];\n        for (const dir of this.directories.getValues())\n            operations.push(...dir.operations);\n        ArrayUtils.sortByProperty(operations, item => item.index);\n        this.directories.clear();\n        return operations;\n    }\n    async moveFileImmediately(oldFilePath, newFilePath, fileText) {\n        this.throwIfLibFile(newFilePath);\n        this.throwIfHasExternalOperations(this.getOrCreateParentDirectory(oldFilePath), \"move file\");\n        this.throwIfHasExternalOperations(this.getOrCreateParentDirectory(newFilePath), \"move file\");\n        await this.writeFile(newFilePath, fileText);\n        await this.deleteFileImmediately(oldFilePath);\n    }\n    moveFileImmediatelySync(oldFilePath, newFilePath, fileText) {\n        this.throwIfLibFile(newFilePath);\n        this.throwIfHasExternalOperations(this.getOrCreateParentDirectory(oldFilePath), \"move file\");\n        this.throwIfHasExternalOperations(this.getOrCreateParentDirectory(newFilePath), \"move file\");\n        this.writeFileSync(newFilePath, fileText);\n        this.deleteFileImmediatelySync(oldFilePath);\n    }\n    async deleteFileImmediately(filePath) {\n        this.throwIfLibFile(filePath);\n        const dir = this.getOrCreateParentDirectory(filePath);\n        this.throwIfHasExternalOperations(dir, \"delete file\");\n        dir.dequeueFileDelete(filePath);\n        this.pathCasingMaintainer.removePath(filePath);\n        try {\n            await this.deleteSuppressNotFound(filePath);\n        }\n        catch (err) {\n            this.queueFileDelete(filePath);\n            throw err;\n        }\n    }\n    deleteFileImmediatelySync(filePath) {\n        this.throwIfLibFile(filePath);\n        const dir = this.getOrCreateParentDirectory(filePath);\n        this.throwIfHasExternalOperations(dir, \"delete file\");\n        dir.dequeueFileDelete(filePath);\n        this.pathCasingMaintainer.removePath(filePath);\n        try {\n            this.deleteSuppressNotFoundSync(filePath);\n        }\n        catch (err) {\n            this.queueFileDelete(filePath);\n            throw err;\n        }\n    }\n    async copyDirectoryImmediately(srcDirPath, destDirPath) {\n        const srcDir = this.getOrCreateDirectory(srcDirPath);\n        const destDir = this.getOrCreateDirectory(destDirPath);\n        this.throwIfHasExternalOperations(srcDir, \"copy directory\");\n        this.throwIfHasExternalOperations(destDir, \"copy directory\");\n        const saveTask = Promise.all([this.saveForDirectory(srcDirPath), this.saveForDirectory(destDirPath)]);\n        this.removeDirAndSubDirs(srcDir);\n        await saveTask;\n        await this.fileSystem.copy(srcDirPath, destDirPath);\n    }\n    copyDirectoryImmediatelySync(srcDirPath, destDirPath) {\n        const srcDir = this.getOrCreateDirectory(srcDirPath);\n        const destDir = this.getOrCreateDirectory(destDirPath);\n        this.throwIfHasExternalOperations(srcDir, \"copy directory\");\n        this.throwIfHasExternalOperations(destDir, \"copy directory\");\n        this.saveForDirectorySync(srcDirPath);\n        this.saveForDirectorySync(destDirPath);\n        this.removeDirAndSubDirs(srcDir);\n        this.fileSystem.copySync(srcDirPath, destDirPath);\n    }\n    async moveDirectoryImmediately(srcDirPath, destDirPath) {\n        const srcDir = this.getOrCreateDirectory(srcDirPath);\n        const destDir = this.getOrCreateDirectory(destDirPath);\n        this.throwIfHasExternalOperations(srcDir, \"move directory\");\n        this.throwIfHasExternalOperations(destDir, \"move directory\");\n        const saveTask = Promise.all([this.saveForDirectory(srcDirPath), this.saveForDirectory(destDirPath)]);\n        this.removeDirAndSubDirs(srcDir);\n        this.pathCasingMaintainer.removePath(srcDirPath);\n        await saveTask;\n        await this.fileSystem.move(srcDirPath, destDirPath);\n    }\n    moveDirectoryImmediatelySync(srcDirPath, destDirPath) {\n        const srcDir = this.getOrCreateDirectory(srcDirPath);\n        const destDir = this.getOrCreateDirectory(destDirPath);\n        this.throwIfHasExternalOperations(srcDir, \"move directory\");\n        this.throwIfHasExternalOperations(destDir, \"move directory\");\n        this.saveForDirectorySync(srcDirPath);\n        this.saveForDirectorySync(destDirPath);\n        this.removeDirAndSubDirs(srcDir);\n        this.pathCasingMaintainer.removePath(srcDirPath);\n        this.fileSystem.moveSync(srcDirPath, destDirPath);\n    }\n    async deleteDirectoryImmediately(dirPath) {\n        const dir = this.getOrCreateDirectory(dirPath);\n        this.throwIfHasExternalOperations(dir, \"delete\");\n        this.removeDirAndSubDirs(dir);\n        this.pathCasingMaintainer.removePath(dirPath);\n        try {\n            await this.deleteSuppressNotFound(dirPath);\n        }\n        catch (err) {\n            this.addBackDirAndSubDirs(dir);\n            this.queueDirectoryDelete(dirPath);\n        }\n    }\n    async clearDirectoryImmediately(dirPath) {\n        await this.deleteDirectoryImmediately(dirPath);\n        this.getOrCreateDirectory(dirPath).setIsDeleted(false);\n        await this.fileSystem.mkdir(dirPath);\n    }\n    clearDirectoryImmediatelySync(dirPath) {\n        this.deleteDirectoryImmediatelySync(dirPath);\n        this.getOrCreateDirectory(dirPath).setIsDeleted(false);\n        this.fileSystem.mkdirSync(dirPath);\n    }\n    deleteDirectoryImmediatelySync(dirPath) {\n        const dir = this.getOrCreateDirectory(dirPath);\n        this.throwIfHasExternalOperations(dir, \"delete\");\n        this.removeDirAndSubDirs(dir);\n        this.pathCasingMaintainer.removePath(dirPath);\n        try {\n            this.deleteSuppressNotFoundSync(dirPath);\n        }\n        catch (err) {\n            this.addBackDirAndSubDirs(dir);\n            this.queueDirectoryDelete(dirPath);\n        }\n    }\n    async deleteSuppressNotFound(path) {\n        this.throwIfLibFile(path);\n        try {\n            await this.fileSystem.delete(path);\n        }\n        catch (err) {\n            if (!FileUtils.isNotExistsError(err))\n                throw err;\n        }\n    }\n    deleteSuppressNotFoundSync(path) {\n        this.throwIfLibFile(path);\n        try {\n            this.fileSystem.deleteSync(path);\n        }\n        catch (err) {\n            if (!FileUtils.isNotExistsError(err))\n                throw err;\n        }\n    }\n    fileExists(filePath) {\n        if (this.libFileExists(filePath))\n            return true;\n        if (this._fileDeletedInMemory(filePath))\n            return false;\n        return this.fileSystem.fileExists(filePath);\n    }\n    fileExistsSync(filePath) {\n        if (this.libFileExists(filePath))\n            return true;\n        if (this._fileDeletedInMemory(filePath))\n            return false;\n        return this.fileSystem.fileExistsSync(filePath);\n    }\n    _fileDeletedInMemory(filePath) {\n        if (this.isPathQueuedForDeletion(filePath))\n            return true;\n        const parentDir = this.getParentDirectoryIfExists(filePath);\n        if (parentDir != null && parentDir.getWasEverDeleted())\n            return true;\n        return false;\n    }\n    directoryExistsSync(dirPath) {\n        if (this.isPathQueuedForDeletion(dirPath))\n            return false;\n        if (this.isPathDirectoryInQueueThatExists(dirPath))\n            return true;\n        const dir = this.getDirectoryIfExists(dirPath);\n        if (dir != null && dir.getWasEverDeleted())\n            return false;\n        return this.fileSystem.directoryExistsSync(dirPath);\n    }\n    readFileIfExistsSync(filePath, encoding) {\n        if (this._fileDeletedInMemory(filePath))\n            return undefined;\n        try {\n            return this.readFileSync(filePath, encoding);\n        }\n        catch (err) {\n            if (err instanceof exports.errors.FileNotFoundError)\n                return undefined;\n            else\n                throw err;\n        }\n    }\n    readFileSync(filePath, encoding) {\n        const libFileText = this.readLibFile(filePath);\n        if (libFileText != null)\n            return libFileText;\n        this._verifyCanReadFile(filePath);\n        return this.fileSystem.readFileSync(filePath, encoding);\n    }\n    readFileIfExists(filePath, encoding) {\n        if (this._fileDeletedInMemory(filePath))\n            return Promise.resolve(undefined);\n        return this.readFile(filePath, encoding)\n            .catch(err => {\n            if (err instanceof exports.errors.FileNotFoundError)\n                return Promise.resolve(undefined);\n            else\n                return Promise.reject(err);\n        });\n    }\n    readFile(filePath, encoding) {\n        const libFileText = this.readLibFile(filePath);\n        if (libFileText != null)\n            return Promise.resolve(libFileText);\n        this._verifyCanReadFile(filePath);\n        return this.fileSystem.readFile(filePath, encoding);\n    }\n    _verifyCanReadFile(filePath) {\n        if (this.isPathQueuedForDeletion(filePath))\n            throw new exports.errors.InvalidOperationError(`Cannot read file at ${filePath} when it is queued for deletion.`);\n        if (this.getOrCreateParentDirectory(filePath).getWasEverDeleted())\n            throw new exports.errors.InvalidOperationError(`Cannot read file at ${filePath} because one of its ancestor directories was once deleted or moved.`);\n    }\n    readDirSync(dirPath) {\n        const dir = this.getOrCreateDirectory(dirPath);\n        if (dir.getIsDeleted())\n            throw new exports.errors.InvalidOperationError(`Cannot read directory at ${dirPath} when it is queued for deletion.`);\n        if (dir.getWasEverDeleted())\n            throw new exports.errors.InvalidOperationError(`Cannot read directory at ${dirPath} because one of its ancestor directories was once deleted or moved.`);\n        const uniqueDirPaths = new Map();\n        for (const entry of dir.getChildrenEntriesIterator())\n            uniqueDirPaths.set(entry.path, entry);\n        for (const runtimeDirEntry of this.fileSystem.readDirSync(dirPath)) {\n            const standardizedChildDirOrFilePath = this.getStandardizedAbsolutePath(runtimeDirEntry.name);\n            if (!this.isPathQueuedForDeletion(standardizedChildDirOrFilePath)) {\n                uniqueDirPaths.set(standardizedChildDirOrFilePath, {\n                    path: standardizedChildDirOrFilePath,\n                    isDirectory: runtimeDirEntry.isDirectory,\n                    isFile: runtimeDirEntry.isFile,\n                    isSymlink: runtimeDirEntry.isSymlink,\n                });\n            }\n        }\n        return ArrayUtils.sortByProperty(Array.from(uniqueDirPaths.values()), e => e.path);\n    }\n    async *glob(patterns) {\n        const filePaths = await this.fileSystem.glob(patterns);\n        for (const filePath of filePaths) {\n            const standardizedFilePath = this.getStandardizedAbsolutePath(filePath);\n            if (!this.isPathQueuedForDeletion(standardizedFilePath))\n                yield standardizedFilePath;\n        }\n    }\n    *globSync(patterns) {\n        const filePaths = this.fileSystem.globSync(patterns);\n        for (const filePath of filePaths) {\n            const standardizedFilePath = this.getStandardizedAbsolutePath(filePath);\n            if (!this.isPathQueuedForDeletion(standardizedFilePath))\n                yield standardizedFilePath;\n        }\n    }\n    getFileSystem() {\n        return this.fileSystem;\n    }\n    getCurrentDirectory() {\n        return this.getStandardizedAbsolutePath(this.fileSystem.getCurrentDirectory());\n    }\n    getDirectories(dirPath) {\n        return this.readDirSync(dirPath).filter(entry => entry.isDirectory).map(d => d.path);\n    }\n    realpathSync(path) {\n        if (this.libFileExists(path))\n            return path;\n        try {\n            return this.getStandardizedAbsolutePath(this.fileSystem.realpathSync(path));\n        }\n        catch (_a) {\n            return path;\n        }\n    }\n    getStandardizedAbsolutePath(fileOrDirPath, relativeBase) {\n        const standardizedFileOrDirPath = FileUtils.getStandardizedAbsolutePath(this.fileSystem, fileOrDirPath, relativeBase);\n        return this.pathCasingMaintainer.getPath(standardizedFileOrDirPath);\n    }\n    readFileOrNotExists(filePath, encoding) {\n        const libFileText = this.readLibFile(filePath);\n        if (libFileText != null)\n            return Promise.resolve(libFileText);\n        if (this.isPathQueuedForDeletion(filePath))\n            return false;\n        return FileUtils.readFileOrNotExists(this.fileSystem, filePath, encoding);\n    }\n    readFileOrNotExistsSync(filePath, encoding) {\n        const libFileText = this.readLibFile(filePath);\n        if (libFileText != null)\n            return libFileText;\n        if (this.isPathQueuedForDeletion(filePath))\n            return false;\n        return FileUtils.readFileOrNotExistsSync(this.fileSystem, filePath, encoding);\n    }\n    async writeFile(filePath, fileText) {\n        this.throwIfLibFile(filePath);\n        const parentDir = this.getOrCreateParentDirectory(filePath);\n        this.throwIfHasExternalOperations(parentDir, \"write file\");\n        parentDir.dequeueFileDelete(filePath);\n        await this.ensureDirectoryExists(parentDir);\n        await this.fileSystem.writeFile(filePath, fileText);\n    }\n    writeFileSync(filePath, fileText) {\n        this.throwIfLibFile(filePath);\n        const parentDir = this.getOrCreateParentDirectory(filePath);\n        this.throwIfHasExternalOperations(parentDir, \"write file\");\n        parentDir.dequeueFileDelete(filePath);\n        this.ensureDirectoryExistsSync(parentDir);\n        this.fileSystem.writeFileSync(filePath, fileText);\n    }\n    isPathDirectoryInQueueThatExists(path) {\n        const pathDir = this.getDirectoryIfExists(path);\n        return pathDir == null ? false : !pathDir.getIsDeleted();\n    }\n    isPathQueuedForDeletion(path) {\n        const pathDir = this.getDirectoryIfExists(path);\n        if (pathDir != null)\n            return pathDir.getIsDeleted();\n        const parentDir = this.getParentDirectoryIfExists(path);\n        if (parentDir == null)\n            return false;\n        return parentDir.isFileQueuedForDelete(path) || parentDir.getIsDeleted();\n    }\n    removeDirAndSubDirs(dir) {\n        const originalParent = dir.getParent();\n        dir.removeParent();\n        for (const dirToRemove of [dir, ...dir.getDescendants()])\n            this.directories.removeByKey(dirToRemove.path);\n        if (originalParent != null)\n            originalParent.dequeueDirDelete(dir.path);\n    }\n    addBackDirAndSubDirs(dir) {\n        for (const dirToAdd of [dir, ...dir.getDescendants()])\n            this.directories.set(dirToAdd.path, dirToAdd);\n        if (!dir.isRootDir())\n            dir.setParent(this.getOrCreateParentDirectory(dir.path));\n    }\n    getNextOperationIndex() {\n        return this.operationIndex++;\n    }\n    getParentDirectoryIfExists(filePath) {\n        return this.getDirectoryIfExists(FileUtils.getDirPath(filePath));\n    }\n    getOrCreateParentDirectory(filePath) {\n        return this.getOrCreateDirectory(FileUtils.getDirPath(filePath));\n    }\n    getDirectoryIfExists(dirPath) {\n        return this.directories.get(dirPath);\n    }\n    getOrCreateDirectory(dirPath) {\n        let dir = this.directories.get(dirPath);\n        if (dir != null)\n            return dir;\n        const getOrCreateDir = (creatingDirPath) => this.directories.getOrCreate(creatingDirPath, () => new Directory(creatingDirPath));\n        dir = getOrCreateDir(dirPath);\n        let currentDirPath = dirPath;\n        let currentDir = dir;\n        while (!FileUtils.isRootDirPath(currentDirPath)) {\n            const nextDirPath = FileUtils.getDirPath(currentDirPath);\n            const hadNextDir = this.directories.has(nextDirPath);\n            const nextDir = getOrCreateDir(nextDirPath);\n            currentDir.setParent(nextDir);\n            if (hadNextDir)\n                return dir;\n            currentDir = nextDir;\n            currentDirPath = nextDirPath;\n        }\n        return dir;\n    }\n    throwIfHasExternalOperations(dir, commandName) {\n        const operations = dir.getExternalOperations();\n        if (operations.length === 0)\n            return;\n        throw new exports.errors.InvalidOperationError(getErrorText());\n        function getErrorText() {\n            let hasCopy = false;\n            let errorText = `Cannot execute immediate operation '${commandName}' because of the following external operations:\\n`;\n            for (const operation of operations) {\n                if (operation.kind === \"move\")\n                    errorText += `\\n* Move: ${operation.oldDir.path} --> ${operation.newDir.path}`;\n                else if (operation.kind === \"copy\") {\n                    errorText += `\\n* Copy: ${operation.oldDir.path} --> ${operation.newDir.path}`;\n                    hasCopy = true;\n                }\n                else if (operation.kind === \"deleteDir\")\n                    errorText += `\\n* Delete: ${operation.dir.path}`;\n                else {\n                    errorText += `\\n* Unknown operation: Please report this as a bug.`;\n                }\n            }\n            if (hasCopy)\n                errorText += \"\\n\\nNote: Copy operations can be removed from external operations by setting `includeUntrackedFiles` to `false` when copying.\";\n            return errorText;\n        }\n    }\n    async ensureDirectoryExists(dir) {\n        if (dir.isRootDir())\n            return;\n        this.removeMkDirOperationsForDir(dir);\n        await this.fileSystem.mkdir(dir.path);\n    }\n    ensureDirectoryExistsSync(dir) {\n        if (dir.isRootDir())\n            return;\n        this.removeMkDirOperationsForDir(dir);\n        this.fileSystem.mkdirSync(dir.path);\n    }\n    removeMkDirOperationsForDir(dir) {\n        const parentDir = dir.getParent();\n        if (parentDir != null) {\n            ArrayUtils.removeAll(parentDir.operations, operation => operation.kind === \"mkdir\" && operation.dir === dir);\n            this.removeMkDirOperationsForDir(parentDir);\n        }\n    }\n    libFileExists(filePath) {\n        return this.libFileMap != null && this.libFileMap.has(filePath);\n    }\n    readLibFile(filePath) {\n        if (this.libFileMap != null)\n            return this.libFileMap.get(filePath);\n        else\n            return undefined;\n    }\n    throwIfLibFile(filePath) {\n        if (this.libFileExists(filePath))\n            throw new exports.errors.InvalidOperationError(`This operation is not permitted on an in memory lib folder file.`);\n    }\n}\nclass PathCasingMaintainer {\n    constructor(fileSystem) {\n        if (fileSystem.isCaseSensitive != null && !fileSystem.isCaseSensitive())\n            this.caseInsensitiveMappings = new Map();\n    }\n    getPath(fileOrDirPath) {\n        if (this.caseInsensitiveMappings == null)\n            return fileOrDirPath;\n        const key = fileOrDirPath.toLowerCase();\n        let path = this.caseInsensitiveMappings.get(key);\n        if (path == null) {\n            path = fileOrDirPath;\n            this.caseInsensitiveMappings.set(key, path);\n        }\n        return path;\n    }\n    removePath(dirPath) {\n        if (this.caseInsensitiveMappings == null)\n            return;\n        this.caseInsensitiveMappings.delete(dirPath.toLowerCase());\n    }\n}\n\nfunction createModuleResolutionHost(options) {\n    const { transactionalFileSystem, sourceFileContainer, getEncoding } = options;\n    return {\n        directoryExists: dirName => {\n            const dirPath = transactionalFileSystem.getStandardizedAbsolutePath(dirName);\n            if (sourceFileContainer.containsDirectoryAtPath(dirPath))\n                return true;\n            return transactionalFileSystem.directoryExistsSync(dirPath);\n        },\n        fileExists: fileName => {\n            const filePath = transactionalFileSystem.getStandardizedAbsolutePath(fileName);\n            if (sourceFileContainer.containsSourceFileAtPath(filePath))\n                return true;\n            return transactionalFileSystem.fileExistsSync(filePath);\n        },\n        readFile: fileName => {\n            const filePath = transactionalFileSystem.getStandardizedAbsolutePath(fileName);\n            const sourceFile = sourceFileContainer.getSourceFileFromCacheFromFilePath(filePath);\n            if (sourceFile != null)\n                return sourceFile.getFullText();\n            try {\n                return transactionalFileSystem.readFileSync(filePath, getEncoding());\n            }\n            catch (err) {\n                if (FileUtils.isNotExistsError(err))\n                    return undefined;\n                throw err;\n            }\n        },\n        getCurrentDirectory: () => transactionalFileSystem.getCurrentDirectory(),\n        getDirectories: dirName => {\n            const dirPath = transactionalFileSystem.getStandardizedAbsolutePath(dirName);\n            const dirs = new Set(transactionalFileSystem.readDirSync(dirPath).map(e => e.path));\n            for (const childDirPath of sourceFileContainer.getChildDirectoriesOfDirectory(dirPath))\n                dirs.add(childDirPath);\n            return Array.from(dirs);\n        },\n        realpath: path => transactionalFileSystem.realpathSync(transactionalFileSystem.getStandardizedAbsolutePath(path)),\n    };\n}\n\nclass DocumentRegistry {\n    constructor(transactionalFileSystem) {\n        this.transactionalFileSystem = transactionalFileSystem;\n        this.sourceFileCacheByFilePath = new Map();\n    }\n    createOrUpdateSourceFile(fileName, compilationSettings, scriptSnapshot, scriptKind) {\n        let sourceFile = this.sourceFileCacheByFilePath.get(fileName);\n        if (sourceFile == null)\n            sourceFile = this.updateSourceFile(fileName, compilationSettings, scriptSnapshot, DocumentRegistry.initialVersion, scriptKind);\n        else\n            sourceFile = this.updateSourceFile(fileName, compilationSettings, scriptSnapshot, this.getNextSourceFileVersion(sourceFile), scriptKind);\n        return sourceFile;\n    }\n    removeSourceFile(fileName) {\n        this.sourceFileCacheByFilePath.delete(fileName);\n    }\n    acquireDocument(fileName, compilationSettings, scriptSnapshot, version, scriptKind) {\n        const standardizedFilePath = this.transactionalFileSystem.getStandardizedAbsolutePath(fileName);\n        let sourceFile = this.sourceFileCacheByFilePath.get(standardizedFilePath);\n        if (sourceFile == null || this.getSourceFileVersion(sourceFile) !== version)\n            sourceFile = this.updateSourceFile(standardizedFilePath, compilationSettings, scriptSnapshot, version, scriptKind);\n        return sourceFile;\n    }\n    acquireDocumentWithKey(fileName, path, compilationSettings, key, scriptSnapshot, version, scriptKind) {\n        return this.acquireDocument(fileName, compilationSettings, scriptSnapshot, version, scriptKind);\n    }\n    updateDocument(fileName, compilationSettings, scriptSnapshot, version, scriptKind) {\n        return this.acquireDocument(fileName, compilationSettings, scriptSnapshot, version, scriptKind);\n    }\n    updateDocumentWithKey(fileName, path, compilationSettings, key, scriptSnapshot, version, scriptKind) {\n        return this.updateDocument(fileName, compilationSettings, scriptSnapshot, version, scriptKind);\n    }\n    getKeyForCompilationSettings(settings) {\n        return \"defaultKey\";\n    }\n    releaseDocument(fileName, compilationSettings) {\n    }\n    releaseDocumentWithKey(path, key) {\n    }\n    reportStats() {\n        throw new exports.errors.NotImplementedError();\n    }\n    getSourceFileVersion(sourceFile) {\n        return sourceFile.version || \"0\";\n    }\n    getNextSourceFileVersion(sourceFile) {\n        const currentVersion = parseInt(this.getSourceFileVersion(sourceFile), 10) || 0;\n        return (currentVersion + 1).toString();\n    }\n    updateSourceFile(fileName, compilationSettings, scriptSnapshot, version, scriptKind) {\n        const newSourceFile = createCompilerSourceFile(fileName, scriptSnapshot, compilationSettings.target, version, true, scriptKind);\n        this.sourceFileCacheByFilePath.set(fileName, newSourceFile);\n        return newSourceFile;\n    }\n}\nDocumentRegistry.initialVersion = \"0\";\n\nconst denoResolutionHostFactory = (moduleResolutionHost, getCompilerOptions) => {\n    return {\n        resolveModuleNames: (moduleNames, containingFile) => {\n            const compilerOptions = getCompilerOptions();\n            const resolvedModules = [];\n            for (const moduleName of moduleNames.map(removeTsExtension)) {\n                const result = ts__namespace.resolveModuleName(moduleName, containingFile, compilerOptions, moduleResolutionHost);\n                if (result.resolvedModule)\n                    resolvedModules.push(result.resolvedModule);\n            }\n            return resolvedModules;\n        },\n    };\n    function removeTsExtension(moduleName) {\n        if (moduleName.slice(-3).toLowerCase() === \".ts\")\n            return moduleName.slice(0, -3);\n        return moduleName;\n    }\n};\nconst ResolutionHosts = {\n    deno: denoResolutionHostFactory,\n};\n\nfunction Memoize(target, propertyName, descriptor) {\n    if (descriptor.value != null)\n        descriptor.value = getNewFunction(descriptor.value);\n    else if (descriptor.get != null)\n        descriptor.get = getNewFunction(descriptor.get);\n    else\n        throw new Error(\"Only put a Memoize decorator on a method or get accessor.\");\n}\nconst weakMap = new WeakMap();\nlet counter = 0;\nfunction getNewFunction(originalFunction) {\n    const identifier = counter++;\n    function decorator(...args) {\n        let propertyValues = weakMap.get(this);\n        if (propertyValues == null) {\n            propertyValues = new Map();\n            weakMap.set(this, propertyValues);\n        }\n        let propName = `__memoized_value_${identifier}`;\n        if (arguments.length > 0)\n            propName += \"_\" + JSON.stringify(args);\n        let returnedValue;\n        if (propertyValues.has(propName))\n            returnedValue = propertyValues.get(propName);\n        else {\n            returnedValue = originalFunction.apply(this, args);\n            propertyValues.set(propName, returnedValue);\n        }\n        return returnedValue;\n    }\n    return decorator;\n}\n\nclass SettingsContainer {\n    constructor(defaultSettings) {\n        this._defaultSettings = ObjectUtils.assign({}, defaultSettings);\n        this._settings = defaultSettings;\n    }\n    reset() {\n        this._settings = ObjectUtils.assign({}, this._defaultSettings);\n        this._fireModified();\n    }\n    get() {\n        return ObjectUtils.assign({}, this._settings);\n    }\n    set(settings) {\n        ObjectUtils.assign(this._settings, settings);\n        this._fireModified();\n    }\n    onModified(action) {\n        if (this._modifiedEventContainer == null)\n            this._modifiedEventContainer = new EventContainer();\n        this._modifiedEventContainer.subscribe(action);\n    }\n    _fireModified() {\n        if (this._modifiedEventContainer != null)\n            this._modifiedEventContainer.fire(undefined);\n    }\n}\n\nclass CompilerOptionsContainer extends SettingsContainer {\n    constructor() {\n        super({});\n    }\n    set(settings) {\n        super.set(settings);\n    }\n    getEncoding() {\n        return this._settings.charset || \"utf-8\";\n    }\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\n\nfunction readDirectory(fileSystemWrapper, useCaseSensitiveFileNames, rootDir, extensions, excludes, includes, depth) {\n    const currentDir = fileSystemWrapper.getCurrentDirectory();\n    const directories = [];\n    const regexFlag = useCaseSensitiveFileNames ? \"\" : \"i\";\n    const patterns = getFileMatcherPatterns(rootDir, excludes || [], includes, useCaseSensitiveFileNames, currentDir);\n    const includeDirectoryRegex = patterns.includeDirectoryPattern && new RegExp(patterns.includeDirectoryPattern, regexFlag);\n    const excludeRegex = patterns.excludePattern && new RegExp(patterns.excludePattern, regexFlag);\n    return {\n        files: matchFiles(rootDir, extensions, excludes || [], includes, useCaseSensitiveFileNames, currentDir, depth, path => {\n            const includeDir = dirPathMatches(path);\n            const standardizedPath = fileSystemWrapper.getStandardizedAbsolutePath(path);\n            if (includeDir)\n                directories.push(standardizedPath);\n            return getFileSystemEntries(standardizedPath, fileSystemWrapper);\n        }, path => fileSystemWrapper.realpathSync(fileSystemWrapper.getStandardizedAbsolutePath(path)), path => fileSystemWrapper.directoryExistsSync(fileSystemWrapper.getStandardizedAbsolutePath(path))),\n        directories,\n    };\n    function dirPathMatches(absoluteName) {\n        if (absoluteName[absoluteName.length - 1] !== \"/\")\n            absoluteName += \"/\";\n        return (!includeDirectoryRegex || includeDirectoryRegex.test(absoluteName))\n            && (!excludeRegex || !excludeRegex.test(absoluteName));\n    }\n}\nfunction getFileSystemEntries(path, fileSystemWrapper) {\n    const files = [];\n    const directories = [];\n    try {\n        const entries = fileSystemWrapper.readDirSync(path);\n        for (const entry of entries) {\n            if (entry.isFile)\n                files.push(entry.path);\n            else if (entry.isDirectory)\n                directories.push(entry.path);\n        }\n    }\n    catch (err) {\n        if (!FileUtils.isNotExistsError(err))\n            throw err;\n    }\n    return { files, directories };\n}\n\nfunction getTsParseConfigHost(fileSystemWrapper, options) {\n    const directories = [];\n    const useCaseSensitiveFileNames = false;\n    const host = {\n        useCaseSensitiveFileNames,\n        readDirectory: (rootDir, extensions, excludes, includes, depth) => {\n            const result = readDirectory(fileSystemWrapper, useCaseSensitiveFileNames, rootDir, extensions, excludes, includes, depth);\n            directories.push(...result.directories);\n            return result.files;\n        },\n        fileExists: path => fileSystemWrapper.fileExistsSync(fileSystemWrapper.getStandardizedAbsolutePath(path)),\n        readFile: path => fileSystemWrapper.readFileSync(fileSystemWrapper.getStandardizedAbsolutePath(path), options.encoding),\n        getDirectories: () => [...directories],\n        clearDirectories: () => directories.length = 0,\n    };\n    return host;\n}\n\nclass TsConfigResolver {\n    constructor(fileSystem, tsConfigFilePath, encoding) {\n        this.fileSystem = fileSystem;\n        this.encoding = encoding;\n        this.host = getTsParseConfigHost(fileSystem, { encoding });\n        this.tsConfigFilePath = fileSystem.getStandardizedAbsolutePath(tsConfigFilePath);\n        this.tsConfigDirPath = FileUtils.getDirPath(this.tsConfigFilePath);\n    }\n    getCompilerOptions() {\n        return this.parseJsonConfigFileContent().options;\n    }\n    getErrors() {\n        return this.parseJsonConfigFileContent().errors || [];\n    }\n    getPaths(compilerOptions) {\n        const files = new Set();\n        const { fileSystem } = this;\n        const directories = new Set();\n        compilerOptions = compilerOptions || this.getCompilerOptions();\n        const configFileContent = this.parseJsonConfigFileContent();\n        for (let dirName of configFileContent.directories) {\n            const dirPath = fileSystem.getStandardizedAbsolutePath(dirName);\n            if (fileSystem.directoryExistsSync(dirPath))\n                directories.add(dirPath);\n        }\n        for (let fileName of configFileContent.fileNames) {\n            const filePath = fileSystem.getStandardizedAbsolutePath(fileName);\n            const parentDirPath = FileUtils.getDirPath(filePath);\n            if (fileSystem.fileExistsSync(filePath)) {\n                directories.add(parentDirPath);\n                files.add(filePath);\n            }\n        }\n        return {\n            filePaths: Array.from(files.values()),\n            directoryPaths: Array.from(directories.values()),\n        };\n    }\n    parseJsonConfigFileContent() {\n        this.host.clearDirectories();\n        const result = ts__namespace.parseJsonConfigFileContent(this.getTsConfigFileJson(), this.host, this.tsConfigDirPath, undefined, this.tsConfigFilePath);\n        return { ...result, directories: this.host.getDirectories() };\n    }\n    getTsConfigFileJson() {\n        const text = this.fileSystem.readFileSync(this.tsConfigFilePath, this.encoding);\n        const parseResult = ts__namespace.parseConfigFileTextToJson(this.tsConfigFilePath, text);\n        if (parseResult.error != null)\n            throw new Error(parseResult.error.messageText.toString());\n        return parseResult.config;\n    }\n}\n__decorate([\n    Memoize\n], TsConfigResolver.prototype, \"getCompilerOptions\", null);\n__decorate([\n    Memoize\n], TsConfigResolver.prototype, \"getErrors\", null);\n__decorate([\n    Memoize\n], TsConfigResolver.prototype, \"getPaths\", null);\n__decorate([\n    Memoize\n], TsConfigResolver.prototype, \"parseJsonConfigFileContent\", null);\n__decorate([\n    Memoize\n], TsConfigResolver.prototype, \"getTsConfigFileJson\", null);\n\nfunction getCompilerOptionsFromTsConfig(filePath, options = {}) {\n    const fileSystemWrapper = new TransactionalFileSystem({\n        fileSystem: options.fileSystem || new RealFileSystemHost(),\n        skipLoadingLibFiles: false,\n        libFolderPath: undefined,\n    });\n    const tsConfigResolver = new TsConfigResolver(fileSystemWrapper, fileSystemWrapper.getStandardizedAbsolutePath(filePath), options.encoding || \"utf-8\");\n    return {\n        options: tsConfigResolver.getCompilerOptions(),\n        errors: tsConfigResolver.getErrors(),\n    };\n}\n\nObject.defineProperty(exports, 'DiagnosticCategory', {\n  enumerable: true,\n  get: function () { return ts.DiagnosticCategory; }\n});\nObject.defineProperty(exports, 'EmitHint', {\n  enumerable: true,\n  get: function () { return ts.EmitHint; }\n});\nObject.defineProperty(exports, 'LanguageVariant', {\n  enumerable: true,\n  get: function () { return ts.LanguageVariant; }\n});\nObject.defineProperty(exports, 'ModuleKind', {\n  enumerable: true,\n  get: function () { return ts.ModuleKind; }\n});\nObject.defineProperty(exports, 'ModuleResolutionKind', {\n  enumerable: true,\n  get: function () { return ts.ModuleResolutionKind; }\n});\nObject.defineProperty(exports, 'NewLineKind', {\n  enumerable: true,\n  get: function () { return ts.NewLineKind; }\n});\nObject.defineProperty(exports, 'NodeFlags', {\n  enumerable: true,\n  get: function () { return ts.NodeFlags; }\n});\nObject.defineProperty(exports, 'ObjectFlags', {\n  enumerable: true,\n  get: function () { return ts.ObjectFlags; }\n});\nObject.defineProperty(exports, 'ScriptKind', {\n  enumerable: true,\n  get: function () { return ts.ScriptKind; }\n});\nObject.defineProperty(exports, 'ScriptTarget', {\n  enumerable: true,\n  get: function () { return ts.ScriptTarget; }\n});\nObject.defineProperty(exports, 'SymbolFlags', {\n  enumerable: true,\n  get: function () { return ts.SymbolFlags; }\n});\nObject.defineProperty(exports, 'SyntaxKind', {\n  enumerable: true,\n  get: function () { return ts.SyntaxKind; }\n});\nObject.defineProperty(exports, 'TypeFlags', {\n  enumerable: true,\n  get: function () { return ts.TypeFlags; }\n});\nObject.defineProperty(exports, 'TypeFormatFlags', {\n  enumerable: true,\n  get: function () { return ts.TypeFormatFlags; }\n});\nexports.ts = ts__namespace;\nexports.ArrayUtils = ArrayUtils;\nexports.ComparerToStoredComparer = ComparerToStoredComparer;\nexports.CompilerOptionsContainer = CompilerOptionsContainer;\nexports.DocumentRegistry = DocumentRegistry;\nexports.EventContainer = EventContainer;\nexports.FileUtils = FileUtils;\nexports.InMemoryFileSystemHost = InMemoryFileSystemHost;\nexports.IterableUtils = IterableUtils;\nexports.KeyValueCache = KeyValueCache;\nexports.LocaleStringComparer = LocaleStringComparer;\nexports.Memoize = Memoize;\nexports.ObjectUtils = ObjectUtils;\nexports.PropertyComparer = PropertyComparer;\nexports.PropertyStoredComparer = PropertyStoredComparer;\nexports.RealFileSystemHost = RealFileSystemHost;\nexports.ResolutionHosts = ResolutionHosts;\nexports.SettingsContainer = SettingsContainer;\nexports.SortedKeyValueArray = SortedKeyValueArray;\nexports.StringUtils = StringUtils;\nexports.TransactionalFileSystem = TransactionalFileSystem;\nexports.TsConfigResolver = TsConfigResolver;\nexports.WeakCache = WeakCache;\nexports.createDocumentCache = createDocumentCache;\nexports.createHosts = createHosts;\nexports.createModuleResolutionHost = createModuleResolutionHost;\nexports.deepClone = deepClone;\nexports.getCompilerOptionsFromTsConfig = getCompilerOptionsFromTsConfig;\nexports.getEmitModuleResolutionKind = getEmitModuleResolutionKind;\nexports.getFileMatcherPatterns = getFileMatcherPatterns;\nexports.getLibFiles = getLibFiles;\nexports.getLibFolderPath = getLibFolderPath;\nexports.getSyntaxKindName = getSyntaxKindName;\nexports.libFolderInMemoryPath = libFolderInMemoryPath;\nexports.matchFiles = matchFiles;\nexports.matchGlobs = matchGlobs;\nexports.nameof = nameof;\nexports.runtime = runtime;\n",null,"'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    if(a===b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","var balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m) return [str];\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  if (/\\$$/.test(m.pre)) {    \n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre+ '{' + m.body + '}' + post[k];\n      expansions.push(expansion);\n    }\n  } else {\n    var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isSequence = isNumericSequence || isAlphaSequence;\n    var isOptions = m.body.indexOf(',') >= 0;\n    if (!isSequence && !isOptions) {\n      // {a},b}\n      if (m.post.match(/,.*\\}/)) {\n        str = m.pre + '{' + m.body + escClose + m.post;\n        return expand(str);\n      }\n      return [str];\n    }\n\n    var n;\n    if (isSequence) {\n      n = m.body.split(/\\.\\./);\n    } else {\n      n = parseCommaParts(m.body);\n      if (n.length === 1) {\n        // x{{a,b}}y ==> x{a}y x{b}y\n        n = expand(n[0], false).map(embrace);\n        if (n.length === 1) {\n          return post.map(function(p) {\n            return m.pre + n[0] + p;\n          });\n        }\n      }\n    }\n\n    // at this point, n is the parts, and we know it's not a comma set\n    // with a single entry.\n    var N;\n\n    if (isSequence) {\n      var x = numeric(n[0]);\n      var y = numeric(n[1]);\n      var width = Math.max(n[0].length, n[1].length)\n      var incr = n.length == 3\n        ? Math.abs(numeric(n[2]))\n        : 1;\n      var test = lte;\n      var reverse = y < x;\n      if (reverse) {\n        incr *= -1;\n        test = gte;\n      }\n      var pad = n.some(isPadded);\n\n      N = [];\n\n      for (var i = x; test(i, y); i += incr) {\n        var c;\n        if (isAlphaSequence) {\n          c = String.fromCharCode(i);\n          if (c === '\\\\')\n            c = '';\n        } else {\n          c = String(i);\n          if (pad) {\n            var need = width - c.length;\n            if (need > 0) {\n              var z = new Array(need + 1).join('0');\n              if (i < 0)\n                c = '-' + z + c.slice(1);\n              else\n                c = z + c;\n            }\n          }\n        }\n        N.push(c);\n      }\n    } else {\n      N = [];\n\n      for (var j = 0; j < n.length; j++) {\n        N.push.apply(N, expand(n[j], false));\n      }\n    }\n\n    for (var j = 0; j < N.length; j++) {\n      for (var k = 0; k < post.length; k++) {\n        var expansion = pre + N[j] + post[k];\n        if (!isTop || isSequence || expansion)\n          expansions.push(expansion);\n      }\n    }\n  }\n\n  return expansions;\n}\n\n","'use strict';\n\nconst stringify = require('./lib/stringify');\nconst compile = require('./lib/compile');\nconst expand = require('./lib/expand');\nconst parse = require('./lib/parse');\n\n/**\n * Expand the given pattern or create a regex-compatible string.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']\n * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {String}\n * @api public\n */\n\nconst braces = (input, options = {}) => {\n  let output = [];\n\n  if (Array.isArray(input)) {\n    for (const pattern of input) {\n      const result = braces.create(pattern, options);\n      if (Array.isArray(result)) {\n        output.push(...result);\n      } else {\n        output.push(result);\n      }\n    }\n  } else {\n    output = [].concat(braces.create(input, options));\n  }\n\n  if (options && options.expand === true && options.nodupes === true) {\n    output = [...new Set(output)];\n  }\n  return output;\n};\n\n/**\n * Parse the given `str` with the given `options`.\n *\n * ```js\n * // braces.parse(pattern, [, options]);\n * const ast = braces.parse('a/{b,c}/d');\n * console.log(ast);\n * ```\n * @param {String} pattern Brace pattern to parse\n * @param {Object} options\n * @return {Object} Returns an AST\n * @api public\n */\n\nbraces.parse = (input, options = {}) => parse(input, options);\n\n/**\n * Creates a braces string from an AST, or an AST node.\n *\n * ```js\n * const braces = require('braces');\n * let ast = braces.parse('foo/{a,b}/bar');\n * console.log(stringify(ast.nodes[2])); //=> '{a,b}'\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.stringify = (input, options = {}) => {\n  if (typeof input === 'string') {\n    return stringify(braces.parse(input, options), options);\n  }\n  return stringify(input, options);\n};\n\n/**\n * Compiles a brace pattern into a regex-compatible, optimized string.\n * This method is called by the main [braces](#braces) function by default.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.compile('a/{b,c}/d'));\n * //=> ['a/(b|c)/d']\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.compile = (input, options = {}) => {\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n  return compile(input, options);\n};\n\n/**\n * Expands a brace pattern into an array. This method is called by the\n * main [braces](#braces) function when `options.expand` is true. Before\n * using this method it's recommended that you read the [performance notes](#performance))\n * and advantages of using [.compile](#compile) instead.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.expand('a/{b,c}/d'));\n * //=> ['a/b/d', 'a/c/d'];\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.expand = (input, options = {}) => {\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n\n  let result = expand(input, options);\n\n  // filter out empty strings if specified\n  if (options.noempty === true) {\n    result = result.filter(Boolean);\n  }\n\n  // filter out duplicates if specified\n  if (options.nodupes === true) {\n    result = [...new Set(result)];\n  }\n\n  return result;\n};\n\n/**\n * Processes a brace pattern and returns either an expanded array\n * (if `options.expand` is true), a highly optimized regex-compatible string.\n * This method is called by the main [braces](#braces) function.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))\n * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.create = (input, options = {}) => {\n  if (input === '' || input.length < 3) {\n    return [input];\n  }\n\n  return options.expand !== true\n    ? braces.compile(input, options)\n    : braces.expand(input, options);\n};\n\n/**\n * Expose \"braces\"\n */\n\nmodule.exports = braces;\n","'use strict';\n\nconst fill = require('fill-range');\nconst utils = require('./utils');\n\nconst compile = (ast, options = {}) => {\n  const walk = (node, parent = {}) => {\n    const invalidBlock = utils.isInvalidBrace(parent);\n    const invalidNode = node.invalid === true && options.escapeInvalid === true;\n    const invalid = invalidBlock === true || invalidNode === true;\n    const prefix = options.escapeInvalid === true ? '\\\\' : '';\n    let output = '';\n\n    if (node.isOpen === true) {\n      return prefix + node.value;\n    }\n\n    if (node.isClose === true) {\n      console.log('node.isClose', prefix, node.value);\n      return prefix + node.value;\n    }\n\n    if (node.type === 'open') {\n      return invalid ? prefix + node.value : '(';\n    }\n\n    if (node.type === 'close') {\n      return invalid ? prefix + node.value : ')';\n    }\n\n    if (node.type === 'comma') {\n      return node.prev.type === 'comma' ? '' : invalid ? node.value : '|';\n    }\n\n    if (node.value) {\n      return node.value;\n    }\n\n    if (node.nodes && node.ranges > 0) {\n      const args = utils.reduce(node.nodes);\n      const range = fill(...args, { ...options, wrap: false, toRegex: true, strictZeros: true });\n\n      if (range.length !== 0) {\n        return args.length > 1 && range.length > 1 ? `(${range})` : range;\n      }\n    }\n\n    if (node.nodes) {\n      for (const child of node.nodes) {\n        output += walk(child, node);\n      }\n    }\n\n    return output;\n  };\n\n  return walk(ast);\n};\n\nmodule.exports = compile;\n","'use strict';\n\nmodule.exports = {\n  MAX_LENGTH: 10000,\n\n  // Digits\n  CHAR_0: '0', /* 0 */\n  CHAR_9: '9', /* 9 */\n\n  // Alphabet chars.\n  CHAR_UPPERCASE_A: 'A', /* A */\n  CHAR_LOWERCASE_A: 'a', /* a */\n  CHAR_UPPERCASE_Z: 'Z', /* Z */\n  CHAR_LOWERCASE_Z: 'z', /* z */\n\n  CHAR_LEFT_PARENTHESES: '(', /* ( */\n  CHAR_RIGHT_PARENTHESES: ')', /* ) */\n\n  CHAR_ASTERISK: '*', /* * */\n\n  // Non-alphabetic chars.\n  CHAR_AMPERSAND: '&', /* & */\n  CHAR_AT: '@', /* @ */\n  CHAR_BACKSLASH: '\\\\', /* \\ */\n  CHAR_BACKTICK: '`', /* ` */\n  CHAR_CARRIAGE_RETURN: '\\r', /* \\r */\n  CHAR_CIRCUMFLEX_ACCENT: '^', /* ^ */\n  CHAR_COLON: ':', /* : */\n  CHAR_COMMA: ',', /* , */\n  CHAR_DOLLAR: '$', /* . */\n  CHAR_DOT: '.', /* . */\n  CHAR_DOUBLE_QUOTE: '\"', /* \" */\n  CHAR_EQUAL: '=', /* = */\n  CHAR_EXCLAMATION_MARK: '!', /* ! */\n  CHAR_FORM_FEED: '\\f', /* \\f */\n  CHAR_FORWARD_SLASH: '/', /* / */\n  CHAR_HASH: '#', /* # */\n  CHAR_HYPHEN_MINUS: '-', /* - */\n  CHAR_LEFT_ANGLE_BRACKET: '<', /* < */\n  CHAR_LEFT_CURLY_BRACE: '{', /* { */\n  CHAR_LEFT_SQUARE_BRACKET: '[', /* [ */\n  CHAR_LINE_FEED: '\\n', /* \\n */\n  CHAR_NO_BREAK_SPACE: '\\u00A0', /* \\u00A0 */\n  CHAR_PERCENT: '%', /* % */\n  CHAR_PLUS: '+', /* + */\n  CHAR_QUESTION_MARK: '?', /* ? */\n  CHAR_RIGHT_ANGLE_BRACKET: '>', /* > */\n  CHAR_RIGHT_CURLY_BRACE: '}', /* } */\n  CHAR_RIGHT_SQUARE_BRACKET: ']', /* ] */\n  CHAR_SEMICOLON: ';', /* ; */\n  CHAR_SINGLE_QUOTE: '\\'', /* ' */\n  CHAR_SPACE: ' ', /*   */\n  CHAR_TAB: '\\t', /* \\t */\n  CHAR_UNDERSCORE: '_', /* _ */\n  CHAR_VERTICAL_LINE: '|', /* | */\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\\uFEFF' /* \\uFEFF */\n};\n","'use strict';\n\nconst fill = require('fill-range');\nconst stringify = require('./stringify');\nconst utils = require('./utils');\n\nconst append = (queue = '', stash = '', enclose = false) => {\n  const result = [];\n\n  queue = [].concat(queue);\n  stash = [].concat(stash);\n\n  if (!stash.length) return queue;\n  if (!queue.length) {\n    return enclose ? utils.flatten(stash).map(ele => `{${ele}}`) : stash;\n  }\n\n  for (const item of queue) {\n    if (Array.isArray(item)) {\n      for (const value of item) {\n        result.push(append(value, stash, enclose));\n      }\n    } else {\n      for (let ele of stash) {\n        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;\n        result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);\n      }\n    }\n  }\n  return utils.flatten(result);\n};\n\nconst expand = (ast, options = {}) => {\n  const rangeLimit = options.rangeLimit === undefined ? 1000 : options.rangeLimit;\n\n  const walk = (node, parent = {}) => {\n    node.queue = [];\n\n    let p = parent;\n    let q = parent.queue;\n\n    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {\n      p = p.parent;\n      q = p.queue;\n    }\n\n    if (node.invalid || node.dollar) {\n      q.push(append(q.pop(), stringify(node, options)));\n      return;\n    }\n\n    if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {\n      q.push(append(q.pop(), ['{}']));\n      return;\n    }\n\n    if (node.nodes && node.ranges > 0) {\n      const args = utils.reduce(node.nodes);\n\n      if (utils.exceedsLimit(...args, options.step, rangeLimit)) {\n        throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');\n      }\n\n      let range = fill(...args, options);\n      if (range.length === 0) {\n        range = stringify(node, options);\n      }\n\n      q.push(append(q.pop(), range));\n      node.nodes = [];\n      return;\n    }\n\n    const enclose = utils.encloseBrace(node);\n    let queue = node.queue;\n    let block = node;\n\n    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {\n      block = block.parent;\n      queue = block.queue;\n    }\n\n    for (let i = 0; i < node.nodes.length; i++) {\n      const child = node.nodes[i];\n\n      if (child.type === 'comma' && node.type === 'brace') {\n        if (i === 1) queue.push('');\n        queue.push('');\n        continue;\n      }\n\n      if (child.type === 'close') {\n        q.push(append(q.pop(), queue, enclose));\n        continue;\n      }\n\n      if (child.value && child.type !== 'open') {\n        queue.push(append(queue.pop(), child.value));\n        continue;\n      }\n\n      if (child.nodes) {\n        walk(child, node);\n      }\n    }\n\n    return queue;\n  };\n\n  return utils.flatten(walk(ast));\n};\n\nmodule.exports = expand;\n","'use strict';\n\nconst stringify = require('./stringify');\n\n/**\n * Constants\n */\n\nconst {\n  MAX_LENGTH,\n  CHAR_BACKSLASH, /* \\ */\n  CHAR_BACKTICK, /* ` */\n  CHAR_COMMA, /* , */\n  CHAR_DOT, /* . */\n  CHAR_LEFT_PARENTHESES, /* ( */\n  CHAR_RIGHT_PARENTHESES, /* ) */\n  CHAR_LEFT_CURLY_BRACE, /* { */\n  CHAR_RIGHT_CURLY_BRACE, /* } */\n  CHAR_LEFT_SQUARE_BRACKET, /* [ */\n  CHAR_RIGHT_SQUARE_BRACKET, /* ] */\n  CHAR_DOUBLE_QUOTE, /* \" */\n  CHAR_SINGLE_QUOTE, /* ' */\n  CHAR_NO_BREAK_SPACE,\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE\n} = require('./constants');\n\n/**\n * parse\n */\n\nconst parse = (input, options = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  const opts = options || {};\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  if (input.length > max) {\n    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);\n  }\n\n  const ast = { type: 'root', input, nodes: [] };\n  const stack = [ast];\n  let block = ast;\n  let prev = ast;\n  let brackets = 0;\n  const length = input.length;\n  let index = 0;\n  let depth = 0;\n  let value;\n\n  /**\n   * Helpers\n   */\n\n  const advance = () => input[index++];\n  const push = node => {\n    if (node.type === 'text' && prev.type === 'dot') {\n      prev.type = 'text';\n    }\n\n    if (prev && prev.type === 'text' && node.type === 'text') {\n      prev.value += node.value;\n      return;\n    }\n\n    block.nodes.push(node);\n    node.parent = block;\n    node.prev = prev;\n    prev = node;\n    return node;\n  };\n\n  push({ type: 'bos' });\n\n  while (index < length) {\n    block = stack[stack.length - 1];\n    value = advance();\n\n    /**\n     * Invalid chars\n     */\n\n    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {\n      continue;\n    }\n\n    /**\n     * Escaped chars\n     */\n\n    if (value === CHAR_BACKSLASH) {\n      push({ type: 'text', value: (options.keepEscaping ? value : '') + advance() });\n      continue;\n    }\n\n    /**\n     * Right square bracket (literal): ']'\n     */\n\n    if (value === CHAR_RIGHT_SQUARE_BRACKET) {\n      push({ type: 'text', value: '\\\\' + value });\n      continue;\n    }\n\n    /**\n     * Left square bracket: '['\n     */\n\n    if (value === CHAR_LEFT_SQUARE_BRACKET) {\n      brackets++;\n\n      let next;\n\n      while (index < length && (next = advance())) {\n        value += next;\n\n        if (next === CHAR_LEFT_SQUARE_BRACKET) {\n          brackets++;\n          continue;\n        }\n\n        if (next === CHAR_BACKSLASH) {\n          value += advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          brackets--;\n\n          if (brackets === 0) {\n            break;\n          }\n        }\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Parentheses\n     */\n\n    if (value === CHAR_LEFT_PARENTHESES) {\n      block = push({ type: 'paren', nodes: [] });\n      stack.push(block);\n      push({ type: 'text', value });\n      continue;\n    }\n\n    if (value === CHAR_RIGHT_PARENTHESES) {\n      if (block.type !== 'paren') {\n        push({ type: 'text', value });\n        continue;\n      }\n      block = stack.pop();\n      push({ type: 'text', value });\n      block = stack[stack.length - 1];\n      continue;\n    }\n\n    /**\n     * Quotes: '|\"|`\n     */\n\n    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {\n      const open = value;\n      let next;\n\n      if (options.keepQuotes !== true) {\n        value = '';\n      }\n\n      while (index < length && (next = advance())) {\n        if (next === CHAR_BACKSLASH) {\n          value += next + advance();\n          continue;\n        }\n\n        if (next === open) {\n          if (options.keepQuotes === true) value += next;\n          break;\n        }\n\n        value += next;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Left curly brace: '{'\n     */\n\n    if (value === CHAR_LEFT_CURLY_BRACE) {\n      depth++;\n\n      const dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;\n      const brace = {\n        type: 'brace',\n        open: true,\n        close: false,\n        dollar,\n        depth,\n        commas: 0,\n        ranges: 0,\n        nodes: []\n      };\n\n      block = push(brace);\n      stack.push(block);\n      push({ type: 'open', value });\n      continue;\n    }\n\n    /**\n     * Right curly brace: '}'\n     */\n\n    if (value === CHAR_RIGHT_CURLY_BRACE) {\n      if (block.type !== 'brace') {\n        push({ type: 'text', value });\n        continue;\n      }\n\n      const type = 'close';\n      block = stack.pop();\n      block.close = true;\n\n      push({ type, value });\n      depth--;\n\n      block = stack[stack.length - 1];\n      continue;\n    }\n\n    /**\n     * Comma: ','\n     */\n\n    if (value === CHAR_COMMA && depth > 0) {\n      if (block.ranges > 0) {\n        block.ranges = 0;\n        const open = block.nodes.shift();\n        block.nodes = [open, { type: 'text', value: stringify(block) }];\n      }\n\n      push({ type: 'comma', value });\n      block.commas++;\n      continue;\n    }\n\n    /**\n     * Dot: '.'\n     */\n\n    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {\n      const siblings = block.nodes;\n\n      if (depth === 0 || siblings.length === 0) {\n        push({ type: 'text', value });\n        continue;\n      }\n\n      if (prev.type === 'dot') {\n        block.range = [];\n        prev.value += value;\n        prev.type = 'range';\n\n        if (block.nodes.length !== 3 && block.nodes.length !== 5) {\n          block.invalid = true;\n          block.ranges = 0;\n          prev.type = 'text';\n          continue;\n        }\n\n        block.ranges++;\n        block.args = [];\n        continue;\n      }\n\n      if (prev.type === 'range') {\n        siblings.pop();\n\n        const before = siblings[siblings.length - 1];\n        before.value += prev.value + value;\n        prev = before;\n        block.ranges--;\n        continue;\n      }\n\n      push({ type: 'dot', value });\n      continue;\n    }\n\n    /**\n     * Text\n     */\n\n    push({ type: 'text', value });\n  }\n\n  // Mark imbalanced braces and brackets as invalid\n  do {\n    block = stack.pop();\n\n    if (block.type !== 'root') {\n      block.nodes.forEach(node => {\n        if (!node.nodes) {\n          if (node.type === 'open') node.isOpen = true;\n          if (node.type === 'close') node.isClose = true;\n          if (!node.nodes) node.type = 'text';\n          node.invalid = true;\n        }\n      });\n\n      // get the location of the block on parent.nodes (block's siblings)\n      const parent = stack[stack.length - 1];\n      const index = parent.nodes.indexOf(block);\n      // replace the (invalid) block with it's nodes\n      parent.nodes.splice(index, 1, ...block.nodes);\n    }\n  } while (stack.length > 0);\n\n  push({ type: 'eos' });\n  return ast;\n};\n\nmodule.exports = parse;\n","'use strict';\n\nconst utils = require('./utils');\n\nmodule.exports = (ast, options = {}) => {\n  const stringify = (node, parent = {}) => {\n    const invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);\n    const invalidNode = node.invalid === true && options.escapeInvalid === true;\n    let output = '';\n\n    if (node.value) {\n      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {\n        return '\\\\' + node.value;\n      }\n      return node.value;\n    }\n\n    if (node.value) {\n      return node.value;\n    }\n\n    if (node.nodes) {\n      for (const child of node.nodes) {\n        output += stringify(child);\n      }\n    }\n    return output;\n  };\n\n  return stringify(ast);\n};\n\n","'use strict';\n\nexports.isInteger = num => {\n  if (typeof num === 'number') {\n    return Number.isInteger(num);\n  }\n  if (typeof num === 'string' && num.trim() !== '') {\n    return Number.isInteger(Number(num));\n  }\n  return false;\n};\n\n/**\n * Find a node of the given type\n */\n\nexports.find = (node, type) => node.nodes.find(node => node.type === type);\n\n/**\n * Find a node of the given type\n */\n\nexports.exceedsLimit = (min, max, step = 1, limit) => {\n  if (limit === false) return false;\n  if (!exports.isInteger(min) || !exports.isInteger(max)) return false;\n  return ((Number(max) - Number(min)) / Number(step)) >= limit;\n};\n\n/**\n * Escape the given node with '\\\\' before node.value\n */\n\nexports.escapeNode = (block, n = 0, type) => {\n  const node = block.nodes[n];\n  if (!node) return;\n\n  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {\n    if (node.escaped !== true) {\n      node.value = '\\\\' + node.value;\n      node.escaped = true;\n    }\n  }\n};\n\n/**\n * Returns true if the given brace node should be enclosed in literal braces\n */\n\nexports.encloseBrace = node => {\n  if (node.type !== 'brace') return false;\n  if ((node.commas >> 0 + node.ranges >> 0) === 0) {\n    node.invalid = true;\n    return true;\n  }\n  return false;\n};\n\n/**\n * Returns true if a brace node is invalid.\n */\n\nexports.isInvalidBrace = block => {\n  if (block.type !== 'brace') return false;\n  if (block.invalid === true || block.dollar) return true;\n  if ((block.commas >> 0 + block.ranges >> 0) === 0) {\n    block.invalid = true;\n    return true;\n  }\n  if (block.open !== true || block.close !== true) {\n    block.invalid = true;\n    return true;\n  }\n  return false;\n};\n\n/**\n * Returns true if a node is an open or close node\n */\n\nexports.isOpenOrClose = node => {\n  if (node.type === 'open' || node.type === 'close') {\n    return true;\n  }\n  return node.open === true || node.close === true;\n};\n\n/**\n * Reduce an array of text nodes.\n */\n\nexports.reduce = nodes => nodes.reduce((acc, node) => {\n  if (node.type === 'text') acc.push(node.value);\n  if (node.type === 'range') node.type = 'text';\n  return acc;\n}, []);\n\n/**\n * Flatten an array\n */\n\nexports.flatten = (...args) => {\n  const result = [];\n\n  const flat = arr => {\n    for (let i = 0; i < arr.length; i++) {\n      const ele = arr[i];\n\n      if (Array.isArray(ele)) {\n        flat(ele);\n        continue;\n      }\n\n      if (ele !== undefined) {\n        result.push(ele);\n      }\n    }\n    return result;\n  };\n\n  flat(args);\n  return result;\n};\n","\"use strict\";\nconst taskManager = require(\"./managers/tasks\");\nconst async_1 = require(\"./providers/async\");\nconst stream_1 = require(\"./providers/stream\");\nconst sync_1 = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nconst utils = require(\"./utils\");\nasync function FastGlob(source, options) {\n    assertPatternsInput(source);\n    const works = getWorks(source, async_1.default, options);\n    const result = await Promise.all(works);\n    return utils.array.flatten(result);\n}\n// https://github.com/typescript-eslint/typescript-eslint/issues/60\n// eslint-disable-next-line no-redeclare\n(function (FastGlob) {\n    FastGlob.glob = FastGlob;\n    FastGlob.globSync = sync;\n    FastGlob.globStream = stream;\n    FastGlob.async = FastGlob;\n    function sync(source, options) {\n        assertPatternsInput(source);\n        const works = getWorks(source, sync_1.default, options);\n        return utils.array.flatten(works);\n    }\n    FastGlob.sync = sync;\n    function stream(source, options) {\n        assertPatternsInput(source);\n        const works = getWorks(source, stream_1.default, options);\n        /**\n         * The stream returned by the provider cannot work with an asynchronous iterator.\n         * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.\n         * This affects performance (+25%). I don't see best solution right now.\n         */\n        return utils.stream.merge(works);\n    }\n    FastGlob.stream = stream;\n    function generateTasks(source, options) {\n        assertPatternsInput(source);\n        const patterns = [].concat(source);\n        const settings = new settings_1.default(options);\n        return taskManager.generate(patterns, settings);\n    }\n    FastGlob.generateTasks = generateTasks;\n    function isDynamicPattern(source, options) {\n        assertPatternsInput(source);\n        const settings = new settings_1.default(options);\n        return utils.pattern.isDynamicPattern(source, settings);\n    }\n    FastGlob.isDynamicPattern = isDynamicPattern;\n    function escapePath(source) {\n        assertPatternsInput(source);\n        return utils.path.escape(source);\n    }\n    FastGlob.escapePath = escapePath;\n    function convertPathToPattern(source) {\n        assertPatternsInput(source);\n        return utils.path.convertPathToPattern(source);\n    }\n    FastGlob.convertPathToPattern = convertPathToPattern;\n    let posix;\n    (function (posix) {\n        function escapePath(source) {\n            assertPatternsInput(source);\n            return utils.path.escapePosixPath(source);\n        }\n        posix.escapePath = escapePath;\n        function convertPathToPattern(source) {\n            assertPatternsInput(source);\n            return utils.path.convertPosixPathToPattern(source);\n        }\n        posix.convertPathToPattern = convertPathToPattern;\n    })(posix = FastGlob.posix || (FastGlob.posix = {}));\n    let win32;\n    (function (win32) {\n        function escapePath(source) {\n            assertPatternsInput(source);\n            return utils.path.escapeWindowsPath(source);\n        }\n        win32.escapePath = escapePath;\n        function convertPathToPattern(source) {\n            assertPatternsInput(source);\n            return utils.path.convertWindowsPathToPattern(source);\n        }\n        win32.convertPathToPattern = convertPathToPattern;\n    })(win32 = FastGlob.win32 || (FastGlob.win32 = {}));\n})(FastGlob || (FastGlob = {}));\nfunction getWorks(source, _Provider, options) {\n    const patterns = [].concat(source);\n    const settings = new settings_1.default(options);\n    const tasks = taskManager.generate(patterns, settings);\n    const provider = new _Provider(settings);\n    return tasks.map(provider.read, provider);\n}\nfunction assertPatternsInput(input) {\n    const source = [].concat(input);\n    const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));\n    if (!isValidSource) {\n        throw new TypeError('Patterns must be a string (non empty) or an array of strings');\n    }\n}\nmodule.exports = FastGlob;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;\nconst utils = require(\"../utils\");\nfunction generate(input, settings) {\n    const patterns = processPatterns(input, settings);\n    const ignore = processPatterns(settings.ignore, settings);\n    const positivePatterns = getPositivePatterns(patterns);\n    const negativePatterns = getNegativePatternsAsPositive(patterns, ignore);\n    const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));\n    const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));\n    const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, /* dynamic */ false);\n    const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, /* dynamic */ true);\n    return staticTasks.concat(dynamicTasks);\n}\nexports.generate = generate;\nfunction processPatterns(input, settings) {\n    let patterns = input;\n    /**\n     * The original pattern like `{,*,**,a/*}` can lead to problems checking the depth when matching entry\n     * and some problems with the micromatch package (see fast-glob issues: #365, #394).\n     *\n     * To solve this problem, we expand all patterns containing brace expansion. This can lead to a slight slowdown\n     * in matching in the case of a large set of patterns after expansion.\n     */\n    if (settings.braceExpansion) {\n        patterns = utils.pattern.expandPatternsWithBraceExpansion(patterns);\n    }\n    /**\n     * If the `baseNameMatch` option is enabled, we must add globstar to patterns, so that they can be used\n     * at any nesting level.\n     *\n     * We do this here, because otherwise we have to complicate the filtering logic. For example, we need to change\n     * the pattern in the filter before creating a regular expression. There is no need to change the patterns\n     * in the application. Only on the input.\n     */\n    if (settings.baseNameMatch) {\n        patterns = patterns.map((pattern) => pattern.includes('/') ? pattern : `**/${pattern}`);\n    }\n    /**\n     * This method also removes duplicate slashes that may have been in the pattern or formed as a result of expansion.\n     */\n    return patterns.map((pattern) => utils.pattern.removeDuplicateSlashes(pattern));\n}\n/**\n * Returns tasks grouped by basic pattern directories.\n *\n * Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.\n * This is necessary because directory traversal starts at the base directory and goes deeper.\n */\nfunction convertPatternsToTasks(positive, negative, dynamic) {\n    const tasks = [];\n    const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);\n    const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);\n    const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);\n    const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);\n    tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));\n    /*\n     * For the sake of reducing future accesses to the file system, we merge all tasks within the current directory\n     * into a global task, if at least one pattern refers to the root (`.`). In this case, the global task covers the rest.\n     */\n    if ('.' in insideCurrentDirectoryGroup) {\n        tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));\n    }\n    else {\n        tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));\n    }\n    return tasks;\n}\nexports.convertPatternsToTasks = convertPatternsToTasks;\nfunction getPositivePatterns(patterns) {\n    return utils.pattern.getPositivePatterns(patterns);\n}\nexports.getPositivePatterns = getPositivePatterns;\nfunction getNegativePatternsAsPositive(patterns, ignore) {\n    const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);\n    const positive = negative.map(utils.pattern.convertToPositivePattern);\n    return positive;\n}\nexports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;\nfunction groupPatternsByBaseDirectory(patterns) {\n    const group = {};\n    return patterns.reduce((collection, pattern) => {\n        const base = utils.pattern.getBaseDirectory(pattern);\n        if (base in collection) {\n            collection[base].push(pattern);\n        }\n        else {\n            collection[base] = [pattern];\n        }\n        return collection;\n    }, group);\n}\nexports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;\nfunction convertPatternGroupsToTasks(positive, negative, dynamic) {\n    return Object.keys(positive).map((base) => {\n        return convertPatternGroupToTask(base, positive[base], negative, dynamic);\n    });\n}\nexports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;\nfunction convertPatternGroupToTask(base, positive, negative, dynamic) {\n    return {\n        dynamic,\n        positive,\n        negative,\n        base,\n        patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))\n    };\n}\nexports.convertPatternGroupToTask = convertPatternGroupToTask;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst async_1 = require(\"../readers/async\");\nconst provider_1 = require(\"./provider\");\nclass ProviderAsync extends provider_1.default {\n    constructor() {\n        super(...arguments);\n        this._reader = new async_1.default(this._settings);\n    }\n    async read(task) {\n        const root = this._getRootDirectory(task);\n        const options = this._getReaderOptions(task);\n        const entries = await this.api(root, task, options);\n        return entries.map((entry) => options.transform(entry));\n    }\n    api(root, task, options) {\n        if (task.dynamic) {\n            return this._reader.dynamic(root, options);\n        }\n        return this._reader.static(task.patterns, options);\n    }\n}\nexports.default = ProviderAsync;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils = require(\"../../utils\");\nconst partial_1 = require(\"../matchers/partial\");\nclass DeepFilter {\n    constructor(_settings, _micromatchOptions) {\n        this._settings = _settings;\n        this._micromatchOptions = _micromatchOptions;\n    }\n    getFilter(basePath, positive, negative) {\n        const matcher = this._getMatcher(positive);\n        const negativeRe = this._getNegativePatternsRe(negative);\n        return (entry) => this._filter(basePath, entry, matcher, negativeRe);\n    }\n    _getMatcher(patterns) {\n        return new partial_1.default(patterns, this._settings, this._micromatchOptions);\n    }\n    _getNegativePatternsRe(patterns) {\n        const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);\n        return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);\n    }\n    _filter(basePath, entry, matcher, negativeRe) {\n        if (this._isSkippedByDeep(basePath, entry.path)) {\n            return false;\n        }\n        if (this._isSkippedSymbolicLink(entry)) {\n            return false;\n        }\n        const filepath = utils.path.removeLeadingDotSegment(entry.path);\n        if (this._isSkippedByPositivePatterns(filepath, matcher)) {\n            return false;\n        }\n        return this._isSkippedByNegativePatterns(filepath, negativeRe);\n    }\n    _isSkippedByDeep(basePath, entryPath) {\n        /**\n         * Avoid unnecessary depth calculations when it doesn't matter.\n         */\n        if (this._settings.deep === Infinity) {\n            return false;\n        }\n        return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;\n    }\n    _getEntryLevel(basePath, entryPath) {\n        const entryPathDepth = entryPath.split('/').length;\n        if (basePath === '') {\n            return entryPathDepth;\n        }\n        const basePathDepth = basePath.split('/').length;\n        return entryPathDepth - basePathDepth;\n    }\n    _isSkippedSymbolicLink(entry) {\n        return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();\n    }\n    _isSkippedByPositivePatterns(entryPath, matcher) {\n        return !this._settings.baseNameMatch && !matcher.match(entryPath);\n    }\n    _isSkippedByNegativePatterns(entryPath, patternsRe) {\n        return !utils.pattern.matchAny(entryPath, patternsRe);\n    }\n}\nexports.default = DeepFilter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils = require(\"../../utils\");\nclass EntryFilter {\n    constructor(_settings, _micromatchOptions) {\n        this._settings = _settings;\n        this._micromatchOptions = _micromatchOptions;\n        this.index = new Map();\n    }\n    getFilter(positive, negative) {\n        const [absoluteNegative, relativeNegative] = utils.pattern.partitionAbsoluteAndRelative(negative);\n        const patterns = {\n            positive: {\n                all: utils.pattern.convertPatternsToRe(positive, this._micromatchOptions)\n            },\n            negative: {\n                absolute: utils.pattern.convertPatternsToRe(absoluteNegative, Object.assign(Object.assign({}, this._micromatchOptions), { dot: true })),\n                relative: utils.pattern.convertPatternsToRe(relativeNegative, Object.assign(Object.assign({}, this._micromatchOptions), { dot: true }))\n            }\n        };\n        return (entry) => this._filter(entry, patterns);\n    }\n    _filter(entry, patterns) {\n        const filepath = utils.path.removeLeadingDotSegment(entry.path);\n        if (this._settings.unique && this._isDuplicateEntry(filepath)) {\n            return false;\n        }\n        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {\n            return false;\n        }\n        const isMatched = this._isMatchToPatternsSet(filepath, patterns, entry.dirent.isDirectory());\n        if (this._settings.unique && isMatched) {\n            this._createIndexRecord(filepath);\n        }\n        return isMatched;\n    }\n    _isDuplicateEntry(filepath) {\n        return this.index.has(filepath);\n    }\n    _createIndexRecord(filepath) {\n        this.index.set(filepath, undefined);\n    }\n    _onlyFileFilter(entry) {\n        return this._settings.onlyFiles && !entry.dirent.isFile();\n    }\n    _onlyDirectoryFilter(entry) {\n        return this._settings.onlyDirectories && !entry.dirent.isDirectory();\n    }\n    _isMatchToPatternsSet(filepath, patterns, isDirectory) {\n        const isMatched = this._isMatchToPatterns(filepath, patterns.positive.all, isDirectory);\n        if (!isMatched) {\n            return false;\n        }\n        const isMatchedByRelativeNegative = this._isMatchToPatterns(filepath, patterns.negative.relative, isDirectory);\n        if (isMatchedByRelativeNegative) {\n            return false;\n        }\n        const isMatchedByAbsoluteNegative = this._isMatchToAbsoluteNegative(filepath, patterns.negative.absolute, isDirectory);\n        if (isMatchedByAbsoluteNegative) {\n            return false;\n        }\n        return true;\n    }\n    _isMatchToAbsoluteNegative(filepath, patternsRe, isDirectory) {\n        if (patternsRe.length === 0) {\n            return false;\n        }\n        const fullpath = utils.path.makeAbsolute(this._settings.cwd, filepath);\n        return this._isMatchToPatterns(fullpath, patternsRe, isDirectory);\n    }\n    _isMatchToPatterns(filepath, patternsRe, isDirectory) {\n        if (patternsRe.length === 0) {\n            return false;\n        }\n        // Trying to match files and directories by patterns.\n        const isMatched = utils.pattern.matchAny(filepath, patternsRe);\n        // A pattern with a trailling slash can be used for directory matching.\n        // To apply such pattern, we need to add a tralling slash to the path.\n        if (!isMatched && isDirectory) {\n            return utils.pattern.matchAny(filepath + '/', patternsRe);\n        }\n        return isMatched;\n    }\n}\nexports.default = EntryFilter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils = require(\"../../utils\");\nclass ErrorFilter {\n    constructor(_settings) {\n        this._settings = _settings;\n    }\n    getFilter() {\n        return (error) => this._isNonFatalError(error);\n    }\n    _isNonFatalError(error) {\n        return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;\n    }\n}\nexports.default = ErrorFilter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils = require(\"../../utils\");\nclass Matcher {\n    constructor(_patterns, _settings, _micromatchOptions) {\n        this._patterns = _patterns;\n        this._settings = _settings;\n        this._micromatchOptions = _micromatchOptions;\n        this._storage = [];\n        this._fillStorage();\n    }\n    _fillStorage() {\n        for (const pattern of this._patterns) {\n            const segments = this._getPatternSegments(pattern);\n            const sections = this._splitSegmentsIntoSections(segments);\n            this._storage.push({\n                complete: sections.length <= 1,\n                pattern,\n                segments,\n                sections\n            });\n        }\n    }\n    _getPatternSegments(pattern) {\n        const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);\n        return parts.map((part) => {\n            const dynamic = utils.pattern.isDynamicPattern(part, this._settings);\n            if (!dynamic) {\n                return {\n                    dynamic: false,\n                    pattern: part\n                };\n            }\n            return {\n                dynamic: true,\n                pattern: part,\n                patternRe: utils.pattern.makeRe(part, this._micromatchOptions)\n            };\n        });\n    }\n    _splitSegmentsIntoSections(segments) {\n        return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));\n    }\n}\nexports.default = Matcher;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst matcher_1 = require(\"./matcher\");\nclass PartialMatcher extends matcher_1.default {\n    match(filepath) {\n        const parts = filepath.split('/');\n        const levels = parts.length;\n        const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);\n        for (const pattern of patterns) {\n            const section = pattern.sections[0];\n            /**\n             * In this case, the pattern has a globstar and we must read all directories unconditionally,\n             * but only if the level has reached the end of the first group.\n             *\n             * fixtures/{a,b}/**\n             *  ^ true/false  ^ always true\n            */\n            if (!pattern.complete && levels > section.length) {\n                return true;\n            }\n            const match = parts.every((part, index) => {\n                const segment = pattern.segments[index];\n                if (segment.dynamic && segment.patternRe.test(part)) {\n                    return true;\n                }\n                if (!segment.dynamic && segment.pattern === part) {\n                    return true;\n                }\n                return false;\n            });\n            if (match) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nexports.default = PartialMatcher;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst deep_1 = require(\"./filters/deep\");\nconst entry_1 = require(\"./filters/entry\");\nconst error_1 = require(\"./filters/error\");\nconst entry_2 = require(\"./transformers/entry\");\nclass Provider {\n    constructor(_settings) {\n        this._settings = _settings;\n        this.errorFilter = new error_1.default(this._settings);\n        this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());\n        this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());\n        this.entryTransformer = new entry_2.default(this._settings);\n    }\n    _getRootDirectory(task) {\n        return path.resolve(this._settings.cwd, task.base);\n    }\n    _getReaderOptions(task) {\n        const basePath = task.base === '.' ? '' : task.base;\n        return {\n            basePath,\n            pathSegmentSeparator: '/',\n            concurrency: this._settings.concurrency,\n            deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),\n            entryFilter: this.entryFilter.getFilter(task.positive, task.negative),\n            errorFilter: this.errorFilter.getFilter(),\n            followSymbolicLinks: this._settings.followSymbolicLinks,\n            fs: this._settings.fs,\n            stats: this._settings.stats,\n            throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,\n            transform: this.entryTransformer.getTransformer()\n        };\n    }\n    _getMicromatchOptions() {\n        return {\n            dot: this._settings.dot,\n            matchBase: this._settings.baseNameMatch,\n            nobrace: !this._settings.braceExpansion,\n            nocase: !this._settings.caseSensitiveMatch,\n            noext: !this._settings.extglob,\n            noglobstar: !this._settings.globstar,\n            posix: true,\n            strictSlashes: false\n        };\n    }\n}\nexports.default = Provider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"stream\");\nconst stream_2 = require(\"../readers/stream\");\nconst provider_1 = require(\"./provider\");\nclass ProviderStream extends provider_1.default {\n    constructor() {\n        super(...arguments);\n        this._reader = new stream_2.default(this._settings);\n    }\n    read(task) {\n        const root = this._getRootDirectory(task);\n        const options = this._getReaderOptions(task);\n        const source = this.api(root, task, options);\n        const destination = new stream_1.Readable({ objectMode: true, read: () => { } });\n        source\n            .once('error', (error) => destination.emit('error', error))\n            .on('data', (entry) => destination.emit('data', options.transform(entry)))\n            .once('end', () => destination.emit('end'));\n        destination\n            .once('close', () => source.destroy());\n        return destination;\n    }\n    api(root, task, options) {\n        if (task.dynamic) {\n            return this._reader.dynamic(root, options);\n        }\n        return this._reader.static(task.patterns, options);\n    }\n}\nexports.default = ProviderStream;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sync_1 = require(\"../readers/sync\");\nconst provider_1 = require(\"./provider\");\nclass ProviderSync extends provider_1.default {\n    constructor() {\n        super(...arguments);\n        this._reader = new sync_1.default(this._settings);\n    }\n    read(task) {\n        const root = this._getRootDirectory(task);\n        const options = this._getReaderOptions(task);\n        const entries = this.api(root, task, options);\n        return entries.map(options.transform);\n    }\n    api(root, task, options) {\n        if (task.dynamic) {\n            return this._reader.dynamic(root, options);\n        }\n        return this._reader.static(task.patterns, options);\n    }\n}\nexports.default = ProviderSync;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils = require(\"../../utils\");\nclass EntryTransformer {\n    constructor(_settings) {\n        this._settings = _settings;\n    }\n    getTransformer() {\n        return (entry) => this._transform(entry);\n    }\n    _transform(entry) {\n        let filepath = entry.path;\n        if (this._settings.absolute) {\n            filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);\n            filepath = utils.path.unixify(filepath);\n        }\n        if (this._settings.markDirectories && entry.dirent.isDirectory()) {\n            filepath += '/';\n        }\n        if (!this._settings.objectMode) {\n            return filepath;\n        }\n        return Object.assign(Object.assign({}, entry), { path: filepath });\n    }\n}\nexports.default = EntryTransformer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fsWalk = require(\"@nodelib/fs.walk\");\nconst reader_1 = require(\"./reader\");\nconst stream_1 = require(\"./stream\");\nclass ReaderAsync extends reader_1.default {\n    constructor() {\n        super(...arguments);\n        this._walkAsync = fsWalk.walk;\n        this._readerStream = new stream_1.default(this._settings);\n    }\n    dynamic(root, options) {\n        return new Promise((resolve, reject) => {\n            this._walkAsync(root, options, (error, entries) => {\n                if (error === null) {\n                    resolve(entries);\n                }\n                else {\n                    reject(error);\n                }\n            });\n        });\n    }\n    async static(patterns, options) {\n        const entries = [];\n        const stream = this._readerStream.static(patterns, options);\n        // After #235, replace it with an asynchronous iterator.\n        return new Promise((resolve, reject) => {\n            stream.once('error', reject);\n            stream.on('data', (entry) => entries.push(entry));\n            stream.once('end', () => resolve(entries));\n        });\n    }\n}\nexports.default = ReaderAsync;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst utils = require(\"../utils\");\nclass Reader {\n    constructor(_settings) {\n        this._settings = _settings;\n        this._fsStatSettings = new fsStat.Settings({\n            followSymbolicLink: this._settings.followSymbolicLinks,\n            fs: this._settings.fs,\n            throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks\n        });\n    }\n    _getFullEntryPath(filepath) {\n        return path.resolve(this._settings.cwd, filepath);\n    }\n    _makeEntry(stats, pattern) {\n        const entry = {\n            name: pattern,\n            path: pattern,\n            dirent: utils.fs.createDirentFromStats(pattern, stats)\n        };\n        if (this._settings.stats) {\n            entry.stats = stats;\n        }\n        return entry;\n    }\n    _isFatalError(error) {\n        return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;\n    }\n}\nexports.default = Reader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"stream\");\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst fsWalk = require(\"@nodelib/fs.walk\");\nconst reader_1 = require(\"./reader\");\nclass ReaderStream extends reader_1.default {\n    constructor() {\n        super(...arguments);\n        this._walkStream = fsWalk.walkStream;\n        this._stat = fsStat.stat;\n    }\n    dynamic(root, options) {\n        return this._walkStream(root, options);\n    }\n    static(patterns, options) {\n        const filepaths = patterns.map(this._getFullEntryPath, this);\n        const stream = new stream_1.PassThrough({ objectMode: true });\n        stream._write = (index, _enc, done) => {\n            return this._getEntry(filepaths[index], patterns[index], options)\n                .then((entry) => {\n                if (entry !== null && options.entryFilter(entry)) {\n                    stream.push(entry);\n                }\n                if (index === filepaths.length - 1) {\n                    stream.end();\n                }\n                done();\n            })\n                .catch(done);\n        };\n        for (let i = 0; i < filepaths.length; i++) {\n            stream.write(i);\n        }\n        return stream;\n    }\n    _getEntry(filepath, pattern, options) {\n        return this._getStat(filepath)\n            .then((stats) => this._makeEntry(stats, pattern))\n            .catch((error) => {\n            if (options.errorFilter(error)) {\n                return null;\n            }\n            throw error;\n        });\n    }\n    _getStat(filepath) {\n        return new Promise((resolve, reject) => {\n            this._stat(filepath, this._fsStatSettings, (error, stats) => {\n                return error === null ? resolve(stats) : reject(error);\n            });\n        });\n    }\n}\nexports.default = ReaderStream;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst fsWalk = require(\"@nodelib/fs.walk\");\nconst reader_1 = require(\"./reader\");\nclass ReaderSync extends reader_1.default {\n    constructor() {\n        super(...arguments);\n        this._walkSync = fsWalk.walkSync;\n        this._statSync = fsStat.statSync;\n    }\n    dynamic(root, options) {\n        return this._walkSync(root, options);\n    }\n    static(patterns, options) {\n        const entries = [];\n        for (const pattern of patterns) {\n            const filepath = this._getFullEntryPath(pattern);\n            const entry = this._getEntry(filepath, pattern, options);\n            if (entry === null || !options.entryFilter(entry)) {\n                continue;\n            }\n            entries.push(entry);\n        }\n        return entries;\n    }\n    _getEntry(filepath, pattern, options) {\n        try {\n            const stats = this._getStat(filepath);\n            return this._makeEntry(stats, pattern);\n        }\n        catch (error) {\n            if (options.errorFilter(error)) {\n                return null;\n            }\n            throw error;\n        }\n    }\n    _getStat(filepath) {\n        return this._statSync(filepath, this._fsStatSettings);\n    }\n}\nexports.default = ReaderSync;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;\nconst fs = require(\"fs\");\nconst os = require(\"os\");\n/**\n * The `os.cpus` method can return zero. We expect the number of cores to be greater than zero.\n * https://github.com/nodejs/node/blob/7faeddf23a98c53896f8b574a6e66589e8fb1eb8/lib/os.js#L106-L107\n */\nconst CPU_COUNT = Math.max(os.cpus().length, 1);\nexports.DEFAULT_FILE_SYSTEM_ADAPTER = {\n    lstat: fs.lstat,\n    lstatSync: fs.lstatSync,\n    stat: fs.stat,\n    statSync: fs.statSync,\n    readdir: fs.readdir,\n    readdirSync: fs.readdirSync\n};\nclass Settings {\n    constructor(_options = {}) {\n        this._options = _options;\n        this.absolute = this._getValue(this._options.absolute, false);\n        this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);\n        this.braceExpansion = this._getValue(this._options.braceExpansion, true);\n        this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);\n        this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);\n        this.cwd = this._getValue(this._options.cwd, process.cwd());\n        this.deep = this._getValue(this._options.deep, Infinity);\n        this.dot = this._getValue(this._options.dot, false);\n        this.extglob = this._getValue(this._options.extglob, true);\n        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);\n        this.fs = this._getFileSystemMethods(this._options.fs);\n        this.globstar = this._getValue(this._options.globstar, true);\n        this.ignore = this._getValue(this._options.ignore, []);\n        this.markDirectories = this._getValue(this._options.markDirectories, false);\n        this.objectMode = this._getValue(this._options.objectMode, false);\n        this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);\n        this.onlyFiles = this._getValue(this._options.onlyFiles, true);\n        this.stats = this._getValue(this._options.stats, false);\n        this.suppressErrors = this._getValue(this._options.suppressErrors, false);\n        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);\n        this.unique = this._getValue(this._options.unique, true);\n        if (this.onlyDirectories) {\n            this.onlyFiles = false;\n        }\n        if (this.stats) {\n            this.objectMode = true;\n        }\n        // Remove the cast to the array in the next major (#404).\n        this.ignore = [].concat(this.ignore);\n    }\n    _getValue(option, value) {\n        return option === undefined ? value : option;\n    }\n    _getFileSystemMethods(methods = {}) {\n        return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);\n    }\n}\nexports.default = Settings;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.splitWhen = exports.flatten = void 0;\nfunction flatten(items) {\n    return items.reduce((collection, item) => [].concat(collection, item), []);\n}\nexports.flatten = flatten;\nfunction splitWhen(items, predicate) {\n    const result = [[]];\n    let groupIndex = 0;\n    for (const item of items) {\n        if (predicate(item)) {\n            groupIndex++;\n            result[groupIndex] = [];\n        }\n        else {\n            result[groupIndex].push(item);\n        }\n    }\n    return result;\n}\nexports.splitWhen = splitWhen;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isEnoentCodeError = void 0;\nfunction isEnoentCodeError(error) {\n    return error.code === 'ENOENT';\n}\nexports.isEnoentCodeError = isEnoentCodeError;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDirentFromStats = void 0;\nclass DirentFromStats {\n    constructor(name, stats) {\n        this.name = name;\n        this.isBlockDevice = stats.isBlockDevice.bind(stats);\n        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);\n        this.isDirectory = stats.isDirectory.bind(stats);\n        this.isFIFO = stats.isFIFO.bind(stats);\n        this.isFile = stats.isFile.bind(stats);\n        this.isSocket = stats.isSocket.bind(stats);\n        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);\n    }\n}\nfunction createDirentFromStats(name, stats) {\n    return new DirentFromStats(name, stats);\n}\nexports.createDirentFromStats = createDirentFromStats;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.string = exports.stream = exports.pattern = exports.path = exports.fs = exports.errno = exports.array = void 0;\nconst array = require(\"./array\");\nexports.array = array;\nconst errno = require(\"./errno\");\nexports.errno = errno;\nconst fs = require(\"./fs\");\nexports.fs = fs;\nconst path = require(\"./path\");\nexports.path = path;\nconst pattern = require(\"./pattern\");\nexports.pattern = pattern;\nconst stream = require(\"./stream\");\nexports.stream = stream;\nconst string = require(\"./string\");\nexports.string = string;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertPosixPathToPattern = exports.convertWindowsPathToPattern = exports.convertPathToPattern = exports.escapePosixPath = exports.escapeWindowsPath = exports.escape = exports.removeLeadingDotSegment = exports.makeAbsolute = exports.unixify = void 0;\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst IS_WINDOWS_PLATFORM = os.platform() === 'win32';\nconst LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2; // ./ or .\\\\\n/**\n * All non-escaped special characters.\n * Posix: ()*?[]{|}, !+@ before (, ! at the beginning, \\\\ before non-special characters.\n * Windows: (){}[], !+@ before (, ! at the beginning.\n */\nconst POSIX_UNESCAPED_GLOB_SYMBOLS_RE = /(\\\\?)([()*?[\\]{|}]|^!|[!+@](?=\\()|\\\\(?![!()*+?@[\\]{|}]))/g;\nconst WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE = /(\\\\?)([()[\\]{}]|^!|[!+@](?=\\())/g;\n/**\n * The device path (\\\\.\\ or \\\\?\\).\n * https://learn.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths\n */\nconst DOS_DEVICE_PATH_RE = /^\\\\\\\\([.?])/;\n/**\n * All backslashes except those escaping special characters.\n * Windows: !()+@{}\n * https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\n */\nconst WINDOWS_BACKSLASHES_RE = /\\\\(?![!()+@[\\]{}])/g;\n/**\n * Designed to work only with simple paths: `dir\\\\file`.\n */\nfunction unixify(filepath) {\n    return filepath.replace(/\\\\/g, '/');\n}\nexports.unixify = unixify;\nfunction makeAbsolute(cwd, filepath) {\n    return path.resolve(cwd, filepath);\n}\nexports.makeAbsolute = makeAbsolute;\nfunction removeLeadingDotSegment(entry) {\n    // We do not use `startsWith` because this is 10x slower than current implementation for some cases.\n    // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with\n    if (entry.charAt(0) === '.') {\n        const secondCharactery = entry.charAt(1);\n        if (secondCharactery === '/' || secondCharactery === '\\\\') {\n            return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);\n        }\n    }\n    return entry;\n}\nexports.removeLeadingDotSegment = removeLeadingDotSegment;\nexports.escape = IS_WINDOWS_PLATFORM ? escapeWindowsPath : escapePosixPath;\nfunction escapeWindowsPath(pattern) {\n    return pattern.replace(WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE, '\\\\$2');\n}\nexports.escapeWindowsPath = escapeWindowsPath;\nfunction escapePosixPath(pattern) {\n    return pattern.replace(POSIX_UNESCAPED_GLOB_SYMBOLS_RE, '\\\\$2');\n}\nexports.escapePosixPath = escapePosixPath;\nexports.convertPathToPattern = IS_WINDOWS_PLATFORM ? convertWindowsPathToPattern : convertPosixPathToPattern;\nfunction convertWindowsPathToPattern(filepath) {\n    return escapeWindowsPath(filepath)\n        .replace(DOS_DEVICE_PATH_RE, '//$1')\n        .replace(WINDOWS_BACKSLASHES_RE, '/');\n}\nexports.convertWindowsPathToPattern = convertWindowsPathToPattern;\nfunction convertPosixPathToPattern(filepath) {\n    return escapePosixPath(filepath);\n}\nexports.convertPosixPathToPattern = convertPosixPathToPattern;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isAbsolute = exports.partitionAbsoluteAndRelative = exports.removeDuplicateSlashes = exports.matchAny = exports.convertPatternsToRe = exports.makeRe = exports.getPatternParts = exports.expandBraceExpansion = exports.expandPatternsWithBraceExpansion = exports.isAffectDepthOfReadingPattern = exports.endsWithSlashGlobStar = exports.hasGlobStar = exports.getBaseDirectory = exports.isPatternRelatedToParentDirectory = exports.getPatternsOutsideCurrentDirectory = exports.getPatternsInsideCurrentDirectory = exports.getPositivePatterns = exports.getNegativePatterns = exports.isPositivePattern = exports.isNegativePattern = exports.convertToNegativePattern = exports.convertToPositivePattern = exports.isDynamicPattern = exports.isStaticPattern = void 0;\nconst path = require(\"path\");\nconst globParent = require(\"glob-parent\");\nconst micromatch = require(\"micromatch\");\nconst GLOBSTAR = '**';\nconst ESCAPE_SYMBOL = '\\\\';\nconst COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;\nconst REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\\[[^[]*]/;\nconst REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\\([^(]*\\|[^|]*\\)/;\nconst GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\\([^(]*\\)/;\nconst BRACE_EXPANSION_SEPARATORS_RE = /,|\\.\\./;\n/**\n * Matches a sequence of two or more consecutive slashes, excluding the first two slashes at the beginning of the string.\n * The latter is due to the presence of the device path at the beginning of the UNC path.\n */\nconst DOUBLE_SLASH_RE = /(?!^)\\/{2,}/g;\nfunction isStaticPattern(pattern, options = {}) {\n    return !isDynamicPattern(pattern, options);\n}\nexports.isStaticPattern = isStaticPattern;\nfunction isDynamicPattern(pattern, options = {}) {\n    /**\n     * A special case with an empty string is necessary for matching patterns that start with a forward slash.\n     * An empty string cannot be a dynamic pattern.\n     * For example, the pattern `/lib/*` will be spread into parts: '', 'lib', '*'.\n     */\n    if (pattern === '') {\n        return false;\n    }\n    /**\n     * When the `caseSensitiveMatch` option is disabled, all patterns must be marked as dynamic, because we cannot check\n     * filepath directly (without read directory).\n     */\n    if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {\n        return true;\n    }\n    if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {\n        return true;\n    }\n    if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {\n        return true;\n    }\n    if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {\n        return true;\n    }\n    return false;\n}\nexports.isDynamicPattern = isDynamicPattern;\nfunction hasBraceExpansion(pattern) {\n    const openingBraceIndex = pattern.indexOf('{');\n    if (openingBraceIndex === -1) {\n        return false;\n    }\n    const closingBraceIndex = pattern.indexOf('}', openingBraceIndex + 1);\n    if (closingBraceIndex === -1) {\n        return false;\n    }\n    const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);\n    return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);\n}\nfunction convertToPositivePattern(pattern) {\n    return isNegativePattern(pattern) ? pattern.slice(1) : pattern;\n}\nexports.convertToPositivePattern = convertToPositivePattern;\nfunction convertToNegativePattern(pattern) {\n    return '!' + pattern;\n}\nexports.convertToNegativePattern = convertToNegativePattern;\nfunction isNegativePattern(pattern) {\n    return pattern.startsWith('!') && pattern[1] !== '(';\n}\nexports.isNegativePattern = isNegativePattern;\nfunction isPositivePattern(pattern) {\n    return !isNegativePattern(pattern);\n}\nexports.isPositivePattern = isPositivePattern;\nfunction getNegativePatterns(patterns) {\n    return patterns.filter(isNegativePattern);\n}\nexports.getNegativePatterns = getNegativePatterns;\nfunction getPositivePatterns(patterns) {\n    return patterns.filter(isPositivePattern);\n}\nexports.getPositivePatterns = getPositivePatterns;\n/**\n * Returns patterns that can be applied inside the current directory.\n *\n * @example\n * // ['./*', '*', 'a/*']\n * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])\n */\nfunction getPatternsInsideCurrentDirectory(patterns) {\n    return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));\n}\nexports.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;\n/**\n * Returns patterns to be expanded relative to (outside) the current directory.\n *\n * @example\n * // ['../*', './../*']\n * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])\n */\nfunction getPatternsOutsideCurrentDirectory(patterns) {\n    return patterns.filter(isPatternRelatedToParentDirectory);\n}\nexports.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;\nfunction isPatternRelatedToParentDirectory(pattern) {\n    return pattern.startsWith('..') || pattern.startsWith('./..');\n}\nexports.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;\nfunction getBaseDirectory(pattern) {\n    return globParent(pattern, { flipBackslashes: false });\n}\nexports.getBaseDirectory = getBaseDirectory;\nfunction hasGlobStar(pattern) {\n    return pattern.includes(GLOBSTAR);\n}\nexports.hasGlobStar = hasGlobStar;\nfunction endsWithSlashGlobStar(pattern) {\n    return pattern.endsWith('/' + GLOBSTAR);\n}\nexports.endsWithSlashGlobStar = endsWithSlashGlobStar;\nfunction isAffectDepthOfReadingPattern(pattern) {\n    const basename = path.basename(pattern);\n    return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);\n}\nexports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;\nfunction expandPatternsWithBraceExpansion(patterns) {\n    return patterns.reduce((collection, pattern) => {\n        return collection.concat(expandBraceExpansion(pattern));\n    }, []);\n}\nexports.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;\nfunction expandBraceExpansion(pattern) {\n    const patterns = micromatch.braces(pattern, { expand: true, nodupes: true, keepEscaping: true });\n    /**\n     * Sort the patterns by length so that the same depth patterns are processed side by side.\n     * `a/{b,}/{c,}/*` – `['a///*', 'a/b//*', 'a//c/*', 'a/b/c/*']`\n     */\n    patterns.sort((a, b) => a.length - b.length);\n    /**\n     * Micromatch can return an empty string in the case of patterns like `{a,}`.\n     */\n    return patterns.filter((pattern) => pattern !== '');\n}\nexports.expandBraceExpansion = expandBraceExpansion;\nfunction getPatternParts(pattern, options) {\n    let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), { parts: true }));\n    /**\n     * The scan method returns an empty array in some cases.\n     * See micromatch/picomatch#58 for more details.\n     */\n    if (parts.length === 0) {\n        parts = [pattern];\n    }\n    /**\n     * The scan method does not return an empty part for the pattern with a forward slash.\n     * This is another part of micromatch/picomatch#58.\n     */\n    if (parts[0].startsWith('/')) {\n        parts[0] = parts[0].slice(1);\n        parts.unshift('');\n    }\n    return parts;\n}\nexports.getPatternParts = getPatternParts;\nfunction makeRe(pattern, options) {\n    return micromatch.makeRe(pattern, options);\n}\nexports.makeRe = makeRe;\nfunction convertPatternsToRe(patterns, options) {\n    return patterns.map((pattern) => makeRe(pattern, options));\n}\nexports.convertPatternsToRe = convertPatternsToRe;\nfunction matchAny(entry, patternsRe) {\n    return patternsRe.some((patternRe) => patternRe.test(entry));\n}\nexports.matchAny = matchAny;\n/**\n * This package only works with forward slashes as a path separator.\n * Because of this, we cannot use the standard `path.normalize` method, because on Windows platform it will use of backslashes.\n */\nfunction removeDuplicateSlashes(pattern) {\n    return pattern.replace(DOUBLE_SLASH_RE, '/');\n}\nexports.removeDuplicateSlashes = removeDuplicateSlashes;\nfunction partitionAbsoluteAndRelative(patterns) {\n    const absolute = [];\n    const relative = [];\n    for (const pattern of patterns) {\n        if (isAbsolute(pattern)) {\n            absolute.push(pattern);\n        }\n        else {\n            relative.push(pattern);\n        }\n    }\n    return [absolute, relative];\n}\nexports.partitionAbsoluteAndRelative = partitionAbsoluteAndRelative;\nfunction isAbsolute(pattern) {\n    return path.isAbsolute(pattern);\n}\nexports.isAbsolute = isAbsolute;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.merge = void 0;\nconst merge2 = require(\"merge2\");\nfunction merge(streams) {\n    const mergedStream = merge2(streams);\n    streams.forEach((stream) => {\n        stream.once('error', (error) => mergedStream.emit('error', error));\n    });\n    mergedStream.once('close', () => propagateCloseEventToSources(streams));\n    mergedStream.once('end', () => propagateCloseEventToSources(streams));\n    return mergedStream;\n}\nexports.merge = merge;\nfunction propagateCloseEventToSources(streams) {\n    streams.forEach((stream) => stream.emit('close'));\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isEmpty = exports.isString = void 0;\nfunction isString(input) {\n    return typeof input === 'string';\n}\nexports.isString = isString;\nfunction isEmpty(input) {\n    return input === '';\n}\nexports.isEmpty = isEmpty;\n","'use strict'\n\n/* eslint-disable no-var */\n\nvar reusify = require('reusify')\n\nfunction fastqueue (context, worker, _concurrency) {\n  if (typeof context === 'function') {\n    _concurrency = worker\n    worker = context\n    context = null\n  }\n\n  if (!(_concurrency >= 1)) {\n    throw new Error('fastqueue concurrency must be equal to or greater than 1')\n  }\n\n  var cache = reusify(Task)\n  var queueHead = null\n  var queueTail = null\n  var _running = 0\n  var errorHandler = null\n\n  var self = {\n    push: push,\n    drain: noop,\n    saturated: noop,\n    pause: pause,\n    paused: false,\n\n    get concurrency () {\n      return _concurrency\n    },\n    set concurrency (value) {\n      if (!(value >= 1)) {\n        throw new Error('fastqueue concurrency must be equal to or greater than 1')\n      }\n      _concurrency = value\n\n      if (self.paused) return\n      for (; queueHead && _running < _concurrency;) {\n        _running++\n        release()\n      }\n    },\n\n    running: running,\n    resume: resume,\n    idle: idle,\n    length: length,\n    getQueue: getQueue,\n    unshift: unshift,\n    empty: noop,\n    kill: kill,\n    killAndDrain: killAndDrain,\n    error: error\n  }\n\n  return self\n\n  function running () {\n    return _running\n  }\n\n  function pause () {\n    self.paused = true\n  }\n\n  function length () {\n    var current = queueHead\n    var counter = 0\n\n    while (current) {\n      current = current.next\n      counter++\n    }\n\n    return counter\n  }\n\n  function getQueue () {\n    var current = queueHead\n    var tasks = []\n\n    while (current) {\n      tasks.push(current.value)\n      current = current.next\n    }\n\n    return tasks\n  }\n\n  function resume () {\n    if (!self.paused) return\n    self.paused = false\n    if (queueHead === null) {\n      _running++\n      release()\n      return\n    }\n    for (; queueHead && _running < _concurrency;) {\n      _running++\n      release()\n    }\n  }\n\n  function idle () {\n    return _running === 0 && self.length() === 0\n  }\n\n  function push (value, done) {\n    var current = cache.get()\n\n    current.context = context\n    current.release = release\n    current.value = value\n    current.callback = done || noop\n    current.errorHandler = errorHandler\n\n    if (_running >= _concurrency || self.paused) {\n      if (queueTail) {\n        queueTail.next = current\n        queueTail = current\n      } else {\n        queueHead = current\n        queueTail = current\n        self.saturated()\n      }\n    } else {\n      _running++\n      worker.call(context, current.value, current.worked)\n    }\n  }\n\n  function unshift (value, done) {\n    var current = cache.get()\n\n    current.context = context\n    current.release = release\n    current.value = value\n    current.callback = done || noop\n    current.errorHandler = errorHandler\n\n    if (_running >= _concurrency || self.paused) {\n      if (queueHead) {\n        current.next = queueHead\n        queueHead = current\n      } else {\n        queueHead = current\n        queueTail = current\n        self.saturated()\n      }\n    } else {\n      _running++\n      worker.call(context, current.value, current.worked)\n    }\n  }\n\n  function release (holder) {\n    if (holder) {\n      cache.release(holder)\n    }\n    var next = queueHead\n    if (next && _running <= _concurrency) {\n      if (!self.paused) {\n        if (queueTail === queueHead) {\n          queueTail = null\n        }\n        queueHead = next.next\n        next.next = null\n        worker.call(context, next.value, next.worked)\n        if (queueTail === null) {\n          self.empty()\n        }\n      } else {\n        _running--\n      }\n    } else if (--_running === 0) {\n      self.drain()\n    }\n  }\n\n  function kill () {\n    queueHead = null\n    queueTail = null\n    self.drain = noop\n  }\n\n  function killAndDrain () {\n    queueHead = null\n    queueTail = null\n    self.drain()\n    self.drain = noop\n  }\n\n  function error (handler) {\n    errorHandler = handler\n  }\n}\n\nfunction noop () {}\n\nfunction Task () {\n  this.value = null\n  this.callback = noop\n  this.next = null\n  this.release = noop\n  this.context = null\n  this.errorHandler = null\n\n  var self = this\n\n  this.worked = function worked (err, result) {\n    var callback = self.callback\n    var errorHandler = self.errorHandler\n    var val = self.value\n    self.value = null\n    self.callback = noop\n    if (self.errorHandler) {\n      errorHandler(err, val)\n    }\n    callback.call(self.context, err, result)\n    self.release(self)\n  }\n}\n\nfunction queueAsPromised (context, worker, _concurrency) {\n  if (typeof context === 'function') {\n    _concurrency = worker\n    worker = context\n    context = null\n  }\n\n  function asyncWrapper (arg, cb) {\n    worker.call(this, arg)\n      .then(function (res) {\n        cb(null, res)\n      }, cb)\n  }\n\n  var queue = fastqueue(context, asyncWrapper, _concurrency)\n\n  var pushCb = queue.push\n  var unshiftCb = queue.unshift\n\n  queue.push = push\n  queue.unshift = unshift\n  queue.drained = drained\n\n  return queue\n\n  function push (value) {\n    var p = new Promise(function (resolve, reject) {\n      pushCb(value, function (err, result) {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve(result)\n      })\n    })\n\n    // Let's fork the promise chain to\n    // make the error bubble up to the user but\n    // not lead to a unhandledRejection\n    p.catch(noop)\n\n    return p\n  }\n\n  function unshift (value) {\n    var p = new Promise(function (resolve, reject) {\n      unshiftCb(value, function (err, result) {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve(result)\n      })\n    })\n\n    // Let's fork the promise chain to\n    // make the error bubble up to the user but\n    // not lead to a unhandledRejection\n    p.catch(noop)\n\n    return p\n  }\n\n  function drained () {\n    var p = new Promise(function (resolve) {\n      process.nextTick(function () {\n        if (queue.idle()) {\n          resolve()\n        } else {\n          var previousDrain = queue.drain\n          queue.drain = function () {\n            if (typeof previousDrain === 'function') previousDrain()\n            resolve()\n            queue.drain = previousDrain\n          }\n        }\n      })\n    })\n\n    return p\n  }\n}\n\nmodule.exports = fastqueue\nmodule.exports.promise = queueAsPromised\n","/*!\n * fill-range <https://github.com/jonschlinkert/fill-range>\n *\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nconst util = require('util');\nconst toRegexRange = require('to-regex-range');\n\nconst isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\n\nconst transform = toNumber => {\n  return value => toNumber === true ? Number(value) : String(value);\n};\n\nconst isValidValue = value => {\n  return typeof value === 'number' || (typeof value === 'string' && value !== '');\n};\n\nconst isNumber = num => Number.isInteger(+num);\n\nconst zeros = input => {\n  let value = `${input}`;\n  let index = -1;\n  if (value[0] === '-') value = value.slice(1);\n  if (value === '0') return false;\n  while (value[++index] === '0');\n  return index > 0;\n};\n\nconst stringify = (start, end, options) => {\n  if (typeof start === 'string' || typeof end === 'string') {\n    return true;\n  }\n  return options.stringify === true;\n};\n\nconst pad = (input, maxLength, toNumber) => {\n  if (maxLength > 0) {\n    let dash = input[0] === '-' ? '-' : '';\n    if (dash) input = input.slice(1);\n    input = (dash + input.padStart(dash ? maxLength - 1 : maxLength, '0'));\n  }\n  if (toNumber === false) {\n    return String(input);\n  }\n  return input;\n};\n\nconst toMaxLen = (input, maxLength) => {\n  let negative = input[0] === '-' ? '-' : '';\n  if (negative) {\n    input = input.slice(1);\n    maxLength--;\n  }\n  while (input.length < maxLength) input = '0' + input;\n  return negative ? ('-' + input) : input;\n};\n\nconst toSequence = (parts, options, maxLen) => {\n  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);\n  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);\n\n  let prefix = options.capture ? '' : '?:';\n  let positives = '';\n  let negatives = '';\n  let result;\n\n  if (parts.positives.length) {\n    positives = parts.positives.map(v => toMaxLen(String(v), maxLen)).join('|');\n  }\n\n  if (parts.negatives.length) {\n    negatives = `-(${prefix}${parts.negatives.map(v => toMaxLen(String(v), maxLen)).join('|')})`;\n  }\n\n  if (positives && negatives) {\n    result = `${positives}|${negatives}`;\n  } else {\n    result = positives || negatives;\n  }\n\n  if (options.wrap) {\n    return `(${prefix}${result})`;\n  }\n\n  return result;\n};\n\nconst toRange = (a, b, isNumbers, options) => {\n  if (isNumbers) {\n    return toRegexRange(a, b, { wrap: false, ...options });\n  }\n\n  let start = String.fromCharCode(a);\n  if (a === b) return start;\n\n  let stop = String.fromCharCode(b);\n  return `[${start}-${stop}]`;\n};\n\nconst toRegex = (start, end, options) => {\n  if (Array.isArray(start)) {\n    let wrap = options.wrap === true;\n    let prefix = options.capture ? '' : '?:';\n    return wrap ? `(${prefix}${start.join('|')})` : start.join('|');\n  }\n  return toRegexRange(start, end, options);\n};\n\nconst rangeError = (...args) => {\n  return new RangeError('Invalid range arguments: ' + util.inspect(...args));\n};\n\nconst invalidRange = (start, end, options) => {\n  if (options.strictRanges === true) throw rangeError([start, end]);\n  return [];\n};\n\nconst invalidStep = (step, options) => {\n  if (options.strictRanges === true) {\n    throw new TypeError(`Expected step \"${step}\" to be a number`);\n  }\n  return [];\n};\n\nconst fillNumbers = (start, end, step = 1, options = {}) => {\n  let a = Number(start);\n  let b = Number(end);\n\n  if (!Number.isInteger(a) || !Number.isInteger(b)) {\n    if (options.strictRanges === true) throw rangeError([start, end]);\n    return [];\n  }\n\n  // fix negative zero\n  if (a === 0) a = 0;\n  if (b === 0) b = 0;\n\n  let descending = a > b;\n  let startString = String(start);\n  let endString = String(end);\n  let stepString = String(step);\n  step = Math.max(Math.abs(step), 1);\n\n  let padded = zeros(startString) || zeros(endString) || zeros(stepString);\n  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;\n  let toNumber = padded === false && stringify(start, end, options) === false;\n  let format = options.transform || transform(toNumber);\n\n  if (options.toRegex && step === 1) {\n    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);\n  }\n\n  let parts = { negatives: [], positives: [] };\n  let push = num => parts[num < 0 ? 'negatives' : 'positives'].push(Math.abs(num));\n  let range = [];\n  let index = 0;\n\n  while (descending ? a >= b : a <= b) {\n    if (options.toRegex === true && step > 1) {\n      push(a);\n    } else {\n      range.push(pad(format(a, index), maxLen, toNumber));\n    }\n    a = descending ? a - step : a + step;\n    index++;\n  }\n\n  if (options.toRegex === true) {\n    return step > 1\n      ? toSequence(parts, options, maxLen)\n      : toRegex(range, null, { wrap: false, ...options });\n  }\n\n  return range;\n};\n\nconst fillLetters = (start, end, step = 1, options = {}) => {\n  if ((!isNumber(start) && start.length > 1) || (!isNumber(end) && end.length > 1)) {\n    return invalidRange(start, end, options);\n  }\n\n  let format = options.transform || (val => String.fromCharCode(val));\n  let a = `${start}`.charCodeAt(0);\n  let b = `${end}`.charCodeAt(0);\n\n  let descending = a > b;\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n\n  if (options.toRegex && step === 1) {\n    return toRange(min, max, false, options);\n  }\n\n  let range = [];\n  let index = 0;\n\n  while (descending ? a >= b : a <= b) {\n    range.push(format(a, index));\n    a = descending ? a - step : a + step;\n    index++;\n  }\n\n  if (options.toRegex === true) {\n    return toRegex(range, null, { wrap: false, options });\n  }\n\n  return range;\n};\n\nconst fill = (start, end, step, options = {}) => {\n  if (end == null && isValidValue(start)) {\n    return [start];\n  }\n\n  if (!isValidValue(start) || !isValidValue(end)) {\n    return invalidRange(start, end, options);\n  }\n\n  if (typeof step === 'function') {\n    return fill(start, end, 1, { transform: step });\n  }\n\n  if (isObject(step)) {\n    return fill(start, end, 0, step);\n  }\n\n  let opts = { ...options };\n  if (opts.capture === true) opts.wrap = true;\n  step = step || opts.step || 1;\n\n  if (!isNumber(step)) {\n    if (step != null && !isObject(step)) return invalidStep(step, opts);\n    return fill(start, end, 1, step);\n  }\n\n  if (isNumber(start) && isNumber(end)) {\n    return fillNumbers(start, end, step, opts);\n  }\n\n  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);\n};\n\nmodule.exports = fill;\n","'use strict';\n\nvar isGlob = require('is-glob');\nvar pathPosixDirname = require('path').posix.dirname;\nvar isWin32 = require('os').platform() === 'win32';\n\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar enclosure = /[\\{\\[].*[\\}\\]]$/;\nvar globby = /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/;\nvar escaped = /\\\\([\\!\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g;\n\n/**\n * @param {string} str\n * @param {Object} opts\n * @param {boolean} [opts.flipBackslashes=true]\n * @returns {string}\n */\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({ flipBackslashes: true }, opts);\n\n  // flip windows path separators\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  }\n\n  // special case for strings ending in enclosure containing path separator\n  if (enclosure.test(str)) {\n    str += slash;\n  }\n\n  // preserves full path in case of trailing path separator\n  str += 'a';\n\n  // remove path parts that are globby\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlob(str) || globby.test(str));\n\n  // remove escape chars and return result\n  return str.replace(escaped, '$1');\n};\n","/*!\n * is-extglob <https://github.com/jonschlinkert/is-extglob>\n *\n * Copyright (c) 2014-2016, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\nmodule.exports = function isExtglob(str) {\n  if (typeof str !== 'string' || str === '') {\n    return false;\n  }\n\n  var match;\n  while ((match = /(\\\\).|([@?!+*]\\(.*\\))/g.exec(str))) {\n    if (match[2]) return true;\n    str = str.slice(match.index + match[0].length);\n  }\n\n  return false;\n};\n","/*!\n * is-glob <https://github.com/jonschlinkert/is-glob>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nvar isExtglob = require('is-extglob');\nvar chars = { '{': '}', '(': ')', '[': ']'};\nvar strictCheck = function(str) {\n  if (str[0] === '!') {\n    return true;\n  }\n  var index = 0;\n  var pipeIndex = -2;\n  var closeSquareIndex = -2;\n  var closeCurlyIndex = -2;\n  var closeParenIndex = -2;\n  var backSlashIndex = -2;\n  while (index < str.length) {\n    if (str[index] === '*') {\n      return true;\n    }\n\n    if (str[index + 1] === '?' && /[\\].+)]/.test(str[index])) {\n      return true;\n    }\n\n    if (closeSquareIndex !== -1 && str[index] === '[' && str[index + 1] !== ']') {\n      if (closeSquareIndex < index) {\n        closeSquareIndex = str.indexOf(']', index);\n      }\n      if (closeSquareIndex > index) {\n        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {\n          return true;\n        }\n        backSlashIndex = str.indexOf('\\\\', index);\n        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {\n          return true;\n        }\n      }\n    }\n\n    if (closeCurlyIndex !== -1 && str[index] === '{' && str[index + 1] !== '}') {\n      closeCurlyIndex = str.indexOf('}', index);\n      if (closeCurlyIndex > index) {\n        backSlashIndex = str.indexOf('\\\\', index);\n        if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {\n          return true;\n        }\n      }\n    }\n\n    if (closeParenIndex !== -1 && str[index] === '(' && str[index + 1] === '?' && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ')') {\n      closeParenIndex = str.indexOf(')', index);\n      if (closeParenIndex > index) {\n        backSlashIndex = str.indexOf('\\\\', index);\n        if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {\n          return true;\n        }\n      }\n    }\n\n    if (pipeIndex !== -1 && str[index] === '(' && str[index + 1] !== '|') {\n      if (pipeIndex < index) {\n        pipeIndex = str.indexOf('|', index);\n      }\n      if (pipeIndex !== -1 && str[pipeIndex + 1] !== ')') {\n        closeParenIndex = str.indexOf(')', pipeIndex);\n        if (closeParenIndex > pipeIndex) {\n          backSlashIndex = str.indexOf('\\\\', pipeIndex);\n          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {\n            return true;\n          }\n        }\n      }\n    }\n\n    if (str[index] === '\\\\') {\n      var open = str[index + 1];\n      index += 2;\n      var close = chars[open];\n\n      if (close) {\n        var n = str.indexOf(close, index);\n        if (n !== -1) {\n          index = n + 1;\n        }\n      }\n\n      if (str[index] === '!') {\n        return true;\n      }\n    } else {\n      index++;\n    }\n  }\n  return false;\n};\n\nvar relaxedCheck = function(str) {\n  if (str[0] === '!') {\n    return true;\n  }\n  var index = 0;\n  while (index < str.length) {\n    if (/[*?{}()[\\]]/.test(str[index])) {\n      return true;\n    }\n\n    if (str[index] === '\\\\') {\n      var open = str[index + 1];\n      index += 2;\n      var close = chars[open];\n\n      if (close) {\n        var n = str.indexOf(close, index);\n        if (n !== -1) {\n          index = n + 1;\n        }\n      }\n\n      if (str[index] === '!') {\n        return true;\n      }\n    } else {\n      index++;\n    }\n  }\n  return false;\n};\n\nmodule.exports = function isGlob(str, options) {\n  if (typeof str !== 'string' || str === '') {\n    return false;\n  }\n\n  if (isExtglob(str)) {\n    return true;\n  }\n\n  var check = strictCheck;\n\n  // optionally relax check\n  if (options && options.strict === false) {\n    check = relaxedCheck;\n  }\n\n  return check(str);\n};\n","/*!\n * is-number <https://github.com/jonschlinkert/is-number>\n *\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function(num) {\n  if (typeof num === 'number') {\n    return num - num === 0;\n  }\n  if (typeof num === 'string' && num.trim() !== '') {\n    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);\n  }\n  return false;\n};\n","'use strict'\n/*\n * merge2\n * https://github.com/teambition/merge2\n *\n * Copyright (c) 2014-2020 Teambition\n * Licensed under the MIT license.\n */\nconst Stream = require('stream')\nconst PassThrough = Stream.PassThrough\nconst slice = Array.prototype.slice\n\nmodule.exports = merge2\n\nfunction merge2 () {\n  const streamsQueue = []\n  const args = slice.call(arguments)\n  let merging = false\n  let options = args[args.length - 1]\n\n  if (options && !Array.isArray(options) && options.pipe == null) {\n    args.pop()\n  } else {\n    options = {}\n  }\n\n  const doEnd = options.end !== false\n  const doPipeError = options.pipeError === true\n  if (options.objectMode == null) {\n    options.objectMode = true\n  }\n  if (options.highWaterMark == null) {\n    options.highWaterMark = 64 * 1024\n  }\n  const mergedStream = PassThrough(options)\n\n  function addStream () {\n    for (let i = 0, len = arguments.length; i < len; i++) {\n      streamsQueue.push(pauseStreams(arguments[i], options))\n    }\n    mergeStream()\n    return this\n  }\n\n  function mergeStream () {\n    if (merging) {\n      return\n    }\n    merging = true\n\n    let streams = streamsQueue.shift()\n    if (!streams) {\n      process.nextTick(endStream)\n      return\n    }\n    if (!Array.isArray(streams)) {\n      streams = [streams]\n    }\n\n    let pipesCount = streams.length + 1\n\n    function next () {\n      if (--pipesCount > 0) {\n        return\n      }\n      merging = false\n      mergeStream()\n    }\n\n    function pipe (stream) {\n      function onend () {\n        stream.removeListener('merge2UnpipeEnd', onend)\n        stream.removeListener('end', onend)\n        if (doPipeError) {\n          stream.removeListener('error', onerror)\n        }\n        next()\n      }\n      function onerror (err) {\n        mergedStream.emit('error', err)\n      }\n      // skip ended stream\n      if (stream._readableState.endEmitted) {\n        return next()\n      }\n\n      stream.on('merge2UnpipeEnd', onend)\n      stream.on('end', onend)\n\n      if (doPipeError) {\n        stream.on('error', onerror)\n      }\n\n      stream.pipe(mergedStream, { end: false })\n      // compatible for old stream\n      stream.resume()\n    }\n\n    for (let i = 0; i < streams.length; i++) {\n      pipe(streams[i])\n    }\n\n    next()\n  }\n\n  function endStream () {\n    merging = false\n    // emit 'queueDrain' when all streams merged.\n    mergedStream.emit('queueDrain')\n    if (doEnd) {\n      mergedStream.end()\n    }\n  }\n\n  mergedStream.setMaxListeners(0)\n  mergedStream.add = addStream\n  mergedStream.on('unpipe', function (stream) {\n    stream.emit('merge2UnpipeEnd')\n  })\n\n  if (args.length) {\n    addStream.apply(null, args)\n  }\n  return mergedStream\n}\n\n// check and pause streams for pipe.\nfunction pauseStreams (streams, options) {\n  if (!Array.isArray(streams)) {\n    // Backwards-compat with old-style streams\n    if (!streams._readableState && streams.pipe) {\n      streams = streams.pipe(PassThrough(options))\n    }\n    if (!streams._readableState || !streams.pause || !streams.pipe) {\n      throw new Error('Only readable stream can be merged.')\n    }\n    streams.pause()\n  } else {\n    for (let i = 0, len = streams.length; i < len; i++) {\n      streams[i] = pauseStreams(streams[i], options)\n    }\n  }\n  return streams\n}\n","'use strict';\n\nconst util = require('util');\nconst braces = require('braces');\nconst picomatch = require('picomatch');\nconst utils = require('picomatch/lib/utils');\n\nconst isEmptyString = v => v === '' || v === './';\nconst hasBraces = v => {\n  const index = v.indexOf('{');\n  return index > -1 && v.indexOf('}', index) > -1;\n};\n\n/**\n * Returns an array of strings that match one or more glob patterns.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm(list, patterns[, options]);\n *\n * console.log(mm(['a.js', 'a.txt'], ['*.js']));\n * //=> [ 'a.js' ]\n * ```\n * @param {String|Array<string>} `list` List of strings to match.\n * @param {String|Array<string>} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options)\n * @return {Array} Returns an array of matches\n * @summary false\n * @api public\n */\n\nconst micromatch = (list, patterns, options) => {\n  patterns = [].concat(patterns);\n  list = [].concat(list);\n\n  let omit = new Set();\n  let keep = new Set();\n  let items = new Set();\n  let negatives = 0;\n\n  let onResult = state => {\n    items.add(state.output);\n    if (options && options.onResult) {\n      options.onResult(state);\n    }\n  };\n\n  for (let i = 0; i < patterns.length; i++) {\n    let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);\n    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;\n    if (negated) negatives++;\n\n    for (let item of list) {\n      let matched = isMatch(item, true);\n\n      let match = negated ? !matched.isMatch : matched.isMatch;\n      if (!match) continue;\n\n      if (negated) {\n        omit.add(matched.output);\n      } else {\n        omit.delete(matched.output);\n        keep.add(matched.output);\n      }\n    }\n  }\n\n  let result = negatives === patterns.length ? [...items] : [...keep];\n  let matches = result.filter(item => !omit.has(item));\n\n  if (options && matches.length === 0) {\n    if (options.failglob === true) {\n      throw new Error(`No matches found for \"${patterns.join(', ')}\"`);\n    }\n\n    if (options.nonull === true || options.nullglob === true) {\n      return options.unescape ? patterns.map(p => p.replace(/\\\\/g, '')) : patterns;\n    }\n  }\n\n  return matches;\n};\n\n/**\n * Backwards compatibility\n */\n\nmicromatch.match = micromatch;\n\n/**\n * Returns a matcher function from the given glob `pattern` and `options`.\n * The returned function takes a string to match as its only argument and returns\n * true if the string is a match.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.matcher(pattern[, options]);\n *\n * const isMatch = mm.matcher('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @param {String} `pattern` Glob pattern\n * @param {Object} `options`\n * @return {Function} Returns a matcher function.\n * @api public\n */\n\nmicromatch.matcher = (pattern, options) => picomatch(pattern, options);\n\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.isMatch(string, patterns[, options]);\n *\n * console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(mm.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `[options]` See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nmicromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n\n/**\n * Backwards compatibility\n */\n\nmicromatch.any = micromatch.isMatch;\n\n/**\n * Returns a list of strings that _**do not match any**_ of the given `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.not(list, patterns[, options]);\n *\n * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n * //=> ['b.b', 'c.c']\n * ```\n * @param {Array} `list` Array of strings to match.\n * @param {String|Array} `patterns` One or more glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array} Returns an array of strings that **do not match** the given patterns.\n * @api public\n */\n\nmicromatch.not = (list, patterns, options = {}) => {\n  patterns = [].concat(patterns).map(String);\n  let result = new Set();\n  let items = [];\n\n  let onResult = state => {\n    if (options.onResult) options.onResult(state);\n    items.push(state.output);\n  };\n\n  let matches = new Set(micromatch(list, patterns, { ...options, onResult }));\n\n  for (let item of items) {\n    if (!matches.has(item)) {\n      result.add(item);\n    }\n  }\n  return [...result];\n};\n\n/**\n * Returns true if the given `string` contains the given pattern. Similar\n * to [.isMatch](#isMatch) but the pattern can match any part of the string.\n *\n * ```js\n * var mm = require('micromatch');\n * // mm.contains(string, pattern[, options]);\n *\n * console.log(mm.contains('aa/bb/cc', '*b'));\n * //=> true\n * console.log(mm.contains('aa/bb/cc', '*d'));\n * //=> false\n * ```\n * @param {String} `str` The string to match.\n * @param {String|Array} `patterns` Glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any of the patterns matches any part of `str`.\n * @api public\n */\n\nmicromatch.contains = (str, pattern, options) => {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected a string: \"${util.inspect(str)}\"`);\n  }\n\n  if (Array.isArray(pattern)) {\n    return pattern.some(p => micromatch.contains(str, p, options));\n  }\n\n  if (typeof pattern === 'string') {\n    if (isEmptyString(str) || isEmptyString(pattern)) {\n      return false;\n    }\n\n    if (str.includes(pattern) || (str.startsWith('./') && str.slice(2).includes(pattern))) {\n      return true;\n    }\n  }\n\n  return micromatch.isMatch(str, pattern, { ...options, contains: true });\n};\n\n/**\n * Filter the keys of the given object with the given `glob` pattern\n * and `options`. Does not attempt to match nested keys. If you need this feature,\n * use [glob-object][] instead.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.matchKeys(object, patterns[, options]);\n *\n * const obj = { aa: 'a', ab: 'b', ac: 'c' };\n * console.log(mm.matchKeys(obj, '*b'));\n * //=> { ab: 'b' }\n * ```\n * @param {Object} `object` The object with keys to filter.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Object} Returns an object with only keys that match the given patterns.\n * @api public\n */\n\nmicromatch.matchKeys = (obj, patterns, options) => {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('Expected the first argument to be an object');\n  }\n  let keys = micromatch(Object.keys(obj), patterns, options);\n  let res = {};\n  for (let key of keys) res[key] = obj[key];\n  return res;\n};\n\n/**\n * Returns true if some of the strings in the given `list` match any of the given glob `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.some(list, patterns[, options]);\n *\n * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // true\n * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any `patterns` matches any of the strings in `list`\n * @api public\n */\n\nmicromatch.some = (list, patterns, options) => {\n  let items = [].concat(list);\n\n  for (let pattern of [].concat(patterns)) {\n    let isMatch = picomatch(String(pattern), options);\n    if (items.some(item => isMatch(item))) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if every string in the given `list` matches\n * any of the given glob `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.every(list, patterns[, options]);\n *\n * console.log(mm.every('foo.js', ['foo.js']));\n * // true\n * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));\n * // true\n * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // false\n * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param {String|Array} `list` The string or array of strings to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if all `patterns` matches all of the strings in `list`\n * @api public\n */\n\nmicromatch.every = (list, patterns, options) => {\n  let items = [].concat(list);\n\n  for (let pattern of [].concat(patterns)) {\n    let isMatch = picomatch(String(pattern), options);\n    if (!items.every(item => isMatch(item))) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if **all** of the given `patterns` match\n * the specified string.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.all(string, patterns[, options]);\n *\n * console.log(mm.all('foo.js', ['foo.js']));\n * // true\n *\n * console.log(mm.all('foo.js', ['*.js', '!foo.js']));\n * // false\n *\n * console.log(mm.all('foo.js', ['*.js', 'foo.js']));\n * // true\n *\n * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n * // true\n * ```\n * @param {String|Array} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nmicromatch.all = (str, patterns, options) => {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected a string: \"${util.inspect(str)}\"`);\n  }\n\n  return [].concat(patterns).every(p => picomatch(p, options)(str));\n};\n\n/**\n * Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.capture(pattern, string[, options]);\n *\n * console.log(mm.capture('test/*.js', 'test/foo.js'));\n * //=> ['foo']\n * console.log(mm.capture('test/*.js', 'foo/bar.css'));\n * //=> null\n * ```\n * @param {String} `glob` Glob pattern to use for matching.\n * @param {String} `input` String to match\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array|null} Returns an array of captures if the input matches the glob pattern, otherwise `null`.\n * @api public\n */\n\nmicromatch.capture = (glob, input, options) => {\n  let posix = utils.isWindows(options);\n  let regex = picomatch.makeRe(String(glob), { ...options, capture: true });\n  let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);\n\n  if (match) {\n    return match.slice(1).map(v => v === void 0 ? '' : v);\n  }\n};\n\n/**\n * Create a regular expression from the given glob `pattern`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.makeRe(pattern[, options]);\n *\n * console.log(mm.makeRe('*.js'));\n * //=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n * ```\n * @param {String} `pattern` A glob pattern to convert to regex.\n * @param {Object} `options`\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\nmicromatch.makeRe = (...args) => picomatch.makeRe(...args);\n\n/**\n * Scan a glob pattern to separate the pattern into segments. Used\n * by the [split](#split) method.\n *\n * ```js\n * const mm = require('micromatch');\n * const state = mm.scan(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\nmicromatch.scan = (...args) => picomatch.scan(...args);\n\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const mm = require('micromatch');\n * const state = mm.parse(pattern[, options]);\n * ```\n * @param {String} `glob`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as regex source string.\n * @api public\n */\n\nmicromatch.parse = (patterns, options) => {\n  let res = [];\n  for (let pattern of [].concat(patterns || [])) {\n    for (let str of braces(String(pattern), options)) {\n      res.push(picomatch.parse(str, options));\n    }\n  }\n  return res;\n};\n\n/**\n * Process the given brace `pattern`.\n *\n * ```js\n * const { braces } = require('micromatch');\n * console.log(braces('foo/{a,b,c}/bar'));\n * //=> [ 'foo/(a|b|c)/bar' ]\n *\n * console.log(braces('foo/{a,b,c}/bar', { expand: true }));\n * //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]\n * ```\n * @param {String} `pattern` String with brace pattern to process.\n * @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.\n * @return {Array}\n * @api public\n */\n\nmicromatch.braces = (pattern, options) => {\n  if (typeof pattern !== 'string') throw new TypeError('Expected a string');\n  if ((options && options.nobrace === true) || !hasBraces(pattern)) {\n    return [pattern];\n  }\n  return braces(pattern, options);\n};\n\n/**\n * Expand braces\n */\n\nmicromatch.braceExpand = (pattern, options) => {\n  if (typeof pattern !== 'string') throw new TypeError('Expected a string');\n  return micromatch.braces(pattern, { ...options, expand: true });\n};\n\n/**\n * Expose micromatch\n */\n\n// exposed for tests\nmicromatch.hasBraces = hasBraces;\nmodule.exports = micromatch;\n","const isWindows = typeof process === 'object' &&\n  process &&\n  process.platform === 'win32'\nmodule.exports = isWindows ? { sep: '\\\\' } : { sep: '/' }\n","const minimatch = module.exports = (p, pattern, options = {}) => {\n  assertValidPattern(pattern)\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nmodule.exports = minimatch\n\nconst path = require('./lib/path.js')\nminimatch.sep = path.sep\n\nconst GLOBSTAR = Symbol('globstar **')\nminimatch.GLOBSTAR = GLOBSTAR\nconst expand = require('brace-expansion')\n\nconst plTypes = {\n  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},\n  '?': { open: '(?:', close: ')?' },\n  '+': { open: '(?:', close: ')+' },\n  '*': { open: '(?:', close: ')*' },\n  '@': { open: '(?:', close: ')' }\n}\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nconst qmark = '[^/]'\n\n// * => any number of characters\nconst star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nconst twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nconst twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// \"abc\" -> { a:true, b:true, c:true }\nconst charSet = s => s.split('').reduce((set, c) => {\n  set[c] = true\n  return set\n}, {})\n\n// characters that need to be escaped in RegExp.\nconst reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// characters that indicate we have to add the pattern start\nconst addPatternStartSet = charSet('[.(')\n\n// normalizes slashes.\nconst slashSplit = /\\/+/\n\nminimatch.filter = (pattern, options = {}) =>\n  (p, i, list) => minimatch(p, pattern, options)\n\nconst ext = (a, b = {}) => {\n  const t = {}\n  Object.keys(a).forEach(k => t[k] = a[k])\n  Object.keys(b).forEach(k => t[k] = b[k])\n  return t\n}\n\nminimatch.defaults = def => {\n  if (!def || typeof def !== 'object' || !Object.keys(def).length) {\n    return minimatch\n  }\n\n  const orig = minimatch\n\n  const m = (p, pattern, options) => orig(p, pattern, ext(def, options))\n  m.Minimatch = class Minimatch extends orig.Minimatch {\n    constructor (pattern, options) {\n      super(pattern, ext(def, options))\n    }\n  }\n  m.Minimatch.defaults = options => orig.defaults(ext(def, options)).Minimatch\n  m.filter = (pattern, options) => orig.filter(pattern, ext(def, options))\n  m.defaults = options => orig.defaults(ext(def, options))\n  m.makeRe = (pattern, options) => orig.makeRe(pattern, ext(def, options))\n  m.braceExpand = (pattern, options) => orig.braceExpand(pattern, ext(def, options))\n  m.match = (list, pattern, options) => orig.match(list, pattern, ext(def, options))\n\n  return m\n}\n\n\n\n\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = (pattern, options) => braceExpand(pattern, options)\n\nconst braceExpand = (pattern, options = {}) => {\n  assertValidPattern(pattern)\n\n  // Thanks to Yeting Li <https://github.com/yetingli> for\n  // improving this regexp to avoid a ReDOS vulnerability.\n  if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\nconst MAX_PATTERN_LENGTH = 1024 * 64\nconst assertValidPattern = pattern => {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('invalid pattern')\n  }\n\n  if (pattern.length > MAX_PATTERN_LENGTH) {\n    throw new TypeError('pattern is too long')\n  }\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nconst SUBPARSE = Symbol('subparse')\n\nminimatch.makeRe = (pattern, options) =>\n  new Minimatch(pattern, options || {}).makeRe()\n\nminimatch.match = (list, pattern, options = {}) => {\n  const mm = new Minimatch(pattern, options)\n  list = list.filter(f => mm.match(f))\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\n// replace stuff like \\* with *\nconst globUnescape = s => s.replace(/\\\\(.)/g, '$1')\nconst charUnescape = s => s.replace(/\\\\([^-\\]])/g, '$1')\nconst regExpEscape = s => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\nconst braExpEscape = s => s.replace(/[[\\]\\\\]/g, '\\\\$&')\n\nclass Minimatch {\n  constructor (pattern, options) {\n    assertValidPattern(pattern)\n\n    if (!options) options = {}\n\n    this.options = options\n    this.set = []\n    this.pattern = pattern\n    this.windowsPathsNoEscape = !!options.windowsPathsNoEscape ||\n      options.allowWindowsEscape === false\n    if (this.windowsPathsNoEscape) {\n      this.pattern = this.pattern.replace(/\\\\/g, '/')\n    }\n    this.regexp = null\n    this.negate = false\n    this.comment = false\n    this.empty = false\n    this.partial = !!options.partial\n\n    // make the set of regexps etc.\n    this.make()\n  }\n\n  debug () {}\n\n  make () {\n    const pattern = this.pattern\n    const options = this.options\n\n    // empty patterns and comments match nothing.\n    if (!options.nocomment && pattern.charAt(0) === '#') {\n      this.comment = true\n      return\n    }\n    if (!pattern) {\n      this.empty = true\n      return\n    }\n\n    // step 1: figure out negation, etc.\n    this.parseNegate()\n\n    // step 2: expand braces\n    let set = this.globSet = this.braceExpand()\n\n    if (options.debug) this.debug = (...args) => console.error(...args)\n\n    this.debug(this.pattern, set)\n\n    // step 3: now we have a set, so turn each one into a series of path-portion\n    // matching patterns.\n    // These will be regexps, except in the case of \"**\", which is\n    // set to the GLOBSTAR object for globstar behavior,\n    // and will not contain any / characters\n    set = this.globParts = set.map(s => s.split(slashSplit))\n\n    this.debug(this.pattern, set)\n\n    // glob --> regexps\n    set = set.map((s, si, set) => s.map(this.parse, this))\n\n    this.debug(this.pattern, set)\n\n    // filter out everything that didn't compile properly.\n    set = set.filter(s => s.indexOf(false) === -1)\n\n    this.debug(this.pattern, set)\n\n    this.set = set\n  }\n\n  parseNegate () {\n    if (this.options.nonegate) return\n\n    const pattern = this.pattern\n    let negate = false\n    let negateOffset = 0\n\n    for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {\n      negate = !negate\n      negateOffset++\n    }\n\n    if (negateOffset) this.pattern = pattern.slice(negateOffset)\n    this.negate = negate\n  }\n\n  // set partial to true to test if, for example,\n  // \"/a/b\" matches the start of \"/*/b/*/d\"\n  // Partial means, if you run out of file before you run\n  // out of pattern, then that's fine, as long as all\n  // the parts match.\n  matchOne (file, pattern, partial) {\n    var options = this.options\n\n    this.debug('matchOne',\n      { 'this': this, file: file, pattern: pattern })\n\n    this.debug('matchOne', file.length, pattern.length)\n\n    for (var fi = 0,\n        pi = 0,\n        fl = file.length,\n        pl = pattern.length\n        ; (fi < fl) && (pi < pl)\n        ; fi++, pi++) {\n      this.debug('matchOne loop')\n      var p = pattern[pi]\n      var f = file[fi]\n\n      this.debug(pattern, p, f)\n\n      // should be impossible.\n      // some invalid regexp stuff in the set.\n      /* istanbul ignore if */\n      if (p === false) return false\n\n      if (p === GLOBSTAR) {\n        this.debug('GLOBSTAR', [pattern, p, f])\n\n        // \"**\"\n        // a/**/b/**/c would match the following:\n        // a/b/x/y/z/c\n        // a/x/y/z/b/c\n        // a/b/x/b/x/c\n        // a/b/c\n        // To do this, take the rest of the pattern after\n        // the **, and see if it would match the file remainder.\n        // If so, return success.\n        // If not, the ** \"swallows\" a segment, and try again.\n        // This is recursively awful.\n        //\n        // a/**/b/**/c matching a/b/x/y/z/c\n        // - a matches a\n        // - doublestar\n        //   - matchOne(b/x/y/z/c, b/**/c)\n        //     - b matches b\n        //     - doublestar\n        //       - matchOne(x/y/z/c, c) -> no\n        //       - matchOne(y/z/c, c) -> no\n        //       - matchOne(z/c, c) -> no\n        //       - matchOne(c, c) yes, hit\n        var fr = fi\n        var pr = pi + 1\n        if (pr === pl) {\n          this.debug('** at the end')\n          // a ** at the end will just swallow the rest.\n          // We have found a match.\n          // however, it will not swallow /.x, unless\n          // options.dot is set.\n          // . and .. are *never* matched by **, for explosively\n          // exponential reasons.\n          for (; fi < fl; fi++) {\n            if (file[fi] === '.' || file[fi] === '..' ||\n              (!options.dot && file[fi].charAt(0) === '.')) return false\n          }\n          return true\n        }\n\n        // ok, let's see if we can swallow whatever we can.\n        while (fr < fl) {\n          var swallowee = file[fr]\n\n          this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n          // XXX remove this slice.  Just pass the start index.\n          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n            this.debug('globstar found match!', fr, fl, swallowee)\n            // found a match.\n            return true\n          } else {\n            // can't swallow \".\" or \"..\" ever.\n            // can only swallow \".foo\" when explicitly asked.\n            if (swallowee === '.' || swallowee === '..' ||\n              (!options.dot && swallowee.charAt(0) === '.')) {\n              this.debug('dot detected!', file, fr, pattern, pr)\n              break\n            }\n\n            // ** swallows a segment, and continue.\n            this.debug('globstar swallow a segment, and continue')\n            fr++\n          }\n        }\n\n        // no match was found.\n        // However, in partial mode, we can't say this is necessarily over.\n        // If there's more *pattern* left, then\n        /* istanbul ignore if */\n        if (partial) {\n          // ran out of file\n          this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n          if (fr === fl) return true\n        }\n        return false\n      }\n\n      // something other than **\n      // non-magic patterns just have to match exactly\n      // patterns with magic have been turned into regexps.\n      var hit\n      if (typeof p === 'string') {\n        hit = f === p\n        this.debug('string match', p, f, hit)\n      } else {\n        hit = f.match(p)\n        this.debug('pattern match', p, f, hit)\n      }\n\n      if (!hit) return false\n    }\n\n    // Note: ending in / means that we'll get a final \"\"\n    // at the end of the pattern.  This can only match a\n    // corresponding \"\" at the end of the file.\n    // If the file ends in /, then it can only match a\n    // a pattern that ends in /, unless the pattern just\n    // doesn't have any more for it. But, a/b/ should *not*\n    // match \"a/b/*\", even though \"\" matches against the\n    // [^/]*? pattern, except in partial mode, where it might\n    // simply not be reached yet.\n    // However, a/b/ should still satisfy a/*\n\n    // now either we fell off the end of the pattern, or we're done.\n    if (fi === fl && pi === pl) {\n      // ran out of pattern and filename at the same time.\n      // an exact hit!\n      return true\n    } else if (fi === fl) {\n      // ran out of file, but still had pattern left.\n      // this is ok if we're doing the match as part of\n      // a glob fs traversal.\n      return partial\n    } else /* istanbul ignore else */ if (pi === pl) {\n      // ran out of pattern, still have file left.\n      // this is only acceptable if we're on the very last\n      // empty segment of a file with a trailing slash.\n      // a/* should match a/b/\n      return (fi === fl - 1) && (file[fi] === '')\n    }\n\n    // should be unreachable.\n    /* istanbul ignore next */\n    throw new Error('wtf?')\n  }\n\n  braceExpand () {\n    return braceExpand(this.pattern, this.options)\n  }\n\n  parse (pattern, isSub) {\n    assertValidPattern(pattern)\n\n    const options = this.options\n\n    // shortcuts\n    if (pattern === '**') {\n      if (!options.noglobstar)\n        return GLOBSTAR\n      else\n        pattern = '*'\n    }\n    if (pattern === '') return ''\n\n    let re = ''\n    let hasMagic = false\n    let escaping = false\n    // ? => one single character\n    const patternListStack = []\n    const negativeLists = []\n    let stateChar\n    let inClass = false\n    let reClassStart = -1\n    let classStart = -1\n    let cs\n    let pl\n    let sp\n    // . and .. never match anything that doesn't start with .,\n    // even when options.dot is set.  However, if the pattern\n    // starts with ., then traversal patterns can match.\n    let dotTravAllowed = pattern.charAt(0) === '.'\n    let dotFileAllowed = options.dot || dotTravAllowed\n    const patternStart = () =>\n      dotTravAllowed\n        ? ''\n        : dotFileAllowed\n        ? '(?!(?:^|\\\\/)\\\\.{1,2}(?:$|\\\\/))'\n        : '(?!\\\\.)'\n    const subPatternStart = (p) =>\n      p.charAt(0) === '.'\n        ? ''\n        : options.dot\n        ? '(?!(?:^|\\\\/)\\\\.{1,2}(?:$|\\\\/))'\n        : '(?!\\\\.)'\n\n\n    const clearStateChar = () => {\n      if (stateChar) {\n        // we had some state-tracking character\n        // that wasn't consumed by this pass.\n        switch (stateChar) {\n          case '*':\n            re += star\n            hasMagic = true\n          break\n          case '?':\n            re += qmark\n            hasMagic = true\n          break\n          default:\n            re += '\\\\' + stateChar\n          break\n        }\n        this.debug('clearStateChar %j %j', stateChar, re)\n        stateChar = false\n      }\n    }\n\n    for (let i = 0, c; (i < pattern.length) && (c = pattern.charAt(i)); i++) {\n      this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n      // skip over any that are escaped.\n      if (escaping) {\n        /* istanbul ignore next - completely not allowed, even escaped. */\n        if (c === '/') {\n          return false\n        }\n\n        if (reSpecials[c]) {\n          re += '\\\\'\n        }\n        re += c\n        escaping = false\n        continue\n      }\n\n      switch (c) {\n        /* istanbul ignore next */\n        case '/': {\n          // Should already be path-split by now.\n          return false\n        }\n\n        case '\\\\':\n          if (inClass && pattern.charAt(i + 1) === '-') {\n            re += c\n            continue\n          }\n\n          clearStateChar()\n          escaping = true\n        continue\n\n        // the various stateChar values\n        // for the \"extglob\" stuff.\n        case '?':\n        case '*':\n        case '+':\n        case '@':\n        case '!':\n          this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n          // all of those are literals inside a class, except that\n          // the glob [!a] means [^a] in regexp\n          if (inClass) {\n            this.debug('  in class')\n            if (c === '!' && i === classStart + 1) c = '^'\n            re += c\n            continue\n          }\n\n          // if we already have a stateChar, then it means\n          // that there was something like ** or +? in there.\n          // Handle the stateChar, then proceed with this one.\n          this.debug('call clearStateChar %j', stateChar)\n          clearStateChar()\n          stateChar = c\n          // if extglob is disabled, then +(asdf|foo) isn't a thing.\n          // just clear the statechar *now*, rather than even diving into\n          // the patternList stuff.\n          if (options.noext) clearStateChar()\n        continue\n\n        case '(': {\n          if (inClass) {\n            re += '('\n            continue\n          }\n\n          if (!stateChar) {\n            re += '\\\\('\n            continue\n          }\n\n          const plEntry = {\n            type: stateChar,\n            start: i - 1,\n            reStart: re.length,\n            open: plTypes[stateChar].open,\n            close: plTypes[stateChar].close,\n          }\n          this.debug(this.pattern, '\\t', plEntry)\n          patternListStack.push(plEntry)\n          // negation is (?:(?!(?:js)(?:<rest>))[^/]*)\n          re += plEntry.open\n          // next entry starts with a dot maybe?\n          if (plEntry.start === 0 && plEntry.type !== '!') {\n            dotTravAllowed = true\n            re += subPatternStart(pattern.slice(i + 1))\n          }\n          this.debug('plType %j %j', stateChar, re)\n          stateChar = false\n          continue\n        }\n\n        case ')': {\n          const plEntry = patternListStack[patternListStack.length - 1]\n          if (inClass || !plEntry) {\n            re += '\\\\)'\n            continue\n          }\n          patternListStack.pop()\n\n          // closing an extglob\n          clearStateChar()\n          hasMagic = true\n          pl = plEntry\n          // negation is (?:(?!js)[^/]*)\n          // The others are (?:<pattern>)<type>\n          re += pl.close\n          if (pl.type === '!') {\n            negativeLists.push(Object.assign(pl, { reEnd: re.length }))\n          }\n          continue\n        }\n\n        case '|': {\n          const plEntry = patternListStack[patternListStack.length - 1]\n          if (inClass || !plEntry) {\n            re += '\\\\|'\n            continue\n          }\n\n          clearStateChar()\n          re += '|'\n          // next subpattern can start with a dot?\n          if (plEntry.start === 0 && plEntry.type !== '!') {\n            dotTravAllowed = true\n            re += subPatternStart(pattern.slice(i + 1))\n          }\n          continue\n        }\n\n        // these are mostly the same in regexp and glob\n        case '[':\n          // swallow any state-tracking char before the [\n          clearStateChar()\n\n          if (inClass) {\n            re += '\\\\' + c\n            continue\n          }\n\n          inClass = true\n          classStart = i\n          reClassStart = re.length\n          re += c\n        continue\n\n        case ']':\n          //  a right bracket shall lose its special\n          //  meaning and represent itself in\n          //  a bracket expression if it occurs\n          //  first in the list.  -- POSIX.2 2.8.3.2\n          if (i === classStart + 1 || !inClass) {\n            re += '\\\\' + c\n            continue\n          }\n\n          // split where the last [ was, make sure we don't have\n          // an invalid re. if so, re-walk the contents of the\n          // would-be class to re-translate any characters that\n          // were passed through as-is\n          // TODO: It would probably be faster to determine this\n          // without a try/catch and a new RegExp, but it's tricky\n          // to do safely.  For now, this is safe and works.\n          cs = pattern.substring(classStart + 1, i)\n          try {\n            RegExp('[' + braExpEscape(charUnescape(cs)) + ']')\n            // looks good, finish up the class.\n            re += c\n          } catch (er) {\n            // out of order ranges in JS are errors, but in glob syntax,\n            // they're just a range that matches nothing.\n            re = re.substring(0, reClassStart) + '(?:$.)' // match nothing ever\n          }\n          hasMagic = true\n          inClass = false\n        continue\n\n        default:\n          // swallow any state char that wasn't consumed\n          clearStateChar()\n\n          if (reSpecials[c] && !(c === '^' && inClass)) {\n            re += '\\\\'\n          }\n\n          re += c\n          break\n\n      } // switch\n    } // for\n\n    // handle the case where we left a class open.\n    // \"[abc\" is valid, equivalent to \"\\[abc\"\n    if (inClass) {\n      // split where the last [ was, and escape it\n      // this is a huge pita.  We now have to re-walk\n      // the contents of the would-be class to re-translate\n      // any characters that were passed through as-is\n      cs = pattern.slice(classStart + 1)\n      sp = this.parse(cs, SUBPARSE)\n      re = re.substring(0, reClassStart) + '\\\\[' + sp[0]\n      hasMagic = hasMagic || sp[1]\n    }\n\n    // handle the case where we had a +( thing at the *end*\n    // of the pattern.\n    // each pattern list stack adds 3 chars, and we need to go through\n    // and escape any | chars that were passed through as-is for the regexp.\n    // Go through and escape them, taking care not to double-escape any\n    // | chars that were already escaped.\n    for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n      let tail\n      tail = re.slice(pl.reStart + pl.open.length)\n      this.debug('setting tail', re, pl)\n      // maybe some even number of \\, then maybe 1 \\, followed by a |\n      tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, (_, $1, $2) => {\n        /* istanbul ignore else - should already be done */\n        if (!$2) {\n          // the | isn't already escaped, so escape it.\n          $2 = '\\\\'\n        }\n\n        // need to escape all those slashes *again*, without escaping the\n        // one that we need for escaping the | character.  As it works out,\n        // escaping an even number of slashes can be done by simply repeating\n        // it exactly after itself.  That's why this trick works.\n        //\n        // I am sorry that you have to see this.\n        return $1 + $1 + $2 + '|'\n      })\n\n      this.debug('tail=%j\\n   %s', tail, tail, pl, re)\n      const t = pl.type === '*' ? star\n        : pl.type === '?' ? qmark\n        : '\\\\' + pl.type\n\n      hasMagic = true\n      re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n    }\n\n    // handle trailing things that only matter at the very end.\n    clearStateChar()\n    if (escaping) {\n      // trailing \\\\\n      re += '\\\\\\\\'\n    }\n\n    // only need to apply the nodot start if the re starts with\n    // something that could conceivably capture a dot\n    const addPatternStart = addPatternStartSet[re.charAt(0)]\n\n    // Hack to work around lack of negative lookbehind in JS\n    // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n    // like 'a.xyz.yz' doesn't match.  So, the first negative\n    // lookahead, has to look ALL the way ahead, to the end of\n    // the pattern.\n    for (let n = negativeLists.length - 1; n > -1; n--) {\n      const nl = negativeLists[n]\n\n      const nlBefore = re.slice(0, nl.reStart)\n      const nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n      let nlAfter = re.slice(nl.reEnd)\n      const nlLast = re.slice(nl.reEnd - 8, nl.reEnd) + nlAfter\n\n      // Handle nested stuff like *(*.js|!(*.json)), where open parens\n      // mean that we should *not* include the ) in the bit that is considered\n      // \"after\" the negated section.\n      const closeParensBefore = nlBefore.split(')').length\n      const openParensBefore = nlBefore.split('(').length - closeParensBefore\n      let cleanAfter = nlAfter\n      for (let i = 0; i < openParensBefore; i++) {\n        cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n      }\n      nlAfter = cleanAfter\n\n      const dollar = nlAfter === '' && isSub !== SUBPARSE ? '(?:$|\\\\/)' : ''\n\n      re = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    }\n\n    // if the re is not \"\" at this point, then we need to make sure\n    // it doesn't match against an empty path part.\n    // Otherwise a/* will match a/, which it should not.\n    if (re !== '' && hasMagic) {\n      re = '(?=.)' + re\n    }\n\n    if (addPatternStart) {\n      re = patternStart() + re\n    }\n\n    // parsing just a piece of a larger pattern.\n    if (isSub === SUBPARSE) {\n      return [re, hasMagic]\n    }\n\n    // if it's nocase, and the lcase/uppercase don't match, it's magic\n    if (options.nocase && !hasMagic) {\n      hasMagic = pattern.toUpperCase() !== pattern.toLowerCase()\n    }\n\n    // skip the regexp for non-magical patterns\n    // unescape anything in it, though, so that it'll be\n    // an exact match against a file etc.\n    if (!hasMagic) {\n      return globUnescape(pattern)\n    }\n\n    const flags = options.nocase ? 'i' : ''\n    try {\n      return Object.assign(new RegExp('^' + re + '$', flags), {\n        _glob: pattern,\n        _src: re,\n      })\n    } catch (er) /* istanbul ignore next - should be impossible */ {\n      // If it was an invalid regular expression, then it can't match\n      // anything.  This trick looks for a character after the end of\n      // the string, which is of course impossible, except in multi-line\n      // mode, but it's not a /m regex.\n      return new RegExp('$.')\n    }\n  }\n\n  makeRe () {\n    if (this.regexp || this.regexp === false) return this.regexp\n\n    // at this point, this.set is a 2d array of partial\n    // pattern strings, or \"**\".\n    //\n    // It's better to use .match().  This function shouldn't\n    // be used, really, but it's pretty convenient sometimes,\n    // when you just want to work with a regex.\n    const set = this.set\n\n    if (!set.length) {\n      this.regexp = false\n      return this.regexp\n    }\n    const options = this.options\n\n    const twoStar = options.noglobstar ? star\n      : options.dot ? twoStarDot\n      : twoStarNoDot\n    const flags = options.nocase ? 'i' : ''\n\n    // coalesce globstars and regexpify non-globstar patterns\n    // if it's the only item, then we just do one twoStar\n    // if it's the first, and there are more, prepend (\\/|twoStar\\/)? to next\n    // if it's the last, append (\\/twoStar|) to previous\n    // if it's in the middle, append (\\/|\\/twoStar\\/) to previous\n    // then filter out GLOBSTAR symbols\n    let re = set.map(pattern => {\n      pattern = pattern.map(p =>\n        typeof p === 'string' ? regExpEscape(p)\n        : p === GLOBSTAR ? GLOBSTAR\n        : p._src\n      ).reduce((set, p) => {\n        if (!(set[set.length - 1] === GLOBSTAR && p === GLOBSTAR)) {\n          set.push(p)\n        }\n        return set\n      }, [])\n      pattern.forEach((p, i) => {\n        if (p !== GLOBSTAR || pattern[i-1] === GLOBSTAR) {\n          return\n        }\n        if (i === 0) {\n          if (pattern.length > 1) {\n            pattern[i+1] = '(?:\\\\\\/|' + twoStar + '\\\\\\/)?' + pattern[i+1]\n          } else {\n            pattern[i] = twoStar\n          }\n        } else if (i === pattern.length - 1) {\n          pattern[i-1] += '(?:\\\\\\/|' + twoStar + ')?'\n        } else {\n          pattern[i-1] += '(?:\\\\\\/|\\\\\\/' + twoStar + '\\\\\\/)' + pattern[i+1]\n          pattern[i+1] = GLOBSTAR\n        }\n      })\n      return pattern.filter(p => p !== GLOBSTAR).join('/')\n    }).join('|')\n\n    // must match entire pattern\n    // ending in a * or ** will make it less strict.\n    re = '^(?:' + re + ')$'\n\n    // can match anything, as long as it's not this.\n    if (this.negate) re = '^(?!' + re + ').*$'\n\n    try {\n      this.regexp = new RegExp(re, flags)\n    } catch (ex) /* istanbul ignore next - should be impossible */ {\n      this.regexp = false\n    }\n    return this.regexp\n  }\n\n  match (f, partial = this.partial) {\n    this.debug('match', f, this.pattern)\n    // short-circuit in the case of busted things.\n    // comments, etc.\n    if (this.comment) return false\n    if (this.empty) return f === ''\n\n    if (f === '/' && partial) return true\n\n    const options = this.options\n\n    // windows: need to use /, not \\\n    if (path.sep !== '/') {\n      f = f.split(path.sep).join('/')\n    }\n\n    // treat the test path as a set of pathparts.\n    f = f.split(slashSplit)\n    this.debug(this.pattern, 'split', f)\n\n    // just ONE of the pattern sets in this.set needs to match\n    // in order for it to be valid.  If negating, then just one\n    // match means that we have failed.\n    // Either way, return on the first hit.\n\n    const set = this.set\n    this.debug(this.pattern, 'set', set)\n\n    // Find the basename of the path by looking for the last non-empty segment\n    let filename\n    for (let i = f.length - 1; i >= 0; i--) {\n      filename = f[i]\n      if (filename) break\n    }\n\n    for (let i = 0; i < set.length; i++) {\n      const pattern = set[i]\n      let file = f\n      if (options.matchBase && pattern.length === 1) {\n        file = [filename]\n      }\n      const hit = this.matchOne(file, pattern, partial)\n      if (hit) {\n        if (options.flipNegate) return true\n        return !this.negate\n      }\n    }\n\n    // didn't get any hits.  this is success if it's a negative\n    // pattern, failure otherwise.\n    if (options.flipNegate) return false\n    return this.negate\n  }\n\n  static defaults (def) {\n    return minimatch.defaults(def).Minimatch\n  }\n}\n\nminimatch.Minimatch = Minimatch\n","const optsArg = require('./lib/opts-arg.js')\nconst pathArg = require('./lib/path-arg.js')\n\nconst {mkdirpNative, mkdirpNativeSync} = require('./lib/mkdirp-native.js')\nconst {mkdirpManual, mkdirpManualSync} = require('./lib/mkdirp-manual.js')\nconst {useNative, useNativeSync} = require('./lib/use-native.js')\n\n\nconst mkdirp = (path, opts) => {\n  path = pathArg(path)\n  opts = optsArg(opts)\n  return useNative(opts)\n    ? mkdirpNative(path, opts)\n    : mkdirpManual(path, opts)\n}\n\nconst mkdirpSync = (path, opts) => {\n  path = pathArg(path)\n  opts = optsArg(opts)\n  return useNativeSync(opts)\n    ? mkdirpNativeSync(path, opts)\n    : mkdirpManualSync(path, opts)\n}\n\nmkdirp.sync = mkdirpSync\nmkdirp.native = (path, opts) => mkdirpNative(pathArg(path), optsArg(opts))\nmkdirp.manual = (path, opts) => mkdirpManual(pathArg(path), optsArg(opts))\nmkdirp.nativeSync = (path, opts) => mkdirpNativeSync(pathArg(path), optsArg(opts))\nmkdirp.manualSync = (path, opts) => mkdirpManualSync(pathArg(path), optsArg(opts))\n\nmodule.exports = mkdirp\n","const {dirname} = require('path')\n\nconst findMade = (opts, parent, path = undefined) => {\n  // we never want the 'made' return value to be a root directory\n  if (path === parent)\n    return Promise.resolve()\n\n  return opts.statAsync(parent).then(\n    st => st.isDirectory() ? path : undefined, // will fail later\n    er => er.code === 'ENOENT'\n      ? findMade(opts, dirname(parent), parent)\n      : undefined\n  )\n}\n\nconst findMadeSync = (opts, parent, path = undefined) => {\n  if (path === parent)\n    return undefined\n\n  try {\n    return opts.statSync(parent).isDirectory() ? path : undefined\n  } catch (er) {\n    return er.code === 'ENOENT'\n      ? findMadeSync(opts, dirname(parent), parent)\n      : undefined\n  }\n}\n\nmodule.exports = {findMade, findMadeSync}\n","const {dirname} = require('path')\n\nconst mkdirpManual = (path, opts, made) => {\n  opts.recursive = false\n  const parent = dirname(path)\n  if (parent === path) {\n    return opts.mkdirAsync(path, opts).catch(er => {\n      // swallowed by recursive implementation on posix systems\n      // any other error is a failure\n      if (er.code !== 'EISDIR')\n        throw er\n    })\n  }\n\n  return opts.mkdirAsync(path, opts).then(() => made || path, er => {\n    if (er.code === 'ENOENT')\n      return mkdirpManual(parent, opts)\n        .then(made => mkdirpManual(path, opts, made))\n    if (er.code !== 'EEXIST' && er.code !== 'EROFS')\n      throw er\n    return opts.statAsync(path).then(st => {\n      if (st.isDirectory())\n        return made\n      else\n        throw er\n    }, () => { throw er })\n  })\n}\n\nconst mkdirpManualSync = (path, opts, made) => {\n  const parent = dirname(path)\n  opts.recursive = false\n\n  if (parent === path) {\n    try {\n      return opts.mkdirSync(path, opts)\n    } catch (er) {\n      // swallowed by recursive implementation on posix systems\n      // any other error is a failure\n      if (er.code !== 'EISDIR')\n        throw er\n      else\n        return\n    }\n  }\n\n  try {\n    opts.mkdirSync(path, opts)\n    return made || path\n  } catch (er) {\n    if (er.code === 'ENOENT')\n      return mkdirpManualSync(path, opts, mkdirpManualSync(parent, opts, made))\n    if (er.code !== 'EEXIST' && er.code !== 'EROFS')\n      throw er\n    try {\n      if (!opts.statSync(path).isDirectory())\n        throw er\n    } catch (_) {\n      throw er\n    }\n  }\n}\n\nmodule.exports = {mkdirpManual, mkdirpManualSync}\n","const {dirname} = require('path')\nconst {findMade, findMadeSync} = require('./find-made.js')\nconst {mkdirpManual, mkdirpManualSync} = require('./mkdirp-manual.js')\n\nconst mkdirpNative = (path, opts) => {\n  opts.recursive = true\n  const parent = dirname(path)\n  if (parent === path)\n    return opts.mkdirAsync(path, opts)\n\n  return findMade(opts, path).then(made =>\n    opts.mkdirAsync(path, opts).then(() => made)\n    .catch(er => {\n      if (er.code === 'ENOENT')\n        return mkdirpManual(path, opts)\n      else\n        throw er\n    }))\n}\n\nconst mkdirpNativeSync = (path, opts) => {\n  opts.recursive = true\n  const parent = dirname(path)\n  if (parent === path)\n    return opts.mkdirSync(path, opts)\n\n  const made = findMadeSync(opts, path)\n  try {\n    opts.mkdirSync(path, opts)\n    return made\n  } catch (er) {\n    if (er.code === 'ENOENT')\n      return mkdirpManualSync(path, opts)\n    else\n      throw er\n  }\n}\n\nmodule.exports = {mkdirpNative, mkdirpNativeSync}\n","const { promisify } = require('util')\nconst fs = require('fs')\nconst optsArg = opts => {\n  if (!opts)\n    opts = { mode: 0o777, fs }\n  else if (typeof opts === 'object')\n    opts = { mode: 0o777, fs, ...opts }\n  else if (typeof opts === 'number')\n    opts = { mode: opts, fs }\n  else if (typeof opts === 'string')\n    opts = { mode: parseInt(opts, 8), fs }\n  else\n    throw new TypeError('invalid options argument')\n\n  opts.mkdir = opts.mkdir || opts.fs.mkdir || fs.mkdir\n  opts.mkdirAsync = promisify(opts.mkdir)\n  opts.stat = opts.stat || opts.fs.stat || fs.stat\n  opts.statAsync = promisify(opts.stat)\n  opts.statSync = opts.statSync || opts.fs.statSync || fs.statSync\n  opts.mkdirSync = opts.mkdirSync || opts.fs.mkdirSync || fs.mkdirSync\n  return opts\n}\nmodule.exports = optsArg\n","const platform = process.env.__TESTING_MKDIRP_PLATFORM__ || process.platform\nconst { resolve, parse } = require('path')\nconst pathArg = path => {\n  if (/\\0/.test(path)) {\n    // simulate same failure that node raises\n    throw Object.assign(\n      new TypeError('path must be a string without null bytes'),\n      {\n        path,\n        code: 'ERR_INVALID_ARG_VALUE',\n      }\n    )\n  }\n\n  path = resolve(path)\n  if (platform === 'win32') {\n    const badWinChars = /[*|\"<>?:]/\n    const {root} = parse(path)\n    if (badWinChars.test(path.substr(root.length))) {\n      throw Object.assign(new Error('Illegal characters in path.'), {\n        path,\n        code: 'EINVAL',\n      })\n    }\n  }\n\n  return path\n}\nmodule.exports = pathArg\n","const fs = require('fs')\n\nconst version = process.env.__TESTING_MKDIRP_NODE_VERSION__ || process.version\nconst versArr = version.replace(/^v/, '').split('.')\nconst hasNative = +versArr[0] > 10 || +versArr[0] === 10 && +versArr[1] >= 12\n\nconst useNative = !hasNative ? () => false : opts => opts.mkdir === fs.mkdir\nconst useNativeSync = !hasNative ? () => false : opts => opts.mkdirSync === fs.mkdirSync\n\nmodule.exports = {useNative, useNativeSync}\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","'use strict';\n\nmodule.exports = require('./lib/picomatch');\n","'use strict';\n\nconst path = require('path');\nconst WIN_SLASH = '\\\\\\\\/';\nconst WIN_NO_SLASH = `[^${WIN_SLASH}]`;\n\n/**\n * Posix glob regex\n */\n\nconst DOT_LITERAL = '\\\\.';\nconst PLUS_LITERAL = '\\\\+';\nconst QMARK_LITERAL = '\\\\?';\nconst SLASH_LITERAL = '\\\\/';\nconst ONE_CHAR = '(?=.)';\nconst QMARK = '[^/]';\nconst END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;\nconst START_ANCHOR = `(?:^|${SLASH_LITERAL})`;\nconst DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;\nconst NO_DOT = `(?!${DOT_LITERAL})`;\nconst NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;\nconst NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;\nconst NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;\nconst QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;\nconst STAR = `${QMARK}*?`;\n\nconst POSIX_CHARS = {\n  DOT_LITERAL,\n  PLUS_LITERAL,\n  QMARK_LITERAL,\n  SLASH_LITERAL,\n  ONE_CHAR,\n  QMARK,\n  END_ANCHOR,\n  DOTS_SLASH,\n  NO_DOT,\n  NO_DOTS,\n  NO_DOT_SLASH,\n  NO_DOTS_SLASH,\n  QMARK_NO_DOT,\n  STAR,\n  START_ANCHOR\n};\n\n/**\n * Windows glob regex\n */\n\nconst WINDOWS_CHARS = {\n  ...POSIX_CHARS,\n\n  SLASH_LITERAL: `[${WIN_SLASH}]`,\n  QMARK: WIN_NO_SLASH,\n  STAR: `${WIN_NO_SLASH}*?`,\n  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,\n  NO_DOT: `(?!${DOT_LITERAL})`,\n  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,\n  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,\n  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,\n  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`\n};\n\n/**\n * POSIX Bracket Regex\n */\n\nconst POSIX_REGEX_SOURCE = {\n  alnum: 'a-zA-Z0-9',\n  alpha: 'a-zA-Z',\n  ascii: '\\\\x00-\\\\x7F',\n  blank: ' \\\\t',\n  cntrl: '\\\\x00-\\\\x1F\\\\x7F',\n  digit: '0-9',\n  graph: '\\\\x21-\\\\x7E',\n  lower: 'a-z',\n  print: '\\\\x20-\\\\x7E ',\n  punct: '\\\\-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~',\n  space: ' \\\\t\\\\r\\\\n\\\\v\\\\f',\n  upper: 'A-Z',\n  word: 'A-Za-z0-9_',\n  xdigit: 'A-Fa-f0-9'\n};\n\nmodule.exports = {\n  MAX_LENGTH: 1024 * 64,\n  POSIX_REGEX_SOURCE,\n\n  // regular expressions\n  REGEX_BACKSLASH: /\\\\(?![*+?^${}(|)[\\]])/g,\n  REGEX_NON_SPECIAL_CHARS: /^[^@![\\].,$*+?^{}()|\\\\/]+/,\n  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\\]]/,\n  REGEX_SPECIAL_CHARS_BACKREF: /(\\\\?)((\\W)(\\3*))/g,\n  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\\]])/g,\n  REGEX_REMOVE_BACKSLASH: /(?:\\[.*?[^\\\\]\\]|\\\\(?=.))/g,\n\n  // Replace globs with equivalent patterns to reduce parsing time.\n  REPLACEMENTS: {\n    '***': '*',\n    '**/**': '**',\n    '**/**/**': '**'\n  },\n\n  // Digits\n  CHAR_0: 48, /* 0 */\n  CHAR_9: 57, /* 9 */\n\n  // Alphabet chars.\n  CHAR_UPPERCASE_A: 65, /* A */\n  CHAR_LOWERCASE_A: 97, /* a */\n  CHAR_UPPERCASE_Z: 90, /* Z */\n  CHAR_LOWERCASE_Z: 122, /* z */\n\n  CHAR_LEFT_PARENTHESES: 40, /* ( */\n  CHAR_RIGHT_PARENTHESES: 41, /* ) */\n\n  CHAR_ASTERISK: 42, /* * */\n\n  // Non-alphabetic chars.\n  CHAR_AMPERSAND: 38, /* & */\n  CHAR_AT: 64, /* @ */\n  CHAR_BACKWARD_SLASH: 92, /* \\ */\n  CHAR_CARRIAGE_RETURN: 13, /* \\r */\n  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */\n  CHAR_COLON: 58, /* : */\n  CHAR_COMMA: 44, /* , */\n  CHAR_DOT: 46, /* . */\n  CHAR_DOUBLE_QUOTE: 34, /* \" */\n  CHAR_EQUAL: 61, /* = */\n  CHAR_EXCLAMATION_MARK: 33, /* ! */\n  CHAR_FORM_FEED: 12, /* \\f */\n  CHAR_FORWARD_SLASH: 47, /* / */\n  CHAR_GRAVE_ACCENT: 96, /* ` */\n  CHAR_HASH: 35, /* # */\n  CHAR_HYPHEN_MINUS: 45, /* - */\n  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */\n  CHAR_LEFT_CURLY_BRACE: 123, /* { */\n  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */\n  CHAR_LINE_FEED: 10, /* \\n */\n  CHAR_NO_BREAK_SPACE: 160, /* \\u00A0 */\n  CHAR_PERCENT: 37, /* % */\n  CHAR_PLUS: 43, /* + */\n  CHAR_QUESTION_MARK: 63, /* ? */\n  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */\n  CHAR_RIGHT_CURLY_BRACE: 125, /* } */\n  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */\n  CHAR_SEMICOLON: 59, /* ; */\n  CHAR_SINGLE_QUOTE: 39, /* ' */\n  CHAR_SPACE: 32, /*   */\n  CHAR_TAB: 9, /* \\t */\n  CHAR_UNDERSCORE: 95, /* _ */\n  CHAR_VERTICAL_LINE: 124, /* | */\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \\uFEFF */\n\n  SEP: path.sep,\n\n  /**\n   * Create EXTGLOB_CHARS\n   */\n\n  extglobChars(chars) {\n    return {\n      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },\n      '?': { type: 'qmark', open: '(?:', close: ')?' },\n      '+': { type: 'plus', open: '(?:', close: ')+' },\n      '*': { type: 'star', open: '(?:', close: ')*' },\n      '@': { type: 'at', open: '(?:', close: ')' }\n    };\n  },\n\n  /**\n   * Create GLOB_CHARS\n   */\n\n  globChars(win32) {\n    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;\n  }\n};\n","'use strict';\n\nconst constants = require('./constants');\nconst utils = require('./utils');\n\n/**\n * Constants\n */\n\nconst {\n  MAX_LENGTH,\n  POSIX_REGEX_SOURCE,\n  REGEX_NON_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_BACKREF,\n  REPLACEMENTS\n} = constants;\n\n/**\n * Helpers\n */\n\nconst expandRange = (args, options) => {\n  if (typeof options.expandRange === 'function') {\n    return options.expandRange(...args, options);\n  }\n\n  args.sort();\n  const value = `[${args.join('-')}]`;\n\n  try {\n    /* eslint-disable-next-line no-new */\n    new RegExp(value);\n  } catch (ex) {\n    return args.map(v => utils.escapeRegex(v)).join('..');\n  }\n\n  return value;\n};\n\n/**\n * Create the message for a syntax error\n */\n\nconst syntaxError = (type, char) => {\n  return `Missing ${type}: \"${char}\" - use \"\\\\\\\\${char}\" to match literal characters`;\n};\n\n/**\n * Parse the given input string.\n * @param {String} input\n * @param {Object} options\n * @return {Object}\n */\n\nconst parse = (input, options) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  input = REPLACEMENTS[input] || input;\n\n  const opts = { ...options };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n\n  let len = input.length;\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n  }\n\n  const bos = { type: 'bos', value: '', output: opts.prepend || '' };\n  const tokens = [bos];\n\n  const capture = opts.capture ? '' : '?:';\n  const win32 = utils.isWindows(options);\n\n  // create constants based on platform, for windows or posix\n  const PLATFORM_CHARS = constants.globChars(win32);\n  const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);\n\n  const {\n    DOT_LITERAL,\n    PLUS_LITERAL,\n    SLASH_LITERAL,\n    ONE_CHAR,\n    DOTS_SLASH,\n    NO_DOT,\n    NO_DOT_SLASH,\n    NO_DOTS_SLASH,\n    QMARK,\n    QMARK_NO_DOT,\n    STAR,\n    START_ANCHOR\n  } = PLATFORM_CHARS;\n\n  const globstar = opts => {\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const nodot = opts.dot ? '' : NO_DOT;\n  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;\n  let star = opts.bash === true ? globstar(opts) : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  }\n\n  // minimatch options support\n  if (typeof opts.noext === 'boolean') {\n    opts.noextglob = opts.noext;\n  }\n\n  const state = {\n    input,\n    index: -1,\n    start: 0,\n    dot: opts.dot === true,\n    consumed: '',\n    output: '',\n    prefix: '',\n    backtrack: false,\n    negated: false,\n    brackets: 0,\n    braces: 0,\n    parens: 0,\n    quotes: 0,\n    globstar: false,\n    tokens\n  };\n\n  input = utils.removePrefix(input, state);\n  len = input.length;\n\n  const extglobs = [];\n  const braces = [];\n  const stack = [];\n  let prev = bos;\n  let value;\n\n  /**\n   * Tokenizing helpers\n   */\n\n  const eos = () => state.index === len - 1;\n  const peek = state.peek = (n = 1) => input[state.index + n];\n  const advance = state.advance = () => input[++state.index] || '';\n  const remaining = () => input.slice(state.index + 1);\n  const consume = (value = '', num = 0) => {\n    state.consumed += value;\n    state.index += num;\n  };\n\n  const append = token => {\n    state.output += token.output != null ? token.output : token.value;\n    consume(token.value);\n  };\n\n  const negate = () => {\n    let count = 1;\n\n    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {\n      advance();\n      state.start++;\n      count++;\n    }\n\n    if (count % 2 === 0) {\n      return false;\n    }\n\n    state.negated = true;\n    state.start++;\n    return true;\n  };\n\n  const increment = type => {\n    state[type]++;\n    stack.push(type);\n  };\n\n  const decrement = type => {\n    state[type]--;\n    stack.pop();\n  };\n\n  /**\n   * Push tokens onto the tokens array. This helper speeds up\n   * tokenizing by 1) helping us avoid backtracking as much as possible,\n   * and 2) helping us avoid creating extra tokens when consecutive\n   * characters are plain text. This improves performance and simplifies\n   * lookbehinds.\n   */\n\n  const push = tok => {\n    if (prev.type === 'globstar') {\n      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');\n      const isExtglob = tok.extglob === true || (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'));\n\n      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {\n        state.output = state.output.slice(0, -prev.output.length);\n        prev.type = 'star';\n        prev.value = '*';\n        prev.output = star;\n        state.output += prev.output;\n      }\n    }\n\n    if (extglobs.length && tok.type !== 'paren') {\n      extglobs[extglobs.length - 1].inner += tok.value;\n    }\n\n    if (tok.value || tok.output) append(tok);\n    if (prev && prev.type === 'text' && tok.type === 'text') {\n      prev.value += tok.value;\n      prev.output = (prev.output || '') + tok.value;\n      return;\n    }\n\n    tok.prev = prev;\n    tokens.push(tok);\n    prev = tok;\n  };\n\n  const extglobOpen = (type, value) => {\n    const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' };\n\n    token.prev = prev;\n    token.parens = state.parens;\n    token.output = state.output;\n    const output = (opts.capture ? '(' : '') + token.open;\n\n    increment('parens');\n    push({ type, value, output: state.output ? '' : ONE_CHAR });\n    push({ type: 'paren', extglob: true, value: advance(), output });\n    extglobs.push(token);\n  };\n\n  const extglobClose = token => {\n    let output = token.close + (opts.capture ? ')' : '');\n    let rest;\n\n    if (token.type === 'negate') {\n      let extglobStar = star;\n\n      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {\n        extglobStar = globstar(opts);\n      }\n\n      if (extglobStar !== star || eos() || /^\\)+$/.test(remaining())) {\n        output = token.close = `)$))${extglobStar}`;\n      }\n\n      if (token.inner.includes('*') && (rest = remaining()) && /^\\.[^\\\\/.]+$/.test(rest)) {\n        // Any non-magical string (`.ts`) or even nested expression (`.{ts,tsx}`) can follow after the closing parenthesis.\n        // In this case, we need to parse the string and use it in the output of the original pattern.\n        // Suitable patterns: `/!(*.d).ts`, `/!(*.d).{ts,tsx}`, `**/!(*-dbg).@(js)`.\n        //\n        // Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.\n        const expression = parse(rest, { ...options, fastpaths: false }).output;\n\n        output = token.close = `)${expression})${extglobStar})`;\n      }\n\n      if (token.prev.type === 'bos') {\n        state.negatedExtglob = true;\n      }\n    }\n\n    push({ type: 'paren', extglob: true, value, output });\n    decrement('parens');\n  };\n\n  /**\n   * Fast paths\n   */\n\n  if (opts.fastpaths !== false && !/(^[*!]|[/()[\\]{}\"])/.test(input)) {\n    let backslashes = false;\n\n    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {\n      if (first === '\\\\') {\n        backslashes = true;\n        return m;\n      }\n\n      if (first === '?') {\n        if (esc) {\n          return esc + first + (rest ? QMARK.repeat(rest.length) : '');\n        }\n        if (index === 0) {\n          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');\n        }\n        return QMARK.repeat(chars.length);\n      }\n\n      if (first === '.') {\n        return DOT_LITERAL.repeat(chars.length);\n      }\n\n      if (first === '*') {\n        if (esc) {\n          return esc + first + (rest ? star : '');\n        }\n        return star;\n      }\n      return esc ? m : `\\\\${m}`;\n    });\n\n    if (backslashes === true) {\n      if (opts.unescape === true) {\n        output = output.replace(/\\\\/g, '');\n      } else {\n        output = output.replace(/\\\\+/g, m => {\n          return m.length % 2 === 0 ? '\\\\\\\\' : (m ? '\\\\' : '');\n        });\n      }\n    }\n\n    if (output === input && opts.contains === true) {\n      state.output = input;\n      return state;\n    }\n\n    state.output = utils.wrapOutput(output, state, options);\n    return state;\n  }\n\n  /**\n   * Tokenize input until we reach end-of-string\n   */\n\n  while (!eos()) {\n    value = advance();\n\n    if (value === '\\u0000') {\n      continue;\n    }\n\n    /**\n     * Escaped characters\n     */\n\n    if (value === '\\\\') {\n      const next = peek();\n\n      if (next === '/' && opts.bash !== true) {\n        continue;\n      }\n\n      if (next === '.' || next === ';') {\n        continue;\n      }\n\n      if (!next) {\n        value += '\\\\';\n        push({ type: 'text', value });\n        continue;\n      }\n\n      // collapse slashes to reduce potential for exploits\n      const match = /^\\\\+/.exec(remaining());\n      let slashes = 0;\n\n      if (match && match[0].length > 2) {\n        slashes = match[0].length;\n        state.index += slashes;\n        if (slashes % 2 !== 0) {\n          value += '\\\\';\n        }\n      }\n\n      if (opts.unescape === true) {\n        value = advance();\n      } else {\n        value += advance();\n      }\n\n      if (state.brackets === 0) {\n        push({ type: 'text', value });\n        continue;\n      }\n    }\n\n    /**\n     * If we're inside a regex character class, continue\n     * until we reach the closing bracket.\n     */\n\n    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {\n      if (opts.posix !== false && value === ':') {\n        const inner = prev.value.slice(1);\n        if (inner.includes('[')) {\n          prev.posix = true;\n\n          if (inner.includes(':')) {\n            const idx = prev.value.lastIndexOf('[');\n            const pre = prev.value.slice(0, idx);\n            const rest = prev.value.slice(idx + 2);\n            const posix = POSIX_REGEX_SOURCE[rest];\n            if (posix) {\n              prev.value = pre + posix;\n              state.backtrack = true;\n              advance();\n\n              if (!bos.output && tokens.indexOf(prev) === 1) {\n                bos.output = ONE_CHAR;\n              }\n              continue;\n            }\n          }\n        }\n      }\n\n      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {\n        value = `\\\\${value}`;\n      }\n\n      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {\n        value = `\\\\${value}`;\n      }\n\n      if (opts.posix === true && value === '!' && prev.value === '[') {\n        value = '^';\n      }\n\n      prev.value += value;\n      append({ value });\n      continue;\n    }\n\n    /**\n     * If we're inside a quoted string, continue\n     * until we reach the closing double quote.\n     */\n\n    if (state.quotes === 1 && value !== '\"') {\n      value = utils.escapeRegex(value);\n      prev.value += value;\n      append({ value });\n      continue;\n    }\n\n    /**\n     * Double quotes\n     */\n\n    if (value === '\"') {\n      state.quotes = state.quotes === 1 ? 0 : 1;\n      if (opts.keepQuotes === true) {\n        push({ type: 'text', value });\n      }\n      continue;\n    }\n\n    /**\n     * Parentheses\n     */\n\n    if (value === '(') {\n      increment('parens');\n      push({ type: 'paren', value });\n      continue;\n    }\n\n    if (value === ')') {\n      if (state.parens === 0 && opts.strictBrackets === true) {\n        throw new SyntaxError(syntaxError('opening', '('));\n      }\n\n      const extglob = extglobs[extglobs.length - 1];\n      if (extglob && state.parens === extglob.parens + 1) {\n        extglobClose(extglobs.pop());\n        continue;\n      }\n\n      push({ type: 'paren', value, output: state.parens ? ')' : '\\\\)' });\n      decrement('parens');\n      continue;\n    }\n\n    /**\n     * Square brackets\n     */\n\n    if (value === '[') {\n      if (opts.nobracket === true || !remaining().includes(']')) {\n        if (opts.nobracket !== true && opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('closing', ']'));\n        }\n\n        value = `\\\\${value}`;\n      } else {\n        increment('brackets');\n      }\n\n      push({ type: 'bracket', value });\n      continue;\n    }\n\n    if (value === ']') {\n      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {\n        push({ type: 'text', value, output: `\\\\${value}` });\n        continue;\n      }\n\n      if (state.brackets === 0) {\n        if (opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('opening', '['));\n        }\n\n        push({ type: 'text', value, output: `\\\\${value}` });\n        continue;\n      }\n\n      decrement('brackets');\n\n      const prevValue = prev.value.slice(1);\n      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {\n        value = `/${value}`;\n      }\n\n      prev.value += value;\n      append({ value });\n\n      // when literal brackets are explicitly disabled\n      // assume we should match with a regex character class\n      if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {\n        continue;\n      }\n\n      const escaped = utils.escapeRegex(prev.value);\n      state.output = state.output.slice(0, -prev.value.length);\n\n      // when literal brackets are explicitly enabled\n      // assume we should escape the brackets to match literal characters\n      if (opts.literalBrackets === true) {\n        state.output += escaped;\n        prev.value = escaped;\n        continue;\n      }\n\n      // when the user specifies nothing, try to match both\n      prev.value = `(${capture}${escaped}|${prev.value})`;\n      state.output += prev.value;\n      continue;\n    }\n\n    /**\n     * Braces\n     */\n\n    if (value === '{' && opts.nobrace !== true) {\n      increment('braces');\n\n      const open = {\n        type: 'brace',\n        value,\n        output: '(',\n        outputIndex: state.output.length,\n        tokensIndex: state.tokens.length\n      };\n\n      braces.push(open);\n      push(open);\n      continue;\n    }\n\n    if (value === '}') {\n      const brace = braces[braces.length - 1];\n\n      if (opts.nobrace === true || !brace) {\n        push({ type: 'text', value, output: value });\n        continue;\n      }\n\n      let output = ')';\n\n      if (brace.dots === true) {\n        const arr = tokens.slice();\n        const range = [];\n\n        for (let i = arr.length - 1; i >= 0; i--) {\n          tokens.pop();\n          if (arr[i].type === 'brace') {\n            break;\n          }\n          if (arr[i].type !== 'dots') {\n            range.unshift(arr[i].value);\n          }\n        }\n\n        output = expandRange(range, opts);\n        state.backtrack = true;\n      }\n\n      if (brace.comma !== true && brace.dots !== true) {\n        const out = state.output.slice(0, brace.outputIndex);\n        const toks = state.tokens.slice(brace.tokensIndex);\n        brace.value = brace.output = '\\\\{';\n        value = output = '\\\\}';\n        state.output = out;\n        for (const t of toks) {\n          state.output += (t.output || t.value);\n        }\n      }\n\n      push({ type: 'brace', value, output });\n      decrement('braces');\n      braces.pop();\n      continue;\n    }\n\n    /**\n     * Pipes\n     */\n\n    if (value === '|') {\n      if (extglobs.length > 0) {\n        extglobs[extglobs.length - 1].conditions++;\n      }\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Commas\n     */\n\n    if (value === ',') {\n      let output = value;\n\n      const brace = braces[braces.length - 1];\n      if (brace && stack[stack.length - 1] === 'braces') {\n        brace.comma = true;\n        output = '|';\n      }\n\n      push({ type: 'comma', value, output });\n      continue;\n    }\n\n    /**\n     * Slashes\n     */\n\n    if (value === '/') {\n      // if the beginning of the glob is \"./\", advance the start\n      // to the current index, and don't add the \"./\" characters\n      // to the state. This greatly simplifies lookbehinds when\n      // checking for BOS characters like \"!\" and \".\" (not \"./\")\n      if (prev.type === 'dot' && state.index === state.start + 1) {\n        state.start = state.index + 1;\n        state.consumed = '';\n        state.output = '';\n        tokens.pop();\n        prev = bos; // reset \"prev\" to the first token\n        continue;\n      }\n\n      push({ type: 'slash', value, output: SLASH_LITERAL });\n      continue;\n    }\n\n    /**\n     * Dots\n     */\n\n    if (value === '.') {\n      if (state.braces > 0 && prev.type === 'dot') {\n        if (prev.value === '.') prev.output = DOT_LITERAL;\n        const brace = braces[braces.length - 1];\n        prev.type = 'dots';\n        prev.output += value;\n        prev.value += value;\n        brace.dots = true;\n        continue;\n      }\n\n      if ((state.braces + state.parens) === 0 && prev.type !== 'bos' && prev.type !== 'slash') {\n        push({ type: 'text', value, output: DOT_LITERAL });\n        continue;\n      }\n\n      push({ type: 'dot', value, output: DOT_LITERAL });\n      continue;\n    }\n\n    /**\n     * Question marks\n     */\n\n    if (value === '?') {\n      const isGroup = prev && prev.value === '(';\n      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('qmark', value);\n        continue;\n      }\n\n      if (prev && prev.type === 'paren') {\n        const next = peek();\n        let output = value;\n\n        if (next === '<' && !utils.supportsLookbehinds()) {\n          throw new Error('Node.js v10 or higher is required for regex lookbehinds');\n        }\n\n        if ((prev.value === '(' && !/[!=<:]/.test(next)) || (next === '<' && !/<([!=]|\\w+>)/.test(remaining()))) {\n          output = `\\\\${value}`;\n        }\n\n        push({ type: 'text', value, output });\n        continue;\n      }\n\n      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {\n        push({ type: 'qmark', value, output: QMARK_NO_DOT });\n        continue;\n      }\n\n      push({ type: 'qmark', value, output: QMARK });\n      continue;\n    }\n\n    /**\n     * Exclamation\n     */\n\n    if (value === '!') {\n      if (opts.noextglob !== true && peek() === '(') {\n        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {\n          extglobOpen('negate', value);\n          continue;\n        }\n      }\n\n      if (opts.nonegate !== true && state.index === 0) {\n        negate();\n        continue;\n      }\n    }\n\n    /**\n     * Plus\n     */\n\n    if (value === '+') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('plus', value);\n        continue;\n      }\n\n      if ((prev && prev.value === '(') || opts.regex === false) {\n        push({ type: 'plus', value, output: PLUS_LITERAL });\n        continue;\n      }\n\n      if ((prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) || state.parens > 0) {\n        push({ type: 'plus', value });\n        continue;\n      }\n\n      push({ type: 'plus', value: PLUS_LITERAL });\n      continue;\n    }\n\n    /**\n     * Plain text\n     */\n\n    if (value === '@') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        push({ type: 'at', extglob: true, value, output: '' });\n        continue;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Plain text\n     */\n\n    if (value !== '*') {\n      if (value === '$' || value === '^') {\n        value = `\\\\${value}`;\n      }\n\n      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());\n      if (match) {\n        value += match[0];\n        state.index += match[0].length;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Stars\n     */\n\n    if (prev && (prev.type === 'globstar' || prev.star === true)) {\n      prev.type = 'star';\n      prev.star = true;\n      prev.value += value;\n      prev.output = star;\n      state.backtrack = true;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    let rest = remaining();\n    if (opts.noextglob !== true && /^\\([^?]/.test(rest)) {\n      extglobOpen('star', value);\n      continue;\n    }\n\n    if (prev.type === 'star') {\n      if (opts.noglobstar === true) {\n        consume(value);\n        continue;\n      }\n\n      const prior = prev.prev;\n      const before = prior.prev;\n      const isStart = prior.type === 'slash' || prior.type === 'bos';\n      const afterStar = before && (before.type === 'star' || before.type === 'globstar');\n\n      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {\n        push({ type: 'star', value, output: '' });\n        continue;\n      }\n\n      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');\n      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');\n      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {\n        push({ type: 'star', value, output: '' });\n        continue;\n      }\n\n      // strip consecutive `/**/`\n      while (rest.slice(0, 3) === '/**') {\n        const after = input[state.index + 4];\n        if (after && after !== '/') {\n          break;\n        }\n        rest = rest.slice(3);\n        consume('/**', 3);\n      }\n\n      if (prior.type === 'bos' && eos()) {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = globstar(opts);\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n\n        prev.type = 'globstar';\n        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');\n        prev.value += value;\n        state.globstar = true;\n        state.output += prior.output + prev.output;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {\n        const end = rest[1] !== void 0 ? '|$' : '';\n\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n\n        prev.type = 'globstar';\n        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;\n        prev.value += value;\n\n        state.output += prior.output + prev.output;\n        state.globstar = true;\n\n        consume(value + advance());\n\n        push({ type: 'slash', value: '/', output: '' });\n        continue;\n      }\n\n      if (prior.type === 'bos' && rest[0] === '/') {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value + advance());\n        push({ type: 'slash', value: '/', output: '' });\n        continue;\n      }\n\n      // remove single star from output\n      state.output = state.output.slice(0, -prev.output.length);\n\n      // reset previous token to globstar\n      prev.type = 'globstar';\n      prev.output = globstar(opts);\n      prev.value += value;\n\n      // reset output with globstar\n      state.output += prev.output;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    const token = { type: 'star', value, output: star };\n\n    if (opts.bash === true) {\n      token.output = '.*?';\n      if (prev.type === 'bos' || prev.type === 'slash') {\n        token.output = nodot + token.output;\n      }\n      push(token);\n      continue;\n    }\n\n    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {\n      token.output = value;\n      push(token);\n      continue;\n    }\n\n    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {\n      if (prev.type === 'dot') {\n        state.output += NO_DOT_SLASH;\n        prev.output += NO_DOT_SLASH;\n\n      } else if (opts.dot === true) {\n        state.output += NO_DOTS_SLASH;\n        prev.output += NO_DOTS_SLASH;\n\n      } else {\n        state.output += nodot;\n        prev.output += nodot;\n      }\n\n      if (peek() !== '*') {\n        state.output += ONE_CHAR;\n        prev.output += ONE_CHAR;\n      }\n    }\n\n    push(token);\n  }\n\n  while (state.brackets > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));\n    state.output = utils.escapeLast(state.output, '[');\n    decrement('brackets');\n  }\n\n  while (state.parens > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));\n    state.output = utils.escapeLast(state.output, '(');\n    decrement('parens');\n  }\n\n  while (state.braces > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));\n    state.output = utils.escapeLast(state.output, '{');\n    decrement('braces');\n  }\n\n  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {\n    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });\n  }\n\n  // rebuild the output if we had to backtrack at any point\n  if (state.backtrack === true) {\n    state.output = '';\n\n    for (const token of state.tokens) {\n      state.output += token.output != null ? token.output : token.value;\n\n      if (token.suffix) {\n        state.output += token.suffix;\n      }\n    }\n  }\n\n  return state;\n};\n\n/**\n * Fast paths for creating regular expressions for common glob patterns.\n * This can significantly speed up processing and has very little downside\n * impact when none of the fast paths match.\n */\n\nparse.fastpaths = (input, options) => {\n  const opts = { ...options };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  const len = input.length;\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n  }\n\n  input = REPLACEMENTS[input] || input;\n  const win32 = utils.isWindows(options);\n\n  // create constants based on platform, for windows or posix\n  const {\n    DOT_LITERAL,\n    SLASH_LITERAL,\n    ONE_CHAR,\n    DOTS_SLASH,\n    NO_DOT,\n    NO_DOTS,\n    NO_DOTS_SLASH,\n    STAR,\n    START_ANCHOR\n  } = constants.globChars(win32);\n\n  const nodot = opts.dot ? NO_DOTS : NO_DOT;\n  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;\n  const capture = opts.capture ? '' : '?:';\n  const state = { negated: false, prefix: '' };\n  let star = opts.bash === true ? '.*?' : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  }\n\n  const globstar = opts => {\n    if (opts.noglobstar === true) return star;\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const create = str => {\n    switch (str) {\n      case '*':\n        return `${nodot}${ONE_CHAR}${star}`;\n\n      case '.*':\n        return `${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*.*':\n        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*/*':\n        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;\n\n      case '**':\n        return nodot + globstar(opts);\n\n      case '**/*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;\n\n      case '**/*.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '**/.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      default: {\n        const match = /^(.*?)\\.(\\w+)$/.exec(str);\n        if (!match) return;\n\n        const source = create(match[1]);\n        if (!source) return;\n\n        return source + DOT_LITERAL + match[2];\n      }\n    }\n  };\n\n  const output = utils.removePrefix(input, state);\n  let source = create(output);\n\n  if (source && opts.strictSlashes !== true) {\n    source += `${SLASH_LITERAL}?`;\n  }\n\n  return source;\n};\n\nmodule.exports = parse;\n","'use strict';\n\nconst path = require('path');\nconst scan = require('./scan');\nconst parse = require('./parse');\nconst utils = require('./utils');\nconst constants = require('./constants');\nconst isObject = val => val && typeof val === 'object' && !Array.isArray(val);\n\n/**\n * Creates a matcher function from one or more glob patterns. The\n * returned function takes a string to match as its first argument,\n * and returns true if the string is a match. The returned matcher\n * function also takes a boolean as the second argument that, when true,\n * returns an object with additional information.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch(glob[, options]);\n *\n * const isMatch = picomatch('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @name picomatch\n * @param {String|Array} `globs` One or more glob patterns.\n * @param {Object=} `options`\n * @return {Function=} Returns a matcher function.\n * @api public\n */\n\nconst picomatch = (glob, options, returnState = false) => {\n  if (Array.isArray(glob)) {\n    const fns = glob.map(input => picomatch(input, options, returnState));\n    const arrayMatcher = str => {\n      for (const isMatch of fns) {\n        const state = isMatch(str);\n        if (state) return state;\n      }\n      return false;\n    };\n    return arrayMatcher;\n  }\n\n  const isState = isObject(glob) && glob.tokens && glob.input;\n\n  if (glob === '' || (typeof glob !== 'string' && !isState)) {\n    throw new TypeError('Expected pattern to be a non-empty string');\n  }\n\n  const opts = options || {};\n  const posix = utils.isWindows(options);\n  const regex = isState\n    ? picomatch.compileRe(glob, options)\n    : picomatch.makeRe(glob, options, false, true);\n\n  const state = regex.state;\n  delete regex.state;\n\n  let isIgnored = () => false;\n  if (opts.ignore) {\n    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };\n    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);\n  }\n\n  const matcher = (input, returnObject = false) => {\n    const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });\n    const result = { glob, state, regex, posix, input, output, match, isMatch };\n\n    if (typeof opts.onResult === 'function') {\n      opts.onResult(result);\n    }\n\n    if (isMatch === false) {\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (isIgnored(input)) {\n      if (typeof opts.onIgnore === 'function') {\n        opts.onIgnore(result);\n      }\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (typeof opts.onMatch === 'function') {\n      opts.onMatch(result);\n    }\n    return returnObject ? result : true;\n  };\n\n  if (returnState) {\n    matcher.state = state;\n  }\n\n  return matcher;\n};\n\n/**\n * Test `input` with the given `regex`. This is used by the main\n * `picomatch()` function to test the input string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.test(input, regex[, options]);\n *\n * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\n * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp} `regex`\n * @return {Object} Returns an object with matching info.\n * @api public\n */\n\npicomatch.test = (input, regex, options, { glob, posix } = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected input to be a string');\n  }\n\n  if (input === '') {\n    return { isMatch: false, output: '' };\n  }\n\n  const opts = options || {};\n  const format = opts.format || (posix ? utils.toPosixSlashes : null);\n  let match = input === glob;\n  let output = (match && format) ? format(input) : input;\n\n  if (match === false) {\n    output = format ? format(input) : input;\n    match = output === glob;\n  }\n\n  if (match === false || opts.capture === true) {\n    if (opts.matchBase === true || opts.basename === true) {\n      match = picomatch.matchBase(input, regex, options, posix);\n    } else {\n      match = regex.exec(output);\n    }\n  }\n\n  return { isMatch: Boolean(match), match, output };\n};\n\n/**\n * Match the basename of a filepath.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.matchBase(input, glob[, options]);\n * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).\n * @return {Boolean}\n * @api public\n */\n\npicomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {\n  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);\n  return regex.test(path.basename(input));\n};\n\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.isMatch(string, patterns[, options]);\n *\n * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String|Array} str The string to test.\n * @param {String|Array} patterns One or more glob patterns to use for matching.\n * @param {Object} [options] See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\npicomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const result = picomatch.parse(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as a regex source string.\n * @api public\n */\n\npicomatch.parse = (pattern, options) => {\n  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));\n  return parse(pattern, { ...options, fastpaths: false });\n};\n\n/**\n * Scan a glob pattern to separate the pattern into segments.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.scan(input[, options]);\n *\n * const result = picomatch.scan('!./foo/*.js');\n * console.log(result);\n * { prefix: '!./',\n *   input: '!./foo/*.js',\n *   start: 3,\n *   base: 'foo',\n *   glob: '*.js',\n *   isBrace: false,\n *   isBracket: false,\n *   isGlob: true,\n *   isExtglob: false,\n *   isGlobstar: false,\n *   negated: true }\n * ```\n * @param {String} `input` Glob pattern to scan.\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\npicomatch.scan = (input, options) => scan(input, options);\n\n/**\n * Compile a regular expression from the `state` object returned by the\n * [parse()](#parse) method.\n *\n * @param {Object} `state`\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.\n * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.\n * @return {RegExp}\n * @api public\n */\n\npicomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {\n  if (returnOutput === true) {\n    return state.output;\n  }\n\n  const opts = options || {};\n  const prepend = opts.contains ? '' : '^';\n  const append = opts.contains ? '' : '$';\n\n  let source = `${prepend}(?:${state.output})${append}`;\n  if (state && state.negated === true) {\n    source = `^(?!${source}).*$`;\n  }\n\n  const regex = picomatch.toRegex(source, options);\n  if (returnState === true) {\n    regex.state = state;\n  }\n\n  return regex;\n};\n\n/**\n * Create a regular expression from a parsed glob pattern.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const state = picomatch.parse('*.js');\n * // picomatch.compileRe(state[, options]);\n *\n * console.log(picomatch.compileRe(state));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `state` The object returned from the `.parse` method.\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.\n * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\npicomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {\n  if (!input || typeof input !== 'string') {\n    throw new TypeError('Expected a non-empty string');\n  }\n\n  let parsed = { negated: false, fastpaths: true };\n\n  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {\n    parsed.output = parse.fastpaths(input, options);\n  }\n\n  if (!parsed.output) {\n    parsed = parse(input, options);\n  }\n\n  return picomatch.compileRe(parsed, options, returnOutput, returnState);\n};\n\n/**\n * Create a regular expression from the given regex source string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.toRegex(source[, options]);\n *\n * const { output } = picomatch.parse('*.js');\n * console.log(picomatch.toRegex(output));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `source` Regular expression source string.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\npicomatch.toRegex = (source, options) => {\n  try {\n    const opts = options || {};\n    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));\n  } catch (err) {\n    if (options && options.debug === true) throw err;\n    return /$^/;\n  }\n};\n\n/**\n * Picomatch constants.\n * @return {Object}\n */\n\npicomatch.constants = constants;\n\n/**\n * Expose \"picomatch\"\n */\n\nmodule.exports = picomatch;\n","'use strict';\n\nconst utils = require('./utils');\nconst {\n  CHAR_ASTERISK,             /* * */\n  CHAR_AT,                   /* @ */\n  CHAR_BACKWARD_SLASH,       /* \\ */\n  CHAR_COMMA,                /* , */\n  CHAR_DOT,                  /* . */\n  CHAR_EXCLAMATION_MARK,     /* ! */\n  CHAR_FORWARD_SLASH,        /* / */\n  CHAR_LEFT_CURLY_BRACE,     /* { */\n  CHAR_LEFT_PARENTHESES,     /* ( */\n  CHAR_LEFT_SQUARE_BRACKET,  /* [ */\n  CHAR_PLUS,                 /* + */\n  CHAR_QUESTION_MARK,        /* ? */\n  CHAR_RIGHT_CURLY_BRACE,    /* } */\n  CHAR_RIGHT_PARENTHESES,    /* ) */\n  CHAR_RIGHT_SQUARE_BRACKET  /* ] */\n} = require('./constants');\n\nconst isPathSeparator = code => {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n};\n\nconst depth = token => {\n  if (token.isPrefix !== true) {\n    token.depth = token.isGlobstar ? Infinity : 1;\n  }\n};\n\n/**\n * Quickly scans a glob pattern and returns an object with a handful of\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\n * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not\n * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\n *\n * ```js\n * const pm = require('picomatch');\n * console.log(pm.scan('foo/bar/*.js'));\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an object with tokens and regex source string.\n * @api public\n */\n\nconst scan = (input, options) => {\n  const opts = options || {};\n\n  const length = input.length - 1;\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\n  const slashes = [];\n  const tokens = [];\n  const parts = [];\n\n  let str = input;\n  let index = -1;\n  let start = 0;\n  let lastIndex = 0;\n  let isBrace = false;\n  let isBracket = false;\n  let isGlob = false;\n  let isExtglob = false;\n  let isGlobstar = false;\n  let braceEscaped = false;\n  let backslashes = false;\n  let negated = false;\n  let negatedExtglob = false;\n  let finished = false;\n  let braces = 0;\n  let prev;\n  let code;\n  let token = { value: '', depth: 0, isGlob: false };\n\n  const eos = () => index >= length;\n  const peek = () => str.charCodeAt(index + 1);\n  const advance = () => {\n    prev = code;\n    return str.charCodeAt(++index);\n  };\n\n  while (index < length) {\n    code = advance();\n    let next;\n\n    if (code === CHAR_BACKWARD_SLASH) {\n      backslashes = token.backslashes = true;\n      code = advance();\n\n      if (code === CHAR_LEFT_CURLY_BRACE) {\n        braceEscaped = true;\n      }\n      continue;\n    }\n\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n      braces++;\n\n      while (eos() !== true && (code = advance())) {\n        if (code === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (code === CHAR_LEFT_CURLY_BRACE) {\n          braces++;\n          continue;\n        }\n\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (braceEscaped !== true && code === CHAR_COMMA) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\n          braces--;\n\n          if (braces === 0) {\n            braceEscaped = false;\n            isBrace = token.isBrace = true;\n            finished = true;\n            break;\n          }\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_FORWARD_SLASH) {\n      slashes.push(index);\n      tokens.push(token);\n      token = { value: '', depth: 0, isGlob: false };\n\n      if (finished === true) continue;\n      if (prev === CHAR_DOT && index === (start + 1)) {\n        start += 2;\n        continue;\n      }\n\n      lastIndex = index + 1;\n      continue;\n    }\n\n    if (opts.noext !== true) {\n      const isExtglobChar = code === CHAR_PLUS\n        || code === CHAR_AT\n        || code === CHAR_ASTERISK\n        || code === CHAR_QUESTION_MARK\n        || code === CHAR_EXCLAMATION_MARK;\n\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n        isGlob = token.isGlob = true;\n        isExtglob = token.isExtglob = true;\n        finished = true;\n        if (code === CHAR_EXCLAMATION_MARK && index === start) {\n          negatedExtglob = true;\n        }\n\n        if (scanToEnd === true) {\n          while (eos() !== true && (code = advance())) {\n            if (code === CHAR_BACKWARD_SLASH) {\n              backslashes = token.backslashes = true;\n              code = advance();\n              continue;\n            }\n\n            if (code === CHAR_RIGHT_PARENTHESES) {\n              isGlob = token.isGlob = true;\n              finished = true;\n              break;\n            }\n          }\n          continue;\n        }\n        break;\n      }\n    }\n\n    if (code === CHAR_ASTERISK) {\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_QUESTION_MARK) {\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n      while (eos() !== true && (next = advance())) {\n        if (next === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          isBracket = token.isBracket = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n          break;\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n      negated = token.negated = true;\n      start++;\n      continue;\n    }\n\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n      isGlob = token.isGlob = true;\n\n      if (scanToEnd === true) {\n        while (eos() !== true && (code = advance())) {\n          if (code === CHAR_LEFT_PARENTHESES) {\n            backslashes = token.backslashes = true;\n            code = advance();\n            continue;\n          }\n\n          if (code === CHAR_RIGHT_PARENTHESES) {\n            finished = true;\n            break;\n          }\n        }\n        continue;\n      }\n      break;\n    }\n\n    if (isGlob === true) {\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  if (opts.noext === true) {\n    isExtglob = false;\n    isGlob = false;\n  }\n\n  let base = str;\n  let prefix = '';\n  let glob = '';\n\n  if (start > 0) {\n    prefix = str.slice(0, start);\n    str = str.slice(start);\n    lastIndex -= start;\n  }\n\n  if (base && isGlob === true && lastIndex > 0) {\n    base = str.slice(0, lastIndex);\n    glob = str.slice(lastIndex);\n  } else if (isGlob === true) {\n    base = '';\n    glob = str;\n  } else {\n    base = str;\n  }\n\n  if (base && base !== '' && base !== '/' && base !== str) {\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n      base = base.slice(0, -1);\n    }\n  }\n\n  if (opts.unescape === true) {\n    if (glob) glob = utils.removeBackslashes(glob);\n\n    if (base && backslashes === true) {\n      base = utils.removeBackslashes(base);\n    }\n  }\n\n  const state = {\n    prefix,\n    input,\n    start,\n    base,\n    glob,\n    isBrace,\n    isBracket,\n    isGlob,\n    isExtglob,\n    isGlobstar,\n    negated,\n    negatedExtglob\n  };\n\n  if (opts.tokens === true) {\n    state.maxDepth = 0;\n    if (!isPathSeparator(code)) {\n      tokens.push(token);\n    }\n    state.tokens = tokens;\n  }\n\n  if (opts.parts === true || opts.tokens === true) {\n    let prevIndex;\n\n    for (let idx = 0; idx < slashes.length; idx++) {\n      const n = prevIndex ? prevIndex + 1 : start;\n      const i = slashes[idx];\n      const value = input.slice(n, i);\n      if (opts.tokens) {\n        if (idx === 0 && start !== 0) {\n          tokens[idx].isPrefix = true;\n          tokens[idx].value = prefix;\n        } else {\n          tokens[idx].value = value;\n        }\n        depth(tokens[idx]);\n        state.maxDepth += tokens[idx].depth;\n      }\n      if (idx !== 0 || value !== '') {\n        parts.push(value);\n      }\n      prevIndex = i;\n    }\n\n    if (prevIndex && prevIndex + 1 < input.length) {\n      const value = input.slice(prevIndex + 1);\n      parts.push(value);\n\n      if (opts.tokens) {\n        tokens[tokens.length - 1].value = value;\n        depth(tokens[tokens.length - 1]);\n        state.maxDepth += tokens[tokens.length - 1].depth;\n      }\n    }\n\n    state.slashes = slashes;\n    state.parts = parts;\n  }\n\n  return state;\n};\n\nmodule.exports = scan;\n","'use strict';\n\nconst path = require('path');\nconst win32 = process.platform === 'win32';\nconst {\n  REGEX_BACKSLASH,\n  REGEX_REMOVE_BACKSLASH,\n  REGEX_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_GLOBAL\n} = require('./constants');\n\nexports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\nexports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);\nexports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);\nexports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\\\$1');\nexports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');\n\nexports.removeBackslashes = str => {\n  return str.replace(REGEX_REMOVE_BACKSLASH, match => {\n    return match === '\\\\' ? '' : match;\n  });\n};\n\nexports.supportsLookbehinds = () => {\n  const segs = process.version.slice(1).split('.').map(Number);\n  if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {\n    return true;\n  }\n  return false;\n};\n\nexports.isWindows = options => {\n  if (options && typeof options.windows === 'boolean') {\n    return options.windows;\n  }\n  return win32 === true || path.sep === '\\\\';\n};\n\nexports.escapeLast = (input, char, lastIdx) => {\n  const idx = input.lastIndexOf(char, lastIdx);\n  if (idx === -1) return input;\n  if (input[idx - 1] === '\\\\') return exports.escapeLast(input, char, idx - 1);\n  return `${input.slice(0, idx)}\\\\${input.slice(idx)}`;\n};\n\nexports.removePrefix = (input, state = {}) => {\n  let output = input;\n  if (output.startsWith('./')) {\n    output = output.slice(2);\n    state.prefix = './';\n  }\n  return output;\n};\n\nexports.wrapOutput = (input, state = {}, options = {}) => {\n  const prepend = options.contains ? '' : '^';\n  const append = options.contains ? '' : '$';\n\n  let output = `${prepend}(?:${input})${append}`;\n  if (state.negated === true) {\n    output = `(?:^(?!${output}).*$)`;\n  }\n  return output;\n};\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","'use strict'\n\nfunction reusify (Constructor) {\n  var head = new Constructor()\n  var tail = head\n\n  function get () {\n    var current = head\n\n    if (current.next) {\n      head = current.next\n    } else {\n      head = new Constructor()\n      tail = head\n    }\n\n    current.next = null\n\n    return current\n  }\n\n  function release (obj) {\n    tail.next = obj\n    tail = obj\n  }\n\n  return {\n    get: get,\n    release: release\n  }\n}\n\nmodule.exports = reusify\n","/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nmodule.exports = runParallel\n\nconst queueMicrotask = require('queue-microtask')\n\nfunction runParallel (tasks, cb) {\n  let results, pending, keys\n  let isSync = true\n\n  if (Array.isArray(tasks)) {\n    results = []\n    pending = tasks.length\n  } else {\n    keys = Object.keys(tasks)\n    results = {}\n    pending = keys.length\n  }\n\n  function done (err) {\n    function end () {\n      if (cb) cb(err, results)\n      cb = null\n    }\n    if (isSync) queueMicrotask(end)\n    else end()\n  }\n\n  function each (i, err, result) {\n    results[i] = result\n    if (--pending === 0 || err) {\n      done(err)\n    }\n  }\n\n  if (!pending) {\n    // empty\n    done(null)\n  } else if (keys) {\n    // object\n    keys.forEach(function (key) {\n      tasks[key](function (err, result) { each(key, err, result) })\n    })\n  } else {\n    // array\n    tasks.forEach(function (task, i) {\n      task(function (err, result) { each(i, err, result) })\n    })\n  }\n\n  isSync = false\n}\n","/*!\n * to-regex-range <https://github.com/micromatch/to-regex-range>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nconst isNumber = require('is-number');\n\nconst toRegexRange = (min, max, options) => {\n  if (isNumber(min) === false) {\n    throw new TypeError('toRegexRange: expected the first argument to be a number');\n  }\n\n  if (max === void 0 || min === max) {\n    return String(min);\n  }\n\n  if (isNumber(max) === false) {\n    throw new TypeError('toRegexRange: expected the second argument to be a number.');\n  }\n\n  let opts = { relaxZeros: true, ...options };\n  if (typeof opts.strictZeros === 'boolean') {\n    opts.relaxZeros = opts.strictZeros === false;\n  }\n\n  let relax = String(opts.relaxZeros);\n  let shorthand = String(opts.shorthand);\n  let capture = String(opts.capture);\n  let wrap = String(opts.wrap);\n  let cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap;\n\n  if (toRegexRange.cache.hasOwnProperty(cacheKey)) {\n    return toRegexRange.cache[cacheKey].result;\n  }\n\n  let a = Math.min(min, max);\n  let b = Math.max(min, max);\n\n  if (Math.abs(a - b) === 1) {\n    let result = min + '|' + max;\n    if (opts.capture) {\n      return `(${result})`;\n    }\n    if (opts.wrap === false) {\n      return result;\n    }\n    return `(?:${result})`;\n  }\n\n  let isPadded = hasPadding(min) || hasPadding(max);\n  let state = { min, max, a, b };\n  let positives = [];\n  let negatives = [];\n\n  if (isPadded) {\n    state.isPadded = isPadded;\n    state.maxLen = String(state.max).length;\n  }\n\n  if (a < 0) {\n    let newMin = b < 0 ? Math.abs(b) : 1;\n    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);\n    a = state.a = 0;\n  }\n\n  if (b >= 0) {\n    positives = splitToPatterns(a, b, state, opts);\n  }\n\n  state.negatives = negatives;\n  state.positives = positives;\n  state.result = collatePatterns(negatives, positives, opts);\n\n  if (opts.capture === true) {\n    state.result = `(${state.result})`;\n  } else if (opts.wrap !== false && (positives.length + negatives.length) > 1) {\n    state.result = `(?:${state.result})`;\n  }\n\n  toRegexRange.cache[cacheKey] = state;\n  return state.result;\n};\n\nfunction collatePatterns(neg, pos, options) {\n  let onlyNegative = filterPatterns(neg, pos, '-', false, options) || [];\n  let onlyPositive = filterPatterns(pos, neg, '', false, options) || [];\n  let intersected = filterPatterns(neg, pos, '-?', true, options) || [];\n  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);\n  return subpatterns.join('|');\n}\n\nfunction splitToRanges(min, max) {\n  let nines = 1;\n  let zeros = 1;\n\n  let stop = countNines(min, nines);\n  let stops = new Set([max]);\n\n  while (min <= stop && stop <= max) {\n    stops.add(stop);\n    nines += 1;\n    stop = countNines(min, nines);\n  }\n\n  stop = countZeros(max + 1, zeros) - 1;\n\n  while (min < stop && stop <= max) {\n    stops.add(stop);\n    zeros += 1;\n    stop = countZeros(max + 1, zeros) - 1;\n  }\n\n  stops = [...stops];\n  stops.sort(compare);\n  return stops;\n}\n\n/**\n * Convert a range to a regex pattern\n * @param {Number} `start`\n * @param {Number} `stop`\n * @return {String}\n */\n\nfunction rangeToPattern(start, stop, options) {\n  if (start === stop) {\n    return { pattern: start, count: [], digits: 0 };\n  }\n\n  let zipped = zip(start, stop);\n  let digits = zipped.length;\n  let pattern = '';\n  let count = 0;\n\n  for (let i = 0; i < digits; i++) {\n    let [startDigit, stopDigit] = zipped[i];\n\n    if (startDigit === stopDigit) {\n      pattern += startDigit;\n\n    } else if (startDigit !== '0' || stopDigit !== '9') {\n      pattern += toCharacterClass(startDigit, stopDigit, options);\n\n    } else {\n      count++;\n    }\n  }\n\n  if (count) {\n    pattern += options.shorthand === true ? '\\\\d' : '[0-9]';\n  }\n\n  return { pattern, count: [count], digits };\n}\n\nfunction splitToPatterns(min, max, tok, options) {\n  let ranges = splitToRanges(min, max);\n  let tokens = [];\n  let start = min;\n  let prev;\n\n  for (let i = 0; i < ranges.length; i++) {\n    let max = ranges[i];\n    let obj = rangeToPattern(String(start), String(max), options);\n    let zeros = '';\n\n    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {\n      if (prev.count.length > 1) {\n        prev.count.pop();\n      }\n\n      prev.count.push(obj.count[0]);\n      prev.string = prev.pattern + toQuantifier(prev.count);\n      start = max + 1;\n      continue;\n    }\n\n    if (tok.isPadded) {\n      zeros = padZeros(max, tok, options);\n    }\n\n    obj.string = zeros + obj.pattern + toQuantifier(obj.count);\n    tokens.push(obj);\n    start = max + 1;\n    prev = obj;\n  }\n\n  return tokens;\n}\n\nfunction filterPatterns(arr, comparison, prefix, intersection, options) {\n  let result = [];\n\n  for (let ele of arr) {\n    let { string } = ele;\n\n    // only push if _both_ are negative...\n    if (!intersection && !contains(comparison, 'string', string)) {\n      result.push(prefix + string);\n    }\n\n    // or _both_ are positive\n    if (intersection && contains(comparison, 'string', string)) {\n      result.push(prefix + string);\n    }\n  }\n  return result;\n}\n\n/**\n * Zip strings\n */\n\nfunction zip(a, b) {\n  let arr = [];\n  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);\n  return arr;\n}\n\nfunction compare(a, b) {\n  return a > b ? 1 : b > a ? -1 : 0;\n}\n\nfunction contains(arr, key, val) {\n  return arr.some(ele => ele[key] === val);\n}\n\nfunction countNines(min, len) {\n  return Number(String(min).slice(0, -len) + '9'.repeat(len));\n}\n\nfunction countZeros(integer, zeros) {\n  return integer - (integer % Math.pow(10, zeros));\n}\n\nfunction toQuantifier(digits) {\n  let [start = 0, stop = ''] = digits;\n  if (stop || start > 1) {\n    return `{${start + (stop ? ',' + stop : '')}}`;\n  }\n  return '';\n}\n\nfunction toCharacterClass(a, b, options) {\n  return `[${a}${(b - a === 1) ? '' : '-'}${b}]`;\n}\n\nfunction hasPadding(str) {\n  return /^-?(0+)\\d/.test(str);\n}\n\nfunction padZeros(value, tok, options) {\n  if (!tok.isPadded) {\n    return value;\n  }\n\n  let diff = Math.abs(tok.maxLen - String(value).length);\n  let relax = options.relaxZeros !== false;\n\n  switch (diff) {\n    case 0:\n      return '';\n    case 1:\n      return relax ? '0?' : '0';\n    case 2:\n      return relax ? '0{0,2}' : '00';\n    default: {\n      return relax ? `0{0,${diff}}` : `0{${diff}}`;\n    }\n  }\n}\n\n/**\n * Cache\n */\n\ntoRegexRange.cache = {};\ntoRegexRange.clearCache = () => (toRegexRange.cache = {});\n\n/**\n * Expose `toRegexRange`\n */\n\nmodule.exports = toRegexRange;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar common = require('@ts-morph/common');\nvar CodeBlockWriter = require('code-block-writer');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar CodeBlockWriter__default = /*#__PURE__*/_interopDefaultLegacy(CodeBlockWriter);\n\nclass AdvancedIterator {\n    constructor(iterator) {\n        this.iterator = iterator;\n        this.buffer = [undefined, undefined, undefined];\n        this.bufferIndex = 0;\n        this.isDone = false;\n        this.nextCount = 0;\n        this.advance();\n    }\n    get done() {\n        return this.isDone;\n    }\n    get current() {\n        if (this.nextCount === 0)\n            throw new common.errors.InvalidOperationError(\"Cannot get the current when the iterator has not been advanced.\");\n        return this.buffer[this.bufferIndex];\n    }\n    get previous() {\n        if (this.nextCount <= 1)\n            throw new common.errors.InvalidOperationError(\"Cannot get the previous when the iterator has not advanced enough.\");\n        return this.buffer[(this.bufferIndex + this.buffer.length - 1) % this.buffer.length];\n    }\n    get peek() {\n        if (this.isDone)\n            throw new common.errors.InvalidOperationError(\"Cannot peek at the end of the iterator.\");\n        return this.buffer[(this.bufferIndex + 1) % this.buffer.length];\n    }\n    next() {\n        if (this.done)\n            throw new common.errors.InvalidOperationError(\"Cannot get the next when at the end of the iterator.\");\n        const next = this.buffer[this.getNextBufferIndex()];\n        this.advance();\n        this.nextCount++;\n        return next;\n    }\n    *rest() {\n        while (!this.done)\n            yield this.next();\n    }\n    advance() {\n        const next = this.iterator.next();\n        this.bufferIndex = this.getNextBufferIndex();\n        if (next.done) {\n            this.isDone = true;\n            return;\n        }\n        this.buffer[this.getNextBufferIndex()] = next.value;\n    }\n    getNextBufferIndex() {\n        return (this.bufferIndex + 1) % this.buffer.length;\n    }\n}\n\nconst CharCodes = {\n    ASTERISK: \"*\".charCodeAt(0),\n    NEWLINE: \"\\n\".charCodeAt(0),\n    CARRIAGE_RETURN: \"\\r\".charCodeAt(0),\n    SPACE: \" \".charCodeAt(0),\n    TAB: \"\\t\".charCodeAt(0),\n    CLOSE_BRACE: \"}\".charCodeAt(0),\n};\n\nfunction getNodeByNameOrFindFunction(items, nameOrFindFunc) {\n    let findFunc;\n    if (typeof nameOrFindFunc === \"string\")\n        findFunc = dec => nodeHasName(dec, nameOrFindFunc);\n    else\n        findFunc = nameOrFindFunc;\n    return items.find(findFunc);\n}\nfunction nodeHasName(node, name) {\n    if (node.getNameNode == null)\n        return false;\n    const nameNode = node.getNameNode();\n    if (nameNode == null)\n        return false;\n    if (Node.isArrayBindingPattern(nameNode) || Node.isObjectBindingPattern(nameNode))\n        return nameNode.getElements().some(element => nodeHasName(element, name));\n    const nodeName = node.getName != null ? node.getName() : nameNode.getText();\n    return nodeName === name;\n}\nfunction getNotFoundErrorMessageForNameOrFindFunction(findName, nameOrFindFunction) {\n    if (typeof nameOrFindFunction === \"string\")\n        return `Expected to find ${findName} named '${nameOrFindFunction}'.`;\n    return `Expected to find ${findName} that matched the provided condition.`;\n}\n\nfunction getParentSyntaxList(node, sourceFile) {\n    if (node.kind === common.SyntaxKind.EndOfFileToken)\n        return undefined;\n    const parent = node.parent;\n    if (parent == null)\n        return undefined;\n    const { pos, end } = node;\n    for (const child of parent.getChildren(sourceFile)) {\n        if (child.pos > end || child === node)\n            return undefined;\n        if (child.kind === common.SyntaxKind.SyntaxList && child.pos <= pos && child.end >= end)\n            return child;\n    }\n    return undefined;\n}\n\nfunction getSymbolByNameOrFindFunction(items, nameOrFindFunc) {\n    let findFunc;\n    if (typeof nameOrFindFunc === \"string\")\n        findFunc = dec => dec.getName() === nameOrFindFunc;\n    else\n        findFunc = nameOrFindFunc;\n    return items.find(findFunc);\n}\n\nfunction isNodeAmbientOrInAmbientContext(node) {\n    if (checkNodeIsAmbient(node) || node._sourceFile.isDeclarationFile())\n        return true;\n    for (const ancestor of node._getAncestorsIterator(false)) {\n        if (checkNodeIsAmbient(ancestor))\n            return true;\n    }\n    return false;\n}\nfunction checkNodeIsAmbient(node) {\n    const isThisAmbient = (node.getCombinedModifierFlags() & common.ts.ModifierFlags.Ambient) === common.ts.ModifierFlags.Ambient;\n    return isThisAmbient || Node.isInterfaceDeclaration(node) || Node.isTypeAliasDeclaration(node);\n}\n\nfunction isStringKind(kind) {\n    switch (kind) {\n        case common.SyntaxKind.StringLiteral:\n        case common.SyntaxKind.NoSubstitutionTemplateLiteral:\n        case common.SyntaxKind.TemplateHead:\n        case common.SyntaxKind.TemplateMiddle:\n        case common.SyntaxKind.TemplateTail:\n            return true;\n        default:\n            return false;\n    }\n}\n\nclass ModuleUtils {\n    constructor() {\n    }\n    static isModuleSpecifierRelative(text) {\n        return text.startsWith(\"./\")\n            || text.startsWith(\"../\");\n    }\n    static getReferencedSourceFileFromSymbol(symbol) {\n        const declarations = symbol.getDeclarations();\n        if (declarations.length === 0 || declarations[0].getKind() !== common.SyntaxKind.SourceFile)\n            return undefined;\n        return declarations[0];\n    }\n}\n\nfunction printNode(node, sourceFileOrOptions, secondOverloadOptions) {\n    var _a, _b;\n    const isFirstOverload = sourceFileOrOptions == null || sourceFileOrOptions.kind !== common.SyntaxKind.SourceFile;\n    const options = getOptions();\n    const sourceFile = getSourceFile();\n    const printer = common.ts.createPrinter({\n        newLine: (_a = options.newLineKind) !== null && _a !== void 0 ? _a : common.NewLineKind.LineFeed,\n        removeComments: options.removeComments || false,\n    });\n    if (sourceFile == null)\n        return printer.printFile(node);\n    else\n        return printer.printNode((_b = options.emitHint) !== null && _b !== void 0 ? _b : common.EmitHint.Unspecified, node, sourceFile);\n    function getSourceFile() {\n        if (isFirstOverload) {\n            if (node.kind === common.SyntaxKind.SourceFile)\n                return undefined;\n            const topParent = getNodeSourceFile();\n            if (topParent == null) {\n                const scriptKind = getScriptKind();\n                return common.ts.createSourceFile(`print.${getFileExt(scriptKind)}`, \"\", common.ScriptTarget.Latest, false, scriptKind);\n            }\n            return topParent;\n        }\n        return sourceFileOrOptions;\n        function getScriptKind() {\n            var _a;\n            return (_a = options.scriptKind) !== null && _a !== void 0 ? _a : common.ScriptKind.TSX;\n        }\n        function getFileExt(scriptKind) {\n            if (scriptKind === common.ScriptKind.JSX || scriptKind === common.ScriptKind.TSX)\n                return \"tsx\";\n            return \"ts\";\n        }\n    }\n    function getNodeSourceFile() {\n        let topNode = node.parent;\n        while (topNode != null && topNode.parent != null)\n            topNode = topNode.parent;\n        return topNode;\n    }\n    function getOptions() {\n        return (isFirstOverload ? sourceFileOrOptions : secondOverloadOptions) || {};\n    }\n}\n\nexports.IndentationText = void 0;\n(function (IndentationText) {\n    IndentationText[\"TwoSpaces\"] = \"  \";\n    IndentationText[\"FourSpaces\"] = \"    \";\n    IndentationText[\"EightSpaces\"] = \"        \";\n    IndentationText[\"Tab\"] = \"\\t\";\n})(exports.IndentationText || (exports.IndentationText = {}));\nclass ManipulationSettingsContainer extends common.SettingsContainer {\n    constructor() {\n        super({\n            indentationText: exports.IndentationText.FourSpaces,\n            newLineKind: common.NewLineKind.LineFeed,\n            quoteKind: exports.QuoteKind.Double,\n            insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: true,\n            usePrefixAndSuffixTextForRename: false,\n            useTrailingCommas: false,\n        });\n    }\n    getEditorSettings() {\n        if (this._editorSettings == null) {\n            this._editorSettings = {};\n            fillDefaultEditorSettings(this._editorSettings, this);\n        }\n        return { ...this._editorSettings };\n    }\n    getFormatCodeSettings() {\n        if (this._formatCodeSettings == null) {\n            this._formatCodeSettings = {\n                ...this.getEditorSettings(),\n                insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: this._settings.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces,\n            };\n        }\n        return { ...this._formatCodeSettings };\n    }\n    getUserPreferences() {\n        if (this._userPreferences == null) {\n            this._userPreferences = {\n                quotePreference: this.getQuoteKind() === exports.QuoteKind.Double ? \"double\" : \"single\",\n                providePrefixAndSuffixTextForRename: this.getUsePrefixAndSuffixTextForRename(),\n            };\n        }\n        return { ...this._userPreferences };\n    }\n    getQuoteKind() {\n        return this._settings.quoteKind;\n    }\n    getNewLineKind() {\n        return this._settings.newLineKind;\n    }\n    getNewLineKindAsString() {\n        return newLineKindToString(this.getNewLineKind());\n    }\n    getIndentationText() {\n        return this._settings.indentationText;\n    }\n    getUsePrefixAndSuffixTextForRename() {\n        return this._settings.usePrefixAndSuffixTextForRename;\n    }\n    getUseTrailingCommas() {\n        return this._settings.useTrailingCommas;\n    }\n    set(settings) {\n        super.set(settings);\n        this._editorSettings = undefined;\n        this._formatCodeSettings = undefined;\n        this._userPreferences = undefined;\n    }\n    _getIndentSizeInSpaces() {\n        const indentationText = this.getIndentationText();\n        switch (indentationText) {\n            case exports.IndentationText.EightSpaces:\n                return 8;\n            case exports.IndentationText.FourSpaces:\n                return 4;\n            case exports.IndentationText.TwoSpaces:\n                return 2;\n            case exports.IndentationText.Tab:\n                return 4;\n            default:\n                return common.errors.throwNotImplementedForNeverValueError(indentationText);\n        }\n    }\n}\n\nfunction setValueIfUndefined(obj, propertyName, defaultValue) {\n    if (typeof obj[propertyName] === \"undefined\")\n        obj[propertyName] = defaultValue;\n}\n\nfunction fillDefaultEditorSettings(settings, manipulationSettings) {\n    setValueIfUndefined(settings, \"convertTabsToSpaces\", manipulationSettings.getIndentationText() !== exports.IndentationText.Tab);\n    setValueIfUndefined(settings, \"newLineCharacter\", manipulationSettings.getNewLineKindAsString());\n    setValueIfUndefined(settings, \"indentStyle\", common.ts.IndentStyle.Smart);\n    setValueIfUndefined(settings, \"indentSize\", manipulationSettings.getIndentationText().length);\n    setValueIfUndefined(settings, \"tabSize\", manipulationSettings.getIndentationText().length);\n}\n\nfunction fillDefaultFormatCodeSettings(settings, manipulationSettings) {\n    fillDefaultEditorSettings(settings, manipulationSettings);\n    setValueIfUndefined(settings, \"insertSpaceAfterCommaDelimiter\", true);\n    setValueIfUndefined(settings, \"insertSpaceAfterConstructor\", false);\n    setValueIfUndefined(settings, \"insertSpaceAfterSemicolonInForStatements\", true);\n    setValueIfUndefined(settings, \"insertSpaceAfterKeywordsInControlFlowStatements\", true);\n    setValueIfUndefined(settings, \"insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces\", true);\n    setValueIfUndefined(settings, \"insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets\", false);\n    setValueIfUndefined(settings, \"insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces\", false);\n    setValueIfUndefined(settings, \"insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces\", false);\n    setValueIfUndefined(settings, \"insertSpaceBeforeFunctionParenthesis\", false);\n    setValueIfUndefined(settings, \"insertSpaceBeforeAndAfterBinaryOperators\", true);\n    setValueIfUndefined(settings, \"placeOpenBraceOnNewLineForFunctions\", false);\n    setValueIfUndefined(settings, \"placeOpenBraceOnNewLineForControlBlocks\", false);\n    setValueIfUndefined(settings, \"ensureNewLineAtEndOfFile\", true);\n}\n\nfunction getTextFromStringOrWriter(writer, textOrWriterFunction) {\n    printTextFromStringOrWriter(writer, textOrWriterFunction);\n    return writer.toString();\n}\nfunction printTextFromStringOrWriter(writer, textOrWriterFunction) {\n    if (typeof textOrWriterFunction === \"string\")\n        writer.write(textOrWriterFunction);\n    else if (textOrWriterFunction instanceof Function)\n        textOrWriterFunction(writer);\n    else {\n        for (let i = 0; i < textOrWriterFunction.length; i++) {\n            if (i > 0)\n                writer.newLineIfLastNot();\n            printTextFromStringOrWriter(writer, textOrWriterFunction[i]);\n        }\n    }\n}\n\nclass EnableableLogger {\n    constructor() {\n        this.enabled = false;\n    }\n    setEnabled(enabled) {\n        this.enabled = enabled;\n    }\n    log(text) {\n        if (this.enabled)\n            this.logInternal(text);\n    }\n    warn(text) {\n        if (this.enabled)\n            this.warnInternal(text);\n    }\n}\n\nclass ConsoleLogger extends EnableableLogger {\n    logInternal(text) {\n        console.log(text);\n    }\n    warnInternal(text) {\n        console.warn(text);\n    }\n}\n\nconst reg = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/;\nfunction isValidVariableName(variableName) {\n    return reg.test(variableName);\n}\n\nfunction newLineKindToString(kind) {\n    switch (kind) {\n        case common.NewLineKind.CarriageReturnLineFeed:\n            return \"\\r\\n\";\n        case common.NewLineKind.LineFeed:\n            return \"\\n\";\n        default:\n            throw new common.errors.NotImplementedError(`Not implemented newline kind: ${kind}`);\n    }\n}\n\nclass LazyReferenceCoordinator {\n    constructor(factory) {\n        this.dirtySourceFiles = new Set();\n        const onSourceFileModified = (sourceFile) => {\n            if (!sourceFile.wasForgotten())\n                this.dirtySourceFiles.add(sourceFile);\n        };\n        factory.onSourceFileAdded(sourceFile => {\n            this.dirtySourceFiles.add(sourceFile);\n            sourceFile.onModified(onSourceFileModified);\n        });\n        factory.onSourceFileRemoved(sourceFile => {\n            sourceFile._referenceContainer.clear();\n            this.dirtySourceFiles.delete(sourceFile);\n            sourceFile.onModified(onSourceFileModified, false);\n        });\n    }\n    refreshDirtySourceFiles() {\n        for (const sourceFile of this.dirtySourceFiles.values())\n            sourceFile._referenceContainer.refresh();\n        this.clearDirtySourceFiles();\n    }\n    refreshSourceFileIfDirty(sourceFile) {\n        if (!this.dirtySourceFiles.has(sourceFile))\n            return;\n        sourceFile._referenceContainer.refresh();\n        this.clearDirtyForSourceFile(sourceFile);\n    }\n    addDirtySourceFile(sourceFile) {\n        this.dirtySourceFiles.add(sourceFile);\n    }\n    clearDirtySourceFiles() {\n        this.dirtySourceFiles.clear();\n    }\n    clearDirtyForSourceFile(sourceFile) {\n        this.dirtySourceFiles.delete(sourceFile);\n    }\n}\n\nclass SourceFileReferenceContainer {\n    constructor(sourceFile) {\n        this.sourceFile = sourceFile;\n        this.nodesInThis = new common.KeyValueCache();\n        this.nodesInOther = new common.KeyValueCache();\n        this.unresolvedLiterals = [];\n        this.resolveUnresolved = () => {\n            for (let i = this.unresolvedLiterals.length - 1; i >= 0; i--) {\n                const literal = this.unresolvedLiterals[i];\n                const sourceFile = this.getSourceFileForLiteral(literal);\n                if (sourceFile != null) {\n                    this.unresolvedLiterals.splice(i, 1);\n                    this.addNodeInThis(literal, sourceFile);\n                }\n            }\n            if (this.unresolvedLiterals.length === 0)\n                this.sourceFile._context.compilerFactory.onSourceFileAdded(this.resolveUnresolved, false);\n        };\n    }\n    getDependentSourceFiles() {\n        this.sourceFile._context.lazyReferenceCoordinator.refreshDirtySourceFiles();\n        const hashSet = new Set();\n        for (const nodeInOther of this.nodesInOther.getKeys())\n            hashSet.add(nodeInOther._sourceFile);\n        return hashSet.values();\n    }\n    getLiteralsReferencingOtherSourceFilesEntries() {\n        this.sourceFile._context.lazyReferenceCoordinator.refreshSourceFileIfDirty(this.sourceFile);\n        return this.nodesInThis.getEntries();\n    }\n    getReferencingLiteralsInOtherSourceFiles() {\n        this.sourceFile._context.lazyReferenceCoordinator.refreshDirtySourceFiles();\n        return this.nodesInOther.getKeys();\n    }\n    refresh() {\n        if (this.unresolvedLiterals.length > 0)\n            this.sourceFile._context.compilerFactory.onSourceFileAdded(this.resolveUnresolved, false);\n        this.clear();\n        this.populateReferences();\n        if (this.unresolvedLiterals.length > 0)\n            this.sourceFile._context.compilerFactory.onSourceFileAdded(this.resolveUnresolved);\n    }\n    clear() {\n        this.unresolvedLiterals.length = 0;\n        for (const [node, sourceFile] of this.nodesInThis.getEntries()) {\n            this.nodesInThis.removeByKey(node);\n            sourceFile._referenceContainer.nodesInOther.removeByKey(node);\n        }\n    }\n    populateReferences() {\n        this.sourceFile._context.compilerFactory.forgetNodesCreatedInBlock(remember => {\n            for (const literal of this.sourceFile.getImportStringLiterals()) {\n                const sourceFile = this.getSourceFileForLiteral(literal);\n                remember(literal);\n                if (sourceFile == null)\n                    this.unresolvedLiterals.push(literal);\n                else\n                    this.addNodeInThis(literal, sourceFile);\n            }\n        });\n    }\n    getSourceFileForLiteral(literal) {\n        const parent = literal.getParentOrThrow();\n        const grandParent = parent.getParent();\n        if (Node.isImportDeclaration(parent) || Node.isExportDeclaration(parent))\n            return parent.getModuleSpecifierSourceFile();\n        else if (grandParent != null && Node.isImportEqualsDeclaration(grandParent))\n            return grandParent.getExternalModuleReferenceSourceFile();\n        else if (Node.isCallExpression(parent)) {\n            const literalSymbol = literal.getSymbol();\n            if (literalSymbol != null)\n                return ModuleUtils.getReferencedSourceFileFromSymbol(literalSymbol);\n        }\n        else {\n            this.sourceFile._context.logger.warn(`Unknown import string literal parent: ${parent.getKindName()}`);\n        }\n        return undefined;\n    }\n    addNodeInThis(literal, sourceFile) {\n        this.nodesInThis.set(literal, sourceFile);\n        sourceFile._referenceContainer.nodesInOther.set(literal, sourceFile);\n    }\n}\n\nfunction getCompilerOptionsFromTsConfig(filePath, options = {}) {\n    const result = common.getCompilerOptionsFromTsConfig(filePath, options);\n    return {\n        options: result.options,\n        errors: result.errors.map(error => new Diagnostic(undefined, error)),\n    };\n}\n\ncommon.ts.version.split(\".\").map(v => parseInt(v, 10));\n\nclass WriterUtils {\n    constructor() {\n    }\n    static getLastCharactersToPos(writer, pos) {\n        const writerLength = writer.getLength();\n        const charCount = writerLength - pos;\n        const chars = new Array(charCount);\n        writer.iterateLastChars((char, i) => {\n            const insertPos = i - pos;\n            if (insertPos < 0)\n                return true;\n            chars[insertPos] = char;\n            return undefined;\n        });\n        return chars.join(\"\");\n    }\n}\n\nfunction callBaseGetStructure(basePrototype, node, structure) {\n    let newStructure;\n    if (basePrototype.getStructure != null)\n        newStructure = basePrototype.getStructure.call(node);\n    else\n        newStructure = {};\n    if (structure != null)\n        common.ObjectUtils.assign(newStructure, structure);\n    return newStructure;\n}\n\nfunction callBaseSet(basePrototype, node, structure) {\n    if (basePrototype.set != null)\n        basePrototype.set.call(node, structure);\n}\n\nfunction AmbientableNode(Base) {\n    return class extends Base {\n        hasDeclareKeyword() {\n            return this.getDeclareKeyword() != null;\n        }\n        getDeclareKeywordOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getDeclareKeyword(), \"Expected to find a declare keyword.\");\n        }\n        getDeclareKeyword() {\n            return this.getFirstModifierByKind(common.SyntaxKind.DeclareKeyword);\n        }\n        isAmbient() {\n            return isNodeAmbientOrInAmbientContext(this);\n        }\n        setHasDeclareKeyword(value) {\n            this.toggleModifier(\"declare\", value);\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.hasDeclareKeyword != null)\n                this.setHasDeclareKeyword(structure.hasDeclareKeyword);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                hasDeclareKeyword: this.hasDeclareKeyword(),\n            });\n        }\n    };\n}\n\nvar FormattingKind;\n(function (FormattingKind) {\n    FormattingKind[FormattingKind[\"Newline\"] = 0] = \"Newline\";\n    FormattingKind[FormattingKind[\"Blankline\"] = 1] = \"Blankline\";\n    FormattingKind[FormattingKind[\"Space\"] = 2] = \"Space\";\n    FormattingKind[FormattingKind[\"None\"] = 3] = \"None\";\n})(FormattingKind || (FormattingKind = {}));\n\nfunction getClassMemberFormatting(parent, member) {\n    if (Node.isAmbientable(parent) && parent.isAmbient())\n        return FormattingKind.Newline;\n    if (hasBody$1(member))\n        return FormattingKind.Blankline;\n    return FormattingKind.Newline;\n}\nfunction hasBody$1(node) {\n    if (Node.isBodyable(node) && node.getBody() != null)\n        return true;\n    if (Node.isBodied(node))\n        return true;\n    return false;\n}\n\nfunction getFormattingKindText(formattingKind, opts) {\n    switch (formattingKind) {\n        case FormattingKind.Space:\n            return \" \";\n        case FormattingKind.Newline:\n            return opts.newLineKind;\n        case FormattingKind.Blankline:\n            return opts.newLineKind + opts.newLineKind;\n        case FormattingKind.None:\n            return \"\";\n        default:\n            throw new common.errors.NotImplementedError(`Not implemented formatting kind: ${formattingKind}`);\n    }\n}\n\nfunction getInterfaceMemberFormatting(parent, member) {\n    return FormattingKind.Newline;\n}\n\nfunction hasBody(node) {\n    if (Node.isBodyable(node) && node.hasBody())\n        return true;\n    if (Node.isBodied(node))\n        return true;\n    return Node.isInterfaceDeclaration(node) || Node.isClassDeclaration(node) || Node.isEnumDeclaration(node);\n}\n\nfunction getStatementedNodeChildFormatting(parent, member) {\n    if (hasBody(member))\n        return FormattingKind.Blankline;\n    return FormattingKind.Newline;\n}\nfunction getClausedNodeChildFormatting(parent, member) {\n    return FormattingKind.Newline;\n}\n\nfunction getGeneralFormatting(parent, child) {\n    if (Node.isClassDeclaration(parent))\n        return getClassMemberFormatting(parent, child);\n    if (Node.isInterfaceDeclaration(parent))\n        return getInterfaceMemberFormatting();\n    return getStatementedNodeChildFormatting(parent, child);\n}\n\nfunction getTextFromTextChanges(sourceFile, textChanges) {\n    const text = sourceFile.getFullText();\n    const editResult = [];\n    let start = 0;\n    for (const { edit } of getSortedTextChanges()) {\n        const span = edit.getSpan();\n        const beforeEdit = text.slice(start, span.getStart());\n        start = span.getEnd();\n        editResult.push(beforeEdit);\n        editResult.push(edit.getNewText());\n    }\n    editResult.push(text.slice(start));\n    return editResult.join(\"\");\n    function getSortedTextChanges() {\n        return textChanges.map((edit, index) => ({ edit: toWrappedTextChange(edit), index })).sort((a, b) => {\n            const aStart = a.edit.getSpan().getStart();\n            const bStart = b.edit.getSpan().getStart();\n            const difference = aStart - bStart;\n            if (difference === 0)\n                return a.index < b.index ? -1 : 1;\n            return difference < 0 ? -1 : 1;\n        });\n    }\n    function toWrappedTextChange(change) {\n        if (change instanceof TextChange)\n            return change;\n        else\n            return new TextChange(change);\n    }\n}\n\nfunction getNewInsertCode(opts) {\n    var _a;\n    const { structures, newCodes, parent, getSeparator, previousFormattingKind, nextFormattingKind } = opts;\n    const indentationText = (_a = opts.indentationText) !== null && _a !== void 0 ? _a : parent.getChildIndentationText();\n    const newLineKind = parent._context.manipulationSettings.getNewLineKindAsString();\n    return getFormattingKindTextWithIndent(previousFormattingKind) + getChildCode() + getFormattingKindTextWithIndent(nextFormattingKind);\n    function getChildCode() {\n        let code = newCodes[0];\n        for (let i = 1; i < newCodes.length; i++) {\n            const formattingKind = getSeparator(structures[i - 1], structures[i]);\n            code += getFormattingKindTextWithIndent(formattingKind);\n            code += newCodes[i];\n        }\n        return code;\n    }\n    function getFormattingKindTextWithIndent(formattingKind) {\n        let code = getFormattingKindText(formattingKind, { newLineKind });\n        if (formattingKind === FormattingKind.Newline || formattingKind === FormattingKind.Blankline)\n            code += indentationText;\n        return code;\n    }\n}\n\nconst scanner = common.ts.createScanner(common.ts.ScriptTarget.Latest, true);\nfunction appendCommaToText(text) {\n    const pos = getAppendCommaPos(text);\n    if (pos === -1)\n        return text;\n    return text.substring(0, pos) + \",\" + text.substring(pos);\n}\nfunction getAppendCommaPos(text) {\n    scanner.setText(text);\n    try {\n        if (scanner.scan() === common.ts.SyntaxKind.EndOfFileToken)\n            return -1;\n        while (scanner.scan() !== common.ts.SyntaxKind.EndOfFileToken) {\n        }\n        const pos = scanner.getStartPos();\n        return text[pos - 1] === \",\" ? -1 : pos;\n    }\n    finally {\n        scanner.setText(undefined);\n    }\n}\n\nfunction getEndIndexFromArray(array) {\n    var _a;\n    return (_a = array === null || array === void 0 ? void 0 : array.length) !== null && _a !== void 0 ? _a : 0;\n}\n\nfunction getNextMatchingPos(text, pos, condition) {\n    while (pos < text.length) {\n        const charCode = text.charCodeAt(pos);\n        if (!condition(charCode))\n            pos++;\n        else\n            break;\n    }\n    return pos;\n}\n\nfunction getPreviousMatchingPos(text, pos, condition) {\n    while (pos > 0) {\n        const charCode = text.charCodeAt(pos - 1);\n        if (!condition(charCode))\n            pos--;\n        else\n            break;\n    }\n    return pos;\n}\n\nfunction getNextNonWhitespacePos(text, pos) {\n    return getNextMatchingPos(text, pos, isNotWhitespace);\n}\nfunction getPreviousNonWhitespacePos(text, pos) {\n    return getPreviousMatchingPos(text, pos, isNotWhitespace);\n}\nfunction isNotWhitespace(charCode) {\n    return !common.StringUtils.isWhitespaceCharCode(charCode);\n}\n\nfunction getPosAtEndOfPreviousLine(fullText, pos) {\n    while (pos > 0) {\n        pos--;\n        if (fullText[pos] === \"\\n\") {\n            if (fullText[pos - 1] === \"\\r\")\n                return pos - 1;\n            return pos;\n        }\n    }\n    return pos;\n}\n\nfunction getPosAtNextNonBlankLine(text, pos) {\n    let newPos = pos;\n    for (let i = pos; i < text.length; i++) {\n        if (text[i] === \" \" || text[i] === \"\\t\")\n            continue;\n        if (text[i] === \"\\r\" && text[i + 1] === \"\\n\" || text[i] === \"\\n\") {\n            newPos = i + 1;\n            if (text[i] === \"\\r\") {\n                i++;\n                newPos++;\n            }\n            continue;\n        }\n        return newPos;\n    }\n    return newPos;\n}\n\nfunction getPosAtStartOfLineOrNonWhitespace(fullText, pos) {\n    while (pos > 0) {\n        pos--;\n        const currentChar = fullText[pos];\n        if (currentChar === \"\\n\")\n            return pos + 1;\n        else if (currentChar !== \" \" && currentChar !== \"\\t\")\n            return pos + 1;\n    }\n    return pos;\n}\n\nfunction getInsertPosFromIndex(index, syntaxList, children) {\n    if (index === 0) {\n        const parent = syntaxList.getParentOrThrow();\n        if (Node.isSourceFile(parent))\n            return 0;\n        else if (Node.isCaseClause(parent) || Node.isDefaultClause(parent)) {\n            const colonToken = parent.getFirstChildByKindOrThrow(common.SyntaxKind.ColonToken);\n            return colonToken.getEnd();\n        }\n        const isInline = syntaxList !== parent.getChildSyntaxList();\n        if (isInline)\n            return syntaxList.getStart();\n        const parentContainer = getParentContainerOrThrow(parent);\n        const openBraceToken = parentContainer.getFirstChildByKindOrThrow(common.SyntaxKind.OpenBraceToken);\n        return openBraceToken.getEnd();\n    }\n    else {\n        return children[index - 1].getEnd();\n    }\n}\nfunction getEndPosFromIndex(index, parent, children, fullText) {\n    let endPos;\n    if (index === children.length) {\n        if (Node.isSourceFile(parent))\n            endPos = parent.getEnd();\n        else if (Node.isCaseClause(parent) || Node.isDefaultClause(parent))\n            endPos = parent.getEnd();\n        else {\n            const parentContainer = getParentContainerOrThrow(parent);\n            const closeBraceToken = parentContainer.getLastChildByKind(common.SyntaxKind.CloseBraceToken);\n            if (closeBraceToken == null)\n                endPos = parent.getEnd();\n            else\n                endPos = closeBraceToken.getStart();\n        }\n    }\n    else {\n        endPos = children[index].getNonWhitespaceStart();\n    }\n    return getPosAtStartOfLineOrNonWhitespace(fullText, endPos);\n}\nfunction getParentContainerOrThrow(parent) {\n    if (Node.isModuleDeclaration(parent)) {\n        const innerBody = parent._getInnerBody();\n        if (innerBody == null)\n            throw new common.errors.InvalidOperationError(\"This operation requires the module to have a body.\");\n        return innerBody;\n    }\n    else if (Node.isBodied(parent))\n        return parent.getBody();\n    else if (Node.isBodyable(parent))\n        return parent.getBodyOrThrow();\n    else\n        return parent;\n}\n\nfunction fromAbstractableNode(node) {\n    return {\n        isAbstract: node.isAbstract(),\n    };\n}\nfunction fromAmbientableNode(node) {\n    return {\n        hasDeclareKeyword: node.hasDeclareKeyword(),\n    };\n}\nfunction fromExportableNode(node) {\n    return {\n        isDefaultExport: node.hasDefaultKeyword(),\n        isExported: node.hasExportKeyword(),\n    };\n}\nfunction fromStaticableNode(node) {\n    return {\n        isStatic: node.isStatic(),\n    };\n}\nfunction fromScopedNode(node) {\n    return {\n        scope: node.hasScopeKeyword() ? node.getScope() : undefined,\n    };\n}\nfunction fromOverrideableNode(node) {\n    return {\n        hasOverrideKeyword: node.hasOverrideKeyword(),\n    };\n}\nfunction fromQuestionTokenableNode(node) {\n    return {\n        hasQuestionToken: node.hasQuestionToken(),\n    };\n}\n\nfunction getNodesToReturn(oldChildren, newChildren, index, allowCommentNodes) {\n    const oldChildCount = typeof oldChildren === \"number\" ? oldChildren : oldChildren.length;\n    const newLength = newChildren.length - oldChildCount;\n    const result = [];\n    for (let i = 0; i < newLength; i++) {\n        const currentChild = newChildren[index + i];\n        if (allowCommentNodes || !Node.isCommentNode(currentChild))\n            result.push(currentChild);\n    }\n    return result;\n}\n\nfunction getRangeWithoutCommentsFromArray(array, index, length, expectedKind) {\n    const children = [];\n    while (index < array.length && children.length < length) {\n        const child = array[index];\n        const childKind = child.getKind();\n        if (childKind !== common.SyntaxKind.SingleLineCommentTrivia && childKind !== common.SyntaxKind.MultiLineCommentTrivia) {\n            if (childKind !== expectedKind) {\n                throw new common.errors.NotImplementedError(`Unexpected! Inserting syntax kind of ${common.getSyntaxKindName(expectedKind)}`\n                    + `, but ${child.getKindName()} was inserted.`);\n            }\n            children.push(child);\n        }\n        index++;\n    }\n    if (children.length !== length)\n        throw new common.errors.NotImplementedError(`Unexpected! Inserted ${length} child/children, but ${children.length} were inserted.`);\n    return children;\n}\n\nfunction fromConstructorDeclarationOverload(node) {\n    const structure = {};\n    common.ObjectUtils.assign(structure, fromScopedNode(node));\n    return structure;\n}\nfunction fromFunctionDeclarationOverload(node) {\n    const structure = {};\n    common.ObjectUtils.assign(structure, fromAmbientableNode(node));\n    common.ObjectUtils.assign(structure, fromExportableNode(node));\n    return structure;\n}\nfunction fromMethodDeclarationOverload(node) {\n    const structure = {};\n    common.ObjectUtils.assign(structure, fromStaticableNode(node));\n    common.ObjectUtils.assign(structure, fromAbstractableNode(node));\n    common.ObjectUtils.assign(structure, fromScopedNode(node));\n    common.ObjectUtils.assign(structure, fromQuestionTokenableNode(node));\n    common.ObjectUtils.assign(structure, fromOverrideableNode(node));\n    return structure;\n}\n\nfunction verifyAndGetIndex(index, length) {\n    const newIndex = index < 0 ? length + index : index;\n    if (newIndex < 0)\n        throw new common.errors.InvalidOperationError(`Invalid index: The max negative index is ${length * -1}, but ${index} was specified.`);\n    if (index > length)\n        throw new common.errors.InvalidOperationError(`Invalid index: The max index is ${length}, but ${index} was specified.`);\n    return newIndex;\n}\n\nexports.CommentNodeKind = void 0;\n(function (CommentNodeKind) {\n    CommentNodeKind[CommentNodeKind[\"Statement\"] = 0] = \"Statement\";\n    CommentNodeKind[CommentNodeKind[\"ClassElement\"] = 1] = \"ClassElement\";\n    CommentNodeKind[CommentNodeKind[\"TypeElement\"] = 2] = \"TypeElement\";\n    CommentNodeKind[CommentNodeKind[\"ObjectLiteralElement\"] = 3] = \"ObjectLiteralElement\";\n    CommentNodeKind[CommentNodeKind[\"EnumMember\"] = 4] = \"EnumMember\";\n})(exports.CommentNodeKind || (exports.CommentNodeKind = {}));\nclass CompilerCommentNode {\n    constructor(fullStart, pos, end, kind, sourceFile, parent) {\n        this._fullStart = fullStart;\n        this._start = pos;\n        this._sourceFile = sourceFile;\n        this.pos = pos;\n        this.end = end;\n        this.kind = kind;\n        this.flags = common.ts.NodeFlags.None;\n        this.parent = parent;\n    }\n    getSourceFile() {\n        return this._sourceFile;\n    }\n    getChildCount(sourceFile) {\n        return 0;\n    }\n    getChildAt(index, sourceFile) {\n        return undefined;\n    }\n    getChildren(sourceFile) {\n        return [];\n    }\n    getStart(sourceFile, includeJsDocComment) {\n        return this._start;\n    }\n    getFullStart() {\n        return this._fullStart;\n    }\n    getEnd() {\n        return this.end;\n    }\n    getWidth(sourceFile) {\n        return this.end - this._start;\n    }\n    getFullWidth() {\n        return this.end - this._fullStart;\n    }\n    getLeadingTriviaWidth(sourceFile) {\n        return this._start - this._fullStart;\n    }\n    getFullText(sourceFile) {\n        return this._sourceFile.text.substring(this._fullStart, this.end);\n    }\n    getText(sourceFile) {\n        return this._sourceFile.text.substring(this._start, this.end);\n    }\n    getFirstToken(sourceFile) {\n        return undefined;\n    }\n    getLastToken(sourceFile) {\n        return undefined;\n    }\n    forEachChild(cbNode, cbNodeArray) {\n        return undefined;\n    }\n}\nclass CompilerCommentStatement extends CompilerCommentNode {\n    constructor() {\n        super(...arguments);\n        this._commentKind = exports.CommentNodeKind.Statement;\n    }\n}\nclass CompilerCommentClassElement extends CompilerCommentNode {\n    constructor() {\n        super(...arguments);\n        this._commentKind = exports.CommentNodeKind.ClassElement;\n    }\n}\nclass CompilerCommentTypeElement extends CompilerCommentNode {\n    constructor() {\n        super(...arguments);\n        this._commentKind = exports.CommentNodeKind.TypeElement;\n    }\n}\nclass CompilerCommentObjectLiteralElement extends CompilerCommentNode {\n    constructor() {\n        super(...arguments);\n        this._commentKind = exports.CommentNodeKind.ObjectLiteralElement;\n    }\n}\nclass CompilerCommentEnumMember extends CompilerCommentNode {\n    constructor() {\n        super(...arguments);\n        this._commentKind = exports.CommentNodeKind.EnumMember;\n    }\n}\n\nvar CommentKind;\n(function (CommentKind) {\n    CommentKind[CommentKind[\"SingleLine\"] = 0] = \"SingleLine\";\n    CommentKind[CommentKind[\"MultiLine\"] = 1] = \"MultiLine\";\n    CommentKind[CommentKind[\"JsDoc\"] = 2] = \"JsDoc\";\n})(CommentKind || (CommentKind = {}));\nconst childrenSaver = new WeakMap();\nconst commentNodeParserKinds = new Set([\n    common.SyntaxKind.SourceFile,\n    common.SyntaxKind.Block,\n    common.SyntaxKind.ModuleBlock,\n    common.SyntaxKind.CaseClause,\n    common.SyntaxKind.DefaultClause,\n    common.SyntaxKind.ClassDeclaration,\n    common.SyntaxKind.InterfaceDeclaration,\n    common.SyntaxKind.EnumDeclaration,\n    common.SyntaxKind.ClassExpression,\n    common.SyntaxKind.TypeLiteral,\n    common.SyntaxKind.ObjectLiteralExpression,\n]);\nclass CommentNodeParser {\n    constructor() {\n    }\n    static getOrParseChildren(container, sourceFile) {\n        if (isSyntaxList(container))\n            container = container.parent;\n        let children = childrenSaver.get(container);\n        if (children == null) {\n            children = Array.from(getNodes(container, sourceFile));\n            childrenSaver.set(container, children);\n        }\n        return children;\n    }\n    static shouldParseChildren(container) {\n        return commentNodeParserKinds.has(container.kind)\n            && container.pos !== container.end;\n    }\n    static hasParsedChildren(container) {\n        if (isSyntaxList(container))\n            container = container.parent;\n        return childrenSaver.has(container);\n    }\n    static isCommentStatement(node) {\n        return node._commentKind === exports.CommentNodeKind.Statement;\n    }\n    static isCommentClassElement(node) {\n        return node._commentKind === exports.CommentNodeKind.ClassElement;\n    }\n    static isCommentTypeElement(node) {\n        return node._commentKind === exports.CommentNodeKind.TypeElement;\n    }\n    static isCommentObjectLiteralElement(node) {\n        return node._commentKind === exports.CommentNodeKind.ObjectLiteralElement;\n    }\n    static isCommentEnumMember(node) {\n        return node._commentKind === exports.CommentNodeKind.EnumMember;\n    }\n    static getContainerBodyPos(container, sourceFile) {\n        if (common.ts.isSourceFile(container))\n            return 0;\n        if (common.ts.isClassDeclaration(container)\n            || common.ts.isEnumDeclaration(container)\n            || common.ts.isInterfaceDeclaration(container)\n            || common.ts.isTypeLiteralNode(container)\n            || common.ts.isClassExpression(container)\n            || common.ts.isBlock(container)\n            || common.ts.isModuleBlock(container)\n            || common.ts.isObjectLiteralExpression(container)) {\n            return getTokenEnd(container, common.SyntaxKind.OpenBraceToken);\n        }\n        if (common.ts.isCaseClause(container) || common.ts.isDefaultClause(container))\n            return getTokenEnd(container, common.SyntaxKind.ColonToken);\n        return common.errors.throwNotImplementedForNeverValueError(container);\n        function getTokenEnd(node, kind) {\n            var _a;\n            return (_a = node.getChildren(sourceFile).find(c => c.kind === kind)) === null || _a === void 0 ? void 0 : _a.end;\n        }\n    }\n}\nfunction* getNodes(container, sourceFile) {\n    const sourceFileText = sourceFile.text;\n    const childNodes = getContainerChildren();\n    const createComment = getCreationFunction();\n    if (childNodes.length === 0) {\n        const bodyStartPos = CommentNodeParser.getContainerBodyPos(container, sourceFile);\n        if (bodyStartPos != null)\n            yield* getCommentNodes(bodyStartPos, false);\n    }\n    else {\n        for (const childNode of childNodes) {\n            yield* getCommentNodes(childNode.pos, true);\n            yield childNode;\n        }\n        const lastChild = childNodes[childNodes.length - 1];\n        yield* getCommentNodes(lastChild.end, false);\n    }\n    function* getCommentNodes(pos, stopAtJsDoc) {\n        const fullStart = pos;\n        skipTrailingLine();\n        const leadingComments = Array.from(getLeadingComments());\n        const maxEnd = sourceFileText.length === pos || sourceFileText[pos] === \"}\" ? pos : common.StringUtils.getLineStartFromPos(sourceFileText, pos);\n        for (const leadingComment of leadingComments) {\n            if (leadingComment.end <= maxEnd)\n                yield leadingComment;\n        }\n        function skipTrailingLine() {\n            if (pos === 0)\n                return;\n            let lineEnd = common.StringUtils.getLineEndFromPos(sourceFileText, pos);\n            while (pos < lineEnd) {\n                const commentKind = getCommentKind();\n                if (commentKind != null) {\n                    const comment = parseForComment(commentKind);\n                    if (comment.kind === common.SyntaxKind.SingleLineCommentTrivia)\n                        return;\n                    else\n                        lineEnd = common.StringUtils.getLineEndFromPos(sourceFileText, pos);\n                }\n                else if (!common.StringUtils.isWhitespace(sourceFileText[pos]) && sourceFileText[pos] !== \",\")\n                    return;\n                else\n                    pos++;\n            }\n            while (common.StringUtils.startsWithNewLine(sourceFileText[pos]))\n                pos++;\n        }\n        function* getLeadingComments() {\n            while (pos < sourceFileText.length) {\n                const commentKind = getCommentKind();\n                if (commentKind != null) {\n                    const isJsDoc = commentKind === CommentKind.JsDoc;\n                    if (isJsDoc && stopAtJsDoc)\n                        return;\n                    else\n                        yield parseForComment(commentKind);\n                    skipTrailingLine();\n                }\n                else if (!common.StringUtils.isWhitespace(sourceFileText[pos]))\n                    return;\n                else\n                    pos++;\n            }\n        }\n        function parseForComment(commentKind) {\n            if (commentKind === CommentKind.SingleLine)\n                return parseSingleLineComment();\n            const isJsDoc = commentKind === CommentKind.JsDoc;\n            return parseMultiLineComment(isJsDoc);\n        }\n        function getCommentKind() {\n            const currentChar = sourceFileText[pos];\n            if (currentChar !== \"/\")\n                return undefined;\n            const nextChar = sourceFileText[pos + 1];\n            if (nextChar === \"/\")\n                return CommentKind.SingleLine;\n            if (nextChar !== \"*\")\n                return undefined;\n            const nextNextChar = sourceFileText[pos + 2];\n            return nextNextChar === \"*\" ? CommentKind.JsDoc : CommentKind.MultiLine;\n        }\n        function parseSingleLineComment() {\n            const start = pos;\n            skipSingleLineComment();\n            const end = pos;\n            return createComment(fullStart, start, end, common.SyntaxKind.SingleLineCommentTrivia);\n        }\n        function skipSingleLineComment() {\n            pos += 2;\n            while (pos < sourceFileText.length && sourceFileText[pos] !== \"\\n\" && sourceFileText[pos] !== \"\\r\")\n                pos++;\n        }\n        function parseMultiLineComment(isJsDoc) {\n            const start = pos;\n            skipSlashStarComment(isJsDoc);\n            const end = pos;\n            return createComment(fullStart, start, end, common.SyntaxKind.MultiLineCommentTrivia);\n        }\n        function skipSlashStarComment(isJsDoc) {\n            pos += isJsDoc ? 3 : 2;\n            while (pos < sourceFileText.length) {\n                if (sourceFileText[pos] === \"*\" && sourceFileText[pos + 1] === \"/\") {\n                    pos += 2;\n                    break;\n                }\n                pos++;\n            }\n        }\n    }\n    function getContainerChildren() {\n        if (common.ts.isSourceFile(container) || common.ts.isBlock(container) || common.ts.isModuleBlock(container) || common.ts.isCaseClause(container) || common.ts.isDefaultClause(container))\n            return container.statements;\n        if (common.ts.isClassDeclaration(container)\n            || common.ts.isClassExpression(container)\n            || common.ts.isEnumDeclaration(container)\n            || common.ts.isInterfaceDeclaration(container)\n            || common.ts.isTypeLiteralNode(container)\n            || common.ts.isClassExpression(container)) {\n            return container.members;\n        }\n        if (common.ts.isObjectLiteralExpression(container))\n            return container.properties;\n        return common.errors.throwNotImplementedForNeverValueError(container);\n    }\n    function getCreationFunction() {\n        const ctor = getCtor();\n        return (fullStart, pos, end, kind) => new ctor(fullStart, pos, end, kind, sourceFile, container);\n        function getCtor() {\n            if (isStatementContainerNode(container))\n                return CompilerCommentStatement;\n            if (common.ts.isClassLike(container))\n                return CompilerCommentClassElement;\n            if (common.ts.isInterfaceDeclaration(container) || common.ts.isTypeLiteralNode(container))\n                return CompilerCommentTypeElement;\n            if (common.ts.isObjectLiteralExpression(container))\n                return CompilerCommentObjectLiteralElement;\n            if (common.ts.isEnumDeclaration(container))\n                return CompilerCommentEnumMember;\n            throw new common.errors.NotImplementedError(`Not implemented comment node container type: ${common.getSyntaxKindName(container.kind)}`);\n        }\n    }\n}\nfunction isSyntaxList(node) {\n    return node.kind === common.SyntaxKind.SyntaxList;\n}\nfunction isStatementContainerNode(node) {\n    return getStatementContainerNode() != null;\n    function getStatementContainerNode() {\n        const container = node;\n        if (common.ts.isSourceFile(container)\n            || common.ts.isBlock(container)\n            || common.ts.isModuleBlock(container)\n            || common.ts.isCaseClause(container)\n            || common.ts.isDefaultClause(container)) {\n            return container;\n        }\n        return undefined;\n    }\n}\n\nfunction hasParsedTokens(node) {\n    return node._children != null;\n}\n\nconst forEachChildSaver = new WeakMap();\nconst getChildrenSaver = new WeakMap();\nclass ExtendedParser {\n    static getContainerArray(container, sourceFile) {\n        return CommentNodeParser.getOrParseChildren(container, sourceFile);\n    }\n    static getCompilerChildrenFast(node, sourceFile) {\n        if (hasParsedTokens(node))\n            return ExtendedParser.getCompilerChildren(node, sourceFile);\n        return ExtendedParser.getCompilerForEachChildren(node, sourceFile);\n    }\n    static getCompilerForEachChildren(node, sourceFile) {\n        if (CommentNodeParser.shouldParseChildren(node)) {\n            let result = forEachChildSaver.get(node);\n            if (result == null) {\n                result = getForEachChildren();\n                mergeInComments(result, CommentNodeParser.getOrParseChildren(node, sourceFile));\n                forEachChildSaver.set(node, result);\n            }\n            return result;\n        }\n        return getForEachChildren();\n        function getForEachChildren() {\n            const children = [];\n            node.forEachChild(child => {\n                children.push(child);\n            });\n            return children;\n        }\n    }\n    static getCompilerChildren(node, sourceFile) {\n        if (isStatementMemberOrPropertyHoldingSyntaxList()) {\n            let result = getChildrenSaver.get(node);\n            if (result == null) {\n                result = [...node.getChildren(sourceFile)];\n                mergeInComments(result, CommentNodeParser.getOrParseChildren(node, sourceFile));\n                getChildrenSaver.set(node, result);\n            }\n            return result;\n        }\n        return node.getChildren(sourceFile);\n        function isStatementMemberOrPropertyHoldingSyntaxList() {\n            if (node.kind !== common.ts.SyntaxKind.SyntaxList)\n                return false;\n            const parent = node.parent;\n            if (!CommentNodeParser.shouldParseChildren(parent))\n                return false;\n            return CommentNodeParser.getContainerBodyPos(parent, sourceFile) === node.pos;\n        }\n    }\n}\nfunction mergeInComments(nodes, otherNodes) {\n    let currentIndex = 0;\n    for (const child of otherNodes) {\n        if (child.kind !== common.SyntaxKind.SingleLineCommentTrivia && child.kind !== common.SyntaxKind.MultiLineCommentTrivia)\n            continue;\n        while (currentIndex < nodes.length && nodes[currentIndex].end < child.end)\n            currentIndex++;\n        nodes.splice(currentIndex, 0, child);\n        currentIndex++;\n    }\n}\n\nfunction isComment(node) {\n    return node.kind === common.ts.SyntaxKind.SingleLineCommentTrivia\n        || node.kind === common.ts.SyntaxKind.MultiLineCommentTrivia;\n}\n\nclass NodeHandlerHelper {\n    constructor(compilerFactory) {\n        this.compilerFactory = compilerFactory;\n    }\n    handleForValues(handler, currentNode, newNode, newSourceFile) {\n        if (this.compilerFactory.hasCompilerNode(currentNode))\n            handler.handleNode(this.compilerFactory.getExistingNodeFromCompilerNode(currentNode), newNode, newSourceFile);\n        else if (currentNode.kind === common.SyntaxKind.SyntaxList) {\n            const sourceFile = this.compilerFactory.getExistingNodeFromCompilerNode(currentNode.getSourceFile());\n            handler.handleNode(this.compilerFactory.getNodeFromCompilerNode(currentNode, sourceFile), newNode, newSourceFile);\n        }\n    }\n    forgetNodeIfNecessary(currentNode) {\n        if (this.compilerFactory.hasCompilerNode(currentNode))\n            this.compilerFactory.getExistingNodeFromCompilerNode(currentNode).forget();\n    }\n    getCompilerChildrenAsIterators(currentNode, newNode, newSourceFile) {\n        const children = this.getCompilerChildren(currentNode, newNode, newSourceFile);\n        return [\n            new AdvancedIterator(common.ArrayUtils.toIterator(children[0])),\n            new AdvancedIterator(common.ArrayUtils.toIterator(children[1])),\n        ];\n    }\n    getCompilerChildren(currentNode, newNode, newSourceFile) {\n        const currentCompilerNode = currentNode.compilerNode;\n        const currentSourceFile = currentNode._sourceFile.compilerNode;\n        return [\n            ExtendedParser.getCompilerChildren(currentCompilerNode, currentSourceFile),\n            ExtendedParser.getCompilerChildren(newNode, newSourceFile),\n        ];\n    }\n    getChildrenFast(currentNode, newNode, newSourceFile) {\n        const currentCompilerNode = currentNode.compilerNode;\n        const currentSourceFile = currentNode._sourceFile.compilerNode;\n        if (hasParsedTokens(currentCompilerNode)) {\n            return [\n                ExtendedParser.getCompilerChildren(currentCompilerNode, currentSourceFile),\n                ExtendedParser.getCompilerChildren(newNode, newSourceFile),\n            ];\n        }\n        return [\n            ExtendedParser.getCompilerForEachChildren(currentCompilerNode, currentSourceFile),\n            ExtendedParser.getCompilerForEachChildren(newNode, newSourceFile),\n        ];\n    }\n}\n\nclass StraightReplacementNodeHandler {\n    constructor(compilerFactory) {\n        this.compilerFactory = compilerFactory;\n        this.helper = new NodeHandlerHelper(compilerFactory);\n    }\n    handleNode(currentNode, newNode, newSourceFile) {\n        if (currentNode.getKind() !== newNode.kind) {\n            const kinds = [currentNode.getKind(), newNode.kind];\n            if (kinds.includes(common.ts.SyntaxKind.Identifier) && kinds.includes(common.ts.SyntaxKind.PrivateIdentifier)) {\n                currentNode.forget();\n                return;\n            }\n            throw new common.errors.InvalidOperationError(`Error replacing tree! Perhaps a syntax error was inserted `\n                + `(Current: ${currentNode.getKindName()} -- New: ${common.getSyntaxKindName(newNode.kind)}).`);\n        }\n        if (currentNode._hasWrappedChildren())\n            this.handleChildren(currentNode, newNode, newSourceFile);\n        this.compilerFactory.replaceCompilerNode(currentNode, newNode);\n    }\n    handleChildren(currentNode, newNode, newSourceFile) {\n        const [currentChildren, newChildren] = this.helper.getChildrenFast(currentNode, newNode, newSourceFile);\n        if (currentChildren.length !== newChildren.length) {\n            throw new Error(`Error replacing tree: The children of the old and new trees were expected to have the `\n                + `same count (${currentChildren.length}:${newChildren.length}).`);\n        }\n        for (let i = 0; i < currentChildren.length; i++)\n            this.helper.handleForValues(this, currentChildren[i], newChildren[i], newSourceFile);\n    }\n}\n\nclass ChangeChildOrderParentHandler {\n    constructor(compilerFactory, opts) {\n        this.compilerFactory = compilerFactory;\n        this.straightReplacementNodeHandler = new StraightReplacementNodeHandler(compilerFactory);\n        this.helper = new NodeHandlerHelper(compilerFactory);\n        this.oldIndex = opts.oldIndex;\n        this.newIndex = opts.newIndex;\n    }\n    handleNode(currentNode, newNode, newSourceFile) {\n        const [currentChildren, newChildren] = this.helper.getCompilerChildren(currentNode, newNode, newSourceFile);\n        const currentChildrenInNewOrder = this.getChildrenInNewOrder(currentChildren);\n        common.errors.throwIfNotEqual(newChildren.length, currentChildrenInNewOrder.length, \"New children length should match the old children length.\");\n        for (let i = 0; i < newChildren.length; i++)\n            this.helper.handleForValues(this.straightReplacementNodeHandler, currentChildrenInNewOrder[i], newChildren[i], newSourceFile);\n        this.compilerFactory.replaceCompilerNode(currentNode, newNode);\n    }\n    getChildrenInNewOrder(children) {\n        const result = [...children];\n        const movingNode = result.splice(this.oldIndex, 1)[0];\n        result.splice(this.newIndex, 0, movingNode);\n        return result;\n    }\n}\n\nclass DefaultParentHandler {\n    constructor(compilerFactory, opts) {\n        var _a;\n        this.compilerFactory = compilerFactory;\n        this.straightReplacementNodeHandler = new StraightReplacementNodeHandler(compilerFactory);\n        this.helper = new NodeHandlerHelper(compilerFactory);\n        this.childCount = opts.childCount;\n        this.isFirstChild = opts.isFirstChild;\n        this.replacingNodes = (_a = opts.replacingNodes) === null || _a === void 0 ? void 0 : _a.map(n => n.compilerNode);\n        this.customMappings = opts.customMappings;\n    }\n    handleNode(currentNode, newNode, newSourceFile) {\n        const [currentChildren, newChildren] = this.helper.getCompilerChildrenAsIterators(currentNode, newNode, newSourceFile);\n        let count = this.childCount;\n        this.handleCustomMappings(newNode);\n        while (!currentChildren.done && !newChildren.done && !this.isFirstChild(currentChildren.peek, newChildren.peek))\n            this.helper.handleForValues(this.straightReplacementNodeHandler, currentChildren.next(), newChildren.next(), newSourceFile);\n        while (!currentChildren.done && this.tryReplaceNode(currentChildren.peek))\n            currentChildren.next();\n        if (count > 0) {\n            while (count > 0) {\n                newChildren.next();\n                count--;\n            }\n        }\n        else if (count < 0) {\n            while (count < 0) {\n                this.helper.forgetNodeIfNecessary(currentChildren.next());\n                count++;\n            }\n        }\n        while (!currentChildren.done)\n            this.helper.handleForValues(this.straightReplacementNodeHandler, currentChildren.next(), newChildren.next(), newSourceFile);\n        if (!newChildren.done)\n            throw new Error(\"Error replacing tree: Should not have children left over.\");\n        this.compilerFactory.replaceCompilerNode(currentNode, newNode);\n    }\n    handleCustomMappings(newParentNode) {\n        if (this.customMappings == null)\n            return;\n        const customMappings = this.customMappings(newParentNode);\n        for (const mapping of customMappings)\n            this.compilerFactory.replaceCompilerNode(mapping.currentNode, mapping.newNode);\n    }\n    tryReplaceNode(currentCompilerNode) {\n        if (this.replacingNodes == null || this.replacingNodes.length === 0)\n            return false;\n        const index = this.replacingNodes.indexOf(currentCompilerNode);\n        if (index === -1)\n            return false;\n        this.replacingNodes.splice(index, 1);\n        this.helper.forgetNodeIfNecessary(currentCompilerNode);\n        return true;\n    }\n}\n\nclass ForgetChangedNodeHandler {\n    constructor(compilerFactory) {\n        this.compilerFactory = compilerFactory;\n        this.helper = new NodeHandlerHelper(compilerFactory);\n    }\n    handleNode(currentNode, newNode, newSourceFile) {\n        if (currentNode.getKind() !== newNode.kind) {\n            currentNode.forget();\n            return;\n        }\n        if (currentNode._hasWrappedChildren())\n            this.handleChildren(currentNode, newNode, newSourceFile);\n        this.compilerFactory.replaceCompilerNode(currentNode, newNode);\n    }\n    handleChildren(currentNode, newNode, newSourceFile) {\n        const [currentNodeChildren, newNodeChildrenArray] = this.helper.getChildrenFast(currentNode, newNode, newSourceFile);\n        const newNodeChildren = common.ArrayUtils.toIterator(newNodeChildrenArray);\n        for (const currentNodeChild of currentNodeChildren) {\n            const nextNodeChildResult = newNodeChildren.next();\n            if (nextNodeChildResult.done) {\n                const existingNode = this.compilerFactory.getExistingNodeFromCompilerNode(currentNodeChild);\n                if (existingNode != null)\n                    existingNode.forget();\n            }\n            else {\n                this.helper.handleForValues(this, currentNodeChild, nextNodeChildResult.value, newSourceFile);\n            }\n        }\n    }\n}\n\nclass ParentFinderReplacementNodeHandler extends StraightReplacementNodeHandler {\n    constructor(compilerFactory, parentNodeHandler, changingParent) {\n        super(compilerFactory);\n        this.parentNodeHandler = parentNodeHandler;\n        this.changingParent = changingParent;\n        this.foundParent = false;\n        this.changingParentParent = this.changingParent.getParentSyntaxList() || this.changingParent.getParent();\n        this.parentsAtSamePos = this.changingParentParent != null && this.changingParentParent.getPos() === this.changingParent.getPos();\n    }\n    handleNode(currentNode, newNode, newSourceFile) {\n        if (!this.foundParent && this.isParentNode(newNode, newSourceFile)) {\n            this.foundParent = true;\n            this.parentNodeHandler.handleNode(currentNode, newNode, newSourceFile);\n        }\n        else {\n            super.handleNode(currentNode, newNode, newSourceFile);\n        }\n    }\n    isParentNode(newNode, newSourceFile) {\n        const positionsAndKindsEqual = areNodesEqual(newNode, this.changingParent)\n            && areNodesEqual(getParentSyntaxList(newNode, newSourceFile) || newNode.parent, this.changingParentParent);\n        if (!positionsAndKindsEqual)\n            return false;\n        if (!this.parentsAtSamePos)\n            return true;\n        return getAncestorLength(this.changingParent.compilerNode) === getAncestorLength(newNode);\n        function getAncestorLength(nodeToCheck) {\n            let node = nodeToCheck;\n            let count = 0;\n            while (node.parent != null) {\n                count++;\n                node = node.parent;\n            }\n            return count;\n        }\n    }\n}\nfunction areNodesEqual(a, b) {\n    if (a == null && b == null)\n        return true;\n    if (a == null || b == null)\n        return false;\n    if (a.pos === b.getPos() && a.kind === b.getKind())\n        return true;\n    return false;\n}\n\nclass RangeHandler {\n    constructor(compilerFactory, opts) {\n        this.compilerFactory = compilerFactory;\n        this.straightReplacementNodeHandler = new StraightReplacementNodeHandler(compilerFactory);\n        this.helper = new NodeHandlerHelper(compilerFactory);\n        this.start = opts.start;\n        this.end = opts.end;\n    }\n    handleNode(currentNode, newNode, newSourceFile) {\n        const currentSourceFile = currentNode._sourceFile.compilerNode;\n        const children = this.helper.getChildrenFast(currentNode, newNode, newSourceFile);\n        const currentNodeChildren = new AdvancedIterator(common.ArrayUtils.toIterator(children[0]));\n        const newNodeChildren = new AdvancedIterator(common.ArrayUtils.toIterator(children[1]));\n        while (!currentNodeChildren.done && !newNodeChildren.done && newNodeChildren.peek.getEnd() <= this.start)\n            this.straightReplace(currentNodeChildren.next(), newNodeChildren.next(), newSourceFile);\n        while (!currentNodeChildren.done && !newNodeChildren.done\n            && (currentNodeChildren.peek.getStart(currentSourceFile) < this.start\n                || currentNodeChildren.peek.getStart(currentSourceFile) === this.start && newNodeChildren.peek.end > this.end)) {\n            this.rangeHandlerReplace(currentNodeChildren.next(), newNodeChildren.next(), newSourceFile);\n        }\n        while (!newNodeChildren.done && newNodeChildren.peek.getEnd() <= this.end)\n            newNodeChildren.next();\n        while (!currentNodeChildren.done)\n            this.straightReplace(currentNodeChildren.next(), newNodeChildren.next(), newSourceFile);\n        if (!newNodeChildren.done)\n            throw new Error(\"Error replacing tree: Should not have children left over.\");\n        this.compilerFactory.replaceCompilerNode(currentNode, newNode);\n    }\n    straightReplace(currentNode, nextNode, newSourceFile) {\n        this.helper.handleForValues(this.straightReplacementNodeHandler, currentNode, nextNode, newSourceFile);\n    }\n    rangeHandlerReplace(currentNode, nextNode, newSourceFile) {\n        this.helper.handleForValues(this, currentNode, nextNode, newSourceFile);\n    }\n}\n\nclass RangeParentHandler {\n    constructor(compilerFactory, opts) {\n        var _a;\n        this.compilerFactory = compilerFactory;\n        this.straightReplacementNodeHandler = new StraightReplacementNodeHandler(compilerFactory);\n        this.helper = new NodeHandlerHelper(compilerFactory);\n        this.start = opts.start;\n        this.end = opts.end;\n        this.replacingLength = opts.replacingLength;\n        this.replacingNodes = (_a = opts.replacingNodes) === null || _a === void 0 ? void 0 : _a.map(n => n.compilerNode);\n        this.customMappings = opts.customMappings;\n    }\n    handleNode(currentNode, newNode, newSourceFile) {\n        const currentSourceFile = currentNode._sourceFile.compilerNode;\n        const [currentNodeChildren, newNodeChildren] = this.helper.getCompilerChildrenAsIterators(currentNode, newNode, newSourceFile);\n        this.handleCustomMappings(newNode, newSourceFile);\n        while (!currentNodeChildren.done && !newNodeChildren.done && newNodeChildren.peek.getStart(newSourceFile) < this.start)\n            this.straightReplace(currentNodeChildren.next(), newNodeChildren.next(), newSourceFile);\n        const newNodes = [];\n        while (!newNodeChildren.done && newNodeChildren.peek.getStart(newSourceFile) >= this.start\n            && getRealEnd(newNodeChildren.peek, newSourceFile) <= this.end) {\n            newNodes.push(newNodeChildren.next());\n        }\n        if (this.replacingLength != null) {\n            const replacingEnd = this.start + this.replacingLength;\n            const oldNodes = [];\n            while (!currentNodeChildren.done\n                && (getRealEnd(currentNodeChildren.peek, currentSourceFile) <= replacingEnd\n                    || currentNodeChildren.peek.getStart(currentSourceFile) < replacingEnd)) {\n                oldNodes.push(currentNodeChildren.next());\n            }\n            if (oldNodes.length === newNodes.length && oldNodes.every((node, i) => node.kind === newNodes[i].kind)) {\n                for (let i = 0; i < oldNodes.length; i++) {\n                    const node = this.compilerFactory.getExistingNodeFromCompilerNode(oldNodes[i]);\n                    if (node != null) {\n                        node.forgetDescendants();\n                        this.compilerFactory.replaceCompilerNode(oldNodes[i], newNodes[i]);\n                    }\n                }\n            }\n            else {\n                oldNodes.forEach(node => this.helper.forgetNodeIfNecessary(node));\n            }\n        }\n        while (!currentNodeChildren.done)\n            this.straightReplace(currentNodeChildren.next(), newNodeChildren.next(), newSourceFile);\n        if (!newNodeChildren.done)\n            throw new Error(\"Error replacing tree: Should not have children left over.\");\n        this.compilerFactory.replaceCompilerNode(currentNode, newNode);\n    }\n    handleCustomMappings(newParentNode, newSourceFile) {\n        if (this.customMappings == null)\n            return;\n        const customMappings = this.customMappings(newParentNode, newSourceFile);\n        for (const mapping of customMappings)\n            mapping.currentNode._context.compilerFactory.replaceCompilerNode(mapping.currentNode, mapping.newNode);\n    }\n    straightReplace(currentNode, nextNode, newSourceFile) {\n        if (!this.tryReplaceNode(currentNode))\n            this.helper.handleForValues(this.straightReplacementNodeHandler, currentNode, nextNode, newSourceFile);\n    }\n    tryReplaceNode(currentCompilerNode) {\n        if (this.replacingNodes == null || this.replacingNodes.length === 0)\n            return false;\n        const index = this.replacingNodes.indexOf(currentCompilerNode);\n        if (index === -1)\n            return false;\n        this.replacingNodes.splice(index, 1);\n        this.helper.forgetNodeIfNecessary(currentCompilerNode);\n        return true;\n    }\n}\nfunction getRealEnd(node, sourceFile) {\n    if (node.kind >= common.ts.SyntaxKind.FirstJSDocNode && node.kind <= common.ts.SyntaxKind.LastJSDocNode) {\n        return getPreviousMatchingPos(sourceFile.text, node.end, charCode => charCode !== CharCodes.ASTERISK && !common.StringUtils.isWhitespaceCharCode(charCode));\n    }\n    return node.end;\n}\n\nclass RenameNodeHandler extends StraightReplacementNodeHandler {\n    handleNode(currentNode, newNode, newSourceFile) {\n        const currentNodeKind = currentNode.getKind();\n        const newNodeKind = newNode.kind;\n        if (currentNodeKind === common.SyntaxKind.ShorthandPropertyAssignment && newNodeKind === common.SyntaxKind.PropertyAssignment) {\n            const currentSourceFile = currentNode.getSourceFile();\n            const currentIdentifier = currentNode.getNameNode();\n            const newIdentifier = newNode.initializer;\n            this.compilerFactory.replaceCompilerNode(currentIdentifier, newIdentifier);\n            currentNode.forget();\n            this.compilerFactory.getNodeFromCompilerNode(newNode, currentSourceFile);\n            return;\n        }\n        else if (currentNodeKind === common.SyntaxKind.ExportSpecifier && newNodeKind === common.SyntaxKind.ExportSpecifier\n            && currentNode.compilerNode.propertyName == null && newNode.propertyName != null) {\n            handleImportOrExportSpecifier(this.compilerFactory);\n            return;\n        }\n        else if (currentNodeKind === common.SyntaxKind.ImportSpecifier && newNodeKind === common.SyntaxKind.ImportSpecifier\n            && currentNode.compilerNode.propertyName == null && newNode.propertyName != null) {\n            handleImportOrExportSpecifier(this.compilerFactory);\n            return;\n        }\n        super.handleNode(currentNode, newNode, newSourceFile);\n        return;\n        function handleImportOrExportSpecifier(compilerFactory) {\n            const currentIdentifier = currentNode.getNameNode();\n            const newSpecifier = newNode;\n            const newPropertyName = newSpecifier.propertyName;\n            const newName = newSpecifier.name;\n            const newIdentifier = newPropertyName.escapedText === currentIdentifier.compilerNode.escapedText ? newName : newPropertyName;\n            compilerFactory.replaceCompilerNode(currentIdentifier, newIdentifier);\n            compilerFactory.replaceCompilerNode(currentNode, newNode);\n        }\n    }\n}\n\nclass TryOrForgetNodeHandler {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    handleNode(currentNode, newNode, newSourceFile) {\n        if (!Node.isSourceFile(currentNode))\n            throw new common.errors.InvalidOperationError(`Can only use a TryOrForgetNodeHandler with a source file.`);\n        try {\n            this.handler.handleNode(currentNode, newNode, newSourceFile);\n        }\n        catch (ex) {\n            currentNode._context.logger.warn(\"Could not replace tree, so forgetting all nodes instead. Message: \" + ex);\n            currentNode.getChildSyntaxListOrThrow().forget();\n            currentNode._context.compilerFactory.replaceCompilerNode(currentNode, newNode);\n        }\n    }\n}\n\nclass UnwrapParentHandler {\n    constructor(compilerFactory, childIndex) {\n        this.compilerFactory = compilerFactory;\n        this.childIndex = childIndex;\n        this.straightReplacementNodeHandler = new StraightReplacementNodeHandler(compilerFactory);\n        this.helper = new NodeHandlerHelper(compilerFactory);\n    }\n    handleNode(currentNode, newNode, newSourceFile) {\n        const [currentChildren, newChildren] = this.helper.getCompilerChildrenAsIterators(currentNode, newNode, newSourceFile);\n        let index = 0;\n        while (!currentChildren.done && !newChildren.done && index++ < this.childIndex)\n            this.helper.handleForValues(this.straightReplacementNodeHandler, currentChildren.next(), newChildren.next(), newSourceFile);\n        const currentChild = this.compilerFactory.getExistingNodeFromCompilerNode(currentChildren.next());\n        const childSyntaxList = currentChild.getChildSyntaxListOrThrow();\n        for (const child of ExtendedParser.getCompilerChildren(childSyntaxList.compilerNode, childSyntaxList._sourceFile.compilerNode))\n            this.helper.handleForValues(this.straightReplacementNodeHandler, child, newChildren.next(), newSourceFile);\n        forgetNodes(currentChild);\n        function forgetNodes(node) {\n            if (node === childSyntaxList) {\n                node._forgetOnlyThis();\n                return;\n            }\n            for (const child of node._getChildrenInCacheIterator())\n                forgetNodes(child);\n            node._forgetOnlyThis();\n        }\n        while (!currentChildren.done)\n            this.helper.handleForValues(this.straightReplacementNodeHandler, currentChildren.next(), newChildren.next(), newSourceFile);\n        if (!newChildren.done)\n            throw new Error(\"Error replacing tree: Should not have children left over.\");\n        this.compilerFactory.replaceCompilerNode(currentNode, newNode);\n    }\n}\n\nclass NodeHandlerFactory {\n    getDefault(opts) {\n        const { parent: changingParent, isFirstChild, childCount, customMappings } = opts;\n        const sourceFile = changingParent.getSourceFile();\n        const compilerFactory = sourceFile._context.compilerFactory;\n        const replacingNodes = opts.replacingNodes == null ? undefined : [...opts.replacingNodes];\n        const parentHandler = new DefaultParentHandler(compilerFactory, { childCount, isFirstChild, replacingNodes, customMappings });\n        if (changingParent === sourceFile)\n            return parentHandler;\n        else\n            return new ParentFinderReplacementNodeHandler(compilerFactory, parentHandler, changingParent);\n    }\n    getForParentRange(opts) {\n        const { parent: changingParent, start, end, replacingLength, replacingNodes, customMappings } = opts;\n        const sourceFile = changingParent.getSourceFile();\n        const compilerFactory = sourceFile._context.compilerFactory;\n        const parentHandler = new RangeParentHandler(compilerFactory, { start, end, replacingLength, replacingNodes, customMappings });\n        if (changingParent === sourceFile)\n            return parentHandler;\n        else\n            return new ParentFinderReplacementNodeHandler(compilerFactory, parentHandler, changingParent);\n    }\n    getForRange(opts) {\n        const { sourceFile, start, end } = opts;\n        const compilerFactory = sourceFile._context.compilerFactory;\n        return new RangeHandler(compilerFactory, { start, end });\n    }\n    getForChildIndex(opts) {\n        const { parent, childIndex, childCount, replacingNodes, customMappings } = opts;\n        const parentChildren = parent.getChildren();\n        common.errors.throwIfOutOfRange(childIndex, [0, parentChildren.length], \"opts.childIndex\");\n        if (childCount < 0)\n            common.errors.throwIfOutOfRange(childCount, [childIndex - parentChildren.length, 0], \"opts.childCount\");\n        let i = 0;\n        const isFirstChild = () => i++ === childIndex;\n        return this.getDefault({\n            parent,\n            isFirstChild,\n            childCount,\n            replacingNodes,\n            customMappings,\n        });\n    }\n    getForStraightReplacement(compilerFactory) {\n        return new StraightReplacementNodeHandler(compilerFactory);\n    }\n    getForForgetChanged(compilerFactory) {\n        return new ForgetChangedNodeHandler(compilerFactory);\n    }\n    getForRename(compilerFactory) {\n        return new RenameNodeHandler(compilerFactory);\n    }\n    getForTryOrForget(handler) {\n        return new TryOrForgetNodeHandler(handler);\n    }\n    getForChangingChildOrder(opts) {\n        const { parent: changingParent, oldIndex, newIndex } = opts;\n        const sourceFile = changingParent.getSourceFile();\n        const compilerFactory = sourceFile._context.compilerFactory;\n        const changeChildOrderParentHandler = new ChangeChildOrderParentHandler(compilerFactory, { oldIndex, newIndex });\n        if (changingParent === sourceFile)\n            return changeChildOrderParentHandler;\n        else\n            return new ParentFinderReplacementNodeHandler(compilerFactory, changeChildOrderParentHandler, changingParent);\n    }\n    getForUnwrappingNode(unwrappingNode) {\n        const changingParent = unwrappingNode.getParentSyntaxList() || unwrappingNode.getParentOrThrow();\n        const childIndex = unwrappingNode.getChildIndex();\n        const sourceFile = changingParent.getSourceFile();\n        const compilerFactory = sourceFile._context.compilerFactory;\n        const unwrapParentHandler = new UnwrapParentHandler(compilerFactory, childIndex);\n        if (changingParent === sourceFile)\n            return unwrapParentHandler;\n        else\n            return new ParentFinderReplacementNodeHandler(compilerFactory, unwrapParentHandler, changingParent);\n    }\n}\n\nfunction getSpacingBetweenNodes(opts) {\n    const { parent, previousSibling, nextSibling, newLineKind, getSiblingFormatting } = opts;\n    if (previousSibling == null || nextSibling == null)\n        return \"\";\n    const previousSiblingFormatting = getSiblingFormatting(parent, previousSibling);\n    const nextSiblingFormatting = getSiblingFormatting(parent, nextSibling);\n    if (previousSiblingFormatting === FormattingKind.Blankline || nextSiblingFormatting === FormattingKind.Blankline)\n        return newLineKind + newLineKind;\n    else if (previousSiblingFormatting === FormattingKind.Newline || nextSiblingFormatting === FormattingKind.Newline)\n        return newLineKind;\n    else if (previousSiblingFormatting === FormattingKind.Space || nextSiblingFormatting === FormattingKind.Space)\n        return \" \";\n    else\n        return \"\";\n}\n\nclass ChangingChildOrderTextManipulator {\n    constructor(opts) {\n        this.opts = opts;\n    }\n    getNewText(inputText) {\n        const { parent, oldIndex, newIndex, getSiblingFormatting } = this.opts;\n        const children = parent.getChildren();\n        const newLineKind = parent._context.manipulationSettings.getNewLineKindAsString();\n        const movingNode = children[oldIndex];\n        const fullText = parent._sourceFile.getFullText();\n        const movingNodeStart = getPosAtNextNonBlankLine(fullText, movingNode.getPos());\n        const movingNodeText = fullText.substring(movingNodeStart, movingNode.getEnd());\n        const lowerIndex = Math.min(newIndex, oldIndex);\n        const upperIndex = Math.max(newIndex, oldIndex);\n        const childrenInNewOrder = getChildrenInNewOrder();\n        const isParentSourceFile = Node.isSourceFile(parent.getParentOrThrow());\n        let finalText = \"\";\n        fillPrefixText();\n        fillTextForIndex(lowerIndex);\n        fillMiddleText();\n        fillTextForIndex(upperIndex);\n        fillSuffixText();\n        return finalText;\n        function getChildrenInNewOrder() {\n            const result = [...children];\n            result.splice(oldIndex, 1);\n            result.splice(newIndex, 0, movingNode);\n            return result;\n        }\n        function fillPrefixText() {\n            finalText += fullText.substring(0, children[lowerIndex].getPos());\n            if (lowerIndex === 0 && !isParentSourceFile)\n                finalText += newLineKind;\n        }\n        function fillMiddleText() {\n            let startPos;\n            let endPos;\n            if (lowerIndex === oldIndex) {\n                startPos = getPosAtNextNonBlankLine(fullText, children[lowerIndex].getEnd());\n                endPos = children[upperIndex].getEnd();\n            }\n            else {\n                startPos = getPosAtNextNonBlankLine(fullText, children[lowerIndex].getPos());\n                endPos = children[upperIndex].getPos();\n            }\n            finalText += fullText.substring(startPos, endPos);\n        }\n        function fillSuffixText() {\n            if (children.length - 1 === upperIndex && !isParentSourceFile)\n                finalText += newLineKind;\n            finalText += fullText.substring(getPosAtNextNonBlankLine(fullText, children[upperIndex].getEnd()));\n        }\n        function fillTextForIndex(index) {\n            if (index === oldIndex)\n                fillSpacingForRemoval();\n            else {\n                fillSpacingBeforeInsertion();\n                finalText += movingNodeText;\n                fillSpacingAfterInsertion();\n            }\n        }\n        function fillSpacingForRemoval() {\n            if (oldIndex === 0 || oldIndex === children.length - 1)\n                return;\n            fillSpacingCommon({\n                previousSibling: childrenInNewOrder[oldIndex - 1],\n                nextSibling: childrenInNewOrder[oldIndex],\n            });\n        }\n        function fillSpacingBeforeInsertion() {\n            if (newIndex === 0)\n                return;\n            fillSpacingCommon({\n                previousSibling: childrenInNewOrder[newIndex - 1],\n                nextSibling: childrenInNewOrder[newIndex],\n            });\n        }\n        function fillSpacingAfterInsertion() {\n            fillSpacingCommon({\n                previousSibling: childrenInNewOrder[newIndex],\n                nextSibling: childrenInNewOrder[newIndex + 1],\n            });\n        }\n        function fillSpacingCommon(spacingOpts) {\n            const spacing = getSpacingBetweenNodes({\n                parent,\n                getSiblingFormatting,\n                newLineKind,\n                previousSibling: spacingOpts.previousSibling,\n                nextSibling: spacingOpts.nextSibling,\n            });\n            const twoNewLines = newLineKind + newLineKind;\n            if (spacing === twoNewLines) {\n                if (finalText.endsWith(twoNewLines))\n                    return;\n                else if (finalText.endsWith(newLineKind))\n                    finalText += newLineKind;\n                else\n                    finalText += twoNewLines;\n            }\n            else if (spacing === newLineKind) {\n                if (finalText.endsWith(newLineKind))\n                    return;\n                else\n                    finalText += newLineKind;\n            }\n            else if (spacing === \" \") {\n                if (finalText.endsWith(\" \"))\n                    return;\n                else\n                    finalText += \" \";\n            }\n            else {\n                finalText += spacing;\n            }\n        }\n    }\n    getTextForError(newText) {\n        return newText;\n    }\n}\n\nclass FullReplacementTextManipulator {\n    constructor(newText) {\n        this.newText = newText;\n    }\n    getNewText(inputText) {\n        return this.newText;\n    }\n    getTextForError(newText) {\n        return newText;\n    }\n}\n\nfunction getTextForError(newText, pos, length = 0) {\n    const startPos = Math.max(0, newText.lastIndexOf(\"\\n\", pos) - 100);\n    let endPos = Math.min(newText.length, newText.indexOf(\"\\n\", pos + length));\n    endPos = endPos === -1 ? newText.length : Math.min(newText.length, endPos + 100);\n    let text = \"\";\n    text += newText.substring(startPos, endPos);\n    if (startPos !== 0)\n        text = \"...\" + text;\n    if (endPos !== newText.length)\n        text += \"...\";\n    return text;\n}\n\nclass InsertionTextManipulator {\n    constructor(opts) {\n        this.opts = opts;\n    }\n    getNewText(inputText) {\n        const { insertPos, newText, replacingLength = 0 } = this.opts;\n        return inputText.substring(0, insertPos) + newText + inputText.substring(insertPos + replacingLength);\n    }\n    getTextForError(newText) {\n        return getTextForError(newText, this.opts.insertPos, this.opts.newText.length);\n    }\n}\n\nclass RemoveChildrenTextManipulator {\n    constructor(opts) {\n        this.opts = opts;\n    }\n    getNewText(inputText) {\n        const opts = this.opts;\n        const { children, removePrecedingSpaces = false, removeFollowingSpaces = false, removePrecedingNewLines = false, removeFollowingNewLines = false, replaceTrivia = \"\", } = opts;\n        const sourceFile = children[0].getSourceFile();\n        const fullText = sourceFile.getFullText();\n        const removalPos = getRemovalPos();\n        this.removalPos = removalPos;\n        return getPrefix() + replaceTrivia + getSuffix();\n        function getPrefix() {\n            return fullText.substring(0, removalPos);\n        }\n        function getSuffix() {\n            return fullText.substring(getRemovalEnd());\n        }\n        function getRemovalPos() {\n            if (opts.customRemovalPos != null)\n                return opts.customRemovalPos;\n            const pos = children[0].getNonWhitespaceStart();\n            if (removePrecedingSpaces || removePrecedingNewLines)\n                return getPreviousMatchingPos(fullText, pos, getCharRemovalFunction(removePrecedingSpaces, removePrecedingNewLines));\n            return pos;\n        }\n        function getRemovalEnd() {\n            if (opts.customRemovalEnd != null)\n                return opts.customRemovalEnd;\n            const end = children[children.length - 1].getEnd();\n            if (removeFollowingSpaces || removeFollowingNewLines)\n                return getNextMatchingPos(fullText, end, getCharRemovalFunction(removeFollowingSpaces, removeFollowingNewLines));\n            return end;\n        }\n        function getCharRemovalFunction(removeSpaces, removeNewLines) {\n            return (char) => {\n                if (removeNewLines && (char === CharCodes.CARRIAGE_RETURN || char === CharCodes.NEWLINE))\n                    return false;\n                if (removeSpaces && !charNotSpaceOrTab(char))\n                    return false;\n                return true;\n            };\n        }\n        function charNotSpaceOrTab(charCode) {\n            return charCode !== CharCodes.SPACE && charCode !== CharCodes.TAB;\n        }\n    }\n    getTextForError(newText) {\n        return getTextForError(newText, this.removalPos);\n    }\n}\n\nfunction isNewLineAtPos(fullText, pos) {\n    return fullText[pos] === \"\\n\" || (fullText[pos] === \"\\r\" && fullText[pos + 1] === \"\\n\");\n}\nfunction hasNewLineInRange(fullText, range) {\n    for (let i = range[0]; i < range[1]; i++) {\n        if (fullText[i] === \"\\n\")\n            return true;\n    }\n    return false;\n}\n\nclass RemoveChildrenWithFormattingTextManipulator {\n    constructor(opts) {\n        this.opts = opts;\n    }\n    getNewText(inputText) {\n        const { children, getSiblingFormatting } = this.opts;\n        const firstChild = children[0];\n        const lastChild = children[children.length - 1];\n        const parent = firstChild.getParentOrThrow();\n        const sourceFile = parent.getSourceFile();\n        const fullText = sourceFile.getFullText();\n        const newLineKind = sourceFile._context.manipulationSettings.getNewLineKindAsString();\n        const previousSibling = firstChild.getPreviousSibling();\n        const nextSibling = lastChild.getNextSibling();\n        const removalPos = getRemovalPos();\n        this.removalPos = removalPos;\n        return getPrefix() + getSpacing() + getSuffix();\n        function getPrefix() {\n            return fullText.substring(0, removalPos);\n        }\n        function getSpacing() {\n            return getSpacingBetweenNodes({\n                parent,\n                previousSibling,\n                nextSibling,\n                newLineKind,\n                getSiblingFormatting,\n            });\n        }\n        function getSuffix() {\n            return fullText.substring(getRemovalEnd());\n        }\n        function getRemovalPos() {\n            if (previousSibling != null) {\n                const trailingEnd = previousSibling.getTrailingTriviaEnd();\n                return isNewLineAtPos(fullText, trailingEnd) ? trailingEnd : previousSibling.getEnd();\n            }\n            const firstPos = getPreviousNonWhitespacePos(fullText, firstChild.getPos());\n            if (parent.getPos() === firstPos)\n                return firstChild.getNonWhitespaceStart();\n            return firstChild.isFirstNodeOnLine() ? firstPos : firstChild.getNonWhitespaceStart();\n        }\n        function getRemovalEnd() {\n            const triviaEnd = lastChild.getTrailingTriviaEnd();\n            if (previousSibling != null && nextSibling != null) {\n                const nextSiblingFormatting = getSiblingFormatting(parent, nextSibling);\n                if (nextSiblingFormatting === FormattingKind.Blankline || nextSiblingFormatting === FormattingKind.Newline)\n                    return getPosAtStartOfLineOrNonWhitespace(fullText, nextSibling.getNonWhitespaceStart());\n                return nextSibling.getNonWhitespaceStart();\n            }\n            if (parent.getEnd() === lastChild.getEnd())\n                return lastChild.getEnd();\n            if (isNewLineAtPos(fullText, triviaEnd)) {\n                if (previousSibling == null && firstChild.getPos() === 0)\n                    return getPosAtNextNonBlankLine(fullText, triviaEnd);\n                return getPosAtEndOfPreviousLine(fullText, getPosAtNextNonBlankLine(fullText, triviaEnd));\n            }\n            if (previousSibling == null)\n                return triviaEnd;\n            else\n                return lastChild.getEnd();\n        }\n    }\n    getTextForError(newText) {\n        return getTextForError(newText, this.removalPos);\n    }\n}\n\nclass RenameLocationTextManipulator {\n    constructor(renameLocations, newName) {\n        this.renameLocations = renameLocations;\n        this.newName = newName;\n    }\n    getNewText(inputText) {\n        const renameLocations = [...this.renameLocations].sort((a, b) => b.getTextSpan().getStart() - a.getTextSpan().getStart());\n        let currentPos = inputText.length;\n        let result = \"\";\n        for (let i = 0; i < renameLocations.length; i++) {\n            const renameLocation = renameLocations[i];\n            const textSpan = renameLocation.getTextSpan();\n            result = (renameLocation.getPrefixText() || \"\")\n                + this.newName\n                + (renameLocation.getSuffixText() || \"\")\n                + inputText.substring(textSpan.getEnd(), currentPos)\n                + result;\n            currentPos = textSpan.getStart();\n        }\n        return inputText.substring(0, currentPos) + result;\n    }\n    getTextForError(newText) {\n        if (this.renameLocations.length === 0)\n            return newText;\n        return \"...\" + newText.substring(this.renameLocations[0].getTextSpan().getStart());\n    }\n}\n\nclass UnchangedTextManipulator {\n    getNewText(inputText) {\n        return inputText;\n    }\n    getTextForError(newText) {\n        return newText;\n    }\n}\n\nclass UnwrapTextManipulator extends InsertionTextManipulator {\n    constructor(node) {\n        super({\n            insertPos: node.getStart(true),\n            newText: getReplacementText(node),\n            replacingLength: node.getWidth(true),\n        });\n    }\n}\nfunction getReplacementText(node) {\n    const sourceFile = node._sourceFile;\n    const range = getInnerBraceRange();\n    const startPos = range[0];\n    const text = sourceFile.getFullText().substring(range[0], range[1]);\n    return common.StringUtils.indent(text, -1, {\n        indentText: sourceFile._context.manipulationSettings.getIndentationText(),\n        indentSizeInSpaces: sourceFile._context.manipulationSettings._getIndentSizeInSpaces(),\n        isInStringAtPos: pos => sourceFile.isInStringAtPos(startPos + pos),\n    }).trim();\n    function getInnerBraceRange() {\n        const bodyNode = getBodyNodeOrThrow();\n        return [bodyNode.getStart() + 1, bodyNode.getEnd() - 1];\n        function getBodyNodeOrThrow() {\n            if (Node.isModuleDeclaration(node)) {\n                const bodyNode = node._getInnerBody();\n                if (bodyNode == null)\n                    throw new common.errors.InvalidOperationError(\"This operation requires the module to have a body.\");\n                return bodyNode;\n            }\n            else if (Node.isBodied(node))\n                return node.getBody();\n            else if (Node.isBodyable(node))\n                return node.getBodyOrThrow();\n            else\n                throw new common.errors.NotImplementedError(`Not implemented unwrap scenario for ${node.getKindName()}.`);\n        }\n    }\n}\n\nclass ManipulationError extends common.errors.InvalidOperationError {\n    constructor(filePath, oldText, newText, errorMessage) {\n        super(errorMessage);\n        this.filePath = filePath;\n        this.oldText = oldText;\n        this.newText = newText;\n    }\n}\n\nfunction doManipulation(sourceFile, textManipulator, nodeHandler, newFilePath) {\n    sourceFile._firePreModified();\n    const oldFileText = sourceFile.getFullText();\n    const newFileText = textManipulator.getNewText(oldFileText);\n    try {\n        const replacementSourceFile = sourceFile._context.compilerFactory.createCompilerSourceFileFromText(newFilePath || sourceFile.getFilePath(), newFileText, sourceFile.getScriptKind());\n        nodeHandler.handleNode(sourceFile, replacementSourceFile, replacementSourceFile);\n    }\n    catch (err) {\n        const diagnostics = getSyntacticDiagnostics(sourceFile, newFileText);\n        const errorDetails = err.message + \"\\n\\n\"\n            + `-- Details --\\n`\n            + \"Path: \" + sourceFile.getFilePath() + \"\\n\"\n            + \"Text: \" + JSON.stringify(textManipulator.getTextForError(newFileText)) + \"\\n\"\n            + \"Stack: \" + err.stack;\n        if (diagnostics.length > 0) {\n            throwError(\"Manipulation error: \" + \"A syntax error was inserted.\" + \"\\n\\n\"\n                + sourceFile._context.project.formatDiagnosticsWithColorAndContext(diagnostics, { newLineChar: \"\\n\" })\n                + \"\\n\" + errorDetails);\n        }\n        throwError(\"Manipulation error: \" + errorDetails);\n        function throwError(message) {\n            throw new ManipulationError(sourceFile.getFilePath(), oldFileText, newFileText, message);\n        }\n    }\n}\nfunction getSyntacticDiagnostics(sourceFile, newText) {\n    try {\n        const projectOptions = { useInMemoryFileSystem: true };\n        const project = new sourceFile._context.project.constructor(projectOptions);\n        const newFile = project.createSourceFile(sourceFile.getFilePath(), newText);\n        return project.getProgram().getSyntacticDiagnostics(newFile);\n    }\n    catch (err) {\n        return [];\n    }\n}\n\nfunction insertIntoParentTextRange(opts) {\n    var _a, _b, _c;\n    const { insertPos, newText, parent } = opts;\n    doManipulation(parent._sourceFile, new InsertionTextManipulator({\n        insertPos,\n        newText,\n        replacingLength: (_a = opts.replacing) === null || _a === void 0 ? void 0 : _a.textLength,\n    }), new NodeHandlerFactory().getForParentRange({\n        parent,\n        start: insertPos,\n        end: insertPos + newText.length,\n        replacingLength: (_b = opts.replacing) === null || _b === void 0 ? void 0 : _b.textLength,\n        replacingNodes: (_c = opts.replacing) === null || _c === void 0 ? void 0 : _c.nodes,\n        customMappings: opts.customMappings,\n    }));\n}\nfunction insertIntoTextRange(opts) {\n    const { insertPos, newText, sourceFile } = opts;\n    doManipulation(sourceFile, new InsertionTextManipulator({\n        insertPos,\n        newText,\n    }), new NodeHandlerFactory().getForRange({\n        sourceFile,\n        start: insertPos,\n        end: insertPos + newText.length,\n    }));\n}\nfunction insertIntoCommaSeparatedNodes(opts) {\n    const { currentNodes, insertIndex, parent } = opts;\n    const previousNode = currentNodes[insertIndex - 1];\n    const previousNonCommentNode = getPreviousNonCommentNode();\n    const nextNode = currentNodes[insertIndex];\n    const nextNonCommentNode = getNextNonCommentNode();\n    const separator = opts.useNewLines ? parent._context.manipulationSettings.getNewLineKindAsString() : \" \";\n    const parentNextSibling = parent.getNextSibling();\n    const isContained = parentNextSibling != null && (parentNextSibling.getKind() === common.SyntaxKind.CloseBraceToken || parentNextSibling.getKind() === common.SyntaxKind.CloseBracketToken);\n    let { newText } = opts;\n    if (previousNode != null) {\n        prependCommaAndSeparator();\n        if (nextNonCommentNode != null || opts.useTrailingCommas)\n            appendCommaAndSeparator();\n        else if (opts.useNewLines || opts.surroundWithSpaces)\n            appendSeparator();\n        else\n            appendIndentation();\n        const nextEndStart = nextNode == null ? (isContained ? parentNextSibling.getStart(true) : parent.getEnd()) : nextNode.getStart(true);\n        const insertPos = (previousNonCommentNode || previousNode).getEnd();\n        insertIntoParentTextRange({\n            insertPos,\n            newText,\n            parent,\n            replacing: { textLength: nextEndStart - insertPos },\n        });\n    }\n    else if (nextNode != null) {\n        if (opts.useNewLines || opts.surroundWithSpaces)\n            prependSeparator();\n        if (nextNonCommentNode != null || opts.useTrailingCommas)\n            appendCommaAndSeparator();\n        else\n            appendSeparator();\n        const insertPos = isContained ? parent.getPos() : parent.getStart(true);\n        insertIntoParentTextRange({\n            insertPos,\n            newText,\n            parent,\n            replacing: { textLength: nextNode.getStart(true) - insertPos },\n        });\n    }\n    else {\n        if (opts.useNewLines || opts.surroundWithSpaces) {\n            prependSeparator();\n            if (opts.useTrailingCommas)\n                appendCommaAndSeparator();\n            else\n                appendSeparator();\n        }\n        else {\n            appendIndentation();\n        }\n        insertIntoParentTextRange({\n            insertPos: parent.getPos(),\n            newText,\n            parent,\n            replacing: { textLength: parent.getNextSiblingOrThrow().getStart() - parent.getPos() },\n        });\n    }\n    function prependCommaAndSeparator() {\n        if (previousNonCommentNode == null) {\n            prependSeparator();\n            return;\n        }\n        const originalSourceFileText = parent.getSourceFile().getFullText();\n        const previousNodeNextSibling = previousNonCommentNode.getNextSibling();\n        let text = \"\";\n        if (previousNodeNextSibling != null && previousNodeNextSibling.getKind() === common.SyntaxKind.CommaToken) {\n            appendNodeTrailingCommentRanges(previousNonCommentNode);\n            text += \",\";\n            if (previousNonCommentNode === previousNode)\n                appendNodeTrailingCommentRanges(previousNodeNextSibling);\n            else\n                appendCommentNodeTexts();\n        }\n        else {\n            text += \",\";\n            if (previousNonCommentNode === previousNode)\n                appendNodeTrailingCommentRanges(previousNonCommentNode);\n            else\n                appendCommentNodeTexts();\n        }\n        prependSeparator();\n        newText = text + newText;\n        function appendCommentNodeTexts() {\n            const lastCommentRangeEnd = getLastCommentRangeEnd(previousNode) || previousNode.getEnd();\n            text += originalSourceFileText.substring(previousNonCommentNode.getEnd(), lastCommentRangeEnd);\n        }\n        function appendNodeTrailingCommentRanges(node) {\n            const lastCommentRangeEnd = getLastCommentRangeEnd(node);\n            if (lastCommentRangeEnd == null)\n                return;\n            text += originalSourceFileText.substring(node.getEnd(), lastCommentRangeEnd);\n        }\n        function getLastCommentRangeEnd(node) {\n            const commentRanges = node.getTrailingCommentRanges();\n            const lastCommentRange = commentRanges[commentRanges.length - 1];\n            return lastCommentRange === null || lastCommentRange === void 0 ? void 0 : lastCommentRange.getEnd();\n        }\n    }\n    function getPreviousNonCommentNode() {\n        for (let i = insertIndex - 1; i >= 0; i--) {\n            if (!Node.isCommentNode(currentNodes[i]))\n                return currentNodes[i];\n        }\n        return undefined;\n    }\n    function getNextNonCommentNode() {\n        for (let i = insertIndex; i < currentNodes.length; i++) {\n            if (!Node.isCommentNode(currentNodes[i]))\n                return currentNodes[i];\n        }\n        return undefined;\n    }\n    function prependSeparator() {\n        if (!common.StringUtils.startsWithNewLine(newText))\n            newText = separator + newText;\n    }\n    function appendCommaAndSeparator() {\n        newText = appendCommaToText(newText);\n        appendSeparator();\n    }\n    function appendSeparator() {\n        if (!common.StringUtils.endsWithNewLine(newText))\n            newText += separator;\n        appendIndentation();\n    }\n    function appendIndentation() {\n        if (opts.useNewLines || common.StringUtils.endsWithNewLine(newText)) {\n            if (nextNode != null)\n                newText += parent.getParentOrThrow().getChildIndentationText();\n            else\n                newText += parent.getParentOrThrow().getIndentationText();\n        }\n    }\n}\nfunction insertIntoBracesOrSourceFile(opts) {\n    const { parent, index, children } = opts;\n    const fullText = parent._sourceFile.getFullText();\n    const childSyntaxList = parent.getChildSyntaxListOrThrow();\n    const insertPos = getInsertPosFromIndex(index, childSyntaxList, children);\n    const endPos = getEndPosFromIndex(index, parent, children, fullText);\n    const replacingLength = endPos - insertPos;\n    const newText = getNewText();\n    doManipulation(parent._sourceFile, new InsertionTextManipulator({ insertPos, replacingLength, newText }), new NodeHandlerFactory().getForParentRange({\n        parent: childSyntaxList,\n        start: insertPos,\n        end: insertPos + newText.length,\n        replacingLength,\n    }));\n    function getNewText() {\n        const writer = parent._getWriterWithChildIndentation();\n        opts.write(writer, {\n            previousMember: getChild(children[index - 1]),\n            nextMember: getChild(children[index]),\n            isStartOfFile: insertPos === 0,\n        });\n        return writer.toString();\n        function getChild(child) {\n            if (child == null)\n                return child;\n            else if (Node.isOverloadable(child))\n                return child.getImplementation() || child;\n            else\n                return child;\n        }\n    }\n}\nfunction insertIntoBracesOrSourceFileWithGetChildren(opts) {\n    if (opts.structures.length === 0)\n        return [];\n    const startChildren = opts.getIndexedChildren();\n    const parentSyntaxList = opts.parent.getChildSyntaxListOrThrow();\n    const index = verifyAndGetIndex(opts.index, startChildren.length);\n    const previousJsDocCount = getPreviousJsDocCount();\n    insertIntoBracesOrSourceFile({\n        parent: opts.parent,\n        index: getChildIndex(),\n        children: parentSyntaxList.getChildren(),\n        write: opts.write,\n    });\n    return getRangeWithoutCommentsFromArray(opts.getIndexedChildren(), opts.index - previousJsDocCount, opts.structures.length, opts.expectedKind);\n    function getChildIndex() {\n        if (index === 0)\n            return 0;\n        return startChildren[index - 1].getChildIndex() + 1;\n    }\n    function getPreviousJsDocCount() {\n        let commentCount = 0;\n        let count = 0;\n        for (let i = index - 1; i >= 0; i--) {\n            const node = startChildren[i];\n            if (Node.isCommentNode(node)) {\n                commentCount++;\n                if (node.getText().startsWith(\"/**\"))\n                    count = commentCount;\n            }\n            else {\n                break;\n            }\n        }\n        return count;\n    }\n}\nfunction insertIntoBracesOrSourceFileWithGetChildrenWithComments(opts) {\n    const startChildren = opts.getIndexedChildren();\n    const parentSyntaxList = opts.parent.getChildSyntaxListOrThrow();\n    const index = verifyAndGetIndex(opts.index, startChildren.length);\n    insertIntoBracesOrSourceFile({\n        parent: opts.parent,\n        index: getChildIndex(),\n        children: parentSyntaxList.getChildren(),\n        write: opts.write,\n    });\n    return getNodesToReturn(startChildren, opts.getIndexedChildren(), index, true);\n    function getChildIndex() {\n        if (index === 0)\n            return 0;\n        return startChildren[index - 1].getChildIndex() + 1;\n    }\n}\n\nfunction changeChildOrder(opts) {\n    const { parent } = opts;\n    doManipulation(parent._sourceFile, new ChangingChildOrderTextManipulator(opts), new NodeHandlerFactory().getForChangingChildOrder(opts));\n}\n\nfunction removeChildren(opts) {\n    const { children } = opts;\n    if (children.length === 0)\n        return;\n    doManipulation(children[0].getSourceFile(), new RemoveChildrenTextManipulator(opts), new NodeHandlerFactory().getForChildIndex({\n        parent: children[0].getParentSyntaxList() || children[0].getParentOrThrow(),\n        childIndex: children[0].getChildIndex(),\n        childCount: -1 * children.length,\n    }));\n}\nfunction removeChildrenWithFormattingFromCollapsibleSyntaxList(opts) {\n    const { children } = opts;\n    if (children.length === 0)\n        return;\n    const syntaxList = children[0].getParentSyntaxListOrThrow();\n    if (syntaxList.getChildCount() === children.length) {\n        removeChildrenWithFormatting({\n            children: [syntaxList],\n            getSiblingFormatting: () => FormattingKind.None,\n        });\n    }\n    else {\n        removeChildrenWithFormatting(opts);\n    }\n}\nfunction removeChildrenWithFormatting(opts) {\n    const { children, getSiblingFormatting } = opts;\n    if (children.length === 0)\n        return;\n    doManipulation(children[0]._sourceFile, new RemoveChildrenWithFormattingTextManipulator({\n        children,\n        getSiblingFormatting,\n    }), new NodeHandlerFactory().getForChildIndex({\n        parent: children[0].getParentSyntaxList() || children[0].getParentOrThrow(),\n        childIndex: children[0].getChildIndex(),\n        childCount: -1 * children.length,\n    }));\n}\nfunction removeClassMember(classMember) {\n    if (Node.isOverloadable(classMember)) {\n        if (classMember.isImplementation())\n            removeClassMembers([...classMember.getOverloads(), classMember]);\n        else {\n            const parent = classMember.getParentOrThrow();\n            if (Node.isAmbientable(parent) && parent.isAmbient())\n                removeClassMembers([classMember]);\n            else\n                removeChildren({ children: [classMember], removeFollowingSpaces: true, removeFollowingNewLines: true });\n        }\n    }\n    else {\n        removeClassMembers([classMember]);\n    }\n}\nfunction removeClassMembers(classMembers) {\n    removeChildrenWithFormatting({\n        getSiblingFormatting: getClassMemberFormatting,\n        children: classMembers,\n    });\n}\nfunction removeInterfaceMember(interfaceMember) {\n    removeInterfaceMembers([interfaceMember]);\n}\nfunction removeInterfaceMembers(interfaceMembers) {\n    removeChildrenWithFormatting({\n        getSiblingFormatting: getInterfaceMemberFormatting,\n        children: interfaceMembers,\n    });\n}\nfunction removeCommaSeparatedChild(child) {\n    const childrenToRemove = [child];\n    const syntaxList = child.getParentSyntaxListOrThrow();\n    const isRemovingFirstChild = childrenToRemove[0] === syntaxList.getFirstChild();\n    addNextCommaIfAble();\n    addPreviousCommaIfAble();\n    removeChildren({\n        children: childrenToRemove,\n        removePrecedingSpaces: !isRemovingFirstChild || syntaxList.getChildren().length === childrenToRemove.length && childrenToRemove[0].isFirstNodeOnLine(),\n        removeFollowingSpaces: isRemovingFirstChild,\n        removePrecedingNewLines: !isRemovingFirstChild,\n        removeFollowingNewLines: isRemovingFirstChild,\n    });\n    function addNextCommaIfAble() {\n        const commaToken = child.getNextSiblingIfKind(common.SyntaxKind.CommaToken);\n        if (commaToken != null)\n            childrenToRemove.push(commaToken);\n    }\n    function addPreviousCommaIfAble() {\n        if (syntaxList.getLastChild() !== childrenToRemove[childrenToRemove.length - 1])\n            return;\n        const precedingComma = child.getPreviousSiblingIfKind(common.SyntaxKind.CommaToken);\n        if (precedingComma != null)\n            childrenToRemove.unshift(precedingComma);\n    }\n}\nfunction removeOverloadableStatementedNodeChild(node) {\n    if (node.isOverload())\n        removeChildren({ children: [node], removeFollowingSpaces: true, removeFollowingNewLines: true });\n    else\n        removeStatementedNodeChildren([...node.getOverloads(), node]);\n}\nfunction removeStatementedNodeChild(node) {\n    removeStatementedNodeChildren([node]);\n}\nfunction removeStatementedNodeChildren(nodes) {\n    removeChildrenWithFormatting({\n        getSiblingFormatting: getStatementedNodeChildFormatting,\n        children: nodes,\n    });\n}\nfunction removeClausedNodeChild(node) {\n    removeClausedNodeChildren([node]);\n}\nfunction removeClausedNodeChildren(nodes) {\n    removeChildrenWithFormatting({\n        getSiblingFormatting: getClausedNodeChildFormatting,\n        children: nodes,\n    });\n}\nfunction unwrapNode(node) {\n    doManipulation(node._sourceFile, new UnwrapTextManipulator(node), new NodeHandlerFactory().getForUnwrappingNode(node));\n}\n\nfunction replaceNodeText(opts) {\n    doManipulation(opts.sourceFile, new InsertionTextManipulator({\n        insertPos: opts.start,\n        newText: opts.newText,\n        replacingLength: opts.replacingLength,\n    }), new NodeHandlerFactory().getForForgetChanged(opts.sourceFile._context.compilerFactory));\n}\nfunction replaceSourceFileTextForFormatting(opts) {\n    replaceSourceFileTextStraight(opts);\n}\nfunction replaceSourceFileTextStraight(opts) {\n    const { sourceFile, newText } = opts;\n    doManipulation(sourceFile, new FullReplacementTextManipulator(newText), new NodeHandlerFactory().getForStraightReplacement(sourceFile._context.compilerFactory));\n}\nfunction replaceSourceFileTextForRename(opts) {\n    const { sourceFile, renameLocations, newName } = opts;\n    const nodeHandlerFactory = new NodeHandlerFactory();\n    doManipulation(sourceFile, new RenameLocationTextManipulator(renameLocations, newName), nodeHandlerFactory.getForTryOrForget(nodeHandlerFactory.getForRename(sourceFile._context.compilerFactory)));\n}\nfunction replaceTextPossiblyCreatingChildNodes(opts) {\n    const { replacePos, replacingLength, newText, parent } = opts;\n    doManipulation(parent._sourceFile, new InsertionTextManipulator({\n        insertPos: replacePos,\n        replacingLength,\n        newText,\n    }), new NodeHandlerFactory().getForParentRange({\n        parent,\n        start: replacePos,\n        end: replacePos + newText.length,\n    }));\n}\nfunction replaceSourceFileForFilePathMove(opts) {\n    const { sourceFile, newFilePath } = opts;\n    doManipulation(sourceFile, new UnchangedTextManipulator(), new NodeHandlerFactory().getForStraightReplacement(sourceFile._context.compilerFactory), newFilePath);\n}\nfunction replaceSourceFileForCacheUpdate(sourceFile) {\n    replaceSourceFileForFilePathMove({ sourceFile, newFilePath: sourceFile.getFilePath() });\n}\n\nfunction ArgumentedNode(Base) {\n    return class extends Base {\n        getArguments() {\n            var _a, _b;\n            return (_b = (_a = this.compilerNode.arguments) === null || _a === void 0 ? void 0 : _a.map(a => this._getNodeFromCompilerNode(a))) !== null && _b !== void 0 ? _b : [];\n        }\n        addArgument(argumentText) {\n            return this.addArguments([argumentText])[0];\n        }\n        addArguments(argumentTexts) {\n            return this.insertArguments(this.getArguments().length, argumentTexts);\n        }\n        insertArgument(index, argumentText) {\n            return this.insertArguments(index, [argumentText])[0];\n        }\n        insertArguments(index, argumentTexts) {\n            if (argumentTexts instanceof Function)\n                argumentTexts = [argumentTexts];\n            if (common.ArrayUtils.isNullOrEmpty(argumentTexts))\n                return [];\n            this._addParensIfNecessary();\n            const originalArgs = this.getArguments();\n            index = verifyAndGetIndex(index, originalArgs.length);\n            const writer = this._getWriterWithQueuedChildIndentation();\n            for (let i = 0; i < argumentTexts.length; i++) {\n                writer.conditionalWrite(i > 0, \", \");\n                printTextFromStringOrWriter(writer, argumentTexts[i]);\n            }\n            insertIntoCommaSeparatedNodes({\n                parent: this.getFirstChildByKindOrThrow(common.SyntaxKind.OpenParenToken).getNextSiblingIfKindOrThrow(common.SyntaxKind.SyntaxList),\n                currentNodes: originalArgs,\n                insertIndex: index,\n                newText: writer.toString(),\n                useTrailingCommas: false,\n            });\n            return getNodesToReturn(originalArgs, this.getArguments(), index, false);\n        }\n        removeArgument(argOrIndex) {\n            const args = this.getArguments();\n            if (args.length === 0)\n                throw new common.errors.InvalidOperationError(\"Cannot remove an argument when none exist.\");\n            const argToRemove = typeof argOrIndex === \"number\" ? getArgFromIndex(argOrIndex) : argOrIndex;\n            removeCommaSeparatedChild(argToRemove);\n            return this;\n            function getArgFromIndex(index) {\n                return args[verifyAndGetIndex(index, args.length - 1)];\n            }\n        }\n        _addParensIfNecessary() {\n            const fullText = this.getFullText();\n            if (fullText[fullText.length - 1] !== \")\") {\n                insertIntoParentTextRange({\n                    insertPos: this.getEnd(),\n                    newText: \"()\",\n                    parent: this,\n                });\n            }\n        }\n    };\n}\n\nfunction AsyncableNode(Base) {\n    return class extends Base {\n        isAsync() {\n            return this.hasModifier(common.SyntaxKind.AsyncKeyword);\n        }\n        getAsyncKeyword() {\n            return this.getFirstModifierByKind(common.SyntaxKind.AsyncKeyword);\n        }\n        getAsyncKeywordOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getAsyncKeyword(), \"Expected to find an async keyword.\");\n        }\n        setIsAsync(value) {\n            this.toggleModifier(\"async\", value);\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.isAsync != null)\n                this.setIsAsync(structure.isAsync);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                isAsync: this.isAsync(),\n            });\n        }\n    };\n}\n\nfunction AwaitableNode(Base) {\n    return class extends Base {\n        isAwaited() {\n            return this.compilerNode.awaitModifier != null;\n        }\n        getAwaitKeyword() {\n            const awaitModifier = this.compilerNode.awaitModifier;\n            return this._getNodeFromCompilerNodeIfExists(awaitModifier);\n        }\n        getAwaitKeywordOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getAwaitKeyword(), \"Expected to find an await token.\");\n        }\n        setIsAwaited(value) {\n            const awaitModifier = this.getAwaitKeyword();\n            const isSet = awaitModifier != null;\n            if (isSet === value)\n                return this;\n            if (awaitModifier == null) {\n                insertIntoParentTextRange({\n                    insertPos: getAwaitInsertPos(this),\n                    parent: this,\n                    newText: \" await\",\n                });\n            }\n            else {\n                removeChildren({\n                    children: [awaitModifier],\n                    removePrecedingSpaces: true,\n                });\n            }\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.isAwaited != null)\n                this.setIsAwaited(structure.isAwaited);\n            return this;\n        }\n    };\n}\nfunction getAwaitInsertPos(node) {\n    if (node.getKind() === common.SyntaxKind.ForOfStatement)\n        return node.getFirstChildByKindOrThrow(common.SyntaxKind.ForKeyword).getEnd();\n    throw new common.errors.NotImplementedError(\"Expected a for of statement node.\");\n}\n\nfunction getBodyText(writer, textOrWriterFunction) {\n    writer.newLineIfLastNot();\n    if (typeof textOrWriterFunction !== \"string\" || textOrWriterFunction.length > 0) {\n        writer.indent(() => {\n            printTextFromStringOrWriter(writer, textOrWriterFunction);\n        });\n    }\n    writer.newLineIfLastNot();\n    writer.write(\"\");\n    return writer.toString();\n}\n\nfunction getBodyTextWithoutLeadingIndentation(body) {\n    const sourceFile = body._sourceFile;\n    const textArea = body.getChildSyntaxList() || body;\n    const startPos = textArea.getNonWhitespaceStart();\n    const endPos = Math.max(startPos, textArea._getTrailingTriviaNonWhitespaceEnd());\n    const width = endPos - startPos;\n    if (width === 0)\n        return \"\";\n    const fullText = sourceFile.getFullText().substring(startPos, endPos);\n    return common.StringUtils.removeIndentation(fullText, {\n        indentSizeInSpaces: body._context.manipulationSettings._getIndentSizeInSpaces(),\n        isInStringAtPos: pos => sourceFile.isInStringAtPos(pos + startPos),\n    });\n}\n\nclass TextRange {\n    constructor(compilerObject, sourceFile) {\n        this._compilerObject = compilerObject;\n        this._sourceFile = sourceFile;\n    }\n    get compilerObject() {\n        this._throwIfForgotten();\n        return this._compilerObject;\n    }\n    getSourceFile() {\n        this._throwIfForgotten();\n        return this._sourceFile;\n    }\n    getPos() {\n        return this.compilerObject.pos;\n    }\n    getEnd() {\n        return this.compilerObject.end;\n    }\n    getWidth() {\n        return this.getEnd() - this.getPos();\n    }\n    getText() {\n        const fullText = this.getSourceFile().getFullText();\n        return fullText.substring(this.compilerObject.pos, this.compilerObject.end);\n    }\n    _forget() {\n        this._compilerObject = undefined;\n        this._sourceFile = undefined;\n    }\n    wasForgotten() {\n        return this._compilerObject == null;\n    }\n    _throwIfForgotten() {\n        if (this._compilerObject != null)\n            return;\n        const message = \"Attempted to get a text range that was forgotten. \"\n            + \"Text ranges are forgotten after a manipulation has occurred. \"\n            + \"Please re-request the text range after manipulations.\";\n        throw new common.errors.InvalidOperationError(message);\n    }\n}\n\nclass CommentRange extends TextRange {\n    constructor(compilerObject, sourceFile) {\n        super(compilerObject, sourceFile);\n    }\n    getKind() {\n        return this.compilerObject.kind;\n    }\n}\n\nclass Node {\n    constructor(context, node, sourceFile) {\n        this._wrappedChildCount = 0;\n        if (context == null || context.compilerFactory == null) {\n            throw new common.errors.InvalidOperationError(\"Constructing a node is not supported. Please create a source file from the default export \"\n                + \"of the package and manipulate the source file from there.\");\n        }\n        this._context = context;\n        this._compilerNode = node;\n        this.__sourceFile = sourceFile;\n    }\n    get _sourceFile() {\n        if (this.__sourceFile == null)\n            throw new common.errors.InvalidOperationError(\"Operation cannot be performed on a node that has no source file.\");\n        return this.__sourceFile;\n    }\n    get compilerNode() {\n        if (this._compilerNode == null) {\n            let message = \"Attempted to get information from a node that was removed or forgotten.\";\n            if (this._forgottenText != null)\n                message += `\\n\\nNode text: ${this._forgottenText}`;\n            throw new common.errors.InvalidOperationError(message);\n        }\n        return this._compilerNode;\n    }\n    forget() {\n        if (this.wasForgotten())\n            return;\n        this.forgetDescendants();\n        this._forgetOnlyThis();\n    }\n    forgetDescendants() {\n        for (const child of this._getChildrenInCacheIterator())\n            child.forget();\n        return this;\n    }\n    _forgetOnlyThis() {\n        if (this.wasForgotten())\n            return;\n        const parent = this.getParent();\n        if (parent != null)\n            parent._wrappedChildCount--;\n        const parentSyntaxList = this._getParentSyntaxListIfWrapped();\n        if (parentSyntaxList != null)\n            parentSyntaxList._wrappedChildCount--;\n        this._storeTextForForgetting();\n        this._context.compilerFactory.removeNodeFromCache(this);\n        this._clearInternals();\n    }\n    wasForgotten() {\n        return this._compilerNode == null;\n    }\n    _hasWrappedChildren() {\n        return this._wrappedChildCount > 0;\n    }\n    _replaceCompilerNodeFromFactory(compilerNode) {\n        if (compilerNode == null)\n            this._storeTextForForgetting();\n        this._clearInternals();\n        this._compilerNode = compilerNode;\n    }\n    _storeTextForForgetting() {\n        const sourceFileCompilerNode = this._sourceFile && this._sourceFile.compilerNode;\n        const compilerNode = this._compilerNode;\n        if (sourceFileCompilerNode == null || compilerNode == null)\n            return;\n        this._forgottenText = getText();\n        function getText() {\n            const start = compilerNode.getStart(sourceFileCompilerNode);\n            const length = compilerNode.end - start;\n            const trimmedLength = Math.min(length, 100);\n            const text = sourceFileCompilerNode.text.substr(start, trimmedLength);\n            return trimmedLength !== length ? text + \"...\" : text;\n        }\n    }\n    _clearInternals() {\n        this._compilerNode = undefined;\n        this._childStringRanges = undefined;\n        clearTextRanges(this._leadingCommentRanges);\n        clearTextRanges(this._trailingCommentRanges);\n        delete this._leadingCommentRanges;\n        delete this._trailingCommentRanges;\n        function clearTextRanges(textRanges) {\n            if (textRanges == null)\n                return;\n            textRanges.forEach(r => r._forget());\n        }\n    }\n    getKind() {\n        return this.compilerNode.kind;\n    }\n    getKindName() {\n        return common.getSyntaxKindName(this.compilerNode.kind);\n    }\n    getFlags() {\n        return this.compilerNode.flags;\n    }\n    print(options = {}) {\n        if (options.newLineKind == null)\n            options.newLineKind = this._context.manipulationSettings.getNewLineKind();\n        if (this.getKind() === common.SyntaxKind.SourceFile)\n            return printNode(this.compilerNode, options);\n        else\n            return printNode(this.compilerNode, this._sourceFile.compilerNode, options);\n    }\n    getSymbolOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getSymbol(), \"Could not find the node's symbol.\");\n    }\n    getSymbol() {\n        const boundSymbol = this.compilerNode.symbol;\n        if (boundSymbol != null)\n            return this._context.compilerFactory.getSymbol(boundSymbol);\n        const typeChecker = this._context.typeChecker;\n        const typeCheckerSymbol = typeChecker.getSymbolAtLocation(this);\n        if (typeCheckerSymbol != null)\n            return typeCheckerSymbol;\n        const nameNode = this.compilerNode.name;\n        if (nameNode != null)\n            return this._getNodeFromCompilerNode(nameNode).getSymbol();\n        return undefined;\n    }\n    getSymbolsInScope(meaning) {\n        return this._context.typeChecker.getSymbolsInScope(this, meaning);\n    }\n    getLocalOrThrow(name) {\n        return common.errors.throwIfNullOrUndefined(this.getLocal(name), `Expected to find local symbol with name: ${name}`);\n    }\n    getLocal(name) {\n        const locals = this._getCompilerLocals();\n        if (locals == null)\n            return undefined;\n        const tsSymbol = locals.get(common.ts.escapeLeadingUnderscores(name));\n        return tsSymbol == null ? undefined : this._context.compilerFactory.getSymbol(tsSymbol);\n    }\n    getLocals() {\n        const locals = this._getCompilerLocals();\n        if (locals == null)\n            return [];\n        return common.ArrayUtils.from(locals.values()).map(symbol => this._context.compilerFactory.getSymbol(symbol));\n    }\n    _getCompilerLocals() {\n        this._ensureBound();\n        return this.compilerNode.locals;\n    }\n    getType() {\n        return this._context.typeChecker.getTypeAtLocation(this);\n    }\n    containsRange(pos, end) {\n        return this.getPos() <= pos && end <= this.getEnd();\n    }\n    isInStringAtPos(pos) {\n        common.errors.throwIfOutOfRange(pos, [this.getPos(), this.getEnd()], \"pos\");\n        if (this._childStringRanges == null) {\n            this._childStringRanges = [];\n            for (const descendant of this._getCompilerDescendantsIterator()) {\n                if (isStringKind(descendant.kind))\n                    this._childStringRanges.push([descendant.getStart(this._sourceFile.compilerNode), descendant.getEnd()]);\n            }\n        }\n        class InStringRangeComparer {\n            compareTo(value) {\n                if (pos <= value[0])\n                    return -1;\n                if (pos >= value[1] - 1)\n                    return 1;\n                return 0;\n            }\n        }\n        return common.ArrayUtils.binarySearch(this._childStringRanges, new InStringRangeComparer()) !== -1;\n    }\n    asKindOrThrow(kind) {\n        return common.errors.throwIfNullOrUndefined(this.asKind(kind), () => `Expected the node to be of kind ${common.getSyntaxKindName(kind)}, but it was ${common.getSyntaxKindName(this.getKind())}.`);\n    }\n    isKind(kind) {\n        return this.getKind() === kind;\n    }\n    asKind(kind) {\n        if (this.isKind(kind)) {\n            return this;\n        }\n        else {\n            return undefined;\n        }\n    }\n    getFirstChildOrThrow(condition) {\n        return common.errors.throwIfNullOrUndefined(this.getFirstChild(condition), \"Could not find a child that matched the specified condition.\");\n    }\n    getFirstChild(condition) {\n        const firstChild = this._getCompilerFirstChild(getWrappedCondition(this, condition));\n        return this._getNodeFromCompilerNodeIfExists(firstChild);\n    }\n    getLastChildOrThrow(condition) {\n        return common.errors.throwIfNullOrUndefined(this.getLastChild(condition), \"Could not find a child that matched the specified condition.\");\n    }\n    getLastChild(condition) {\n        const lastChild = this._getCompilerLastChild(getWrappedCondition(this, condition));\n        return this._getNodeFromCompilerNodeIfExists(lastChild);\n    }\n    getFirstDescendantOrThrow(condition) {\n        return common.errors.throwIfNullOrUndefined(this.getFirstDescendant(condition), \"Could not find a descendant that matched the specified condition.\");\n    }\n    getFirstDescendant(condition) {\n        for (const descendant of this._getDescendantsIterator()) {\n            if (condition == null || condition(descendant))\n                return descendant;\n        }\n        return undefined;\n    }\n    getPreviousSiblingOrThrow(condition) {\n        return common.errors.throwIfNullOrUndefined(this.getPreviousSibling(condition), \"Could not find the previous sibling.\");\n    }\n    getPreviousSibling(condition) {\n        const previousSibling = this._getCompilerPreviousSibling(getWrappedCondition(this, condition));\n        return this._getNodeFromCompilerNodeIfExists(previousSibling);\n    }\n    getNextSiblingOrThrow(condition) {\n        return common.errors.throwIfNullOrUndefined(this.getNextSibling(condition), \"Could not find the next sibling.\");\n    }\n    getNextSibling(condition) {\n        const nextSibling = this._getCompilerNextSibling(getWrappedCondition(this, condition));\n        return this._getNodeFromCompilerNodeIfExists(nextSibling);\n    }\n    getPreviousSiblings() {\n        return this._getCompilerPreviousSiblings().map(n => this._getNodeFromCompilerNode(n));\n    }\n    getNextSiblings() {\n        return this._getCompilerNextSiblings().map(n => this._getNodeFromCompilerNode(n));\n    }\n    getChildren() {\n        return this._getCompilerChildren().map(n => this._getNodeFromCompilerNode(n));\n    }\n    getChildAtIndex(index) {\n        return this._getNodeFromCompilerNode(this._getCompilerChildAtIndex(index));\n    }\n    *_getChildrenIterator() {\n        for (const compilerChild of this._getCompilerChildren())\n            yield this._getNodeFromCompilerNode(compilerChild);\n    }\n    *_getChildrenInCacheIterator() {\n        const children = this._getCompilerChildrenFast();\n        for (const child of children) {\n            if (this._context.compilerFactory.hasCompilerNode(child))\n                yield this._context.compilerFactory.getExistingNodeFromCompilerNode(child);\n            else if (child.kind === common.SyntaxKind.SyntaxList) {\n                yield this._getNodeFromCompilerNode(child);\n            }\n        }\n    }\n    getChildSyntaxListOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getChildSyntaxList(), \"A child syntax list was expected.\");\n    }\n    getChildSyntaxList() {\n        let node = this;\n        if (Node.isBodyable(node) || Node.isBodied(node)) {\n            do {\n                const bodyNode = Node.isBodyable(node) ? node.getBody() : node.getBody();\n                if (bodyNode == null)\n                    return undefined;\n                node = bodyNode;\n            } while ((Node.isBodyable(node) || Node.isBodied(node)) && node.compilerNode.statements == null);\n        }\n        if (Node.isSourceFile(node)\n            || Node.isBodyable(this)\n            || Node.isBodied(this)\n            || Node.isCaseBlock(this)\n            || Node.isCaseClause(this)\n            || Node.isDefaultClause(this)\n            || Node.isJsxElement(this)) {\n            return node.getFirstChildByKind(common.SyntaxKind.SyntaxList);\n        }\n        let passedBrace = false;\n        for (const child of node._getCompilerChildren()) {\n            if (!passedBrace)\n                passedBrace = child.kind === common.SyntaxKind.OpenBraceToken;\n            else if (child.kind === common.SyntaxKind.SyntaxList)\n                return this._getNodeFromCompilerNode(child);\n        }\n        return undefined;\n    }\n    forEachChild(cbNode, cbNodeArray) {\n        const snapshots = [];\n        this.compilerNode.forEachChild(node => {\n            snapshots.push(this._getNodeFromCompilerNode(node));\n        }, cbNodeArray == null ? undefined : nodes => {\n            snapshots.push(nodes.map(n => this._getNodeFromCompilerNode(n)));\n        });\n        for (const snapshot of snapshots) {\n            if (snapshot instanceof Array) {\n                const filteredNodes = snapshot.filter(n => !n.wasForgotten());\n                if (filteredNodes.length > 0) {\n                    const returnValue = cbNodeArray(filteredNodes);\n                    if (returnValue)\n                        return returnValue;\n                }\n            }\n            else if (!snapshot.wasForgotten()) {\n                const returnValue = cbNode(snapshot);\n                if (returnValue)\n                    return returnValue;\n            }\n        }\n        return undefined;\n    }\n    forEachDescendant(cbNode, cbNodeArray) {\n        const stopReturnValue = {};\n        const upReturnValue = {};\n        let stop = false;\n        let up = false;\n        const traversal = {\n            stop: () => stop = true,\n            up: () => up = true,\n        };\n        const nodeCallback = (node) => {\n            if (stop)\n                return stopReturnValue;\n            let skip = false;\n            const returnValue = cbNode(node, {\n                ...traversal,\n                skip: () => skip = true,\n            });\n            if (returnValue)\n                return returnValue;\n            if (stop)\n                return stopReturnValue;\n            if (skip || up)\n                return undefined;\n            if (!node.wasForgotten())\n                return forEachChildForNode(node);\n            return undefined;\n        };\n        const arrayCallback = cbNodeArray == null ? undefined : (nodes) => {\n            if (stop)\n                return stopReturnValue;\n            let skip = false;\n            const returnValue = cbNodeArray(nodes, {\n                ...traversal,\n                skip: () => skip = true,\n            });\n            if (returnValue)\n                return returnValue;\n            if (skip)\n                return undefined;\n            for (const node of nodes) {\n                if (stop)\n                    return stopReturnValue;\n                if (up)\n                    return undefined;\n                const innerReturnValue = forEachChildForNode(node);\n                if (innerReturnValue)\n                    return innerReturnValue;\n            }\n            return undefined;\n        };\n        const finalResult = forEachChildForNode(this);\n        return finalResult === stopReturnValue ? undefined : finalResult;\n        function forEachChildForNode(node) {\n            const result = node.forEachChild(innerNode => {\n                const returnValue = nodeCallback(innerNode);\n                if (up) {\n                    up = false;\n                    return returnValue || upReturnValue;\n                }\n                return returnValue;\n            }, arrayCallback == null ? undefined : nodes => {\n                const returnValue = arrayCallback(nodes);\n                if (up) {\n                    up = false;\n                    return returnValue || upReturnValue;\n                }\n                return returnValue;\n            });\n            return result === upReturnValue ? undefined : result;\n        }\n    }\n    forEachChildAsArray() {\n        const children = [];\n        this.compilerNode.forEachChild(child => {\n            children.push(this._getNodeFromCompilerNode(child));\n        });\n        return children;\n    }\n    forEachDescendantAsArray() {\n        const descendants = [];\n        this.forEachDescendant(descendant => {\n            descendants.push(descendant);\n        });\n        return descendants;\n    }\n    getDescendants() {\n        return Array.from(this._getDescendantsIterator());\n    }\n    *_getDescendantsIterator() {\n        for (const descendant of this._getCompilerDescendantsIterator())\n            yield this._getNodeFromCompilerNode(descendant);\n    }\n    getDescendantStatements() {\n        const statements = [];\n        handleNode(this, this.compilerNode);\n        return statements;\n        function handleNode(thisNode, node) {\n            if (handleStatements(thisNode, node))\n                return;\n            else if (node.kind === common.SyntaxKind.ArrowFunction) {\n                const arrowFunction = node;\n                if (arrowFunction.body.kind !== common.SyntaxKind.Block)\n                    statements.push(thisNode._getNodeFromCompilerNode(arrowFunction.body));\n                else\n                    handleNode(thisNode, arrowFunction.body);\n            }\n            else {\n                handleChildren(thisNode, node);\n            }\n        }\n        function handleStatements(thisNode, node) {\n            if (node.statements == null)\n                return false;\n            const statementedNode = thisNode._getNodeFromCompilerNode(node);\n            for (const statement of statementedNode.getStatements()) {\n                statements.push(statement);\n                handleChildren(thisNode, statement.compilerNode);\n            }\n            return true;\n        }\n        function handleChildren(thisNode, node) {\n            common.ts.forEachChild(node, childNode => handleNode(thisNode, childNode));\n        }\n    }\n    getChildCount() {\n        return this._getCompilerChildren().length;\n    }\n    getChildAtPos(pos) {\n        if (pos < this.getPos() || pos >= this.getEnd())\n            return undefined;\n        for (const child of this._getCompilerChildren()) {\n            if (pos >= child.pos && pos < child.end)\n                return this._getNodeFromCompilerNode(child);\n        }\n        return undefined;\n    }\n    getDescendantAtPos(pos) {\n        let node;\n        while (true) {\n            const nextNode = (node || this).getChildAtPos(pos);\n            if (nextNode == null)\n                return node;\n            else\n                node = nextNode;\n        }\n    }\n    getDescendantAtStartWithWidth(start, width) {\n        let foundNode;\n        this._context.compilerFactory.forgetNodesCreatedInBlock(remember => {\n            let nextNode = this.getSourceFile();\n            do {\n                nextNode = nextNode.getChildAtPos(start);\n                if (nextNode != null) {\n                    if (nextNode.getStart() === start && nextNode.getWidth() === width)\n                        foundNode = nextNode;\n                    else if (foundNode != null)\n                        break;\n                }\n            } while (nextNode != null);\n            if (foundNode != null)\n                remember(foundNode);\n        });\n        return foundNode;\n    }\n    getPos() {\n        return this.compilerNode.pos;\n    }\n    getEnd() {\n        return this.compilerNode.end;\n    }\n    getStart(includeJsDocComments) {\n        return this.compilerNode.getStart(this._sourceFile.compilerNode, includeJsDocComments);\n    }\n    getFullStart() {\n        return this.compilerNode.getFullStart();\n    }\n    getNonWhitespaceStart() {\n        return this._context.compilerFactory.forgetNodesCreatedInBlock(() => {\n            const parent = this.getParent();\n            const pos = this.getPos();\n            const parentTakesPrecedence = parent != null\n                && !Node.isSourceFile(parent)\n                && parent.getPos() === pos;\n            if (parentTakesPrecedence)\n                return this.getStart(true);\n            let startSearchPos;\n            const sourceFileFullText = this._sourceFile.getFullText();\n            const previousSibling = this.getPreviousSibling();\n            if (previousSibling != null && Node.isCommentNode(previousSibling))\n                startSearchPos = previousSibling.getEnd();\n            else if (previousSibling != null) {\n                if (hasNewLineInRange(sourceFileFullText, [pos, this.getStart(true)]))\n                    startSearchPos = previousSibling.getTrailingTriviaEnd();\n                else\n                    startSearchPos = pos;\n            }\n            else {\n                startSearchPos = this.getPos();\n            }\n            return getNextNonWhitespacePos(sourceFileFullText, startSearchPos);\n        });\n    }\n    _getTrailingTriviaNonWhitespaceEnd() {\n        return getPreviousNonWhitespacePos(this._sourceFile.getFullText(), this.getTrailingTriviaEnd());\n    }\n    getWidth(includeJsDocComments) {\n        return this.getEnd() - this.getStart(includeJsDocComments);\n    }\n    getFullWidth() {\n        return this.compilerNode.getFullWidth();\n    }\n    getLeadingTriviaWidth() {\n        return this.compilerNode.getLeadingTriviaWidth(this._sourceFile.compilerNode);\n    }\n    getTrailingTriviaWidth() {\n        return this.getTrailingTriviaEnd() - this.getEnd();\n    }\n    getTrailingTriviaEnd() {\n        const parent = this.getParent();\n        const end = this.getEnd();\n        if (parent == null)\n            return end;\n        const parentEnd = parent.getEnd();\n        if (parentEnd === end)\n            return end;\n        const trailingComments = this.getTrailingCommentRanges();\n        const searchStart = getSearchStart();\n        return getNextMatchingPos(this._sourceFile.getFullText(), searchStart, char => char !== CharCodes.SPACE && char !== CharCodes.TAB);\n        function getSearchStart() {\n            return trailingComments.length > 0 ? trailingComments[trailingComments.length - 1].getEnd() : end;\n        }\n    }\n    getText(includeJsDocCommentOrOptions) {\n        const options = typeof includeJsDocCommentOrOptions === \"object\" ? includeJsDocCommentOrOptions : undefined;\n        const includeJsDocComments = includeJsDocCommentOrOptions === true || (options != null && options.includeJsDocComments);\n        const trimLeadingIndentation = options != null && options.trimLeadingIndentation;\n        const startPos = this.getStart(includeJsDocComments);\n        const text = this._sourceFile.getFullText().substring(startPos, this.getEnd());\n        if (trimLeadingIndentation) {\n            return common.StringUtils.removeIndentation(text, {\n                isInStringAtPos: pos => this._sourceFile.isInStringAtPos(pos + startPos),\n                indentSizeInSpaces: this._context.manipulationSettings._getIndentSizeInSpaces(),\n            });\n        }\n        else {\n            return text;\n        }\n    }\n    getFullText() {\n        return this.compilerNode.getFullText(this._sourceFile.compilerNode);\n    }\n    getCombinedModifierFlags() {\n        return common.ts.getCombinedModifierFlags(this.compilerNode);\n    }\n    getSourceFile() {\n        return this._sourceFile;\n    }\n    getProject() {\n        return this._context.project;\n    }\n    getNodeProperty(propertyName) {\n        const property = this.compilerNode[propertyName];\n        if (property == null)\n            return undefined;\n        else if (property instanceof Array)\n            return property.map(p => isNode(p) ? this._getNodeFromCompilerNode(p) : p);\n        else if (isNode(property))\n            return this._getNodeFromCompilerNode(property);\n        else\n            return property;\n        function isNode(value) {\n            return typeof value.kind === \"number\" && typeof value.pos === \"number\" && typeof value.end === \"number\";\n        }\n    }\n    getAncestors(includeSyntaxLists = false) {\n        return Array.from(this._getAncestorsIterator(includeSyntaxLists));\n    }\n    *_getAncestorsIterator(includeSyntaxLists) {\n        let parent = getParent(this);\n        while (parent != null) {\n            yield parent;\n            parent = getParent(parent);\n        }\n        function getParent(node) {\n            return includeSyntaxLists ? node.getParentSyntaxList() || node.getParent() : node.getParent();\n        }\n    }\n    getParent() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.parent);\n    }\n    getParentOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getParent(), \"Expected to find a parent.\");\n    }\n    getParentWhileOrThrow(condition) {\n        return common.errors.throwIfNullOrUndefined(this.getParentWhile(condition), \"The initial parent did not match the provided condition.\");\n    }\n    getParentWhile(condition) {\n        let node = undefined;\n        let parent = this.getParent();\n        while (parent && condition(parent, node || this)) {\n            node = parent;\n            parent = node.getParent();\n        }\n        return node;\n    }\n    getParentWhileKindOrThrow(kind) {\n        return common.errors.throwIfNullOrUndefined(this.getParentWhileKind(kind), `The initial parent was not a syntax kind of ${common.getSyntaxKindName(kind)}.`);\n    }\n    getParentWhileKind(kind) {\n        return this.getParentWhile(n => n.getKind() === kind);\n    }\n    getLastToken() {\n        const lastToken = this.compilerNode.getLastToken(this._sourceFile.compilerNode);\n        if (lastToken == null)\n            throw new common.errors.NotImplementedError(\"Not implemented scenario where the last token does not exist.\");\n        return this._getNodeFromCompilerNode(lastToken);\n    }\n    isInSyntaxList() {\n        return this.getParentSyntaxList() != null;\n    }\n    getParentSyntaxListOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getParentSyntaxList(), \"Expected the parent to be a syntax list.\");\n    }\n    getParentSyntaxList() {\n        const kind = this.getKind();\n        if (kind === common.SyntaxKind.SingleLineCommentTrivia || kind === common.SyntaxKind.MultiLineCommentTrivia)\n            return this.getParentOrThrow().getChildSyntaxList();\n        const syntaxList = getParentSyntaxList(this.compilerNode, this._sourceFile.compilerNode);\n        return this._getNodeFromCompilerNodeIfExists(syntaxList);\n    }\n    _getParentSyntaxListIfWrapped() {\n        const parent = this.getParent();\n        if (parent == null || !hasParsedTokens(parent.compilerNode))\n            return undefined;\n        return this.getParentSyntaxList();\n    }\n    getChildIndex() {\n        const parent = this.getParentSyntaxList() || this.getParentOrThrow();\n        const index = parent._getCompilerChildren().indexOf(this.compilerNode);\n        if (index === -1)\n            throw new common.errors.NotImplementedError(\"For some reason the child's parent did not contain the child.\");\n        return index;\n    }\n    getIndentationLevel() {\n        const indentationText = this._context.manipulationSettings.getIndentationText();\n        return this._context.languageService.getIdentationAtPosition(this._sourceFile, this.getStart()) / indentationText.length;\n    }\n    getChildIndentationLevel() {\n        if (Node.isSourceFile(this))\n            return 0;\n        return this.getIndentationLevel() + 1;\n    }\n    getIndentationText(offset = 0) {\n        return this._getIndentationTextForLevel(this.getIndentationLevel() + offset);\n    }\n    getChildIndentationText(offset = 0) {\n        return this._getIndentationTextForLevel(this.getChildIndentationLevel() + offset);\n    }\n    _getIndentationTextForLevel(level) {\n        return this._context.manipulationSettings.getIndentationText().repeat(level);\n    }\n    getStartLinePos(includeJsDocComments) {\n        const sourceFileText = this._sourceFile.getFullText();\n        return getPreviousMatchingPos(sourceFileText, this.getStart(includeJsDocComments), char => char === CharCodes.NEWLINE || char === CharCodes.CARRIAGE_RETURN);\n    }\n    getStartLineNumber(includeJsDocComments) {\n        return common.StringUtils.getLineNumberAtPos(this._sourceFile.getFullText(), this.getStartLinePos(includeJsDocComments));\n    }\n    getEndLineNumber() {\n        const sourceFileText = this._sourceFile.getFullText();\n        const endLinePos = getPreviousMatchingPos(sourceFileText, this.getEnd(), char => char === CharCodes.NEWLINE || char === CharCodes.CARRIAGE_RETURN);\n        return common.StringUtils.getLineNumberAtPos(this._sourceFile.getFullText(), endLinePos);\n    }\n    isFirstNodeOnLine() {\n        const sourceFileText = this._sourceFile.getFullText();\n        const startPos = this.getNonWhitespaceStart();\n        for (let i = startPos - 1; i >= 0; i--) {\n            const currentChar = sourceFileText[i];\n            if (currentChar === \" \" || currentChar === \"\\t\")\n                continue;\n            if (currentChar === \"\\n\")\n                return true;\n            return false;\n        }\n        return true;\n    }\n    replaceWithText(textOrWriterFunction, writer) {\n        const newText = getTextFromStringOrWriter(writer || this._getWriterWithQueuedIndentation(), textOrWriterFunction);\n        if (Node.isSourceFile(this)) {\n            this.replaceText([this.getPos(), this.getEnd()], newText);\n            return this;\n        }\n        const parent = this.getParentSyntaxList() || this.getParentOrThrow();\n        const childIndex = this.getChildIndex();\n        const start = this.getStart(true);\n        insertIntoParentTextRange({\n            parent,\n            insertPos: start,\n            newText,\n            replacing: {\n                textLength: this.getEnd() - start,\n            },\n        });\n        return parent.getChildren()[childIndex];\n    }\n    prependWhitespace(textOrWriterFunction) {\n        insertWhiteSpaceTextAtPos(this, this.getStart(true), textOrWriterFunction, common.nameof(this, \"prependWhitespace\"));\n    }\n    appendWhitespace(textOrWriterFunction) {\n        insertWhiteSpaceTextAtPos(this, this.getEnd(), textOrWriterFunction, common.nameof(this, \"appendWhitespace\"));\n    }\n    formatText(settings = {}) {\n        const formattingEdits = this._context.languageService.getFormattingEditsForRange(this._sourceFile.getFilePath(), [this.getStart(true), this.getEnd()], settings);\n        replaceSourceFileTextForFormatting({\n            sourceFile: this._sourceFile,\n            newText: getTextFromTextChanges(this._sourceFile, formattingEdits),\n        });\n    }\n    transform(visitNode) {\n        const compilerFactory = this._context.compilerFactory;\n        const printer = common.ts.createPrinter({\n            newLine: this._context.manipulationSettings.getNewLineKind(),\n            removeComments: false,\n        });\n        const transformations = [];\n        const compilerSourceFile = this._sourceFile.compilerNode;\n        const compilerNode = this.compilerNode;\n        const transformerFactory = context => {\n            return rootNode => innerVisit(rootNode, context);\n        };\n        if (this.getKind() === common.ts.SyntaxKind.SourceFile) {\n            common.ts.transform(compilerNode, [transformerFactory], this._context.compilerOptions.get());\n            replaceSourceFileTextStraight({\n                sourceFile: this._sourceFile,\n                newText: getTransformedText([0, this.getEnd()]),\n            });\n            return this;\n        }\n        else {\n            const parent = this.getParentSyntaxList() || this.getParentOrThrow();\n            const childIndex = this.getChildIndex();\n            const start = this.getStart(true);\n            const end = this.getEnd();\n            common.ts.transform(compilerNode, [transformerFactory], this._context.compilerOptions.get());\n            insertIntoParentTextRange({\n                parent,\n                insertPos: start,\n                newText: getTransformedText([start, end]),\n                replacing: {\n                    textLength: end - start,\n                },\n            });\n            return parent.getChildren()[childIndex];\n        }\n        function innerVisit(node, context) {\n            const traversal = {\n                factory: context.factory,\n                visitChildren() {\n                    node = common.ts.visitEachChild(node, child => innerVisit(child, context), context);\n                    return node;\n                },\n                currentNode: node,\n            };\n            const resultNode = visitNode(traversal);\n            handleTransformation(node, resultNode);\n            return resultNode;\n        }\n        function handleTransformation(oldNode, newNode) {\n            if (oldNode === newNode && newNode.emitNode == null)\n                return;\n            const start = oldNode.getStart(compilerSourceFile, true);\n            const end = oldNode.end;\n            let lastTransformation;\n            while ((lastTransformation = transformations[transformations.length - 1]) && lastTransformation.start > start)\n                transformations.pop();\n            const wrappedNode = compilerFactory.getExistingNodeFromCompilerNode(oldNode);\n            transformations.push({\n                start,\n                end,\n                compilerNode: newNode,\n            });\n            if (wrappedNode != null) {\n                if (oldNode.kind !== newNode.kind)\n                    wrappedNode.forget();\n                else\n                    wrappedNode.forgetDescendants();\n            }\n        }\n        function getTransformedText(replaceRange) {\n            const fileText = compilerSourceFile.getFullText();\n            let finalText = \"\";\n            let lastPos = replaceRange[0];\n            for (const transform of transformations) {\n                finalText += fileText.substring(lastPos, transform.start);\n                finalText += printer.printNode(common.ts.EmitHint.Unspecified, transform.compilerNode, compilerSourceFile);\n                lastPos = transform.end;\n            }\n            finalText += fileText.substring(lastPos, replaceRange[1]);\n            return finalText;\n        }\n    }\n    getLeadingCommentRanges() {\n        return this._leadingCommentRanges || (this._leadingCommentRanges = this._getCommentsAtPos(this.getFullStart(), (text, pos) => {\n            const comments = common.ts.getLeadingCommentRanges(text, pos) || [];\n            if (this.getKind() === common.SyntaxKind.SingleLineCommentTrivia || this.getKind() === common.SyntaxKind.MultiLineCommentTrivia) {\n                const thisPos = this.getPos();\n                return comments.filter(r => r.pos < thisPos);\n            }\n            else {\n                return comments;\n            }\n        }));\n    }\n    getTrailingCommentRanges() {\n        return this._trailingCommentRanges || (this._trailingCommentRanges = this._getCommentsAtPos(this.getEnd(), common.ts.getTrailingCommentRanges));\n    }\n    _getCommentsAtPos(pos, getComments) {\n        if (this.getKind() === common.SyntaxKind.SourceFile)\n            return [];\n        return (getComments(this._sourceFile.getFullText(), pos) || []).map(r => new CommentRange(r, this._sourceFile));\n    }\n    getChildrenOfKind(kind) {\n        return this._getCompilerChildrenOfKind(kind).map(c => this._getNodeFromCompilerNode(c));\n    }\n    getFirstChildByKindOrThrow(kind) {\n        return common.errors.throwIfNullOrUndefined(this.getFirstChildByKind(kind), `A child of the kind ${common.getSyntaxKindName(kind)} was expected.`);\n    }\n    getFirstChildByKind(kind) {\n        const child = this._getCompilerChildrenOfKind(kind)[0];\n        return child == null ? undefined : this._getNodeFromCompilerNode(child);\n    }\n    getFirstChildIfKindOrThrow(kind) {\n        return common.errors.throwIfNullOrUndefined(this.getFirstChildIfKind(kind), `A first child of the kind ${common.getSyntaxKindName(kind)} was expected.`);\n    }\n    getFirstChildIfKind(kind) {\n        const firstChild = this._getCompilerFirstChild();\n        return firstChild != null && firstChild.kind === kind ? this._getNodeFromCompilerNode(firstChild) : undefined;\n    }\n    getLastChildByKindOrThrow(kind) {\n        return common.errors.throwIfNullOrUndefined(this.getLastChildByKind(kind), `A child of the kind ${common.getSyntaxKindName(kind)} was expected.`);\n    }\n    getLastChildByKind(kind) {\n        const children = this._getCompilerChildrenOfKind(kind);\n        const lastChild = children[children.length - 1];\n        return this._getNodeFromCompilerNodeIfExists(lastChild);\n    }\n    getLastChildIfKindOrThrow(kind) {\n        return common.errors.throwIfNullOrUndefined(this.getLastChildIfKind(kind), `A last child of the kind ${common.getSyntaxKindName(kind)} was expected.`);\n    }\n    getLastChildIfKind(kind) {\n        const lastChild = this._getCompilerLastChild();\n        return lastChild != null && lastChild.kind === kind ? this._getNodeFromCompilerNode(lastChild) : undefined;\n    }\n    getChildAtIndexIfKindOrThrow(index, kind) {\n        return common.errors.throwIfNullOrUndefined(this.getChildAtIndexIfKind(index, kind), `Child at index ${index} was expected to be ${common.getSyntaxKindName(kind)}`);\n    }\n    getChildAtIndexIfKind(index, kind) {\n        const node = this._getCompilerChildAtIndex(index);\n        return node.kind === kind ? this._getNodeFromCompilerNode(node) : undefined;\n    }\n    getPreviousSiblingIfKindOrThrow(kind) {\n        return common.errors.throwIfNullOrUndefined(this.getPreviousSiblingIfKind(kind), `A previous sibling of kind ${common.getSyntaxKindName(kind)} was expected.`);\n    }\n    getNextSiblingIfKindOrThrow(kind) {\n        return common.errors.throwIfNullOrUndefined(this.getNextSiblingIfKind(kind), `A next sibling of kind ${common.getSyntaxKindName(kind)} was expected.`);\n    }\n    getPreviousSiblingIfKind(kind) {\n        const previousSibling = this._getCompilerPreviousSibling();\n        return previousSibling != null && previousSibling.kind === kind\n            ? this._getNodeFromCompilerNode(previousSibling)\n            : undefined;\n    }\n    getNextSiblingIfKind(kind) {\n        const nextSibling = this._getCompilerNextSibling();\n        return nextSibling != null && nextSibling.kind === kind ? this._getNodeFromCompilerNode(nextSibling) : undefined;\n    }\n    getParentIfOrThrow(condition) {\n        return common.errors.throwIfNullOrUndefined(this.getParentIf(condition), \"The parent did not match the provided condition.\");\n    }\n    getParentIf(condition) {\n        return condition(this.getParent(), this) ? this.getParent() : undefined;\n    }\n    getParentIfKindOrThrow(kind) {\n        return common.errors.throwIfNullOrUndefined(this.getParentIfKind(kind), `The parent was not a syntax kind of ${common.getSyntaxKindName(kind)}.`);\n    }\n    getParentIfKind(kind) {\n        return this.getParentIf(n => n !== undefined && n.getKind() === kind);\n    }\n    getFirstAncestorByKindOrThrow(kind) {\n        return common.errors.throwIfNullOrUndefined(this.getFirstAncestorByKind(kind), `Expected an ancestor with a syntax kind of ${common.getSyntaxKindName(kind)}.`);\n    }\n    getFirstAncestorByKind(kind) {\n        for (const parent of this._getAncestorsIterator(kind === common.SyntaxKind.SyntaxList)) {\n            if (parent.getKind() === kind)\n                return parent;\n        }\n        return undefined;\n    }\n    getFirstAncestorOrThrow(condition) {\n        return common.errors.throwIfNullOrUndefined(this.getFirstAncestor(condition), `Expected to find an ancestor that matched the provided condition.`);\n    }\n    getFirstAncestor(condition) {\n        for (const ancestor of this._getAncestorsIterator(false)) {\n            if (condition == null || condition(ancestor))\n                return ancestor;\n        }\n        return undefined;\n    }\n    getDescendantsOfKind(kind) {\n        const descendants = [];\n        for (const descendant of this._getCompilerDescendantsOfKindIterator(kind))\n            descendants.push(this._getNodeFromCompilerNode(descendant));\n        return descendants;\n    }\n    getFirstDescendantByKindOrThrow(kind) {\n        return common.errors.throwIfNullOrUndefined(this.getFirstDescendantByKind(kind), `A descendant of kind ${common.getSyntaxKindName(kind)} was expected to be found.`);\n    }\n    getFirstDescendantByKind(kind) {\n        for (const descendant of this._getCompilerDescendantsOfKindIterator(kind))\n            return this._getNodeFromCompilerNode(descendant);\n        return undefined;\n    }\n    _getCompilerChildren() {\n        return ExtendedParser.getCompilerChildren(this.compilerNode, this._sourceFile.compilerNode);\n    }\n    _getCompilerForEachChildren() {\n        return ExtendedParser.getCompilerForEachChildren(this.compilerNode, this._sourceFile.compilerNode);\n    }\n    _getCompilerChildrenFast() {\n        return hasParsedTokens(this.compilerNode) ? this._getCompilerChildren() : this._getCompilerForEachChildren();\n    }\n    _getCompilerChildrenOfKind(kind) {\n        const children = useParseTreeSearchForKind(this, kind) ? this._getCompilerForEachChildren() : this._getCompilerChildren();\n        return children.filter(c => c.kind === kind);\n    }\n    *_getCompilerDescendantsOfKindIterator(kind) {\n        const children = useParseTreeSearchForKind(this, kind) ? this._getCompilerForEachChildren() : this._getCompilerChildren();\n        for (const child of children) {\n            if (child.kind === kind)\n                yield child;\n            const descendants = useParseTreeSearchForKind(child.kind, kind)\n                ? getCompilerForEachDescendantsIterator(child)\n                : getCompilerDescendantsIterator(child, this._sourceFile.compilerNode);\n            for (const descendant of descendants) {\n                if (descendant.kind === kind)\n                    yield descendant;\n            }\n        }\n    }\n    _getCompilerDescendantsIterator() {\n        return getCompilerDescendantsIterator(this.compilerNode, this._sourceFile.compilerNode);\n    }\n    _getCompilerForEachDescendantsIterator() {\n        return getCompilerForEachDescendantsIterator(this.compilerNode);\n    }\n    _getCompilerFirstChild(condition) {\n        for (const child of this._getCompilerChildren()) {\n            if (condition == null || condition(child))\n                return child;\n        }\n        return undefined;\n    }\n    _getCompilerLastChild(condition) {\n        const children = this._getCompilerChildren();\n        for (let i = children.length - 1; i >= 0; i--) {\n            const child = children[i];\n            if (condition == null || condition(child))\n                return child;\n        }\n        return undefined;\n    }\n    _getCompilerPreviousSiblings() {\n        const parent = this.getParentSyntaxList() || this.getParentOrThrow();\n        const previousSiblings = [];\n        for (const child of parent._getCompilerChildren()) {\n            if (child === this.compilerNode)\n                break;\n            previousSiblings.unshift(child);\n        }\n        return previousSiblings;\n    }\n    _getCompilerNextSiblings() {\n        let foundChild = false;\n        const parent = this.getParentSyntaxList() || this.getParentOrThrow();\n        const nextSiblings = [];\n        for (const child of parent._getCompilerChildren()) {\n            if (!foundChild) {\n                foundChild = child === this.compilerNode;\n                continue;\n            }\n            nextSiblings.push(child);\n        }\n        return nextSiblings;\n    }\n    _getCompilerPreviousSibling(condition) {\n        for (const sibling of this._getCompilerPreviousSiblings()) {\n            if (condition == null || condition(sibling))\n                return sibling;\n        }\n        return undefined;\n    }\n    _getCompilerNextSibling(condition) {\n        for (const sibling of this._getCompilerNextSiblings()) {\n            if (condition == null || condition(sibling))\n                return sibling;\n        }\n        return undefined;\n    }\n    _getCompilerChildAtIndex(index) {\n        const children = this._getCompilerChildren();\n        common.errors.throwIfOutOfRange(index, [0, children.length - 1], \"index\");\n        return children[index];\n    }\n    _getWriterWithIndentation() {\n        const writer = this._getWriter();\n        writer.setIndentationLevel(this.getIndentationLevel());\n        return writer;\n    }\n    _getWriterWithQueuedIndentation() {\n        const writer = this._getWriter();\n        writer.queueIndentationLevel(this.getIndentationLevel());\n        return writer;\n    }\n    _getWriterWithChildIndentation() {\n        const writer = this._getWriter();\n        writer.setIndentationLevel(this.getChildIndentationLevel());\n        return writer;\n    }\n    _getWriterWithQueuedChildIndentation() {\n        const writer = this._getWriter();\n        writer.queueIndentationLevel(this.getChildIndentationLevel());\n        return writer;\n    }\n    _getTextWithQueuedChildIndentation(textOrWriterFunc) {\n        const writer = this._getWriterWithQueuedChildIndentation();\n        if (typeof textOrWriterFunc === \"string\")\n            writer.write(textOrWriterFunc);\n        else\n            textOrWriterFunc(writer);\n        return writer.toString();\n    }\n    _getWriter() {\n        return this._context.createWriter();\n    }\n    _getNodeFromCompilerNode(compilerNode) {\n        return this._context.compilerFactory.getNodeFromCompilerNode(compilerNode, this._sourceFile);\n    }\n    _getNodeFromCompilerNodeIfExists(compilerNode) {\n        return compilerNode == null ? undefined : this._getNodeFromCompilerNode(compilerNode);\n    }\n    _ensureBound() {\n        if (this.compilerNode.symbol != null)\n            return;\n        this.getSymbol();\n    }\n    static hasExpression(node) {\n        var _a, _b;\n        return ((_b = (_a = node).getExpression) === null || _b === void 0 ? void 0 : _b.call(_a)) != null;\n    }\n    static hasName(node) {\n        var _a, _b;\n        return typeof ((_b = (_a = node).getName) === null || _b === void 0 ? void 0 : _b.call(_a)) === \"string\";\n    }\n    static hasBody(node) {\n        var _a, _b;\n        return ((_b = (_a = node).getBody) === null || _b === void 0 ? void 0 : _b.call(_a)) != null;\n    }\n    static hasStructure(node) {\n        return typeof node.getStructure === \"function\";\n    }\n    static is(kind) {\n        return (node) => {\n            return (node === null || node === void 0 ? void 0 : node.getKind()) == kind;\n        };\n    }\n    static isNode(value) {\n        return value != null && value.compilerNode != null;\n    }\n    static isCommentNode(node) {\n        const kind = node === null || node === void 0 ? void 0 : node.getKind();\n        return kind === common.SyntaxKind.SingleLineCommentTrivia || kind === common.SyntaxKind.MultiLineCommentTrivia;\n    }\n    static isCommentStatement(node) {\n        var _a;\n        return ((_a = node === null || node === void 0 ? void 0 : node.compilerNode) === null || _a === void 0 ? void 0 : _a._commentKind) === exports.CommentNodeKind.Statement;\n    }\n    static isCommentClassElement(node) {\n        var _a;\n        return ((_a = node === null || node === void 0 ? void 0 : node.compilerNode) === null || _a === void 0 ? void 0 : _a._commentKind) === exports.CommentNodeKind.ClassElement;\n    }\n    static isCommentTypeElement(node) {\n        var _a;\n        return ((_a = node === null || node === void 0 ? void 0 : node.compilerNode) === null || _a === void 0 ? void 0 : _a._commentKind) === exports.CommentNodeKind.TypeElement;\n    }\n    static isCommentObjectLiteralElement(node) {\n        var _a;\n        return ((_a = node === null || node === void 0 ? void 0 : node.compilerNode) === null || _a === void 0 ? void 0 : _a._commentKind) === exports.CommentNodeKind.ObjectLiteralElement;\n    }\n    static isCommentEnumMember(node) {\n        var _a;\n        return ((_a = node === null || node === void 0 ? void 0 : node.compilerNode) === null || _a === void 0 ? void 0 : _a._commentKind) == exports.CommentNodeKind.EnumMember;\n    }\n    static isAbstractable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.ConstructorType:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isAmbientable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.EnumDeclaration:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.TypeAliasDeclaration:\n            case common.SyntaxKind.VariableStatement:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isArgumented(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.CallExpression:\n            case common.SyntaxKind.NewExpression:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isArrayTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.ArrayType;\n    }\n    static isAssertionKeyNamed(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.AssertEntry;\n    }\n    static isAsyncable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrowFunction:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.MethodDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isAwaitable(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.ForOfStatement;\n    }\n    static isBindingNamed(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.BindingElement:\n            case common.SyntaxKind.Parameter:\n            case common.SyntaxKind.VariableDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isBodied(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrowFunction:\n            case common.SyntaxKind.ClassStaticBlockDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isBodyable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isCallSignatureDeclaration(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.CallSignature;\n    }\n    static isChildOrderable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.Block:\n            case common.SyntaxKind.BreakStatement:\n            case common.SyntaxKind.CallSignature:\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassStaticBlockDeclaration:\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.ConstructSignature:\n            case common.SyntaxKind.ContinueStatement:\n            case common.SyntaxKind.DebuggerStatement:\n            case common.SyntaxKind.DoStatement:\n            case common.SyntaxKind.EmptyStatement:\n            case common.SyntaxKind.EnumDeclaration:\n            case common.SyntaxKind.ExportAssignment:\n            case common.SyntaxKind.ExportDeclaration:\n            case common.SyntaxKind.ExpressionStatement:\n            case common.SyntaxKind.ForInStatement:\n            case common.SyntaxKind.ForOfStatement:\n            case common.SyntaxKind.ForStatement:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.IfStatement:\n            case common.SyntaxKind.ImportDeclaration:\n            case common.SyntaxKind.ImportEqualsDeclaration:\n            case common.SyntaxKind.IndexSignature:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.LabeledStatement:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.MethodSignature:\n            case common.SyntaxKind.ModuleBlock:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.NotEmittedStatement:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.PropertySignature:\n            case common.SyntaxKind.ReturnStatement:\n            case common.SyntaxKind.SetAccessor:\n            case common.SyntaxKind.SwitchStatement:\n            case common.SyntaxKind.ThrowStatement:\n            case common.SyntaxKind.TryStatement:\n            case common.SyntaxKind.TypeAliasDeclaration:\n            case common.SyntaxKind.VariableStatement:\n            case common.SyntaxKind.WhileStatement:\n            case common.SyntaxKind.WithStatement:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isClassLikeDeclarationBase(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassExpression:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isConditionalTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.ConditionalType;\n    }\n    static isConstructorDeclaration(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.Constructor;\n    }\n    static isConstructorTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.ConstructorType;\n    }\n    static isConstructSignatureDeclaration(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.ConstructSignature;\n    }\n    static isDecoratable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.Parameter:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isDotDotDotTokenable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.BindingElement:\n            case common.SyntaxKind.JsxExpression:\n            case common.SyntaxKind.NamedTupleMember:\n            case common.SyntaxKind.Parameter:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isExclamationTokenable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.VariableDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isExportable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.EnumDeclaration:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.TypeAliasDeclaration:\n            case common.SyntaxKind.VariableStatement:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isExportGetable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.EnumDeclaration:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.TypeAliasDeclaration:\n            case common.SyntaxKind.VariableDeclaration:\n            case common.SyntaxKind.VariableStatement:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isExpression(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.AnyKeyword:\n            case common.SyntaxKind.BooleanKeyword:\n            case common.SyntaxKind.NumberKeyword:\n            case common.SyntaxKind.ObjectKeyword:\n            case common.SyntaxKind.StringKeyword:\n            case common.SyntaxKind.SymbolKeyword:\n            case common.SyntaxKind.UndefinedKeyword:\n            case common.SyntaxKind.ArrayLiteralExpression:\n            case common.SyntaxKind.ArrowFunction:\n            case common.SyntaxKind.AsExpression:\n            case common.SyntaxKind.AwaitExpression:\n            case common.SyntaxKind.BigIntLiteral:\n            case common.SyntaxKind.BinaryExpression:\n            case common.SyntaxKind.CallExpression:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.CommaListExpression:\n            case common.SyntaxKind.ConditionalExpression:\n            case common.SyntaxKind.DeleteExpression:\n            case common.SyntaxKind.ElementAccessExpression:\n            case common.SyntaxKind.FalseKeyword:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.Identifier:\n            case common.SyntaxKind.ImportKeyword:\n            case common.SyntaxKind.JsxClosingFragment:\n            case common.SyntaxKind.JsxElement:\n            case common.SyntaxKind.JsxExpression:\n            case common.SyntaxKind.JsxFragment:\n            case common.SyntaxKind.JsxOpeningElement:\n            case common.SyntaxKind.JsxOpeningFragment:\n            case common.SyntaxKind.JsxSelfClosingElement:\n            case common.SyntaxKind.MetaProperty:\n            case common.SyntaxKind.NewExpression:\n            case common.SyntaxKind.NonNullExpression:\n            case common.SyntaxKind.NoSubstitutionTemplateLiteral:\n            case common.SyntaxKind.NullKeyword:\n            case common.SyntaxKind.NumericLiteral:\n            case common.SyntaxKind.ObjectLiteralExpression:\n            case common.SyntaxKind.OmittedExpression:\n            case common.SyntaxKind.ParenthesizedExpression:\n            case common.SyntaxKind.PartiallyEmittedExpression:\n            case common.SyntaxKind.PostfixUnaryExpression:\n            case common.SyntaxKind.PrefixUnaryExpression:\n            case common.SyntaxKind.PropertyAccessExpression:\n            case common.SyntaxKind.RegularExpressionLiteral:\n            case common.SyntaxKind.SpreadElement:\n            case common.SyntaxKind.StringLiteral:\n            case common.SyntaxKind.SuperKeyword:\n            case common.SyntaxKind.TaggedTemplateExpression:\n            case common.SyntaxKind.TemplateExpression:\n            case common.SyntaxKind.ThisKeyword:\n            case common.SyntaxKind.TrueKeyword:\n            case common.SyntaxKind.TypeAssertionExpression:\n            case common.SyntaxKind.TypeOfExpression:\n            case common.SyntaxKind.VoidExpression:\n            case common.SyntaxKind.YieldExpression:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isExpressionable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ExternalModuleReference:\n            case common.SyntaxKind.JsxExpression:\n            case common.SyntaxKind.ReturnStatement:\n            case common.SyntaxKind.YieldExpression:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isExpressioned(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.AsExpression:\n            case common.SyntaxKind.CaseClause:\n            case common.SyntaxKind.ComputedPropertyName:\n            case common.SyntaxKind.DoStatement:\n            case common.SyntaxKind.ExportAssignment:\n            case common.SyntaxKind.ExpressionStatement:\n            case common.SyntaxKind.ForInStatement:\n            case common.SyntaxKind.ForOfStatement:\n            case common.SyntaxKind.IfStatement:\n            case common.SyntaxKind.JsxSpreadAttribute:\n            case common.SyntaxKind.NonNullExpression:\n            case common.SyntaxKind.ParenthesizedExpression:\n            case common.SyntaxKind.PartiallyEmittedExpression:\n            case common.SyntaxKind.SpreadAssignment:\n            case common.SyntaxKind.SpreadElement:\n            case common.SyntaxKind.SwitchStatement:\n            case common.SyntaxKind.TemplateSpan:\n            case common.SyntaxKind.ThrowStatement:\n            case common.SyntaxKind.WhileStatement:\n            case common.SyntaxKind.WithStatement:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isExtendsClauseable(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.InterfaceDeclaration;\n    }\n    static isFalseLiteral(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.FalseKeyword;\n    }\n    static isFunctionLikeDeclaration(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrowFunction:\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isFunctionTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.FunctionType;\n    }\n    static isGeneratorable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.YieldExpression:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isGetAccessorDeclaration(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.GetAccessor;\n    }\n    static isHeritageClauseable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.InterfaceDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isImplementsClauseable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassExpression:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isImportExpression(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.ImportKeyword;\n    }\n    static isImportTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.ImportType;\n    }\n    static isIndexedAccessTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.IndexedAccessType;\n    }\n    static isIndexSignatureDeclaration(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.IndexSignature;\n    }\n    static isInferTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.InferType;\n    }\n    static isInitializerExpressionable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.BindingElement:\n            case common.SyntaxKind.EnumMember:\n            case common.SyntaxKind.Parameter:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.PropertySignature:\n            case common.SyntaxKind.VariableDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isInitializerExpressionGetable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.BindingElement:\n            case common.SyntaxKind.EnumMember:\n            case common.SyntaxKind.Parameter:\n            case common.SyntaxKind.PropertyAssignment:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.PropertySignature:\n            case common.SyntaxKind.ShorthandPropertyAssignment:\n            case common.SyntaxKind.VariableDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isIntersectionTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.IntersectionType;\n    }\n    static isIterationStatement(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.DoStatement:\n            case common.SyntaxKind.ForInStatement:\n            case common.SyntaxKind.ForOfStatement:\n            case common.SyntaxKind.ForStatement:\n            case common.SyntaxKind.WhileStatement:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isJSDoc(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.JSDoc;\n    }\n    static isJSDocable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrowFunction:\n            case common.SyntaxKind.CallSignature:\n            case common.SyntaxKind.CaseClause:\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.ClassStaticBlockDeclaration:\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.ConstructSignature:\n            case common.SyntaxKind.EnumDeclaration:\n            case common.SyntaxKind.EnumMember:\n            case common.SyntaxKind.ExpressionStatement:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.ImportEqualsDeclaration:\n            case common.SyntaxKind.IndexSignature:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.LabeledStatement:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.MethodSignature:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.NamedTupleMember:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.PropertySignature:\n            case common.SyntaxKind.SetAccessor:\n            case common.SyntaxKind.TypeAliasDeclaration:\n            case common.SyntaxKind.VariableStatement:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isJSDocPropertyLikeTag(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.JSDocParameterTag:\n            case common.SyntaxKind.JSDocPropertyTag:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isJSDocTag(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.JSDocAugmentsTag:\n            case common.SyntaxKind.JSDocAuthorTag:\n            case common.SyntaxKind.JSDocCallbackTag:\n            case common.SyntaxKind.JSDocClassTag:\n            case common.SyntaxKind.JSDocDeprecatedTag:\n            case common.SyntaxKind.JSDocEnumTag:\n            case common.SyntaxKind.JSDocImplementsTag:\n            case common.SyntaxKind.JSDocOverrideTag:\n            case common.SyntaxKind.JSDocParameterTag:\n            case common.SyntaxKind.JSDocPrivateTag:\n            case common.SyntaxKind.JSDocPropertyTag:\n            case common.SyntaxKind.JSDocProtectedTag:\n            case common.SyntaxKind.JSDocPublicTag:\n            case common.SyntaxKind.JSDocReadonlyTag:\n            case common.SyntaxKind.JSDocReturnTag:\n            case common.SyntaxKind.JSDocSeeTag:\n            case common.SyntaxKind.JSDocTemplateTag:\n            case common.SyntaxKind.JSDocThisTag:\n            case common.SyntaxKind.JSDocTypedefTag:\n            case common.SyntaxKind.JSDocTypeTag:\n            case common.SyntaxKind.JSDocTag:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isJSDocType(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.JSDocAllType:\n            case common.SyntaxKind.JSDocFunctionType:\n            case common.SyntaxKind.JSDocNamepathType:\n            case common.SyntaxKind.JSDocNonNullableType:\n            case common.SyntaxKind.JSDocNullableType:\n            case common.SyntaxKind.JSDocOptionalType:\n            case common.SyntaxKind.JSDocSignature:\n            case common.SyntaxKind.JSDocTypeLiteral:\n            case common.SyntaxKind.JSDocUnknownType:\n            case common.SyntaxKind.JSDocVariadicType:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isJSDocTypeExpressionableTag(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.JSDocReturnTag:\n            case common.SyntaxKind.JSDocSeeTag:\n            case common.SyntaxKind.JSDocThisTag:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isJSDocTypeParameteredTag(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.JSDocTemplateTag;\n    }\n    static isJSDocUnknownTag(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.JSDocTag;\n    }\n    static isJsxAttributed(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.JsxOpeningElement:\n            case common.SyntaxKind.JsxSelfClosingElement:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isJsxTagNamed(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.JsxClosingElement:\n            case common.SyntaxKind.JsxOpeningElement:\n            case common.SyntaxKind.JsxSelfClosingElement:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isLeftHandSideExpression(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrayLiteralExpression:\n            case common.SyntaxKind.BigIntLiteral:\n            case common.SyntaxKind.CallExpression:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.ElementAccessExpression:\n            case common.SyntaxKind.FalseKeyword:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.Identifier:\n            case common.SyntaxKind.ImportKeyword:\n            case common.SyntaxKind.JsxElement:\n            case common.SyntaxKind.JsxFragment:\n            case common.SyntaxKind.JsxSelfClosingElement:\n            case common.SyntaxKind.MetaProperty:\n            case common.SyntaxKind.NewExpression:\n            case common.SyntaxKind.NonNullExpression:\n            case common.SyntaxKind.NoSubstitutionTemplateLiteral:\n            case common.SyntaxKind.NullKeyword:\n            case common.SyntaxKind.NumericLiteral:\n            case common.SyntaxKind.ObjectLiteralExpression:\n            case common.SyntaxKind.PropertyAccessExpression:\n            case common.SyntaxKind.RegularExpressionLiteral:\n            case common.SyntaxKind.StringLiteral:\n            case common.SyntaxKind.SuperKeyword:\n            case common.SyntaxKind.TaggedTemplateExpression:\n            case common.SyntaxKind.TemplateExpression:\n            case common.SyntaxKind.ThisKeyword:\n            case common.SyntaxKind.TrueKeyword:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isLeftHandSideExpressioned(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.CallExpression:\n            case common.SyntaxKind.Decorator:\n            case common.SyntaxKind.ElementAccessExpression:\n            case common.SyntaxKind.ExpressionWithTypeArguments:\n            case common.SyntaxKind.NewExpression:\n            case common.SyntaxKind.PropertyAccessExpression:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isLiteralExpression(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.BigIntLiteral:\n            case common.SyntaxKind.NoSubstitutionTemplateLiteral:\n            case common.SyntaxKind.NumericLiteral:\n            case common.SyntaxKind.RegularExpressionLiteral:\n            case common.SyntaxKind.StringLiteral:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isLiteralLike(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.BigIntLiteral:\n            case common.SyntaxKind.JsxText:\n            case common.SyntaxKind.NoSubstitutionTemplateLiteral:\n            case common.SyntaxKind.NumericLiteral:\n            case common.SyntaxKind.RegularExpressionLiteral:\n            case common.SyntaxKind.StringLiteral:\n            case common.SyntaxKind.TemplateHead:\n            case common.SyntaxKind.TemplateMiddle:\n            case common.SyntaxKind.TemplateTail:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isLiteralTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.LiteralType;\n    }\n    static isMappedTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.MappedType;\n    }\n    static isMemberExpression(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrayLiteralExpression:\n            case common.SyntaxKind.BigIntLiteral:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.ElementAccessExpression:\n            case common.SyntaxKind.FalseKeyword:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.Identifier:\n            case common.SyntaxKind.ImportKeyword:\n            case common.SyntaxKind.JsxElement:\n            case common.SyntaxKind.JsxFragment:\n            case common.SyntaxKind.JsxSelfClosingElement:\n            case common.SyntaxKind.MetaProperty:\n            case common.SyntaxKind.NewExpression:\n            case common.SyntaxKind.NoSubstitutionTemplateLiteral:\n            case common.SyntaxKind.NullKeyword:\n            case common.SyntaxKind.NumericLiteral:\n            case common.SyntaxKind.ObjectLiteralExpression:\n            case common.SyntaxKind.PropertyAccessExpression:\n            case common.SyntaxKind.RegularExpressionLiteral:\n            case common.SyntaxKind.StringLiteral:\n            case common.SyntaxKind.SuperKeyword:\n            case common.SyntaxKind.TaggedTemplateExpression:\n            case common.SyntaxKind.TemplateExpression:\n            case common.SyntaxKind.ThisKeyword:\n            case common.SyntaxKind.TrueKeyword:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isModifierable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrowFunction:\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.ConstructorType:\n            case common.SyntaxKind.EnumDeclaration:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.IndexSignature:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.Parameter:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.PropertySignature:\n            case common.SyntaxKind.SetAccessor:\n            case common.SyntaxKind.TypeAliasDeclaration:\n            case common.SyntaxKind.TypeParameter:\n            case common.SyntaxKind.VariableDeclarationList:\n            case common.SyntaxKind.VariableStatement:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isModuleChildable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.EnumDeclaration:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.VariableStatement:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isModuled(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.SourceFile:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isModuleNamed(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.ModuleDeclaration;\n    }\n    static isNameable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isNamed(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.EnumDeclaration:\n            case common.SyntaxKind.ImportEqualsDeclaration:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.JsxAttribute:\n            case common.SyntaxKind.MetaProperty:\n            case common.SyntaxKind.NamedTupleMember:\n            case common.SyntaxKind.PropertyAccessExpression:\n            case common.SyntaxKind.ShorthandPropertyAssignment:\n            case common.SyntaxKind.TypeAliasDeclaration:\n            case common.SyntaxKind.TypeParameter:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isNodeWithTypeArguments(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ExpressionWithTypeArguments:\n            case common.SyntaxKind.ImportType:\n            case common.SyntaxKind.TypeQuery:\n            case common.SyntaxKind.TypeReference:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isNullLiteral(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.NullKeyword;\n    }\n    static isOverloadable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.MethodDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isOverrideable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.Parameter:\n            case common.SyntaxKind.PropertyDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isParameterDeclaration(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.Parameter;\n    }\n    static isParametered(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrowFunction:\n            case common.SyntaxKind.CallSignature:\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.ConstructorType:\n            case common.SyntaxKind.ConstructSignature:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.FunctionType:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.JSDocFunctionType:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.MethodSignature:\n            case common.SyntaxKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isParenthesizedTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.ParenthesizedType;\n    }\n    static isPrimaryExpression(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrayLiteralExpression:\n            case common.SyntaxKind.BigIntLiteral:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.FalseKeyword:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.Identifier:\n            case common.SyntaxKind.ImportKeyword:\n            case common.SyntaxKind.JsxElement:\n            case common.SyntaxKind.JsxFragment:\n            case common.SyntaxKind.JsxSelfClosingElement:\n            case common.SyntaxKind.MetaProperty:\n            case common.SyntaxKind.NewExpression:\n            case common.SyntaxKind.NoSubstitutionTemplateLiteral:\n            case common.SyntaxKind.NullKeyword:\n            case common.SyntaxKind.NumericLiteral:\n            case common.SyntaxKind.ObjectLiteralExpression:\n            case common.SyntaxKind.RegularExpressionLiteral:\n            case common.SyntaxKind.StringLiteral:\n            case common.SyntaxKind.SuperKeyword:\n            case common.SyntaxKind.TemplateExpression:\n            case common.SyntaxKind.ThisKeyword:\n            case common.SyntaxKind.TrueKeyword:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isPropertyNamed(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.EnumMember:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.MethodSignature:\n            case common.SyntaxKind.PropertyAssignment:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.PropertySignature:\n            case common.SyntaxKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isQuestionDotTokenable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.CallExpression:\n            case common.SyntaxKind.ElementAccessExpression:\n            case common.SyntaxKind.PropertyAccessExpression:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isQuestionTokenable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.MethodSignature:\n            case common.SyntaxKind.NamedTupleMember:\n            case common.SyntaxKind.Parameter:\n            case common.SyntaxKind.PropertyAssignment:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.PropertySignature:\n            case common.SyntaxKind.ShorthandPropertyAssignment:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isReadonlyable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.IndexSignature:\n            case common.SyntaxKind.Parameter:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.PropertySignature:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isReferenceFindable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.AssertEntry:\n            case common.SyntaxKind.BindingElement:\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.EnumDeclaration:\n            case common.SyntaxKind.EnumMember:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.Identifier:\n            case common.SyntaxKind.ImportEqualsDeclaration:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.JsxAttribute:\n            case common.SyntaxKind.MetaProperty:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.MethodSignature:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.NamedTupleMember:\n            case common.SyntaxKind.Parameter:\n            case common.SyntaxKind.PrivateIdentifier:\n            case common.SyntaxKind.PropertyAccessExpression:\n            case common.SyntaxKind.PropertyAssignment:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.PropertySignature:\n            case common.SyntaxKind.SetAccessor:\n            case common.SyntaxKind.ShorthandPropertyAssignment:\n            case common.SyntaxKind.TypeAliasDeclaration:\n            case common.SyntaxKind.TypeParameter:\n            case common.SyntaxKind.VariableDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isRenameable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.AssertEntry:\n            case common.SyntaxKind.BindingElement:\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.EnumDeclaration:\n            case common.SyntaxKind.EnumMember:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.Identifier:\n            case common.SyntaxKind.ImportEqualsDeclaration:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.JsxAttribute:\n            case common.SyntaxKind.MetaProperty:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.MethodSignature:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.NamedTupleMember:\n            case common.SyntaxKind.NamespaceExport:\n            case common.SyntaxKind.NamespaceImport:\n            case common.SyntaxKind.Parameter:\n            case common.SyntaxKind.PrivateIdentifier:\n            case common.SyntaxKind.PropertyAccessExpression:\n            case common.SyntaxKind.PropertyAssignment:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.PropertySignature:\n            case common.SyntaxKind.SetAccessor:\n            case common.SyntaxKind.ShorthandPropertyAssignment:\n            case common.SyntaxKind.TypeAliasDeclaration:\n            case common.SyntaxKind.TypeParameter:\n            case common.SyntaxKind.VariableDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isReturnTyped(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrowFunction:\n            case common.SyntaxKind.CallSignature:\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.ConstructorType:\n            case common.SyntaxKind.ConstructSignature:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.FunctionType:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.IndexSignature:\n            case common.SyntaxKind.JSDocFunctionType:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.MethodSignature:\n            case common.SyntaxKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isScopeable(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.Parameter;\n    }\n    static isScoped(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isSetAccessorDeclaration(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.SetAccessor;\n    }\n    static isSignaturedDeclaration(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrowFunction:\n            case common.SyntaxKind.CallSignature:\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.ConstructorType:\n            case common.SyntaxKind.ConstructSignature:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.FunctionType:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.JSDocFunctionType:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.MethodSignature:\n            case common.SyntaxKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isStatement(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.Block:\n            case common.SyntaxKind.BreakStatement:\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ContinueStatement:\n            case common.SyntaxKind.DebuggerStatement:\n            case common.SyntaxKind.DoStatement:\n            case common.SyntaxKind.EmptyStatement:\n            case common.SyntaxKind.EnumDeclaration:\n            case common.SyntaxKind.ExportAssignment:\n            case common.SyntaxKind.ExportDeclaration:\n            case common.SyntaxKind.ExpressionStatement:\n            case common.SyntaxKind.ForInStatement:\n            case common.SyntaxKind.ForOfStatement:\n            case common.SyntaxKind.ForStatement:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.IfStatement:\n            case common.SyntaxKind.ImportDeclaration:\n            case common.SyntaxKind.ImportEqualsDeclaration:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.LabeledStatement:\n            case common.SyntaxKind.ModuleBlock:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.NotEmittedStatement:\n            case common.SyntaxKind.ReturnStatement:\n            case common.SyntaxKind.SwitchStatement:\n            case common.SyntaxKind.ThrowStatement:\n            case common.SyntaxKind.TryStatement:\n            case common.SyntaxKind.TypeAliasDeclaration:\n            case common.SyntaxKind.VariableStatement:\n            case common.SyntaxKind.WhileStatement:\n            case common.SyntaxKind.WithStatement:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isStatemented(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrowFunction:\n            case common.SyntaxKind.Block:\n            case common.SyntaxKind.CaseClause:\n            case common.SyntaxKind.ClassStaticBlockDeclaration:\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.DefaultClause:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.ModuleBlock:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.SetAccessor:\n            case common.SyntaxKind.SourceFile:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isStaticable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isSuperExpression(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.SuperKeyword;\n    }\n    static isTemplateLiteralTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.TemplateLiteralType;\n    }\n    static isTextInsertable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrowFunction:\n            case common.SyntaxKind.Block:\n            case common.SyntaxKind.CaseBlock:\n            case common.SyntaxKind.CaseClause:\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.ClassStaticBlockDeclaration:\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.DefaultClause:\n            case common.SyntaxKind.EnumDeclaration:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.SetAccessor:\n            case common.SyntaxKind.SourceFile:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isThisExpression(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.ThisKeyword;\n    }\n    static isThisTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.ThisType;\n    }\n    static isTrueLiteral(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.TrueKeyword;\n    }\n    static isTupleTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.TupleType;\n    }\n    static isTypeArgumented(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.CallExpression:\n            case common.SyntaxKind.ExpressionWithTypeArguments:\n            case common.SyntaxKind.ImportType:\n            case common.SyntaxKind.NewExpression:\n            case common.SyntaxKind.TypeQuery:\n            case common.SyntaxKind.TypeReference:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isTypeAssertion(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.TypeAssertionExpression;\n    }\n    static isTyped(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.AsExpression:\n            case common.SyntaxKind.NamedTupleMember:\n            case common.SyntaxKind.Parameter:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.PropertySignature:\n            case common.SyntaxKind.TypeAliasDeclaration:\n            case common.SyntaxKind.TypeAssertionExpression:\n            case common.SyntaxKind.VariableDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isTypeElement(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.CallSignature:\n            case common.SyntaxKind.ConstructSignature:\n            case common.SyntaxKind.IndexSignature:\n            case common.SyntaxKind.MethodSignature:\n            case common.SyntaxKind.PropertySignature:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isTypeElementMembered(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.TypeLiteral:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isTypeLiteral(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.TypeLiteral;\n    }\n    static isTypeNode(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrayType:\n            case common.SyntaxKind.ConditionalType:\n            case common.SyntaxKind.ConstructorType:\n            case common.SyntaxKind.ExpressionWithTypeArguments:\n            case common.SyntaxKind.FunctionType:\n            case common.SyntaxKind.ImportType:\n            case common.SyntaxKind.IndexedAccessType:\n            case common.SyntaxKind.InferType:\n            case common.SyntaxKind.IntersectionType:\n            case common.SyntaxKind.JSDocAllType:\n            case common.SyntaxKind.JSDocFunctionType:\n            case common.SyntaxKind.JSDocNamepathType:\n            case common.SyntaxKind.JSDocNonNullableType:\n            case common.SyntaxKind.JSDocNullableType:\n            case common.SyntaxKind.JSDocOptionalType:\n            case common.SyntaxKind.JSDocSignature:\n            case common.SyntaxKind.JSDocTypeExpression:\n            case common.SyntaxKind.JSDocTypeLiteral:\n            case common.SyntaxKind.JSDocUnknownType:\n            case common.SyntaxKind.JSDocVariadicType:\n            case common.SyntaxKind.LiteralType:\n            case common.SyntaxKind.MappedType:\n            case common.SyntaxKind.NamedTupleMember:\n            case common.SyntaxKind.ParenthesizedType:\n            case common.SyntaxKind.TemplateLiteralType:\n            case common.SyntaxKind.ThisType:\n            case common.SyntaxKind.TupleType:\n            case common.SyntaxKind.TypeLiteral:\n            case common.SyntaxKind.TypeOperator:\n            case common.SyntaxKind.TypePredicate:\n            case common.SyntaxKind.TypeQuery:\n            case common.SyntaxKind.TypeReference:\n            case common.SyntaxKind.UnionType:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isTypeOperatorTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.TypeOperator;\n    }\n    static isTypeParameterDeclaration(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.TypeParameter;\n    }\n    static isTypeParametered(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrowFunction:\n            case common.SyntaxKind.CallSignature:\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.ConstructSignature:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.FunctionType:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.MethodSignature:\n            case common.SyntaxKind.SetAccessor:\n            case common.SyntaxKind.TypeAliasDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isTypePredicate(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.TypePredicate;\n    }\n    static isTypeQuery(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.TypeQuery;\n    }\n    static isTypeReference(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.TypeReference;\n    }\n    static isUnaryExpression(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrayLiteralExpression:\n            case common.SyntaxKind.AwaitExpression:\n            case common.SyntaxKind.BigIntLiteral:\n            case common.SyntaxKind.CallExpression:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.DeleteExpression:\n            case common.SyntaxKind.ElementAccessExpression:\n            case common.SyntaxKind.FalseKeyword:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.Identifier:\n            case common.SyntaxKind.ImportKeyword:\n            case common.SyntaxKind.JsxElement:\n            case common.SyntaxKind.JsxFragment:\n            case common.SyntaxKind.JsxSelfClosingElement:\n            case common.SyntaxKind.MetaProperty:\n            case common.SyntaxKind.NewExpression:\n            case common.SyntaxKind.NonNullExpression:\n            case common.SyntaxKind.NoSubstitutionTemplateLiteral:\n            case common.SyntaxKind.NullKeyword:\n            case common.SyntaxKind.NumericLiteral:\n            case common.SyntaxKind.ObjectLiteralExpression:\n            case common.SyntaxKind.PostfixUnaryExpression:\n            case common.SyntaxKind.PrefixUnaryExpression:\n            case common.SyntaxKind.PropertyAccessExpression:\n            case common.SyntaxKind.RegularExpressionLiteral:\n            case common.SyntaxKind.StringLiteral:\n            case common.SyntaxKind.SuperKeyword:\n            case common.SyntaxKind.TaggedTemplateExpression:\n            case common.SyntaxKind.TemplateExpression:\n            case common.SyntaxKind.ThisKeyword:\n            case common.SyntaxKind.TrueKeyword:\n            case common.SyntaxKind.TypeAssertionExpression:\n            case common.SyntaxKind.TypeOfExpression:\n            case common.SyntaxKind.VoidExpression:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isUnaryExpressioned(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.AwaitExpression:\n            case common.SyntaxKind.DeleteExpression:\n            case common.SyntaxKind.TypeAssertionExpression:\n            case common.SyntaxKind.TypeOfExpression:\n            case common.SyntaxKind.VoidExpression:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isUnionTypeNode(node) {\n        return (node === null || node === void 0 ? void 0 : node.getKind()) === common.SyntaxKind.UnionType;\n    }\n    static isUnwrappable(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.ModuleDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static isUpdateExpression(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.ArrayLiteralExpression:\n            case common.SyntaxKind.BigIntLiteral:\n            case common.SyntaxKind.CallExpression:\n            case common.SyntaxKind.ClassExpression:\n            case common.SyntaxKind.ElementAccessExpression:\n            case common.SyntaxKind.FalseKeyword:\n            case common.SyntaxKind.FunctionExpression:\n            case common.SyntaxKind.Identifier:\n            case common.SyntaxKind.ImportKeyword:\n            case common.SyntaxKind.JsxElement:\n            case common.SyntaxKind.JsxFragment:\n            case common.SyntaxKind.JsxSelfClosingElement:\n            case common.SyntaxKind.MetaProperty:\n            case common.SyntaxKind.NewExpression:\n            case common.SyntaxKind.NonNullExpression:\n            case common.SyntaxKind.NoSubstitutionTemplateLiteral:\n            case common.SyntaxKind.NullKeyword:\n            case common.SyntaxKind.NumericLiteral:\n            case common.SyntaxKind.ObjectLiteralExpression:\n            case common.SyntaxKind.PropertyAccessExpression:\n            case common.SyntaxKind.RegularExpressionLiteral:\n            case common.SyntaxKind.StringLiteral:\n            case common.SyntaxKind.SuperKeyword:\n            case common.SyntaxKind.TaggedTemplateExpression:\n            case common.SyntaxKind.TemplateExpression:\n            case common.SyntaxKind.ThisKeyword:\n            case common.SyntaxKind.TrueKeyword:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static _hasStructure(node) {\n        switch (node === null || node === void 0 ? void 0 : node.getKind()) {\n            case common.SyntaxKind.AssertEntry:\n            case common.SyntaxKind.CallSignature:\n            case common.SyntaxKind.ClassDeclaration:\n            case common.SyntaxKind.ClassStaticBlockDeclaration:\n            case common.SyntaxKind.Constructor:\n            case common.SyntaxKind.ConstructSignature:\n            case common.SyntaxKind.Decorator:\n            case common.SyntaxKind.EnumDeclaration:\n            case common.SyntaxKind.EnumMember:\n            case common.SyntaxKind.ExportAssignment:\n            case common.SyntaxKind.ExportDeclaration:\n            case common.SyntaxKind.ExportSpecifier:\n            case common.SyntaxKind.FunctionDeclaration:\n            case common.SyntaxKind.GetAccessor:\n            case common.SyntaxKind.ImportDeclaration:\n            case common.SyntaxKind.ImportSpecifier:\n            case common.SyntaxKind.IndexSignature:\n            case common.SyntaxKind.InterfaceDeclaration:\n            case common.SyntaxKind.JSDoc:\n            case common.SyntaxKind.JsxAttribute:\n            case common.SyntaxKind.JsxElement:\n            case common.SyntaxKind.JsxSelfClosingElement:\n            case common.SyntaxKind.JsxSpreadAttribute:\n            case common.SyntaxKind.MethodDeclaration:\n            case common.SyntaxKind.MethodSignature:\n            case common.SyntaxKind.ModuleDeclaration:\n            case common.SyntaxKind.Parameter:\n            case common.SyntaxKind.PropertyAssignment:\n            case common.SyntaxKind.PropertyDeclaration:\n            case common.SyntaxKind.PropertySignature:\n            case common.SyntaxKind.SetAccessor:\n            case common.SyntaxKind.ShorthandPropertyAssignment:\n            case common.SyntaxKind.SourceFile:\n            case common.SyntaxKind.SpreadAssignment:\n            case common.SyntaxKind.TypeAliasDeclaration:\n            case common.SyntaxKind.TypeParameter:\n            case common.SyntaxKind.VariableDeclaration:\n            case common.SyntaxKind.VariableStatement:\n                return true;\n            default:\n                return false;\n        }\n    }\n}\nNode.isAnyKeyword = Node.is(common.SyntaxKind.AnyKeyword);\nNode.isArrayBindingPattern = Node.is(common.SyntaxKind.ArrayBindingPattern);\nNode.isArrayLiteralExpression = Node.is(common.SyntaxKind.ArrayLiteralExpression);\nNode.isArrowFunction = Node.is(common.SyntaxKind.ArrowFunction);\nNode.isAsExpression = Node.is(common.SyntaxKind.AsExpression);\nNode.isAssertClause = Node.is(common.SyntaxKind.AssertClause);\nNode.isAssertEntry = Node.is(common.SyntaxKind.AssertEntry);\nNode.isAwaitExpression = Node.is(common.SyntaxKind.AwaitExpression);\nNode.isBigIntLiteral = Node.is(common.SyntaxKind.BigIntLiteral);\nNode.isBinaryExpression = Node.is(common.SyntaxKind.BinaryExpression);\nNode.isBindingElement = Node.is(common.SyntaxKind.BindingElement);\nNode.isBlock = Node.is(common.SyntaxKind.Block);\nNode.isBooleanKeyword = Node.is(common.SyntaxKind.BooleanKeyword);\nNode.isBreakStatement = Node.is(common.SyntaxKind.BreakStatement);\nNode.isCallExpression = Node.is(common.SyntaxKind.CallExpression);\nNode.isCaseBlock = Node.is(common.SyntaxKind.CaseBlock);\nNode.isCaseClause = Node.is(common.SyntaxKind.CaseClause);\nNode.isCatchClause = Node.is(common.SyntaxKind.CatchClause);\nNode.isClassDeclaration = Node.is(common.SyntaxKind.ClassDeclaration);\nNode.isClassExpression = Node.is(common.SyntaxKind.ClassExpression);\nNode.isClassStaticBlockDeclaration = Node.is(common.SyntaxKind.ClassStaticBlockDeclaration);\nNode.isCommaListExpression = Node.is(common.SyntaxKind.CommaListExpression);\nNode.isComputedPropertyName = Node.is(common.SyntaxKind.ComputedPropertyName);\nNode.isConditionalExpression = Node.is(common.SyntaxKind.ConditionalExpression);\nNode.isContinueStatement = Node.is(common.SyntaxKind.ContinueStatement);\nNode.isDebuggerStatement = Node.is(common.SyntaxKind.DebuggerStatement);\nNode.isDecorator = Node.is(common.SyntaxKind.Decorator);\nNode.isDefaultClause = Node.is(common.SyntaxKind.DefaultClause);\nNode.isDeleteExpression = Node.is(common.SyntaxKind.DeleteExpression);\nNode.isDoStatement = Node.is(common.SyntaxKind.DoStatement);\nNode.isElementAccessExpression = Node.is(common.SyntaxKind.ElementAccessExpression);\nNode.isEmptyStatement = Node.is(common.SyntaxKind.EmptyStatement);\nNode.isEnumDeclaration = Node.is(common.SyntaxKind.EnumDeclaration);\nNode.isEnumMember = Node.is(common.SyntaxKind.EnumMember);\nNode.isExportAssignment = Node.is(common.SyntaxKind.ExportAssignment);\nNode.isExportDeclaration = Node.is(common.SyntaxKind.ExportDeclaration);\nNode.isExportSpecifier = Node.is(common.SyntaxKind.ExportSpecifier);\nNode.isExpressionStatement = Node.is(common.SyntaxKind.ExpressionStatement);\nNode.isExpressionWithTypeArguments = Node.is(common.SyntaxKind.ExpressionWithTypeArguments);\nNode.isExternalModuleReference = Node.is(common.SyntaxKind.ExternalModuleReference);\nNode.isForInStatement = Node.is(common.SyntaxKind.ForInStatement);\nNode.isForOfStatement = Node.is(common.SyntaxKind.ForOfStatement);\nNode.isForStatement = Node.is(common.SyntaxKind.ForStatement);\nNode.isFunctionDeclaration = Node.is(common.SyntaxKind.FunctionDeclaration);\nNode.isFunctionExpression = Node.is(common.SyntaxKind.FunctionExpression);\nNode.isHeritageClause = Node.is(common.SyntaxKind.HeritageClause);\nNode.isIdentifier = Node.is(common.SyntaxKind.Identifier);\nNode.isIfStatement = Node.is(common.SyntaxKind.IfStatement);\nNode.isImportClause = Node.is(common.SyntaxKind.ImportClause);\nNode.isImportDeclaration = Node.is(common.SyntaxKind.ImportDeclaration);\nNode.isImportEqualsDeclaration = Node.is(common.SyntaxKind.ImportEqualsDeclaration);\nNode.isImportSpecifier = Node.is(common.SyntaxKind.ImportSpecifier);\nNode.isImportTypeAssertionContainer = Node.is(common.SyntaxKind.ImportTypeAssertionContainer);\nNode.isInferKeyword = Node.is(common.SyntaxKind.InferKeyword);\nNode.isInterfaceDeclaration = Node.is(common.SyntaxKind.InterfaceDeclaration);\nNode.isJSDocAllType = Node.is(common.SyntaxKind.JSDocAllType);\nNode.isJSDocAugmentsTag = Node.is(common.SyntaxKind.JSDocAugmentsTag);\nNode.isJSDocAuthorTag = Node.is(common.SyntaxKind.JSDocAuthorTag);\nNode.isJSDocCallbackTag = Node.is(common.SyntaxKind.JSDocCallbackTag);\nNode.isJSDocClassTag = Node.is(common.SyntaxKind.JSDocClassTag);\nNode.isJSDocDeprecatedTag = Node.is(common.SyntaxKind.JSDocDeprecatedTag);\nNode.isJSDocEnumTag = Node.is(common.SyntaxKind.JSDocEnumTag);\nNode.isJSDocFunctionType = Node.is(common.SyntaxKind.JSDocFunctionType);\nNode.isJSDocImplementsTag = Node.is(common.SyntaxKind.JSDocImplementsTag);\nNode.isJSDocLink = Node.is(common.SyntaxKind.JSDocLink);\nNode.isJSDocLinkCode = Node.is(common.SyntaxKind.JSDocLinkCode);\nNode.isJSDocLinkPlain = Node.is(common.SyntaxKind.JSDocLinkPlain);\nNode.isJSDocMemberName = Node.is(common.SyntaxKind.JSDocMemberName);\nNode.isJSDocNamepathType = Node.is(common.SyntaxKind.JSDocNamepathType);\nNode.isJSDocNameReference = Node.is(common.SyntaxKind.JSDocNameReference);\nNode.isJSDocNonNullableType = Node.is(common.SyntaxKind.JSDocNonNullableType);\nNode.isJSDocNullableType = Node.is(common.SyntaxKind.JSDocNullableType);\nNode.isJSDocOptionalType = Node.is(common.SyntaxKind.JSDocOptionalType);\nNode.isJSDocOverrideTag = Node.is(common.SyntaxKind.JSDocOverrideTag);\nNode.isJSDocParameterTag = Node.is(common.SyntaxKind.JSDocParameterTag);\nNode.isJSDocPrivateTag = Node.is(common.SyntaxKind.JSDocPrivateTag);\nNode.isJSDocPropertyTag = Node.is(common.SyntaxKind.JSDocPropertyTag);\nNode.isJSDocProtectedTag = Node.is(common.SyntaxKind.JSDocProtectedTag);\nNode.isJSDocPublicTag = Node.is(common.SyntaxKind.JSDocPublicTag);\nNode.isJSDocReadonlyTag = Node.is(common.SyntaxKind.JSDocReadonlyTag);\nNode.isJSDocReturnTag = Node.is(common.SyntaxKind.JSDocReturnTag);\nNode.isJSDocSeeTag = Node.is(common.SyntaxKind.JSDocSeeTag);\nNode.isJSDocSignature = Node.is(common.SyntaxKind.JSDocSignature);\nNode.isJSDocTemplateTag = Node.is(common.SyntaxKind.JSDocTemplateTag);\nNode.isJSDocText = Node.is(common.SyntaxKind.JSDocText);\nNode.isJSDocThisTag = Node.is(common.SyntaxKind.JSDocThisTag);\nNode.isJSDocTypedefTag = Node.is(common.SyntaxKind.JSDocTypedefTag);\nNode.isJSDocTypeExpression = Node.is(common.SyntaxKind.JSDocTypeExpression);\nNode.isJSDocTypeLiteral = Node.is(common.SyntaxKind.JSDocTypeLiteral);\nNode.isJSDocTypeTag = Node.is(common.SyntaxKind.JSDocTypeTag);\nNode.isJSDocUnknownType = Node.is(common.SyntaxKind.JSDocUnknownType);\nNode.isJSDocVariadicType = Node.is(common.SyntaxKind.JSDocVariadicType);\nNode.isJsxAttribute = Node.is(common.SyntaxKind.JsxAttribute);\nNode.isJsxClosingElement = Node.is(common.SyntaxKind.JsxClosingElement);\nNode.isJsxClosingFragment = Node.is(common.SyntaxKind.JsxClosingFragment);\nNode.isJsxElement = Node.is(common.SyntaxKind.JsxElement);\nNode.isJsxExpression = Node.is(common.SyntaxKind.JsxExpression);\nNode.isJsxFragment = Node.is(common.SyntaxKind.JsxFragment);\nNode.isJsxOpeningElement = Node.is(common.SyntaxKind.JsxOpeningElement);\nNode.isJsxOpeningFragment = Node.is(common.SyntaxKind.JsxOpeningFragment);\nNode.isJsxSelfClosingElement = Node.is(common.SyntaxKind.JsxSelfClosingElement);\nNode.isJsxSpreadAttribute = Node.is(common.SyntaxKind.JsxSpreadAttribute);\nNode.isJsxText = Node.is(common.SyntaxKind.JsxText);\nNode.isLabeledStatement = Node.is(common.SyntaxKind.LabeledStatement);\nNode.isMetaProperty = Node.is(common.SyntaxKind.MetaProperty);\nNode.isMethodDeclaration = Node.is(common.SyntaxKind.MethodDeclaration);\nNode.isMethodSignature = Node.is(common.SyntaxKind.MethodSignature);\nNode.isModuleBlock = Node.is(common.SyntaxKind.ModuleBlock);\nNode.isModuleDeclaration = Node.is(common.SyntaxKind.ModuleDeclaration);\nNode.isNamedExports = Node.is(common.SyntaxKind.NamedExports);\nNode.isNamedImports = Node.is(common.SyntaxKind.NamedImports);\nNode.isNamedTupleMember = Node.is(common.SyntaxKind.NamedTupleMember);\nNode.isNamespaceExport = Node.is(common.SyntaxKind.NamespaceExport);\nNode.isNamespaceImport = Node.is(common.SyntaxKind.NamespaceImport);\nNode.isNeverKeyword = Node.is(common.SyntaxKind.NeverKeyword);\nNode.isNewExpression = Node.is(common.SyntaxKind.NewExpression);\nNode.isNonNullExpression = Node.is(common.SyntaxKind.NonNullExpression);\nNode.isNoSubstitutionTemplateLiteral = Node.is(common.SyntaxKind.NoSubstitutionTemplateLiteral);\nNode.isNotEmittedStatement = Node.is(common.SyntaxKind.NotEmittedStatement);\nNode.isNumberKeyword = Node.is(common.SyntaxKind.NumberKeyword);\nNode.isNumericLiteral = Node.is(common.SyntaxKind.NumericLiteral);\nNode.isObjectBindingPattern = Node.is(common.SyntaxKind.ObjectBindingPattern);\nNode.isObjectKeyword = Node.is(common.SyntaxKind.ObjectKeyword);\nNode.isObjectLiteralExpression = Node.is(common.SyntaxKind.ObjectLiteralExpression);\nNode.isOmittedExpression = Node.is(common.SyntaxKind.OmittedExpression);\nNode.isParenthesizedExpression = Node.is(common.SyntaxKind.ParenthesizedExpression);\nNode.isPartiallyEmittedExpression = Node.is(common.SyntaxKind.PartiallyEmittedExpression);\nNode.isPostfixUnaryExpression = Node.is(common.SyntaxKind.PostfixUnaryExpression);\nNode.isPrefixUnaryExpression = Node.is(common.SyntaxKind.PrefixUnaryExpression);\nNode.isPrivateIdentifier = Node.is(common.SyntaxKind.PrivateIdentifier);\nNode.isPropertyAccessExpression = Node.is(common.SyntaxKind.PropertyAccessExpression);\nNode.isPropertyAssignment = Node.is(common.SyntaxKind.PropertyAssignment);\nNode.isPropertyDeclaration = Node.is(common.SyntaxKind.PropertyDeclaration);\nNode.isPropertySignature = Node.is(common.SyntaxKind.PropertySignature);\nNode.isQualifiedName = Node.is(common.SyntaxKind.QualifiedName);\nNode.isRegularExpressionLiteral = Node.is(common.SyntaxKind.RegularExpressionLiteral);\nNode.isReturnStatement = Node.is(common.SyntaxKind.ReturnStatement);\nNode.isSemicolonToken = Node.is(common.SyntaxKind.SemicolonToken);\nNode.isShorthandPropertyAssignment = Node.is(common.SyntaxKind.ShorthandPropertyAssignment);\nNode.isSourceFile = Node.is(common.SyntaxKind.SourceFile);\nNode.isSpreadAssignment = Node.is(common.SyntaxKind.SpreadAssignment);\nNode.isSpreadElement = Node.is(common.SyntaxKind.SpreadElement);\nNode.isStringKeyword = Node.is(common.SyntaxKind.StringKeyword);\nNode.isStringLiteral = Node.is(common.SyntaxKind.StringLiteral);\nNode.isSwitchStatement = Node.is(common.SyntaxKind.SwitchStatement);\nNode.isSymbolKeyword = Node.is(common.SyntaxKind.SymbolKeyword);\nNode.isSyntaxList = Node.is(common.SyntaxKind.SyntaxList);\nNode.isTaggedTemplateExpression = Node.is(common.SyntaxKind.TaggedTemplateExpression);\nNode.isTemplateExpression = Node.is(common.SyntaxKind.TemplateExpression);\nNode.isTemplateHead = Node.is(common.SyntaxKind.TemplateHead);\nNode.isTemplateMiddle = Node.is(common.SyntaxKind.TemplateMiddle);\nNode.isTemplateSpan = Node.is(common.SyntaxKind.TemplateSpan);\nNode.isTemplateTail = Node.is(common.SyntaxKind.TemplateTail);\nNode.isThrowStatement = Node.is(common.SyntaxKind.ThrowStatement);\nNode.isTryStatement = Node.is(common.SyntaxKind.TryStatement);\nNode.isTypeAliasDeclaration = Node.is(common.SyntaxKind.TypeAliasDeclaration);\nNode.isTypeOfExpression = Node.is(common.SyntaxKind.TypeOfExpression);\nNode.isUndefinedKeyword = Node.is(common.SyntaxKind.UndefinedKeyword);\nNode.isVariableDeclaration = Node.is(common.SyntaxKind.VariableDeclaration);\nNode.isVariableDeclarationList = Node.is(common.SyntaxKind.VariableDeclarationList);\nNode.isVariableStatement = Node.is(common.SyntaxKind.VariableStatement);\nNode.isVoidExpression = Node.is(common.SyntaxKind.VoidExpression);\nNode.isWhileStatement = Node.is(common.SyntaxKind.WhileStatement);\nNode.isWithStatement = Node.is(common.SyntaxKind.WithStatement);\nNode.isYieldExpression = Node.is(common.SyntaxKind.YieldExpression);\nfunction getWrappedCondition(thisNode, condition) {\n    return condition == null ? undefined : ((c) => condition(thisNode._getNodeFromCompilerNode(c)));\n}\nfunction insertWhiteSpaceTextAtPos(node, insertPos, textOrWriterFunction, methodName) {\n    const parent = Node.isSourceFile(node) ? node.getChildSyntaxListOrThrow() : node.getParentSyntaxList() || node.getParentOrThrow();\n    const newText = getTextFromStringOrWriter(node._getWriterWithQueuedIndentation(), textOrWriterFunction);\n    if (!/^[\\s\\r\\n]*$/.test(newText))\n        throw new common.errors.InvalidOperationError(`Cannot insert non-whitespace into ${methodName}.`);\n    insertIntoParentTextRange({\n        parent,\n        insertPos,\n        newText,\n    });\n}\nfunction* getCompilerForEachDescendantsIterator(node) {\n    for (const child of getForEachChildren()) {\n        yield child;\n        yield* getCompilerForEachDescendantsIterator(child);\n    }\n    function getForEachChildren() {\n        const children = [];\n        node.forEachChild(child => {\n            children.push(child);\n        });\n        return children;\n    }\n}\nfunction* getCompilerDescendantsIterator(node, sourceFile) {\n    for (const child of ExtendedParser.getCompilerChildren(node, sourceFile)) {\n        yield child;\n        yield* getCompilerDescendantsIterator(child, sourceFile);\n    }\n}\nfunction useParseTreeSearchForKind(thisNodeOrSyntaxKind, searchingKind) {\n    return searchingKind >= common.SyntaxKind.FirstNode && searchingKind < common.SyntaxKind.FirstJSDocNode\n        && getThisKind() !== common.SyntaxKind.SyntaxList;\n    function getThisKind() {\n        if (typeof thisNodeOrSyntaxKind === \"number\")\n            return thisNodeOrSyntaxKind;\n        return thisNodeOrSyntaxKind.compilerNode.kind;\n    }\n}\n\nexports.Scope = void 0;\n(function (Scope) {\n    Scope[\"Public\"] = \"public\";\n    Scope[\"Protected\"] = \"protected\";\n    Scope[\"Private\"] = \"private\";\n})(exports.Scope || (exports.Scope = {}));\n\nclass SyntaxList extends Node {\n    addChildText(textOrWriterFunction) {\n        return this.insertChildText(this.getChildCount(), textOrWriterFunction);\n    }\n    insertChildText(index, textOrWriterFunction) {\n        const initialChildCount = this.getChildCount();\n        const newLineKind = this._context.manipulationSettings.getNewLineKindAsString();\n        const parent = this.getParentOrThrow();\n        index = verifyAndGetIndex(index, initialChildCount);\n        const isInline = this !== parent.getChildSyntaxList();\n        let insertText = getTextFromStringOrWriter(isInline ? parent._getWriterWithQueuedChildIndentation() : parent._getWriterWithChildIndentation(), textOrWriterFunction);\n        if (insertText.length === 0)\n            return [];\n        if (isInline) {\n            if (index === 0)\n                insertText += \" \";\n            else\n                insertText = \" \" + insertText;\n        }\n        else {\n            if (index === 0 && Node.isSourceFile(parent)) {\n                if (!insertText.endsWith(\"\\n\"))\n                    insertText += newLineKind;\n            }\n            else {\n                insertText = newLineKind + insertText;\n                if (!Node.isSourceFile(parent) && index === initialChildCount && insertText.endsWith(\"\\n\"))\n                    insertText = insertText.replace(/\\r?\\n$/, \"\");\n            }\n        }\n        const insertPos = getInsertPosFromIndex(index, this, this.getChildren());\n        insertIntoParentTextRange({\n            insertPos,\n            newText: insertText,\n            parent: this,\n        });\n        const finalChildren = this.getChildren();\n        return getNodesToReturn(initialChildCount, finalChildren, index, true);\n    }\n}\n\nfunction renameNode(node, newName, options) {\n    common.errors.throwIfWhitespaceOrNotString(newName, \"newName\");\n    if (node.getText() === newName)\n        return;\n    const renameLocations = node._context.languageService.findRenameLocations(node, options);\n    const renameLocationsBySourceFile = new common.KeyValueCache();\n    for (const renameLocation of renameLocations) {\n        const locations = renameLocationsBySourceFile.getOrCreate(renameLocation.getSourceFile(), () => []);\n        locations.push(renameLocation);\n    }\n    for (const [sourceFile, locations] of renameLocationsBySourceFile.getEntries()) {\n        replaceSourceFileTextForRename({\n            sourceFile,\n            renameLocations: locations,\n            newName,\n        });\n    }\n}\n\nfunction setBodyTextForNode(body, textOrWriterFunction) {\n    const newText = getBodyText(body._getWriterWithIndentation(), textOrWriterFunction);\n    const openBrace = body.getFirstChildByKindOrThrow(common.SyntaxKind.OpenBraceToken);\n    const closeBrace = body.getFirstChildByKindOrThrow(common.SyntaxKind.CloseBraceToken);\n    insertIntoParentTextRange({\n        insertPos: openBrace.getEnd(),\n        newText,\n        parent: body,\n        replacing: {\n            textLength: closeBrace.getStart() - openBrace.getEnd(),\n        },\n    });\n}\n\nfunction BodiedNode(Base) {\n    return class extends Base {\n        getBody() {\n            const body = this.compilerNode.body;\n            if (body == null)\n                throw new common.errors.InvalidOperationError(\"Bodied node should have a body.\");\n            return this._getNodeFromCompilerNode(body);\n        }\n        setBodyText(textOrWriterFunction) {\n            const body = this.getBody();\n            setBodyTextForNode(body, textOrWriterFunction);\n            return this;\n        }\n        getBodyText() {\n            return getBodyTextWithoutLeadingIndentation(this.getBody());\n        }\n    };\n}\n\nfunction BodyableNode(Base) {\n    return class extends Base {\n        getBodyOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getBody(), \"Expected to find the node's body.\");\n        }\n        getBody() {\n            return this._getNodeFromCompilerNodeIfExists(this.compilerNode.body);\n        }\n        getBodyText() {\n            const body = this.getBody();\n            return body == null ? undefined : getBodyTextWithoutLeadingIndentation(body);\n        }\n        setBodyText(textOrWriterFunction) {\n            this.addBody();\n            setBodyTextForNode(this.getBodyOrThrow(), textOrWriterFunction);\n            return this;\n        }\n        hasBody() {\n            return this.compilerNode.body != null;\n        }\n        addBody() {\n            var _a;\n            if (this.hasBody())\n                return this;\n            const semiColon = this.getLastChildByKind(common.SyntaxKind.SemicolonToken);\n            insertIntoParentTextRange({\n                parent: this,\n                insertPos: semiColon == null ? this.getEnd() : semiColon.getStart(),\n                newText: this._getWriterWithQueuedIndentation().space().block().toString(),\n                replacing: {\n                    textLength: (_a = semiColon === null || semiColon === void 0 ? void 0 : semiColon.getFullWidth()) !== null && _a !== void 0 ? _a : 0,\n                },\n            });\n            return this;\n        }\n        removeBody() {\n            const body = this.getBody();\n            if (body == null)\n                return this;\n            insertIntoParentTextRange({\n                parent: this,\n                insertPos: body.getPos(),\n                newText: \";\",\n                replacing: {\n                    textLength: body.getFullWidth(),\n                },\n            });\n            return this;\n        }\n    };\n}\n\nfunction ChildOrderableNode(Base) {\n    return class extends Base {\n        setOrder(order) {\n            const childIndex = this.getChildIndex();\n            const parent = this.getParentSyntaxList() || this.getParentSyntaxListOrThrow();\n            common.errors.throwIfOutOfRange(order, [0, parent.getChildCount() - 1], \"order\");\n            if (childIndex === order)\n                return this;\n            changeChildOrder({\n                parent,\n                getSiblingFormatting: getGeneralFormatting,\n                oldIndex: childIndex,\n                newIndex: order,\n            });\n            return this;\n        }\n    };\n}\n\nfunction DecoratableNode(Base) {\n    return class extends Base {\n        getDecorator(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getDecorators(), nameOrFindFunction);\n        }\n        getDecoratorOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getDecorator(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"decorator\", nameOrFindFunction));\n        }\n        getDecorators() {\n            var _a, _b;\n            return (_b = (_a = this.compilerNode.decorators) === null || _a === void 0 ? void 0 : _a.map(d => this._getNodeFromCompilerNode(d))) !== null && _b !== void 0 ? _b : [];\n        }\n        addDecorator(structure) {\n            return this.insertDecorator(getEndIndexFromArray(this.compilerNode.decorators), structure);\n        }\n        addDecorators(structures) {\n            return this.insertDecorators(getEndIndexFromArray(this.compilerNode.decorators), structures);\n        }\n        insertDecorator(index, structure) {\n            return this.insertDecorators(index, [structure])[0];\n        }\n        insertDecorators(index, structures) {\n            if (common.ArrayUtils.isNullOrEmpty(structures))\n                return [];\n            const decoratorLines = getDecoratorLines(this, structures);\n            const decorators = this.getDecorators();\n            index = verifyAndGetIndex(index, decorators.length);\n            const formattingKind = getDecoratorFormattingKind(this, decorators);\n            const previousDecorator = decorators[index - 1];\n            const decoratorCode = getNewInsertCode({\n                structures,\n                newCodes: decoratorLines,\n                parent: this,\n                indentationText: this.getIndentationText(),\n                getSeparator: () => formattingKind,\n                previousFormattingKind: previousDecorator == null ? FormattingKind.None : formattingKind,\n                nextFormattingKind: previousDecorator == null ? formattingKind : FormattingKind.None,\n            });\n            insertIntoParentTextRange({\n                parent: decorators.length === 0 ? this : decorators[0].getParentSyntaxListOrThrow(),\n                insertPos: decorators[index - 1] == null ? this.getStart() : decorators[index - 1].getEnd(),\n                newText: decoratorCode,\n            });\n            return getNodesToReturn(decorators, this.getDecorators(), index, false);\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.decorators != null) {\n                this.getDecorators().forEach(d => d.remove());\n                this.addDecorators(structure.decorators);\n            }\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                decorators: this.getDecorators().map(d => d.getStructure()),\n            });\n        }\n    };\n}\nfunction getDecoratorLines(node, structures) {\n    const lines = [];\n    for (const structure of structures) {\n        const writer = node._getWriter();\n        const structurePrinter = node._context.structurePrinterFactory.forDecorator();\n        structurePrinter.printText(writer, structure);\n        lines.push(writer.toString());\n    }\n    return lines;\n}\nfunction getDecoratorFormattingKind(parent, currentDecorators) {\n    const sameLine = areDecoratorsOnSameLine(parent, currentDecorators);\n    return sameLine ? FormattingKind.Space : FormattingKind.Newline;\n}\nfunction areDecoratorsOnSameLine(parent, currentDecorators) {\n    if (currentDecorators.length <= 1)\n        return parent.getKind() === common.SyntaxKind.Parameter;\n    const startLinePos = currentDecorators[0].getStartLinePos();\n    for (let i = 1; i < currentDecorators.length; i++) {\n        if (currentDecorators[i].getStartLinePos() !== startLinePos)\n            return false;\n    }\n    return true;\n}\n\nfunction DotDotDotTokenableNode(Base) {\n    return class extends Base {\n        getDotDotDotTokenOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getDotDotDotToken(), \"Expected to find a dot dot dot token (...).\");\n        }\n        getDotDotDotToken() {\n            return this._getNodeFromCompilerNodeIfExists(this.compilerNode.dotDotDotToken);\n        }\n    };\n}\n\nfunction ExclamationTokenableNode(Base) {\n    return class extends Base {\n        hasExclamationToken() {\n            return this.compilerNode.exclamationToken != null;\n        }\n        getExclamationTokenNode() {\n            return this._getNodeFromCompilerNodeIfExists(this.compilerNode.exclamationToken);\n        }\n        getExclamationTokenNodeOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getExclamationTokenNode(), \"Expected to find an exclamation token.\");\n        }\n        setHasExclamationToken(value) {\n            const exclamationTokenNode = this.getExclamationTokenNode();\n            const hasExclamationToken = exclamationTokenNode != null;\n            if (value === hasExclamationToken)\n                return this;\n            if (value) {\n                if (Node.isQuestionTokenable(this))\n                    this.setHasQuestionToken(false);\n                const colonNode = this.getFirstChildByKind(common.SyntaxKind.ColonToken);\n                if (colonNode == null)\n                    throw new common.errors.InvalidOperationError(\"Cannot add an exclamation token to a node that does not have a type.\");\n                insertIntoParentTextRange({\n                    insertPos: colonNode.getStart(),\n                    parent: this,\n                    newText: \"!\",\n                });\n            }\n            else {\n                removeChildren({ children: [exclamationTokenNode] });\n            }\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.hasExclamationToken != null)\n                this.setHasExclamationToken(structure.hasExclamationToken);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                hasExclamationToken: this.hasExclamationToken(),\n            });\n        }\n    };\n}\n\nfunction ExportGetableNode(Base) {\n    return class extends Base {\n        hasExportKeyword() {\n            return this.getExportKeyword() != null;\n        }\n        getExportKeyword() {\n            if (Node.isVariableDeclaration(this)) {\n                const variableStatement = this.getVariableStatement();\n                return variableStatement === null || variableStatement === void 0 ? void 0 : variableStatement.getExportKeyword();\n            }\n            if (!Node.isModifierable(this))\n                return throwForNotModifierableNode();\n            return this.getFirstModifierByKind(common.SyntaxKind.ExportKeyword);\n        }\n        getExportKeywordOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getExportKeyword(), \"Expected to find an export keyword.\");\n        }\n        hasDefaultKeyword() {\n            return this.getDefaultKeyword() != null;\n        }\n        getDefaultKeyword() {\n            if (Node.isVariableDeclaration(this)) {\n                const variableStatement = this.getVariableStatement();\n                return variableStatement === null || variableStatement === void 0 ? void 0 : variableStatement.getDefaultKeyword();\n            }\n            if (!Node.isModifierable(this))\n                return throwForNotModifierableNode();\n            return this.getFirstModifierByKind(common.SyntaxKind.DefaultKeyword);\n        }\n        getDefaultKeywordOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getDefaultKeyword(), \"Expected to find a default keyword.\");\n        }\n        isExported() {\n            if (this.hasExportKeyword())\n                return true;\n            const thisSymbol = this.getSymbol();\n            const sourceFileSymbol = this.getSourceFile().getSymbol();\n            if (thisSymbol == null || sourceFileSymbol == null)\n                return false;\n            return sourceFileSymbol.getExports().some(e => e === thisSymbol || e.getAliasedSymbol() === thisSymbol);\n        }\n        isDefaultExport() {\n            if (this.hasDefaultKeyword())\n                return true;\n            const thisSymbol = this.getSymbol();\n            if (thisSymbol == null)\n                return false;\n            const defaultExportSymbol = this.getSourceFile().getDefaultExportSymbol();\n            if (defaultExportSymbol == null)\n                return false;\n            if (thisSymbol === defaultExportSymbol)\n                return true;\n            const aliasedSymbol = defaultExportSymbol.getAliasedSymbol();\n            return thisSymbol === aliasedSymbol;\n        }\n        isNamedExport() {\n            const thisSymbol = this.getSymbol();\n            const sourceFileSymbol = this.getSourceFile().getSymbol();\n            if (thisSymbol == null || sourceFileSymbol == null)\n                return false;\n            return !isDefaultExport() && sourceFileSymbol.getExports().some(e => e === thisSymbol || e.getAliasedSymbol() === thisSymbol);\n            function isDefaultExport() {\n                const defaultExportSymbol = sourceFileSymbol.getExport(\"default\");\n                if (defaultExportSymbol == null)\n                    return false;\n                return thisSymbol === defaultExportSymbol || thisSymbol === defaultExportSymbol.getAliasedSymbol();\n            }\n        }\n    };\n}\nfunction throwForNotModifierableNode() {\n    throw new common.errors.NotImplementedError(`Not implemented situation where node was not a ModifierableNode.`);\n}\n\nfunction ExportableNode(Base) {\n    return apply$1(ExportGetableNode(Base));\n}\nfunction apply$1(Base) {\n    return class extends Base {\n        setIsDefaultExport(value) {\n            if (value === this.isDefaultExport())\n                return this;\n            if (value && !Node.isSourceFile(this.getParentOrThrow()))\n                throw new common.errors.InvalidOperationError(\"The parent must be a source file in order to set this node as a default export.\");\n            const sourceFile = this.getSourceFile();\n            const fileDefaultExportSymbol = sourceFile.getDefaultExportSymbol();\n            if (fileDefaultExportSymbol != null)\n                sourceFile.removeDefaultExport(fileDefaultExportSymbol);\n            if (!value)\n                return this;\n            if (Node.hasName(this) && shouldWriteAsSeparateStatement.call(this)) {\n                const parentSyntaxList = this.getFirstAncestorByKindOrThrow(common.SyntaxKind.SyntaxList);\n                const name = this.getName();\n                parentSyntaxList.insertChildText(this.getChildIndex() + 1, writer => {\n                    writer.newLine().write(`export default ${name};`);\n                });\n            }\n            else {\n                this.addModifier(\"export\");\n                this.addModifier(\"default\");\n            }\n            return this;\n            function shouldWriteAsSeparateStatement() {\n                if (Node.isEnumDeclaration(this) || Node.isModuleDeclaration(this) || Node.isTypeAliasDeclaration(this))\n                    return true;\n                if (Node.isAmbientable(this) && this.isAmbient())\n                    return true;\n                return false;\n            }\n        }\n        setIsExported(value) {\n            if (Node.isSourceFile(this.getParentOrThrow()))\n                this.toggleModifier(\"default\", false);\n            this.toggleModifier(\"export\", value);\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.isExported != null)\n                this.setIsExported(structure.isExported);\n            if (structure.isDefaultExport != null)\n                this.setIsDefaultExport(structure.isDefaultExport);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                isExported: this.hasExportKeyword(),\n                isDefaultExport: this.hasDefaultKeyword(),\n            });\n        }\n    };\n}\n\nclass Printer {\n    printTextOrWriterFunc(writer, textOrWriterFunc) {\n        if (typeof textOrWriterFunc === \"string\")\n            writer.write(textOrWriterFunc);\n        else if (textOrWriterFunc != null)\n            textOrWriterFunc(writer);\n    }\n    getNewWriter(writer) {\n        return new CodeBlockWriter__default[\"default\"](writer.getOptions());\n    }\n    getNewWriterWithQueuedChildIndentation(writer) {\n        const newWriter = new CodeBlockWriter__default[\"default\"](writer.getOptions());\n        newWriter.queueIndentationLevel(1);\n        return newWriter;\n    }\n    getText(writer, textOrWriterFunc) {\n        const newWriter = this.getNewWriter(writer);\n        this.printTextOrWriterFunc(newWriter, textOrWriterFunc);\n        return newWriter.toString();\n    }\n    getTextWithQueuedChildIndentation(writer, textOrWriterFunc) {\n        const queuedChildIndentationWriter = this.getNewWriterWithQueuedChildIndentation(writer);\n        this.printTextOrWriterFunc(queuedChildIndentationWriter, textOrWriterFunc);\n        return queuedChildIndentationWriter.toString();\n    }\n}\n\nclass InitializerExpressionableNodeStructurePrinter extends Printer {\n    printText(writer, structure) {\n        const { initializer } = structure;\n        if (initializer == null)\n            return;\n        const initializerText = this.getText(writer, initializer);\n        if (!common.StringUtils.isNullOrWhitespace(initializerText)) {\n            writer.hangingIndent(() => {\n                writer.spaceIfLastNot();\n                writer.write(`= ${initializerText}`);\n            });\n        }\n    }\n}\n\nclass ModifierableNodeStructurePrinter extends Printer {\n    printText(writer, structure) {\n        const scope = structure.scope;\n        if (structure.isDefaultExport)\n            writer.write(\"export default \");\n        else if (structure.isExported)\n            writer.write(\"export \");\n        if (structure.hasDeclareKeyword)\n            writer.write(\"declare \");\n        if (scope != null)\n            writer.write(`${scope} `);\n        if (structure.isStatic)\n            writer.write(\"static \");\n        if (structure.hasOverrideKeyword)\n            writer.write(\"override \");\n        if (structure.isAbstract)\n            writer.write(\"abstract \");\n        if (structure.isAsync)\n            writer.write(\"async \");\n        if (structure.isReadonly)\n            writer.write(\"readonly \");\n    }\n}\n\nclass ReturnTypedNodeStructurePrinter extends Printer {\n    constructor(alwaysWrite = false) {\n        super();\n        this.alwaysWrite = alwaysWrite;\n    }\n    printText(writer, structure) {\n        let { returnType } = structure;\n        if (returnType == null && this.alwaysWrite === false)\n            return;\n        returnType = returnType !== null && returnType !== void 0 ? returnType : \"void\";\n        const returnTypeText = this.getText(writer, returnType);\n        if (!common.StringUtils.isNullOrWhitespace(returnTypeText)) {\n            writer.hangingIndent(() => {\n                writer.write(`: ${returnTypeText}`);\n            });\n        }\n    }\n}\n\nclass TypedNodeStructurePrinter extends Printer {\n    constructor(separator, alwaysWrite = false) {\n        super();\n        this.separator = separator;\n        this.alwaysWrite = alwaysWrite;\n    }\n    printText(writer, structure) {\n        let { type } = structure;\n        if (type == null && this.alwaysWrite === false)\n            return;\n        type = type !== null && type !== void 0 ? type : \"any\";\n        const typeText = this.getText(writer, type);\n        if (!common.StringUtils.isNullOrWhitespace(typeText)) {\n            writer.hangingIndent(() => {\n                writer.write(`${this.separator} ${typeText}`);\n            });\n        }\n    }\n}\n\nclass BlankLineFormattingStructuresPrinter extends Printer {\n    constructor(printer) {\n        super();\n        this.printer = printer;\n    }\n    printText(writer, structures) {\n        if (structures == null)\n            return;\n        for (let i = 0; i < structures.length; i++) {\n            writer.conditionalBlankLine(i > 0);\n            this.printer.printText(writer, structures[i]);\n        }\n    }\n}\n\nclass CommaSeparatedStructuresPrinter extends Printer {\n    constructor(printer) {\n        super();\n        this.printer = printer;\n    }\n    printText(writer, structures) {\n        printTextWithSeparator(this.printer, writer, structures, () => writer.spaceIfLastNot());\n    }\n}\nfunction printTextWithSeparator(printer, writer, structures, separator) {\n    if (structures == null)\n        return;\n    if (structures instanceof Function || typeof structures === \"string\")\n        printer.printText(writer, structures);\n    else {\n        const commaAppendPositions = new Array(structures.length);\n        for (let i = 0; i < structures.length; i++) {\n            if (i > 0)\n                separator();\n            const structure = structures[i];\n            const startPos = writer.getLength();\n            printer.printText(writer, structure);\n            const pos = getAppendCommaPos(WriterUtils.getLastCharactersToPos(writer, startPos));\n            commaAppendPositions[i] = pos === -1 ? false : pos + startPos;\n        }\n        let foundFirst = false;\n        for (let i = commaAppendPositions.length - 1; i >= 0; i--) {\n            const pos = commaAppendPositions[i];\n            if (pos === false)\n                continue;\n            else if (!foundFirst)\n                foundFirst = true;\n            else\n                writer.unsafeInsert(pos, \",\");\n        }\n    }\n}\n\nclass CommaNewLineSeparatedStructuresPrinter extends Printer {\n    constructor(printer) {\n        super();\n        this.printer = printer;\n    }\n    printText(writer, structures) {\n        printTextWithSeparator(this.printer, writer, structures, () => writer.newLineIfLastNot());\n    }\n}\n\nclass NewLineFormattingStructuresPrinter extends Printer {\n    constructor(printer) {\n        super();\n        this.printer = printer;\n    }\n    printText(writer, structures) {\n        if (structures == null)\n            return;\n        for (let i = 0; i < structures.length; i++) {\n            writer.conditionalNewLine(i > 0);\n            this.printer.printText(writer, structures[i]);\n        }\n    }\n}\n\nclass SpaceFormattingStructuresPrinter extends Printer {\n    constructor(printer) {\n        super();\n        this.printer = printer;\n    }\n    printText(writer, structures) {\n        if (structures == null)\n            return;\n        for (let i = 0; i < structures.length; i++) {\n            writer.conditionalWrite(i > 0, \" \");\n            this.printer.printText(writer, structures[i]);\n        }\n    }\n}\n\nclass NodePrinter extends Printer {\n    constructor(factory) {\n        super();\n        this.factory = factory;\n    }\n    printTextWithoutTrivia(writer, structure) {\n        this.printTextInternal(writer, structure);\n    }\n    printText(writer, structure) {\n        this.printLeadingTrivia(writer, structure);\n        writer.closeComment();\n        this.printTextInternal(writer, structure);\n        this.printTrailingTrivia(writer, structure);\n    }\n    printLeadingTrivia(writer, structure) {\n        const leadingTrivia = structure.leadingTrivia;\n        if (leadingTrivia != null) {\n            this.printTrivia(writer, leadingTrivia);\n            if (writer.isInComment())\n                writer.closeComment();\n        }\n    }\n    printTrailingTrivia(writer, structure) {\n        const trailingTrivia = structure.trailingTrivia;\n        if (trailingTrivia != null)\n            this.printTrivia(writer, trailingTrivia);\n    }\n    printTrivia(writer, trivia) {\n        if (trivia instanceof Array) {\n            for (let i = 0; i < trivia.length; i++) {\n                this.printTextOrWriterFunc(writer, trivia[i]);\n                if (i !== trivia.length - 1)\n                    writer.newLineIfLastNot();\n            }\n        }\n        else {\n            this.printTextOrWriterFunc(writer, trivia);\n        }\n    }\n}\n\nclass ClassDeclarationStructurePrinter extends NodePrinter {\n    constructor(factory, options) {\n        super(factory);\n        this.options = options;\n        this.multipleWriter = new BlankLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        const isAmbient = structure.hasDeclareKeyword || this.options.isAmbient;\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        this.factory.forDecorator().printTexts(writer, structure.decorators);\n        this.printHeader(writer, structure);\n        writer.inlineBlock(() => {\n            this.factory.forPropertyDeclaration().printTexts(writer, structure.properties);\n            this.printCtors(writer, structure, isAmbient);\n            this.printGetAndSet(writer, structure, isAmbient);\n            if (!common.ArrayUtils.isNullOrEmpty(structure.methods)) {\n                this.conditionalSeparator(writer, isAmbient);\n                this.factory.forMethodDeclaration({ isAmbient }).printTexts(writer, structure.methods);\n            }\n        });\n    }\n    printHeader(writer, structure) {\n        this.factory.forModifierableNode().printText(writer, structure);\n        writer.write(`class`);\n        if (!common.StringUtils.isNullOrWhitespace(structure.name))\n            writer.space().write(structure.name);\n        this.factory.forTypeParameterDeclaration().printTextsWithBrackets(writer, structure.typeParameters);\n        writer.space();\n        writer.hangingIndent(() => {\n            if (structure.extends != null) {\n                const extendsText = this.getText(writer, structure.extends);\n                if (!common.StringUtils.isNullOrWhitespace(extendsText))\n                    writer.write(`extends ${extendsText} `);\n            }\n            if (structure.implements != null) {\n                const implementsText = structure.implements instanceof Array\n                    ? structure.implements.map(i => this.getText(writer, i)).join(\", \")\n                    : this.getText(writer, structure.implements);\n                if (!common.StringUtils.isNullOrWhitespace(implementsText))\n                    writer.write(`implements ${implementsText} `);\n            }\n        });\n    }\n    printCtors(writer, structure, isAmbient) {\n        if (common.ArrayUtils.isNullOrEmpty(structure.ctors))\n            return;\n        for (const ctor of structure.ctors) {\n            this.conditionalSeparator(writer, isAmbient);\n            this.factory.forConstructorDeclaration({ isAmbient }).printText(writer, ctor);\n        }\n    }\n    printGetAndSet(writer, structure, isAmbient) {\n        var _a, _b;\n        const getAccessors = [...(_a = structure.getAccessors) !== null && _a !== void 0 ? _a : []];\n        const setAccessors = [...(_b = structure.setAccessors) !== null && _b !== void 0 ? _b : []];\n        const getAccessorWriter = this.factory.forGetAccessorDeclaration({ isAmbient });\n        const setAccessorWriter = this.factory.forSetAccessorDeclaration({ isAmbient });\n        for (const getAccessor of getAccessors) {\n            this.conditionalSeparator(writer, isAmbient);\n            getAccessorWriter.printText(writer, getAccessor);\n            const setAccessorIndex = setAccessors.findIndex(item => item.name === getAccessor.name);\n            if (setAccessorIndex >= 0) {\n                this.conditionalSeparator(writer, isAmbient);\n                setAccessorWriter.printText(writer, setAccessors[setAccessorIndex]);\n                setAccessors.splice(setAccessorIndex, 1);\n            }\n        }\n        for (const setAccessor of setAccessors) {\n            this.conditionalSeparator(writer, isAmbient);\n            setAccessorWriter.printText(writer, setAccessor);\n        }\n    }\n    conditionalSeparator(writer, isAmbient) {\n        if (writer.isAtStartOfFirstLineOfBlock())\n            return;\n        if (isAmbient)\n            writer.newLine();\n        else\n            writer.blankLine();\n    }\n}\n\nexports.StructureKind = void 0;\n(function (StructureKind) {\n    StructureKind[StructureKind[\"AssertEntry\"] = 0] = \"AssertEntry\";\n    StructureKind[StructureKind[\"CallSignature\"] = 1] = \"CallSignature\";\n    StructureKind[StructureKind[\"Class\"] = 2] = \"Class\";\n    StructureKind[StructureKind[\"ClassStaticBlock\"] = 3] = \"ClassStaticBlock\";\n    StructureKind[StructureKind[\"ConstructSignature\"] = 4] = \"ConstructSignature\";\n    StructureKind[StructureKind[\"Constructor\"] = 5] = \"Constructor\";\n    StructureKind[StructureKind[\"ConstructorOverload\"] = 6] = \"ConstructorOverload\";\n    StructureKind[StructureKind[\"Decorator\"] = 7] = \"Decorator\";\n    StructureKind[StructureKind[\"Enum\"] = 8] = \"Enum\";\n    StructureKind[StructureKind[\"EnumMember\"] = 9] = \"EnumMember\";\n    StructureKind[StructureKind[\"ExportAssignment\"] = 10] = \"ExportAssignment\";\n    StructureKind[StructureKind[\"ExportDeclaration\"] = 11] = \"ExportDeclaration\";\n    StructureKind[StructureKind[\"ExportSpecifier\"] = 12] = \"ExportSpecifier\";\n    StructureKind[StructureKind[\"Function\"] = 13] = \"Function\";\n    StructureKind[StructureKind[\"FunctionOverload\"] = 14] = \"FunctionOverload\";\n    StructureKind[StructureKind[\"GetAccessor\"] = 15] = \"GetAccessor\";\n    StructureKind[StructureKind[\"ImportDeclaration\"] = 16] = \"ImportDeclaration\";\n    StructureKind[StructureKind[\"ImportSpecifier\"] = 17] = \"ImportSpecifier\";\n    StructureKind[StructureKind[\"IndexSignature\"] = 18] = \"IndexSignature\";\n    StructureKind[StructureKind[\"Interface\"] = 19] = \"Interface\";\n    StructureKind[StructureKind[\"JsxAttribute\"] = 20] = \"JsxAttribute\";\n    StructureKind[StructureKind[\"JsxSpreadAttribute\"] = 21] = \"JsxSpreadAttribute\";\n    StructureKind[StructureKind[\"JsxElement\"] = 22] = \"JsxElement\";\n    StructureKind[StructureKind[\"JsxSelfClosingElement\"] = 23] = \"JsxSelfClosingElement\";\n    StructureKind[StructureKind[\"JSDoc\"] = 24] = \"JSDoc\";\n    StructureKind[StructureKind[\"JSDocTag\"] = 25] = \"JSDocTag\";\n    StructureKind[StructureKind[\"Method\"] = 26] = \"Method\";\n    StructureKind[StructureKind[\"MethodOverload\"] = 27] = \"MethodOverload\";\n    StructureKind[StructureKind[\"MethodSignature\"] = 28] = \"MethodSignature\";\n    StructureKind[StructureKind[\"Module\"] = 29] = \"Module\";\n    StructureKind[StructureKind[\"Parameter\"] = 30] = \"Parameter\";\n    StructureKind[StructureKind[\"Property\"] = 31] = \"Property\";\n    StructureKind[StructureKind[\"PropertyAssignment\"] = 32] = \"PropertyAssignment\";\n    StructureKind[StructureKind[\"PropertySignature\"] = 33] = \"PropertySignature\";\n    StructureKind[StructureKind[\"SetAccessor\"] = 34] = \"SetAccessor\";\n    StructureKind[StructureKind[\"ShorthandPropertyAssignment\"] = 35] = \"ShorthandPropertyAssignment\";\n    StructureKind[StructureKind[\"SourceFile\"] = 36] = \"SourceFile\";\n    StructureKind[StructureKind[\"SpreadAssignment\"] = 37] = \"SpreadAssignment\";\n    StructureKind[StructureKind[\"TypeAlias\"] = 38] = \"TypeAlias\";\n    StructureKind[StructureKind[\"TypeParameter\"] = 39] = \"TypeParameter\";\n    StructureKind[StructureKind[\"VariableDeclaration\"] = 40] = \"VariableDeclaration\";\n    StructureKind[StructureKind[\"VariableStatement\"] = 41] = \"VariableStatement\";\n})(exports.StructureKind || (exports.StructureKind = {}));\n\nconst Structure = {\n    hasName(structure) {\n        return typeof structure.name === \"string\";\n    },\n    isAssertEntry(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.AssertEntry;\n    },\n    isAssertionKeyNamed(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.AssertEntry;\n    },\n    isCallSignature(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.CallSignature;\n    },\n    isJSDocable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.CallSignature:\n            case exports.StructureKind.Class:\n            case exports.StructureKind.ClassStaticBlock:\n            case exports.StructureKind.ConstructorOverload:\n            case exports.StructureKind.Constructor:\n            case exports.StructureKind.ConstructSignature:\n            case exports.StructureKind.Enum:\n            case exports.StructureKind.EnumMember:\n            case exports.StructureKind.FunctionOverload:\n            case exports.StructureKind.Function:\n            case exports.StructureKind.GetAccessor:\n            case exports.StructureKind.IndexSignature:\n            case exports.StructureKind.Interface:\n            case exports.StructureKind.MethodOverload:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.MethodSignature:\n            case exports.StructureKind.Module:\n            case exports.StructureKind.Property:\n            case exports.StructureKind.PropertySignature:\n            case exports.StructureKind.SetAccessor:\n            case exports.StructureKind.TypeAlias:\n            case exports.StructureKind.VariableStatement:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isSignatured(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.CallSignature:\n            case exports.StructureKind.ConstructorOverload:\n            case exports.StructureKind.Constructor:\n            case exports.StructureKind.ConstructSignature:\n            case exports.StructureKind.FunctionOverload:\n            case exports.StructureKind.Function:\n            case exports.StructureKind.GetAccessor:\n            case exports.StructureKind.MethodOverload:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.MethodSignature:\n            case exports.StructureKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isParametered(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.CallSignature:\n            case exports.StructureKind.ConstructorOverload:\n            case exports.StructureKind.Constructor:\n            case exports.StructureKind.ConstructSignature:\n            case exports.StructureKind.FunctionOverload:\n            case exports.StructureKind.Function:\n            case exports.StructureKind.GetAccessor:\n            case exports.StructureKind.MethodOverload:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.MethodSignature:\n            case exports.StructureKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isReturnTyped(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.CallSignature:\n            case exports.StructureKind.ConstructorOverload:\n            case exports.StructureKind.Constructor:\n            case exports.StructureKind.ConstructSignature:\n            case exports.StructureKind.FunctionOverload:\n            case exports.StructureKind.Function:\n            case exports.StructureKind.GetAccessor:\n            case exports.StructureKind.IndexSignature:\n            case exports.StructureKind.MethodOverload:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.MethodSignature:\n            case exports.StructureKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isTypeParametered(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.CallSignature:\n            case exports.StructureKind.Class:\n            case exports.StructureKind.ConstructorOverload:\n            case exports.StructureKind.Constructor:\n            case exports.StructureKind.ConstructSignature:\n            case exports.StructureKind.FunctionOverload:\n            case exports.StructureKind.Function:\n            case exports.StructureKind.GetAccessor:\n            case exports.StructureKind.Interface:\n            case exports.StructureKind.MethodOverload:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.MethodSignature:\n            case exports.StructureKind.SetAccessor:\n            case exports.StructureKind.TypeAlias:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isClass(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Class;\n    },\n    isClassLikeDeclarationBase(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Class;\n    },\n    isNameable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.Class:\n            case exports.StructureKind.Function:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isImplementsClauseable(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Class;\n    },\n    isDecoratable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.Class:\n            case exports.StructureKind.GetAccessor:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.Parameter:\n            case exports.StructureKind.Property:\n            case exports.StructureKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isAbstractable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.Class:\n            case exports.StructureKind.GetAccessor:\n            case exports.StructureKind.MethodOverload:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.Property:\n            case exports.StructureKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isAmbientable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.Class:\n            case exports.StructureKind.Enum:\n            case exports.StructureKind.FunctionOverload:\n            case exports.StructureKind.Function:\n            case exports.StructureKind.Interface:\n            case exports.StructureKind.Module:\n            case exports.StructureKind.Property:\n            case exports.StructureKind.TypeAlias:\n            case exports.StructureKind.VariableStatement:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isExportable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.Class:\n            case exports.StructureKind.Enum:\n            case exports.StructureKind.FunctionOverload:\n            case exports.StructureKind.Function:\n            case exports.StructureKind.Interface:\n            case exports.StructureKind.Module:\n            case exports.StructureKind.TypeAlias:\n            case exports.StructureKind.VariableStatement:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isClassStaticBlock(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.ClassStaticBlock;\n    },\n    isStatemented(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.ClassStaticBlock:\n            case exports.StructureKind.Constructor:\n            case exports.StructureKind.Function:\n            case exports.StructureKind.GetAccessor:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.Module:\n            case exports.StructureKind.SetAccessor:\n            case exports.StructureKind.SourceFile:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isConstructorDeclarationOverload(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.ConstructorOverload;\n    },\n    isScoped(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.ConstructorOverload:\n            case exports.StructureKind.Constructor:\n            case exports.StructureKind.GetAccessor:\n            case exports.StructureKind.MethodOverload:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.Property:\n            case exports.StructureKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isConstructor(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Constructor;\n    },\n    isFunctionLike(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.Constructor:\n            case exports.StructureKind.Function:\n            case exports.StructureKind.GetAccessor:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isConstructSignature(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.ConstructSignature;\n    },\n    isDecorator(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Decorator;\n    },\n    isEnum(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Enum;\n    },\n    isNamed(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.Enum:\n            case exports.StructureKind.Interface:\n            case exports.StructureKind.JsxAttribute:\n            case exports.StructureKind.ShorthandPropertyAssignment:\n            case exports.StructureKind.TypeAlias:\n            case exports.StructureKind.TypeParameter:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isEnumMember(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.EnumMember;\n    },\n    isPropertyNamed(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.EnumMember:\n            case exports.StructureKind.GetAccessor:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.MethodSignature:\n            case exports.StructureKind.PropertyAssignment:\n            case exports.StructureKind.Property:\n            case exports.StructureKind.PropertySignature:\n            case exports.StructureKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isInitializerExpressionable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.EnumMember:\n            case exports.StructureKind.Parameter:\n            case exports.StructureKind.Property:\n            case exports.StructureKind.PropertySignature:\n            case exports.StructureKind.VariableDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isExportAssignment(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.ExportAssignment;\n    },\n    isExportDeclaration(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.ExportDeclaration;\n    },\n    isExportSpecifier(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.ExportSpecifier;\n    },\n    isFunctionDeclarationOverload(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.FunctionOverload;\n    },\n    isAsyncable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.FunctionOverload:\n            case exports.StructureKind.Function:\n            case exports.StructureKind.MethodOverload:\n            case exports.StructureKind.Method:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isGeneratorable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.FunctionOverload:\n            case exports.StructureKind.Function:\n            case exports.StructureKind.MethodOverload:\n            case exports.StructureKind.Method:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isFunction(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Function;\n    },\n    isGetAccessor(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.GetAccessor;\n    },\n    isStaticable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.GetAccessor:\n            case exports.StructureKind.MethodOverload:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.Property:\n            case exports.StructureKind.SetAccessor:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isImportDeclaration(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.ImportDeclaration;\n    },\n    isImportSpecifier(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.ImportSpecifier;\n    },\n    isIndexSignature(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.IndexSignature;\n    },\n    isReadonlyable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.IndexSignature:\n            case exports.StructureKind.Parameter:\n            case exports.StructureKind.Property:\n            case exports.StructureKind.PropertySignature:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isInterface(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Interface;\n    },\n    isExtendsClauseable(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Interface;\n    },\n    isTypeElementMembered(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Interface;\n    },\n    isJSDoc(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.JSDoc;\n    },\n    isJSDocTag(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.JSDocTag;\n    },\n    isJsxAttribute(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.JsxAttribute;\n    },\n    isJsxElement(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.JsxElement;\n    },\n    isJsxSelfClosingElement(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.JsxSelfClosingElement;\n    },\n    isJsxTagNamed(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.JsxSelfClosingElement;\n    },\n    isJsxAttributed(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.JsxSelfClosingElement;\n    },\n    isJsxSpreadAttribute(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.JsxSpreadAttribute;\n    },\n    isMethodDeclarationOverload(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.MethodOverload;\n    },\n    isQuestionTokenable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.MethodOverload:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.MethodSignature:\n            case exports.StructureKind.Parameter:\n            case exports.StructureKind.Property:\n            case exports.StructureKind.PropertySignature:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isOverrideable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.MethodOverload:\n            case exports.StructureKind.Method:\n            case exports.StructureKind.Parameter:\n            case exports.StructureKind.Property:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isMethod(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Method;\n    },\n    isMethodSignature(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.MethodSignature;\n    },\n    isModule(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Module;\n    },\n    isModuleNamed(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Module;\n    },\n    isParameter(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Parameter;\n    },\n    isBindingNamed(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.Parameter:\n            case exports.StructureKind.VariableDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isTyped(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.Parameter:\n            case exports.StructureKind.Property:\n            case exports.StructureKind.PropertySignature:\n            case exports.StructureKind.TypeAlias:\n            case exports.StructureKind.VariableDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isScopeable(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Parameter;\n    },\n    isPropertyAssignment(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.PropertyAssignment;\n    },\n    isProperty(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.Property;\n    },\n    isExclamationTokenable(structure) {\n        switch (structure === null || structure === void 0 ? void 0 : structure.kind) {\n            case exports.StructureKind.Property:\n            case exports.StructureKind.VariableDeclaration:\n                return true;\n            default:\n                return false;\n        }\n    },\n    isPropertySignature(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.PropertySignature;\n    },\n    isSetAccessor(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.SetAccessor;\n    },\n    isShorthandPropertyAssignment(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.ShorthandPropertyAssignment;\n    },\n    isSourceFile(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.SourceFile;\n    },\n    isSpreadAssignment(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.SpreadAssignment;\n    },\n    isExpressioned(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.SpreadAssignment;\n    },\n    isTypeAlias(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.TypeAlias;\n    },\n    isTypeParameter(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.TypeParameter;\n    },\n    isVariableDeclaration(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.VariableDeclaration;\n    },\n    isVariableStatement(structure) {\n        return (structure === null || structure === void 0 ? void 0 : structure.kind) === exports.StructureKind.VariableStatement;\n    }\n};\n\nfunction forEachStructureChild(structure, callback) {\n    if (common.ArrayUtils.isReadonlyArray(structure)) {\n        for (const item of structure) {\n            const result = callback(item);\n            if (result)\n                return result;\n        }\n        return undefined;\n    }\n    switch (structure.kind) {\n        case exports.StructureKind.CallSignature:\n            return forCallSignatureDeclaration(structure, callback);\n        case exports.StructureKind.Class:\n            return forClassDeclaration(structure, callback);\n        case exports.StructureKind.ClassStaticBlock:\n            return forClassStaticBlockDeclaration(structure, callback);\n        case exports.StructureKind.ConstructorOverload:\n            return forConstructorDeclarationOverload(structure, callback);\n        case exports.StructureKind.Constructor:\n            return forConstructorDeclaration(structure, callback);\n        case exports.StructureKind.ConstructSignature:\n            return forConstructSignatureDeclaration(structure, callback);\n        case exports.StructureKind.Enum:\n            return forEnumDeclaration(structure, callback);\n        case exports.StructureKind.EnumMember:\n            return forEnumMember(structure, callback);\n        case exports.StructureKind.ExportDeclaration:\n            return forExportDeclaration(structure, callback);\n        case exports.StructureKind.FunctionOverload:\n            return forFunctionDeclarationOverload(structure, callback);\n        case exports.StructureKind.Function:\n            return forFunctionDeclaration(structure, callback);\n        case exports.StructureKind.GetAccessor:\n            return forGetAccessorDeclaration(structure, callback);\n        case exports.StructureKind.ImportDeclaration:\n            return forImportDeclaration(structure, callback);\n        case exports.StructureKind.IndexSignature:\n            return forIndexSignatureDeclaration(structure, callback);\n        case exports.StructureKind.Interface:\n            return forInterfaceDeclaration(structure, callback);\n        case exports.StructureKind.JSDoc:\n            return forJSDoc(structure, callback);\n        case exports.StructureKind.JsxElement:\n            return forJsxElement(structure, callback);\n        case exports.StructureKind.JsxSelfClosingElement:\n            return forJsxSelfClosingElement(structure, callback);\n        case exports.StructureKind.MethodOverload:\n            return forMethodDeclarationOverload(structure, callback);\n        case exports.StructureKind.Method:\n            return forMethodDeclaration(structure, callback);\n        case exports.StructureKind.MethodSignature:\n            return forMethodSignature(structure, callback);\n        case exports.StructureKind.Module:\n            return forModuleDeclaration(structure, callback);\n        case exports.StructureKind.Parameter:\n            return forParameterDeclaration(structure, callback);\n        case exports.StructureKind.Property:\n            return forPropertyDeclaration(structure, callback);\n        case exports.StructureKind.PropertySignature:\n            return forPropertySignature(structure, callback);\n        case exports.StructureKind.SetAccessor:\n            return forSetAccessorDeclaration(structure, callback);\n        case exports.StructureKind.SourceFile:\n            return forSourceFile(structure, callback);\n        case exports.StructureKind.TypeAlias:\n            return forTypeAliasDeclaration(structure, callback);\n        case exports.StructureKind.VariableStatement:\n            return forVariableStatement(structure, callback);\n        default:\n            return undefined;\n    }\n}\nfunction forCallSignatureDeclaration(structure, callback) {\n    return forJSDocableNode(structure, callback)\n        || forSignaturedDeclaration(structure, callback)\n        || forTypeParameteredNode(structure, callback);\n}\nfunction forJSDocableNode(structure, callback) {\n    return forAllIfStructure(structure.docs, callback, exports.StructureKind.JSDoc);\n}\nfunction forSignaturedDeclaration(structure, callback) {\n    return forParameteredNode(structure, callback);\n}\nfunction forParameteredNode(structure, callback) {\n    return forAll(structure.parameters, callback, exports.StructureKind.Parameter);\n}\nfunction forTypeParameteredNode(structure, callback) {\n    return forAllIfStructure(structure.typeParameters, callback, exports.StructureKind.TypeParameter);\n}\nfunction forClassDeclaration(structure, callback) {\n    return forClassLikeDeclarationBase(structure, callback);\n}\nfunction forClassLikeDeclarationBase(structure, callback) {\n    return forDecoratableNode(structure, callback)\n        || forTypeParameteredNode(structure, callback)\n        || forJSDocableNode(structure, callback)\n        || forAll(structure.ctors, callback, exports.StructureKind.Constructor)\n        || forAll(structure.properties, callback, exports.StructureKind.Property)\n        || forAll(structure.getAccessors, callback, exports.StructureKind.GetAccessor)\n        || forAll(structure.setAccessors, callback, exports.StructureKind.SetAccessor)\n        || forAll(structure.methods, callback, exports.StructureKind.Method);\n}\nfunction forDecoratableNode(structure, callback) {\n    return forAll(structure.decorators, callback, exports.StructureKind.Decorator);\n}\nfunction forClassStaticBlockDeclaration(structure, callback) {\n    return forJSDocableNode(structure, callback)\n        || forStatementedNode(structure, callback);\n}\nfunction forStatementedNode(structure, callback) {\n    return forAllUnknownKindIfStructure(structure.statements, callback);\n}\nfunction forConstructorDeclarationOverload(structure, callback) {\n    return forSignaturedDeclaration(structure, callback)\n        || forTypeParameteredNode(structure, callback)\n        || forJSDocableNode(structure, callback);\n}\nfunction forConstructorDeclaration(structure, callback) {\n    return forFunctionLikeDeclaration(structure, callback)\n        || forAll(structure.overloads, callback, exports.StructureKind.ConstructorOverload);\n}\nfunction forFunctionLikeDeclaration(structure, callback) {\n    return forSignaturedDeclaration(structure, callback)\n        || forTypeParameteredNode(structure, callback)\n        || forJSDocableNode(structure, callback)\n        || forStatementedNode(structure, callback);\n}\nfunction forConstructSignatureDeclaration(structure, callback) {\n    return forJSDocableNode(structure, callback)\n        || forSignaturedDeclaration(structure, callback)\n        || forTypeParameteredNode(structure, callback);\n}\nfunction forEnumDeclaration(structure, callback) {\n    return forJSDocableNode(structure, callback)\n        || forAll(structure.members, callback, exports.StructureKind.EnumMember);\n}\nfunction forEnumMember(structure, callback) {\n    return forJSDocableNode(structure, callback);\n}\nfunction forExportDeclaration(structure, callback) {\n    return forAllIfStructure(structure.namedExports, callback, exports.StructureKind.ExportSpecifier)\n        || forAll(structure.assertElements, callback, exports.StructureKind.AssertEntry);\n}\nfunction forFunctionDeclarationOverload(structure, callback) {\n    return forSignaturedDeclaration(structure, callback)\n        || forTypeParameteredNode(structure, callback)\n        || forJSDocableNode(structure, callback);\n}\nfunction forFunctionDeclaration(structure, callback) {\n    return forFunctionLikeDeclaration(structure, callback)\n        || forAll(structure.overloads, callback, exports.StructureKind.FunctionOverload);\n}\nfunction forGetAccessorDeclaration(structure, callback) {\n    return forDecoratableNode(structure, callback)\n        || forFunctionLikeDeclaration(structure, callback);\n}\nfunction forImportDeclaration(structure, callback) {\n    return forAllIfStructure(structure.namedImports, callback, exports.StructureKind.ImportSpecifier)\n        || forAll(structure.assertElements, callback, exports.StructureKind.AssertEntry);\n}\nfunction forIndexSignatureDeclaration(structure, callback) {\n    return forJSDocableNode(structure, callback);\n}\nfunction forInterfaceDeclaration(structure, callback) {\n    return forTypeParameteredNode(structure, callback)\n        || forJSDocableNode(structure, callback)\n        || forTypeElementMemberedNode(structure, callback);\n}\nfunction forTypeElementMemberedNode(structure, callback) {\n    return forAll(structure.callSignatures, callback, exports.StructureKind.CallSignature)\n        || forAll(structure.constructSignatures, callback, exports.StructureKind.ConstructSignature)\n        || forAll(structure.indexSignatures, callback, exports.StructureKind.IndexSignature)\n        || forAll(structure.methods, callback, exports.StructureKind.MethodSignature)\n        || forAll(structure.properties, callback, exports.StructureKind.PropertySignature);\n}\nfunction forJSDoc(structure, callback) {\n    return forAll(structure.tags, callback, exports.StructureKind.JSDocTag);\n}\nfunction forJsxElement(structure, callback) {\n    return forAllUnknownKindIfStructure(structure.attributes, callback)\n        || forAllUnknownKindIfStructure(structure.children, callback);\n}\nfunction forJsxSelfClosingElement(structure, callback) {\n    return forJsxAttributedNode(structure, callback);\n}\nfunction forJsxAttributedNode(structure, callback) {\n    return forAllUnknownKindIfStructure(structure.attributes, callback);\n}\nfunction forMethodDeclarationOverload(structure, callback) {\n    return forSignaturedDeclaration(structure, callback)\n        || forTypeParameteredNode(structure, callback)\n        || forJSDocableNode(structure, callback);\n}\nfunction forMethodDeclaration(structure, callback) {\n    return forDecoratableNode(structure, callback)\n        || forFunctionLikeDeclaration(structure, callback)\n        || forAll(structure.overloads, callback, exports.StructureKind.MethodOverload);\n}\nfunction forMethodSignature(structure, callback) {\n    return forJSDocableNode(structure, callback)\n        || forSignaturedDeclaration(structure, callback)\n        || forTypeParameteredNode(structure, callback);\n}\nfunction forModuleDeclaration(structure, callback) {\n    return forJSDocableNode(structure, callback)\n        || forStatementedNode(structure, callback);\n}\nfunction forParameterDeclaration(structure, callback) {\n    return forDecoratableNode(structure, callback);\n}\nfunction forPropertyDeclaration(structure, callback) {\n    return forJSDocableNode(structure, callback)\n        || forDecoratableNode(structure, callback);\n}\nfunction forPropertySignature(structure, callback) {\n    return forJSDocableNode(structure, callback);\n}\nfunction forSetAccessorDeclaration(structure, callback) {\n    return forDecoratableNode(structure, callback)\n        || forFunctionLikeDeclaration(structure, callback);\n}\nfunction forSourceFile(structure, callback) {\n    return forStatementedNode(structure, callback);\n}\nfunction forTypeAliasDeclaration(structure, callback) {\n    return forTypeParameteredNode(structure, callback)\n        || forJSDocableNode(structure, callback);\n}\nfunction forVariableStatement(structure, callback) {\n    return forJSDocableNode(structure, callback)\n        || forAll(structure.declarations, callback, exports.StructureKind.VariableDeclaration);\n}\nfunction forAll(structures, callback, kind) {\n    if (structures == null)\n        return;\n    for (const structure of structures) {\n        const result = callback(ensureKind(structure, kind));\n        if (result)\n            return result;\n    }\n    return undefined;\n}\nfunction forAllIfStructure(values, callback, kind) {\n    if (values == null || !(values instanceof Array))\n        return;\n    for (const value of values) {\n        if (isStructure(value)) {\n            const result = callback(ensureKind(value, kind));\n            if (result)\n                return result;\n        }\n    }\n    return undefined;\n}\nfunction forAllUnknownKindIfStructure(values, callback) {\n    if (values == null || !(values instanceof Array))\n        return;\n    for (const value of values) {\n        if (isStructure(value)) {\n            const result = callback(value);\n            if (result)\n                return result;\n        }\n    }\n    return undefined;\n}\nfunction ensureKind(structure, kind) {\n    if (structure.kind == null)\n        structure.kind = kind;\n    return structure;\n}\nfunction isStructure(value) {\n    return value != null && typeof value.kind === \"number\";\n}\n\nfunction isLastNonWhitespaceCharCloseBrace(writer) {\n    return writer.iterateLastCharCodes(charCode => {\n        if (charCode === CharCodes.CLOSE_BRACE)\n            return true;\n        else if (common.StringUtils.isWhitespaceCharCode(charCode))\n            return undefined;\n        else\n            return false;\n    }) || false;\n}\n\nclass ClassMemberStructurePrinter extends Printer {\n    constructor(factory, options) {\n        super();\n        this.factory = factory;\n        this.options = options;\n    }\n    printTexts(writer, members) {\n        if (members == null)\n            return;\n        if (typeof members === \"string\" || members instanceof Function)\n            this.printText(writer, members);\n        else {\n            for (const member of members) {\n                if (isLastNonWhitespaceCharCloseBrace(writer))\n                    writer.blankLineIfLastNot();\n                else if (!writer.isAtStartOfFirstLineOfBlock())\n                    writer.newLineIfLastNot();\n                this.printText(writer, member);\n            }\n        }\n    }\n    printText(writer, member) {\n        if (typeof member === \"string\" || member instanceof Function || member == null) {\n            this.printTextOrWriterFunc(writer, member);\n            return;\n        }\n        switch (member.kind) {\n            case exports.StructureKind.Method:\n                if (!this.options.isAmbient)\n                    ensureBlankLine();\n                this.factory.forMethodDeclaration(this.options).printText(writer, member);\n                break;\n            case exports.StructureKind.Property:\n                this.factory.forPropertyDeclaration().printText(writer, member);\n                break;\n            case exports.StructureKind.GetAccessor:\n                if (!this.options.isAmbient)\n                    ensureBlankLine();\n                this.factory.forGetAccessorDeclaration(this.options).printText(writer, member);\n                break;\n            case exports.StructureKind.SetAccessor:\n                if (!this.options.isAmbient)\n                    ensureBlankLine();\n                this.factory.forSetAccessorDeclaration(this.options).printText(writer, member);\n                break;\n            case exports.StructureKind.Constructor:\n                if (!this.options.isAmbient)\n                    ensureBlankLine();\n                this.factory.forConstructorDeclaration(this.options).printText(writer, member);\n                break;\n            case exports.StructureKind.ClassStaticBlock:\n                ensureBlankLine();\n                this.factory.forClassStaticBlockDeclaration().printText(writer, member);\n                break;\n            default:\n                common.errors.throwNotImplementedForNeverValueError(member);\n        }\n        function ensureBlankLine() {\n            if (!writer.isAtStartOfFirstLineOfBlock())\n                writer.blankLineIfLastNot();\n        }\n    }\n}\n\nclass ClassStaticBlockDeclarationStructurePrinter extends NodePrinter {\n    constructor(factory) {\n        super(factory);\n    }\n    printTexts(writer, structures) {\n        if (structures == null)\n            return;\n        for (let i = 0; i < structures.length; i++) {\n            if (i > 0)\n                writer.blankLine();\n            this.printText(writer, structures[i]);\n        }\n    }\n    printTextInternal(writer, structure) {\n        writer.write(\"static\");\n        writer.space().inlineBlock(() => {\n            this.factory.forStatementedNode({ isAmbient: false }).printText(writer, structure);\n        });\n    }\n}\n\nclass ConstructorDeclarationStructurePrinter extends NodePrinter {\n    constructor(factory, options) {\n        super(factory);\n        this.options = options;\n    }\n    printTexts(writer, structures) {\n        if (structures == null)\n            return;\n        for (let i = 0; i < structures.length; i++) {\n            if (i > 0) {\n                if (this.options.isAmbient)\n                    writer.newLine();\n                else\n                    writer.blankLine();\n            }\n            this.printText(writer, structures[i]);\n        }\n    }\n    printTextInternal(writer, structure) {\n        this.printOverloads(writer, getOverloadStructures());\n        this.printHeader(writer, structure);\n        if (this.options.isAmbient)\n            writer.write(\";\");\n        else {\n            writer.space().inlineBlock(() => {\n                this.factory.forStatementedNode(this.options).printText(writer, structure);\n            });\n        }\n        function getOverloadStructures() {\n            const overloads = common.ObjectUtils.clone(structure.overloads);\n            if (overloads == null || overloads.length === 0)\n                return;\n            for (const overload of overloads)\n                setValueIfUndefined(overload, \"scope\", structure.scope);\n            return overloads;\n        }\n    }\n    printOverloads(writer, structures) {\n        if (structures == null || structures.length === 0)\n            return;\n        for (const structure of structures) {\n            this.printOverload(writer, structure);\n            writer.newLine();\n        }\n    }\n    printOverload(writer, structure) {\n        this.printLeadingTrivia(writer, structure);\n        this.printHeader(writer, structure);\n        writer.write(\";\");\n        this.printTrailingTrivia(writer, structure);\n    }\n    printHeader(writer, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        this.factory.forModifierableNode().printText(writer, structure);\n        writer.write(\"constructor\");\n        this.factory.forTypeParameterDeclaration().printTextsWithBrackets(writer, structure.typeParameters);\n        this.factory.forParameterDeclaration().printTextsWithParenthesis(writer, structure.parameters);\n    }\n}\n\nclass GetAccessorDeclarationStructurePrinter extends NodePrinter {\n    constructor(factory, options) {\n        super(factory);\n        this.options = options;\n        this.blankLineWriter = new BlankLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.blankLineWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        this.factory.forDecorator().printTexts(writer, structure.decorators);\n        this.factory.forModifierableNode().printText(writer, structure);\n        writer.write(`get ${structure.name}`);\n        this.factory.forTypeParameterDeclaration().printTextsWithBrackets(writer, structure.typeParameters);\n        this.factory.forParameterDeclaration().printTextsWithParenthesis(writer, structure.parameters);\n        this.factory.forReturnTypedNode().printText(writer, structure);\n        if (this.options.isAmbient || structure.isAbstract)\n            writer.write(\";\");\n        else {\n            writer.spaceIfLastNot().inlineBlock(() => {\n                this.factory.forStatementedNode(this.options).printText(writer, structure);\n            });\n        }\n    }\n}\n\nclass MethodDeclarationStructurePrinter extends NodePrinter {\n    constructor(factory, options) {\n        super(factory);\n        this.options = options;\n    }\n    printTexts(writer, structures) {\n        if (structures == null)\n            return;\n        for (let i = 0; i < structures.length; i++) {\n            if (i > 0) {\n                if (this.options.isAmbient)\n                    writer.newLine();\n                else\n                    writer.blankLine();\n            }\n            this.printText(writer, structures[i]);\n        }\n    }\n    printTextInternal(writer, structure) {\n        this.printOverloads(writer, structure.name, getOverloadStructures());\n        this.printHeader(writer, structure.name, structure);\n        if (this.options.isAmbient || structure.isAbstract)\n            writer.write(\";\");\n        else {\n            writer.spaceIfLastNot().inlineBlock(() => {\n                this.factory.forStatementedNode(this.options).printText(writer, structure);\n            });\n        }\n        function getOverloadStructures() {\n            const overloads = common.ObjectUtils.clone(structure.overloads);\n            if (overloads == null || overloads.length === 0)\n                return;\n            for (const overload of overloads) {\n                setValueIfUndefined(overload, \"scope\", structure.scope);\n                setValueIfUndefined(overload, \"isStatic\", structure.isStatic);\n                setValueIfUndefined(overload, \"isAbstract\", structure.isAbstract);\n                setValueIfUndefined(overload, \"hasQuestionToken\", structure.hasQuestionToken);\n            }\n            return overloads;\n        }\n    }\n    printOverloads(writer, name, structures) {\n        if (structures == null || structures.length === 0)\n            return;\n        for (const structure of structures) {\n            this.printOverload(writer, name, structure);\n            writer.newLine();\n        }\n    }\n    printOverload(writer, name, structure) {\n        this.printLeadingTrivia(writer, structure);\n        this.printHeader(writer, name, structure);\n        writer.write(\";\");\n        this.printTrailingTrivia(writer, structure);\n    }\n    printHeader(writer, name, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        if (structure.decorators != null)\n            this.factory.forDecorator().printTexts(writer, structure.decorators);\n        this.factory.forModifierableNode().printText(writer, structure);\n        writer.write(name);\n        writer.conditionalWrite(structure.hasQuestionToken, \"?\");\n        this.factory.forTypeParameterDeclaration().printTextsWithBrackets(writer, structure.typeParameters);\n        this.factory.forParameterDeclaration().printTextsWithParenthesis(writer, structure.parameters);\n        this.factory.forReturnTypedNode().printText(writer, structure);\n    }\n}\n\nclass PropertyDeclarationStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new NewLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        this.factory.forDecorator().printTexts(writer, structure.decorators);\n        this.factory.forModifierableNode().printText(writer, structure);\n        writer.write(structure.name);\n        writer.conditionalWrite(structure.hasQuestionToken, \"?\");\n        writer.conditionalWrite(structure.hasExclamationToken && !structure.hasQuestionToken, \"!\");\n        this.factory.forTypedNode(\":\").printText(writer, structure);\n        this.factory.forInitializerExpressionableNode().printText(writer, structure);\n        writer.write(\";\");\n    }\n}\n\nclass SetAccessorDeclarationStructurePrinter extends NodePrinter {\n    constructor(factory, options) {\n        super(factory);\n        this.options = options;\n        this.multipleWriter = new BlankLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        this.factory.forDecorator().printTexts(writer, structure.decorators);\n        this.factory.forModifierableNode().printText(writer, structure);\n        writer.write(`set ${structure.name}`);\n        this.factory.forTypeParameterDeclaration().printTextsWithBrackets(writer, structure.typeParameters);\n        this.factory.forParameterDeclaration().printTextsWithParenthesis(writer, structure.parameters);\n        this.factory.forReturnTypedNode().printText(writer, structure);\n        if (this.options.isAmbient || structure.isAbstract)\n            writer.write(\";\");\n        else {\n            writer.spaceIfLastNot().inlineBlock(() => {\n                this.factory.forStatementedNode(this.options).printText(writer, structure);\n            });\n        }\n    }\n}\n\nclass StringStructurePrinter extends Printer {\n    printText(writer, textOrWriterFunc) {\n        if (typeof textOrWriterFunc === \"string\")\n            writer.write(textOrWriterFunc);\n        else\n            textOrWriterFunc(writer);\n    }\n}\n\nclass DecoratorStructurePrinter extends NodePrinter {\n    printTexts(writer, structures) {\n        this.printMultiple(writer, structures, () => writer.newLine());\n    }\n    printTextsInline(writer, structures) {\n        this.printMultiple(writer, structures, () => writer.space());\n    }\n    printTextInternal(writer, structure) {\n        writer.write(`@${structure.name}`);\n        this.printTypeArguments(writer, structure);\n        this.printArguments(writer, structure);\n    }\n    printTypeArguments(writer, structure) {\n        if (structure.typeArguments == null || structure.typeArguments.length === 0)\n            return;\n        writer.write(\"<\");\n        for (let i = 0; i < structure.typeArguments.length; i++) {\n            writer.conditionalWrite(i > 0, \", \");\n            writer.write(this.getTextWithQueuedChildIndentation(writer, structure.typeArguments[i]));\n        }\n        writer.write(\">\");\n    }\n    printArguments(writer, structure) {\n        if (structure.arguments == null)\n            return;\n        writer.write(\"(\");\n        const args = structure.arguments instanceof Array ? structure.arguments : [structure.arguments];\n        for (let i = 0; i < args.length; i++) {\n            writer.conditionalWrite(i > 0, \", \");\n            writer.write(this.getTextWithQueuedChildIndentation(writer, args[i]));\n        }\n        writer.write(\")\");\n    }\n    printMultiple(writer, structures, separator) {\n        if (structures == null || structures.length === 0)\n            return;\n        for (const structure of structures) {\n            this.printText(writer, structure);\n            separator();\n        }\n    }\n}\n\nclass JSDocStructurePrinter extends NodePrinter {\n    printDocs(writer, structures) {\n        if (structures == null)\n            return;\n        for (const structure of structures) {\n            this.printText(writer, structure);\n            writer.newLine();\n        }\n    }\n    printTextInternal(writer, structure) {\n        const text = getText(this);\n        const lines = text.split(/\\r?\\n/);\n        const startsWithNewLine = lines[0].length === 0;\n        const isSingleLine = lines.length <= 1;\n        const startIndex = startsWithNewLine ? 1 : 0;\n        writer.write(\"/**\");\n        if (isSingleLine)\n            writer.space();\n        else\n            writer.newLine();\n        if (isSingleLine)\n            writer.write(lines[startIndex]);\n        else {\n            for (let i = startIndex; i < lines.length; i++) {\n                writer.write(` *`);\n                if (lines[i].length > 0)\n                    writer.write(` ${lines[i]}`);\n                writer.newLine();\n            }\n        }\n        writer.spaceIfLastNot();\n        writer.write(\"*/\");\n        function getText(jsdocPrinter) {\n            if (typeof structure === \"string\")\n                return structure;\n            const tempWriter = jsdocPrinter.getNewWriter(writer);\n            if (typeof structure === \"function\")\n                structure(tempWriter);\n            else {\n                if (structure.description)\n                    printTextFromStringOrWriter(tempWriter, structure.description);\n                if (structure.tags && structure.tags.length > 0) {\n                    if (tempWriter.getLength() > 0)\n                        tempWriter.newLine();\n                    jsdocPrinter.factory.forJSDocTag({ printStarsOnNewLine: false }).printTexts(tempWriter, structure.tags);\n                }\n            }\n            return tempWriter.toString();\n        }\n    }\n}\n\nclass JSDocTagStructurePrinter extends NodePrinter {\n    constructor(factory, options) {\n        super(factory);\n        this.options = options;\n    }\n    printTexts(writer, structures) {\n        if (structures == null)\n            return;\n        for (let i = 0; i < structures.length; i++) {\n            if (i > 0) {\n                writer.newLine();\n                writer.conditionalWrite(this.options.printStarsOnNewLine, \" * \");\n            }\n            this.printText(writer, structures[i]);\n        }\n    }\n    printTextInternal(writer, structure) {\n        const text = getText(this);\n        const lines = text.split(/\\r?\\n/);\n        for (let i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                writer.newLine();\n                if (this.options.printStarsOnNewLine)\n                    writer.write(` *`);\n            }\n            if (lines[i].length > 0) {\n                if (this.options.printStarsOnNewLine && i > 0)\n                    writer.space();\n                writer.write(lines[i]);\n            }\n        }\n        function getText(tagPrinter) {\n            if (typeof structure === \"string\")\n                return structure;\n            const tempWriter = tagPrinter.getNewWriter(writer);\n            if (typeof structure === \"function\")\n                structure(tempWriter);\n            else {\n                if (structure.text)\n                    printTextFromStringOrWriter(tempWriter, structure.text);\n                const currentText = tempWriter.toString();\n                tempWriter.unsafeInsert(0, `@${structure.tagName}` + (currentText.length > 0 && !common.StringUtils.startsWithNewLine(currentText) ? \" \" : \"\"));\n            }\n            return tempWriter.toString();\n        }\n    }\n}\n\nclass EnumDeclarationStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new BlankLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        this.factory.forModifierableNode().printText(writer, structure);\n        writer.conditionalWrite(structure.isConst, \"const \");\n        writer.write(`enum ${structure.name} `).inlineBlock(() => {\n            this.factory.forEnumMember().printTexts(writer, structure.members);\n        });\n    }\n}\n\nclass EnumMemberStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new CommaNewLineSeparatedStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        if (structure instanceof Function) {\n            structure(writer);\n            return;\n        }\n        else if (typeof structure === \"string\") {\n            writer.write(structure);\n            return;\n        }\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        if (isValidVariableName(structure.name) || common.StringUtils.isQuoted(structure.name))\n            writer.write(structure.name);\n        else\n            writer.quote(structure.name);\n        if (typeof structure.value === \"string\") {\n            const { value } = structure;\n            writer.hangingIndent(() => writer.write(` = `).quote(value));\n        }\n        else if (typeof structure.value === \"number\")\n            writer.write(` = ${structure.value}`);\n        else\n            this.factory.forInitializerExpressionableNode().printText(writer, structure);\n    }\n}\n\nclass ObjectLiteralExpressionPropertyStructurePrinter extends Printer {\n    constructor(factory) {\n        super();\n        this.factory = factory;\n        this.multipleWriter = new CommaNewLineSeparatedStructuresPrinter(this);\n        this.options = { isAmbient: false };\n    }\n    printTexts(writer, members) {\n        this.multipleWriter.printText(writer, members);\n    }\n    printText(writer, member) {\n        if (typeof member === \"string\" || member instanceof Function || member == null) {\n            this.printTextOrWriterFunc(writer, member);\n            return;\n        }\n        switch (member.kind) {\n            case exports.StructureKind.PropertyAssignment:\n                this.factory.forPropertyAssignment().printText(writer, member);\n                break;\n            case exports.StructureKind.ShorthandPropertyAssignment:\n                this.factory.forShorthandPropertyAssignment().printText(writer, member);\n                break;\n            case exports.StructureKind.SpreadAssignment:\n                this.factory.forSpreadAssignment().printText(writer, member);\n                break;\n            case exports.StructureKind.Method:\n                this.factory.forMethodDeclaration(this.options).printText(writer, member);\n                break;\n            case exports.StructureKind.GetAccessor:\n                this.factory.forGetAccessorDeclaration(this.options).printText(writer, member);\n                break;\n            case exports.StructureKind.SetAccessor:\n                this.factory.forSetAccessorDeclaration(this.options).printText(writer, member);\n                break;\n            default:\n                common.errors.throwNotImplementedForNeverValueError(member);\n        }\n    }\n}\n\nclass PropertyAssignmentStructurePrinter extends NodePrinter {\n    printTextInternal(writer, structure) {\n        writer.hangingIndent(() => {\n            writer.write(`${structure.name}: `);\n            printTextFromStringOrWriter(writer, structure.initializer);\n        });\n    }\n}\n\nclass ShorthandPropertyAssignmentStructurePrinter extends NodePrinter {\n    printTextInternal(writer, structure) {\n        writer.write(`${structure.name}`);\n    }\n}\n\nclass SpreadAssignmentStructurePrinter extends NodePrinter {\n    printTextInternal(writer, structure) {\n        writer.hangingIndent(() => {\n            writer.write(\"...\");\n            printTextFromStringOrWriter(writer, structure.expression);\n        });\n    }\n}\n\nclass FunctionDeclarationStructurePrinter extends NodePrinter {\n    constructor(factory, options) {\n        super(factory);\n        this.options = options;\n    }\n    printTexts(writer, structures) {\n        if (structures == null)\n            return;\n        for (let i = 0; i < structures.length; i++) {\n            const currentStructure = structures[i];\n            if (i > 0) {\n                const previousStructure = structures[i - 1];\n                if (this.options.isAmbient || previousStructure.hasDeclareKeyword && currentStructure.hasDeclareKeyword)\n                    writer.newLine();\n                else\n                    writer.blankLine();\n            }\n            this.printText(writer, currentStructure);\n        }\n    }\n    printTextInternal(writer, structure) {\n        this.printOverloads(writer, structure.name, getOverloadStructures());\n        this.printHeader(writer, structure.name, structure);\n        if (this.options.isAmbient || structure.hasDeclareKeyword)\n            writer.write(\";\");\n        else {\n            writer.space().inlineBlock(() => {\n                this.factory.forStatementedNode({ isAmbient: false }).printText(writer, structure);\n            });\n        }\n        function getOverloadStructures() {\n            const overloads = common.ObjectUtils.clone(structure.overloads);\n            if (overloads == null || overloads.length === 0)\n                return;\n            for (const overload of overloads) {\n                setValueIfUndefined(overload, \"hasDeclareKeyword\", structure.hasDeclareKeyword);\n                setValueIfUndefined(overload, \"isExported\", structure.isExported);\n                setValueIfUndefined(overload, \"isDefaultExport\", structure.isDefaultExport);\n            }\n            return overloads;\n        }\n    }\n    printOverloads(writer, name, structures) {\n        if (structures == null || structures.length === 0)\n            return;\n        for (const structure of structures) {\n            this.printOverload(writer, name, structure);\n            writer.newLine();\n        }\n    }\n    printOverload(writer, name, structure) {\n        this.printLeadingTrivia(writer, structure);\n        this.printHeader(writer, name, structure);\n        writer.write(\";\");\n        this.printTrailingTrivia(writer, structure);\n    }\n    printHeader(writer, name, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        this.factory.forModifierableNode().printText(writer, structure);\n        writer.write(`function`);\n        writer.conditionalWrite(structure.isGenerator, \"*\");\n        if (!common.StringUtils.isNullOrWhitespace(name))\n            writer.write(` ${name}`);\n        this.factory.forTypeParameterDeclaration().printTextsWithBrackets(writer, structure.typeParameters);\n        this.factory.forParameterDeclaration().printTextsWithParenthesis(writer, structure.parameters);\n        this.factory.forReturnTypedNode().printText(writer, structure);\n    }\n}\n\nclass ParameterDeclarationStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new CommaSeparatedStructuresPrinter(this);\n    }\n    printTextsWithParenthesis(writer, structures) {\n        writer.write(\"(\");\n        if (structures != null)\n            this.factory.forParameterDeclaration().printTexts(writer, structures);\n        writer.write(`)`);\n    }\n    printTexts(writer, structures) {\n        if (structures == null || structures.length === 0)\n            return;\n        writer.hangingIndent(() => {\n            this.multipleWriter.printText(writer, structures);\n        });\n    }\n    printTextInternal(writer, structure) {\n        if (structure.name == null) {\n            throw new common.errors\n                .NotImplementedError(\"Not implemented scenario where parameter declaration structure doesn't have a name. Please open an issue if you need this.\");\n        }\n        this.factory.forDecorator().printTextsInline(writer, structure.decorators);\n        this.factory.forModifierableNode().printText(writer, structure);\n        writer.conditionalWrite(structure.isRestParameter, \"...\");\n        writer.write(structure.name);\n        writer.conditionalWrite(structure.hasQuestionToken, \"?\");\n        this.factory.forTypedNode(\":\", structure.hasQuestionToken).printText(writer, structure);\n        this.factory.forInitializerExpressionableNode().printText(writer, structure);\n    }\n}\n\nclass CallSignatureDeclarationStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new NewLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        this.factory.forTypeParameterDeclaration().printTextsWithBrackets(writer, structure.typeParameters);\n        this.factory.forParameterDeclaration().printTextsWithParenthesis(writer, structure.parameters);\n        this.factory.forReturnTypedNode(true).printText(writer, structure);\n        writer.write(\";\");\n    }\n}\n\nclass ConstructSignatureDeclarationStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new NewLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        writer.write(\"new\");\n        this.factory.forTypeParameterDeclaration().printTextsWithBrackets(writer, structure.typeParameters);\n        this.factory.forParameterDeclaration().printTextsWithParenthesis(writer, structure.parameters);\n        this.factory.forReturnTypedNode().printText(writer, structure);\n        writer.write(\";\");\n    }\n}\n\nclass IndexSignatureDeclarationStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new NewLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        this.factory.forModifierableNode().printText(writer, structure);\n        writer.write(`[${structure.keyName || \"key\"}: ${structure.keyType || \"string\"}]`);\n        this.factory.forReturnTypedNode().printText(writer, structure);\n        writer.write(\";\");\n    }\n}\n\nclass InterfaceDeclarationStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new BlankLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        this.factory.forModifierableNode().printText(writer, structure);\n        writer.write(`interface ${structure.name}`);\n        this.factory.forTypeParameterDeclaration().printTextsWithBrackets(writer, structure.typeParameters);\n        writer.space();\n        if (structure.extends != null) {\n            const extendsText = structure.extends instanceof Array\n                ? structure.extends.map(i => this.getText(writer, i)).join(\", \")\n                : this.getText(writer, structure.extends);\n            if (!common.StringUtils.isNullOrWhitespace(extendsText))\n                writer.hangingIndent(() => writer.write(`extends ${extendsText} `));\n        }\n        writer.inlineBlock(() => {\n            this.factory.forTypeElementMemberedNode().printText(writer, structure);\n        });\n    }\n}\n\nclass MethodSignatureStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new NewLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        writer.write(structure.name);\n        writer.conditionalWrite(structure.hasQuestionToken, \"?\");\n        this.factory.forTypeParameterDeclaration().printTextsWithBrackets(writer, structure.typeParameters);\n        this.factory.forParameterDeclaration().printTextsWithParenthesis(writer, structure.parameters);\n        this.factory.forReturnTypedNode().printText(writer, structure);\n        writer.write(\";\");\n    }\n}\n\nclass PropertySignatureStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new NewLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        this.factory.forModifierableNode().printText(writer, structure);\n        writer.write(structure.name);\n        writer.conditionalWrite(structure.hasQuestionToken, \"?\");\n        this.factory.forTypedNode(\":\").printText(writer, structure);\n        this.factory.forInitializerExpressionableNode().printText(writer, structure);\n        writer.write(\";\");\n    }\n}\n\nclass TypeElementMemberedNodeStructurePrinter extends Printer {\n    constructor(factory) {\n        super();\n        this.factory = factory;\n    }\n    printText(writer, structure) {\n        this.factory.forCallSignatureDeclaration().printTexts(writer, structure.callSignatures);\n        this.conditionalSeparator(writer, structure.constructSignatures);\n        this.factory.forConstructSignatureDeclaration().printTexts(writer, structure.constructSignatures);\n        this.conditionalSeparator(writer, structure.indexSignatures);\n        this.factory.forIndexSignatureDeclaration().printTexts(writer, structure.indexSignatures);\n        this.conditionalSeparator(writer, structure.properties);\n        this.factory.forPropertySignature().printTexts(writer, structure.properties);\n        this.conditionalSeparator(writer, structure.methods);\n        this.factory.forMethodSignature().printTexts(writer, structure.methods);\n    }\n    conditionalSeparator(writer, structures) {\n        if (!common.ArrayUtils.isNullOrEmpty(structures) && !writer.isAtStartOfFirstLineOfBlock())\n            writer.newLine();\n    }\n}\n\nclass TypeElementMemberStructurePrinter extends Printer {\n    constructor(factory) {\n        super();\n        this.factory = factory;\n    }\n    printTexts(writer, members) {\n        if (members == null)\n            return;\n        if (typeof members === \"string\" || members instanceof Function)\n            this.printText(writer, members);\n        else {\n            for (const member of members) {\n                if (isLastNonWhitespaceCharCloseBrace(writer))\n                    writer.blankLineIfLastNot();\n                else if (!writer.isAtStartOfFirstLineOfBlock())\n                    writer.newLineIfLastNot();\n                this.printText(writer, member);\n            }\n        }\n    }\n    printText(writer, members) {\n        if (typeof members === \"string\" || members instanceof Function || members == null) {\n            this.printTextOrWriterFunc(writer, members);\n            return;\n        }\n        switch (members.kind) {\n            case exports.StructureKind.PropertySignature:\n                this.factory.forPropertySignature().printText(writer, members);\n                break;\n            case exports.StructureKind.MethodSignature:\n                this.factory.forMethodSignature().printText(writer, members);\n                break;\n            case exports.StructureKind.CallSignature:\n                this.factory.forCallSignatureDeclaration().printText(writer, members);\n                break;\n            case exports.StructureKind.IndexSignature:\n                this.factory.forIndexSignatureDeclaration().printText(writer, members);\n                break;\n            case exports.StructureKind.ConstructSignature:\n                this.factory.forConstructSignatureDeclaration().printText(writer, members);\n                break;\n            default:\n                common.errors.throwNotImplementedForNeverValueError(members);\n        }\n    }\n}\n\nclass JsxAttributeDeciderStructurePrinter extends NodePrinter {\n    printTextInternal(writer, structure) {\n        if (isJsxAttribute())\n            this.factory.forJsxAttribute().printTextWithoutTrivia(writer, structure);\n        else if (structure.kind === exports.StructureKind.JsxSpreadAttribute)\n            this.factory.forJsxSpreadAttribute().printTextWithoutTrivia(writer, structure);\n        else\n            throw common.errors.throwNotImplementedForNeverValueError(structure);\n        function isJsxAttribute(struct) {\n            return structure.kind == null || structure.kind === exports.StructureKind.JsxAttribute;\n        }\n    }\n}\n\nclass JsxAttributeStructurePrinter extends NodePrinter {\n    printTextInternal(writer, structure) {\n        writer.write(structure.name);\n        if (structure.initializer != null)\n            writer.write(\"=\").write(structure.initializer);\n    }\n}\n\nclass JsxChildDeciderStructurePrinter extends NodePrinter {\n    printTextInternal(writer, structure) {\n        if (isJsxElement(structure))\n            this.factory.forJsxElement().printText(writer, structure);\n        else if (structure.kind === exports.StructureKind.JsxSelfClosingElement)\n            this.factory.forJsxSelfClosingElement().printText(writer, structure);\n        else\n            common.errors.throwNotImplementedForNeverValueError(structure);\n        function isJsxElement(struct) {\n            return struct.kind == null || struct.kind === exports.StructureKind.JsxElement;\n        }\n    }\n}\n\nclass JsxElementStructurePrinter extends NodePrinter {\n    printTextInternal(writer, structure) {\n        writer.hangingIndent(() => {\n            writer.write(`<${structure.name}`);\n            if (structure.attributes)\n                this.printAttributes(writer, structure.attributes);\n            writer.write(\">\");\n        });\n        this.printChildren(writer, structure.children);\n        writer.write(`</${structure.name}>`);\n    }\n    printAttributes(writer, attributes) {\n        const attributePrinter = this.factory.forJsxAttributeDecider();\n        for (const attrib of attributes) {\n            writer.space();\n            attributePrinter.printText(writer, attrib);\n        }\n    }\n    printChildren(writer, children) {\n        if (children == null)\n            return;\n        writer.newLine();\n        writer.indent(() => {\n            for (const child of children) {\n                this.factory.forJsxChildDecider().printText(writer, child);\n                writer.newLine();\n            }\n        });\n    }\n}\n\nclass JsxSelfClosingElementStructurePrinter extends NodePrinter {\n    printTextInternal(writer, structure) {\n        writer.hangingIndent(() => {\n            writer.write(`<${structure.name}`);\n            if (structure.attributes)\n                this.printAttributes(writer, structure.attributes);\n            writer.write(\" />\");\n        });\n    }\n    printAttributes(writer, attributes) {\n        const attributePrinter = this.factory.forJsxAttributeDecider();\n        for (const attrib of attributes) {\n            writer.space();\n            attributePrinter.printText(writer, attrib);\n        }\n    }\n}\n\nclass JsxSpreadAttributeStructurePrinter extends NodePrinter {\n    printTextInternal(writer, structure) {\n        writer.hangingIndent(() => {\n            writer.write(\"{\");\n            writer.write(\"...\");\n            writer.write(structure.expression);\n            writer.write(\"}\");\n        });\n    }\n}\n\nclass AssertEntryStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new CommaNewLineSeparatedStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printAssertClause(writer, structures) {\n        if (!structures)\n            return;\n        writer.write(\"assert \");\n        writer.inlineBlock(() => {\n            this.printTexts(writer, structures);\n        });\n    }\n    printTextInternal(writer, structure) {\n        writer.write(structure.name);\n        writer.write(\": \");\n        writer.quote(structure.value);\n    }\n}\n\nclass ExportAssignmentStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new NewLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        writer.write(\"export\");\n        if (structure.isExportEquals !== false)\n            writer.write(\" = \");\n        else\n            writer.write(\" default \");\n        writer.write(this.getTextWithQueuedChildIndentation(writer, structure.expression)).write(\";\");\n    }\n}\n\nclass ExportDeclarationStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new NewLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        const hasModuleSpecifier = structure.moduleSpecifier != null && structure.moduleSpecifier.length > 0;\n        const hasNamedImport = structure.namedExports != null && structure.namedExports.length > 0;\n        if (hasNamedImport && structure.namespaceExport != null)\n            throw new common.errors.InvalidOperationError(\"An export declaration cannot have both a namespace export and a named export.\");\n        writer.write(\"export\");\n        if (structure.isTypeOnly)\n            writer.write(\" type\");\n        if (structure.namedExports != null && structure.namedExports.length > 0) {\n            writer.space();\n            this.factory.forNamedImportExportSpecifier().printTextsWithBraces(writer, structure.namedExports);\n        }\n        else if (structure.namespaceExport != null) {\n            writer.write(\" *\");\n            if (!common.StringUtils.isNullOrWhitespace(structure.namespaceExport))\n                writer.write(` as ${structure.namespaceExport}`);\n        }\n        else if (!hasModuleSpecifier) {\n            writer.write(\" {\")\n                .conditionalWrite(this.factory.getFormatCodeSettings().insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces, \" \")\n                .write(\"}\");\n        }\n        else {\n            writer.write(` *`);\n        }\n        if (hasModuleSpecifier) {\n            writer.write(\" from \");\n            writer.quote(structure.moduleSpecifier);\n        }\n        if (structure.assertElements) {\n            writer.space();\n            this.factory.forAssertEntry().printAssertClause(writer, structure.assertElements);\n        }\n        writer.write(\";\");\n    }\n}\n\nclass ImportDeclarationStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new NewLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        const hasNamedImport = structure.namedImports != null && structure.namedImports.length > 0;\n        if (hasNamedImport && structure.namespaceImport != null)\n            throw new common.errors.InvalidOperationError(\"An import declaration cannot have both a namespace import and a named import.\");\n        writer.write(\"import\");\n        if (structure.isTypeOnly)\n            writer.write(\" type\");\n        if (structure.defaultImport != null) {\n            writer.write(` ${structure.defaultImport}`);\n            writer.conditionalWrite(hasNamedImport || structure.namespaceImport != null, \",\");\n        }\n        if (structure.namespaceImport != null)\n            writer.write(` * as ${structure.namespaceImport}`);\n        if (structure.namedImports != null && structure.namedImports.length > 0) {\n            writer.space();\n            this.factory.forNamedImportExportSpecifier().printTextsWithBraces(writer, structure.namedImports);\n        }\n        writer.conditionalWrite(structure.defaultImport != null || hasNamedImport || structure.namespaceImport != null, \" from\");\n        writer.write(\" \");\n        writer.quote(structure.moduleSpecifier);\n        if (structure.assertElements) {\n            writer.space();\n            this.factory.forAssertEntry().printAssertClause(writer, structure.assertElements);\n        }\n        writer.write(\";\");\n    }\n}\n\nclass ModuleDeclarationStructurePrinter extends NodePrinter {\n    constructor(factory, options) {\n        super(factory);\n        this.options = options;\n        this.blankLineFormattingWriter = new BlankLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.blankLineFormattingWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        structure = this.validateAndGetStructure(structure);\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        this.factory.forModifierableNode().printText(writer, structure);\n        if (structure.declarationKind == null || structure.declarationKind !== exports.ModuleDeclarationKind.Global)\n            writer.write(`${structure.declarationKind || \"namespace\"} ${structure.name}`);\n        else\n            writer.write(\"global\");\n        if (structure.hasDeclareKeyword && common.StringUtils.isQuoted(structure.name.trim())\n            && structure.hasOwnProperty(common.nameof(structure, \"statements\")) && structure.statements == null) {\n            writer.write(\";\");\n        }\n        else {\n            writer.write(\" \");\n            writer.inlineBlock(() => {\n                this.factory.forStatementedNode({\n                    isAmbient: structure.hasDeclareKeyword || this.options.isAmbient,\n                }).printText(writer, structure);\n            });\n        }\n    }\n    validateAndGetStructure(structure) {\n        if (common.StringUtils.isQuoted(structure.name.trim())) {\n            if (structure.declarationKind === exports.ModuleDeclarationKind.Namespace) {\n                throw new common.errors.InvalidOperationError(`Cannot print a namespace with quotes for namespace with name ${structure.name}. `\n                    + `Use ModuleDeclarationKind.Module instead.`);\n            }\n            structure = common.ObjectUtils.clone(structure);\n            setValueIfUndefined(structure, \"hasDeclareKeyword\", true);\n            setValueIfUndefined(structure, \"declarationKind\", exports.ModuleDeclarationKind.Module);\n        }\n        return structure;\n    }\n}\n\nclass NamedImportExportSpecifierStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new CommaSeparatedStructuresPrinter(this);\n    }\n    printTextsWithBraces(writer, structures) {\n        const formatSettings = this.factory.getFormatCodeSettings();\n        writer.write(\"{\");\n        const specifierWriter = this.getNewWriter(writer);\n        this.printTexts(specifierWriter, structures);\n        const specifierText = specifierWriter.toString();\n        if (formatSettings.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces && !common.StringUtils.startsWithNewLine(specifierText))\n            writer.space();\n        writer.write(specifierText);\n        if (formatSettings.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces && !common.StringUtils.endsWithNewLine(specifierText))\n            writer.space();\n        writer.write(\"}\");\n    }\n    printTexts(writer, structures) {\n        if (structures instanceof Function)\n            this.printText(writer, structures);\n        else\n            this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        const specifierWriter = this.getNewWriterWithQueuedChildIndentation(writer);\n        if (typeof structure === \"string\")\n            specifierWriter.write(structure);\n        else if (structure instanceof Function)\n            structure(specifierWriter);\n        else {\n            specifierWriter.write(structure.name);\n            if (!common.StringUtils.isNullOrWhitespace(structure.alias)) {\n                if (!specifierWriter.isLastNewLine())\n                    specifierWriter.space();\n                specifierWriter.write(`as ${structure.alias}`);\n            }\n        }\n        writer.write(specifierWriter.toString());\n    }\n}\n\nclass SourceFileStructurePrinter extends NodePrinter {\n    constructor(factory, options) {\n        super(factory);\n        this.options = options;\n    }\n    printTextInternal(writer, structure) {\n        this.factory.forStatementedNode(this.options).printText(writer, structure);\n        writer.conditionalNewLine(!writer.isAtStartOfFirstLineOfBlock() && !writer.isLastNewLine());\n    }\n}\n\nclass StatementedNodeStructurePrinter extends Printer {\n    constructor(factory, options) {\n        super();\n        this.factory = factory;\n        this.options = options;\n    }\n    printText(writer, structure) {\n        this.factory.forStatement(this.options).printTexts(writer, structure.statements);\n    }\n}\n\nclass StatementStructurePrinter extends Printer {\n    constructor(factory, options) {\n        super();\n        this.factory = factory;\n        this.options = options;\n    }\n    printTexts(writer, statements) {\n        if (statements == null)\n            return;\n        if (typeof statements === \"string\" || statements instanceof Function)\n            this.printText(writer, statements);\n        else {\n            for (const statement of statements) {\n                if (isLastNonWhitespaceCharCloseBrace(writer))\n                    writer.blankLineIfLastNot();\n                else if (!writer.isAtStartOfFirstLineOfBlock())\n                    writer.newLineIfLastNot();\n                this.printText(writer, statement);\n            }\n        }\n    }\n    printText(writer, statement) {\n        if (typeof statement === \"string\" || statement instanceof Function || statement == null) {\n            this.printTextOrWriterFunc(writer, statement);\n            return;\n        }\n        switch (statement.kind) {\n            case exports.StructureKind.Function:\n                if (!this.options.isAmbient)\n                    ensureBlankLine();\n                this.factory.forFunctionDeclaration(this.options).printText(writer, statement);\n                break;\n            case exports.StructureKind.Class:\n                ensureBlankLine();\n                this.factory.forClassDeclaration(this.options).printText(writer, statement);\n                break;\n            case exports.StructureKind.Interface:\n                ensureBlankLine();\n                this.factory.forInterfaceDeclaration().printText(writer, statement);\n                break;\n            case exports.StructureKind.TypeAlias:\n                this.factory.forTypeAliasDeclaration().printText(writer, statement);\n                break;\n            case exports.StructureKind.VariableStatement:\n                this.factory.forVariableStatement().printText(writer, statement);\n                break;\n            case exports.StructureKind.ImportDeclaration:\n                this.factory.forImportDeclaration().printText(writer, statement);\n                break;\n            case exports.StructureKind.Module:\n                ensureBlankLine();\n                this.factory.forModuleDeclaration(this.options).printText(writer, statement);\n                break;\n            case exports.StructureKind.Enum:\n                ensureBlankLine();\n                this.factory.forEnumDeclaration().printText(writer, statement);\n                break;\n            case exports.StructureKind.ExportDeclaration:\n                this.factory.forExportDeclaration().printText(writer, statement);\n                break;\n            case exports.StructureKind.ExportAssignment:\n                this.factory.forExportAssignment().printText(writer, statement);\n                break;\n            default:\n                common.errors.throwNotImplementedForNeverValueError(statement);\n        }\n        function ensureBlankLine() {\n            if (!writer.isAtStartOfFirstLineOfBlock())\n                writer.blankLineIfLastNot();\n        }\n    }\n}\n\nexports.VariableDeclarationKind = void 0;\n(function (VariableDeclarationKind) {\n    VariableDeclarationKind[\"Var\"] = \"var\";\n    VariableDeclarationKind[\"Let\"] = \"let\";\n    VariableDeclarationKind[\"Const\"] = \"const\";\n})(exports.VariableDeclarationKind || (exports.VariableDeclarationKind = {}));\n\nclass VariableStatementStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new NewLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        writer.hangingIndent(() => {\n            this.factory.forModifierableNode().printText(writer, structure);\n            writer.write(`${structure.declarationKind || exports.VariableDeclarationKind.Let} `);\n            this.factory.forVariableDeclaration().printTexts(writer, structure.declarations);\n            writer.write(\";\");\n        });\n    }\n}\n\nclass TypeAliasDeclarationStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new NewLineFormattingStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        this.factory.forJSDoc().printDocs(writer, structure.docs);\n        this.factory.forModifierableNode().printText(writer, structure);\n        writer.write(`type ${structure.name}`);\n        this.factory.forTypeParameterDeclaration().printTextsWithBrackets(writer, structure.typeParameters);\n        this.factory.forTypedNode(\" =\").printText(writer, structure);\n        writer.write(\";\");\n    }\n}\n\nclass TypeParameterDeclarationStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new CommaSeparatedStructuresPrinter(this);\n    }\n    printTextsWithBrackets(writer, structures) {\n        if (structures == null || structures.length === 0)\n            return;\n        writer.write(\"<\");\n        this.printTexts(writer, structures);\n        writer.write(\">\");\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        if (typeof structure === \"string\") {\n            writer.write(structure);\n            return;\n        }\n        writer.hangingIndent(() => {\n            if (structure.variance != null) {\n                if ((structure.variance & exports.TypeParameterVariance.In) !== 0)\n                    writer.write(\"in \");\n                if ((structure.variance & exports.TypeParameterVariance.Out) !== 0)\n                    writer.write(\"out \");\n            }\n            writer.write(structure.name);\n            if (structure.constraint != null) {\n                const constraintText = this.getText(writer, structure.constraint);\n                if (!common.StringUtils.isNullOrWhitespace(constraintText))\n                    writer.write(` extends ${constraintText}`);\n            }\n            if (structure.default != null) {\n                const defaultText = this.getText(writer, structure.default);\n                if (!common.StringUtils.isNullOrWhitespace(defaultText))\n                    writer.write(` = ${defaultText}`);\n            }\n        });\n    }\n}\n\nclass VariableDeclarationStructurePrinter extends NodePrinter {\n    constructor() {\n        super(...arguments);\n        this.multipleWriter = new CommaSeparatedStructuresPrinter(this);\n    }\n    printTexts(writer, structures) {\n        this.multipleWriter.printText(writer, structures);\n    }\n    printTextInternal(writer, structure) {\n        writer.write(structure.name);\n        writer.conditionalWrite(structure.hasExclamationToken, \"!\");\n        this.factory.forTypedNode(\":\").printText(writer, structure);\n        this.factory.forInitializerExpressionableNode().printText(writer, structure);\n    }\n}\n\nfunction ExtendsClauseableNode(Base) {\n    return class extends Base {\n        getExtends() {\n            var _a;\n            const extendsClause = this.getHeritageClauseByKind(common.SyntaxKind.ExtendsKeyword);\n            return (_a = extendsClause === null || extendsClause === void 0 ? void 0 : extendsClause.getTypeNodes()) !== null && _a !== void 0 ? _a : [];\n        }\n        addExtends(text) {\n            return this.insertExtends(this.getExtends().length, text);\n        }\n        insertExtends(index, texts) {\n            const originalExtends = this.getExtends();\n            const wasStringInput = typeof texts === \"string\";\n            if (typeof texts === \"string\") {\n                common.errors.throwIfWhitespaceOrNotString(texts, \"texts\");\n                texts = [texts];\n            }\n            else if (texts.length === 0) {\n                return [];\n            }\n            const writer = this._getWriterWithQueuedChildIndentation();\n            const structurePrinter = new CommaSeparatedStructuresPrinter(new StringStructurePrinter());\n            structurePrinter.printText(writer, texts);\n            index = verifyAndGetIndex(index, originalExtends.length);\n            if (originalExtends.length > 0) {\n                const extendsClause = this.getHeritageClauseByKindOrThrow(common.SyntaxKind.ExtendsKeyword);\n                insertIntoCommaSeparatedNodes({\n                    parent: extendsClause.getFirstChildByKindOrThrow(common.SyntaxKind.SyntaxList),\n                    currentNodes: originalExtends,\n                    insertIndex: index,\n                    newText: writer.toString(),\n                    useTrailingCommas: false,\n                });\n            }\n            else {\n                const openBraceToken = this.getFirstChildByKindOrThrow(common.SyntaxKind.OpenBraceToken);\n                const openBraceStart = openBraceToken.getStart();\n                const isLastSpace = /\\s/.test(this.getSourceFile().getFullText()[openBraceStart - 1]);\n                let insertText = `extends ${writer.toString()} `;\n                if (!isLastSpace)\n                    insertText = \" \" + insertText;\n                insertIntoParentTextRange({\n                    parent: this,\n                    insertPos: openBraceStart,\n                    newText: insertText,\n                });\n            }\n            const newExtends = this.getExtends();\n            return wasStringInput ? newExtends[index] : getNodesToReturn(originalExtends, newExtends, index, false);\n        }\n        removeExtends(implementsNodeOrIndex) {\n            const extendsClause = this.getHeritageClauseByKind(common.SyntaxKind.ExtendsKeyword);\n            if (extendsClause == null)\n                throw new common.errors.InvalidOperationError(\"Cannot remove an extends when none exist.\");\n            extendsClause.removeExpression(implementsNodeOrIndex);\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.extends != null) {\n                this.getExtends().forEach(e => this.removeExtends(e));\n                this.addExtends(structure.extends);\n            }\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                extends: this.getExtends().map(e => e.getText()),\n            });\n        }\n    };\n}\n\nfunction GeneratorableNode(Base) {\n    return class extends Base {\n        isGenerator() {\n            return this.compilerNode.asteriskToken != null;\n        }\n        getAsteriskToken() {\n            return this._getNodeFromCompilerNodeIfExists(this.compilerNode.asteriskToken);\n        }\n        getAsteriskTokenOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getAsteriskToken(), \"Expected to find an asterisk token.\");\n        }\n        setIsGenerator(value) {\n            const asteriskToken = this.getAsteriskToken();\n            const isSet = asteriskToken != null;\n            if (isSet === value)\n                return this;\n            if (asteriskToken == null) {\n                insertIntoParentTextRange({\n                    insertPos: getAsteriskInsertPos(this),\n                    parent: this,\n                    newText: \"*\",\n                });\n            }\n            else {\n                removeChildrenWithFormatting({\n                    children: [asteriskToken],\n                    getSiblingFormatting: () => FormattingKind.Space,\n                });\n            }\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.isGenerator != null)\n                this.setIsGenerator(structure.isGenerator);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                isGenerator: this.isGenerator(),\n            });\n        }\n    };\n}\nfunction getAsteriskInsertPos(node) {\n    if (node.getKind() === common.SyntaxKind.FunctionDeclaration)\n        return node.getFirstChildByKindOrThrow(common.SyntaxKind.FunctionKeyword).getEnd();\n    const namedNode = node;\n    if (namedNode.getName == null)\n        throw new common.errors.NotImplementedError(\"Expected a name node for a non-function declaration.\");\n    return namedNode.getNameNode().getStart();\n}\n\nfunction HeritageClauseableNode(Base) {\n    return class extends Base {\n        getHeritageClauses() {\n            var _a;\n            const heritageClauses = this.compilerNode.heritageClauses;\n            return (_a = heritageClauses === null || heritageClauses === void 0 ? void 0 : heritageClauses.map(c => this._getNodeFromCompilerNode(c))) !== null && _a !== void 0 ? _a : [];\n        }\n        getHeritageClauseByKindOrThrow(kind) {\n            return common.errors.throwIfNullOrUndefined(this.getHeritageClauseByKind(kind), `Expected to have heritage clause of kind ${common.getSyntaxKindName(kind)}.`);\n        }\n        getHeritageClauseByKind(kind) {\n            return this.getHeritageClauses().find(c => c.compilerNode.token === kind);\n        }\n    };\n}\n\nfunction ImplementsClauseableNode(Base) {\n    return class extends Base {\n        getImplements() {\n            var _a;\n            const implementsClause = this.getHeritageClauseByKind(common.SyntaxKind.ImplementsKeyword);\n            return (_a = implementsClause === null || implementsClause === void 0 ? void 0 : implementsClause.getTypeNodes()) !== null && _a !== void 0 ? _a : [];\n        }\n        addImplements(text) {\n            return this.insertImplements(this.getImplements().length, text);\n        }\n        insertImplements(index, texts) {\n            const originalImplements = this.getImplements();\n            const wasStringInput = typeof texts === \"string\";\n            if (typeof texts === \"string\") {\n                common.errors.throwIfWhitespaceOrNotString(texts, \"texts\");\n                texts = [texts];\n            }\n            else if (texts.length === 0) {\n                return [];\n            }\n            const writer = this._getWriterWithQueuedChildIndentation();\n            const structurePrinter = new CommaSeparatedStructuresPrinter(new StringStructurePrinter());\n            structurePrinter.printText(writer, texts);\n            const heritageClauses = this.getHeritageClauses();\n            index = verifyAndGetIndex(index, originalImplements.length);\n            if (originalImplements.length > 0) {\n                const implementsClause = this.getHeritageClauseByKindOrThrow(common.SyntaxKind.ImplementsKeyword);\n                insertIntoCommaSeparatedNodes({\n                    parent: implementsClause.getFirstChildByKindOrThrow(common.SyntaxKind.SyntaxList),\n                    currentNodes: originalImplements,\n                    insertIndex: index,\n                    newText: writer.toString(),\n                    useTrailingCommas: false,\n                });\n            }\n            else {\n                const openBraceToken = this.getFirstChildByKindOrThrow(common.SyntaxKind.OpenBraceToken);\n                const openBraceStart = openBraceToken.getStart();\n                const isLastSpace = /\\s/.test(this.getSourceFile().getFullText()[openBraceStart - 1]);\n                let insertText = `implements ${writer.toString()} `;\n                if (!isLastSpace)\n                    insertText = \" \" + insertText;\n                insertIntoParentTextRange({\n                    parent: heritageClauses.length === 0 ? this : heritageClauses[0].getParentSyntaxListOrThrow(),\n                    insertPos: openBraceStart,\n                    newText: insertText,\n                });\n            }\n            const newImplements = this.getImplements();\n            return wasStringInput ? newImplements[0] : getNodesToReturn(originalImplements, newImplements, index, false);\n        }\n        removeImplements(implementsNodeOrIndex) {\n            const implementsClause = this.getHeritageClauseByKind(common.SyntaxKind.ImplementsKeyword);\n            if (implementsClause == null)\n                throw new common.errors.InvalidOperationError(\"Cannot remove an implements when none exist.\");\n            implementsClause.removeExpression(implementsNodeOrIndex);\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.implements != null) {\n                this.getImplements().forEach(expr => this.removeImplements(expr));\n                this.addImplements(structure.implements);\n            }\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                implements: this.getImplements().map(node => node.getText()),\n            });\n        }\n    };\n}\n\nfunction InitializerExpressionGetableNode(Base) {\n    return class extends Base {\n        hasInitializer() {\n            return this.compilerNode.initializer != null;\n        }\n        getInitializerIfKindOrThrow(kind) {\n            return common.errors.throwIfNullOrUndefined(this.getInitializerIfKind(kind), `Expected to find an initializer of kind '${common.getSyntaxKindName(kind)}'.`);\n        }\n        getInitializerIfKind(kind) {\n            const initializer = this.getInitializer();\n            if (initializer != null && initializer.getKind() !== kind)\n                return undefined;\n            return initializer;\n        }\n        getInitializerOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getInitializer(), \"Expected to find an initializer.\");\n        }\n        getInitializer() {\n            return this._getNodeFromCompilerNodeIfExists(this.compilerNode.initializer);\n        }\n    };\n}\n\nfunction InitializerExpressionableNode(Base) {\n    return apply(InitializerExpressionGetableNode(Base));\n}\nfunction apply(Base) {\n    return class extends Base {\n        removeInitializer() {\n            const initializer = this.getInitializer();\n            if (initializer == null)\n                return this;\n            const previousSibling = initializer.getPreviousSiblingIfKindOrThrow(common.SyntaxKind.EqualsToken);\n            removeChildren({\n                children: [previousSibling, initializer],\n                removePrecedingSpaces: true,\n            });\n            return this;\n        }\n        setInitializer(textOrWriterFunction) {\n            const text = getTextFromStringOrWriter(this._getWriterWithQueuedChildIndentation(), textOrWriterFunction);\n            common.errors.throwIfWhitespaceOrNotString(text, \"textOrWriterFunction\");\n            if (this.hasInitializer())\n                this.removeInitializer();\n            const semiColonToken = this.getLastChildIfKind(common.SyntaxKind.SemicolonToken);\n            insertIntoParentTextRange({\n                insertPos: semiColonToken != null ? semiColonToken.getPos() : this.getEnd(),\n                parent: this,\n                newText: ` = ${text}`,\n            });\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.initializer != null)\n                this.setInitializer(structure.initializer);\n            else if (structure.hasOwnProperty(common.nameof(structure, \"initializer\")))\n                this.removeInitializer();\n            return this;\n        }\n        getStructure() {\n            const initializer = this.getInitializer();\n            return callBaseGetStructure(Base.prototype, this, {\n                initializer: initializer ? initializer.getText() : undefined,\n            });\n        }\n    };\n}\n\nfunction JSDocableNode(Base) {\n    return class extends Base {\n        getJsDocs() {\n            var _a;\n            const nodes = this.compilerNode.jsDoc;\n            return (_a = nodes === null || nodes === void 0 ? void 0 : nodes.map(n => this._getNodeFromCompilerNode(n))) !== null && _a !== void 0 ? _a : [];\n        }\n        addJsDoc(structure) {\n            return this.addJsDocs([structure])[0];\n        }\n        addJsDocs(structures) {\n            return this.insertJsDocs(getEndIndexFromArray(this.compilerNode.jsDoc), structures);\n        }\n        insertJsDoc(index, structure) {\n            return this.insertJsDocs(index, [structure])[0];\n        }\n        insertJsDocs(index, structures) {\n            if (common.ArrayUtils.isNullOrEmpty(structures))\n                return [];\n            const writer = this._getWriterWithQueuedIndentation();\n            const structurePrinter = this._context.structurePrinterFactory.forJSDoc();\n            structurePrinter.printDocs(writer, structures);\n            writer.write(\"\");\n            const code = writer.toString();\n            const nodes = this.getJsDocs();\n            index = verifyAndGetIndex(index, nodes.length);\n            const insertPos = index === nodes.length ? this.getStart() : nodes[index].getStart();\n            insertIntoParentTextRange({\n                insertPos,\n                parent: this,\n                newText: code,\n            });\n            return getNodesToReturn(nodes, this.getJsDocs(), index, false);\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.docs != null) {\n                this.getJsDocs().forEach(doc => doc.remove());\n                this.addJsDocs(structure.docs);\n            }\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                docs: this.getJsDocs().map(jsdoc => jsdoc.getStructure()),\n            });\n        }\n    };\n}\n\nfunction LiteralLikeNode(Base) {\n    return class extends Base {\n        getLiteralText() {\n            return this.compilerNode.text;\n        }\n        isTerminated() {\n            return !(this.compilerNode.isUnterminated || false);\n        }\n        hasExtendedUnicodeEscape() {\n            return this.compilerNode.hasExtendedUnicodeEscape || false;\n        }\n    };\n}\n\nfunction ModifierableNode(Base) {\n    return class extends Base {\n        getModifiers() {\n            return this.getCompilerModifiers().map(m => this._getNodeFromCompilerNode(m));\n        }\n        getFirstModifierByKindOrThrow(kind) {\n            return common.errors.throwIfNullOrUndefined(this.getFirstModifierByKind(kind), `Expected a modifier of syntax kind: ${common.getSyntaxKindName(kind)}`);\n        }\n        getFirstModifierByKind(kind) {\n            for (const modifier of this.getCompilerModifiers()) {\n                if (modifier.kind === kind)\n                    return this._getNodeFromCompilerNode(modifier);\n            }\n            return undefined;\n        }\n        hasModifier(textOrKind) {\n            if (typeof textOrKind === \"string\")\n                return this.getModifiers().some(m => m.getText() === textOrKind);\n            else\n                return this.getCompilerModifiers().some(m => m.kind === textOrKind);\n        }\n        toggleModifier(text, value) {\n            if (value == null)\n                value = !this.hasModifier(text);\n            if (value)\n                this.addModifier(text);\n            else\n                this.removeModifier(text);\n            return this;\n        }\n        addModifier(text) {\n            const modifiers = this.getModifiers();\n            const existingModifier = modifiers.find(m => m.getText() === text);\n            if (existingModifier != null)\n                return existingModifier;\n            const insertPos = getInsertPos(this);\n            let startPos;\n            let newText;\n            const isFirstModifier = modifiers.length === 0 || insertPos === modifiers[0].getStart();\n            if (isFirstModifier) {\n                newText = text + \" \";\n                startPos = insertPos;\n            }\n            else {\n                newText = \" \" + text;\n                startPos = insertPos + 1;\n            }\n            insertIntoParentTextRange({\n                parent: modifiers.length === 0 ? this : modifiers[0].getParentSyntaxListOrThrow(),\n                insertPos,\n                newText,\n            });\n            return this.getModifiers().find(m => m.getStart() === startPos);\n            function getInsertPos(node) {\n                let pos = getInitialInsertPos();\n                for (const addAfterText of getAddAfterModifierTexts(text)) {\n                    for (let i = 0; i < modifiers.length; i++) {\n                        const modifier = modifiers[i];\n                        if (modifier.getText() === addAfterText) {\n                            if (pos < modifier.getEnd())\n                                pos = modifier.getEnd();\n                            break;\n                        }\n                    }\n                }\n                return pos;\n                function getInitialInsertPos() {\n                    if (modifiers.length > 0)\n                        return modifiers[0].getStart();\n                    for (const child of node._getChildrenIterator()) {\n                        if (child.getKind() === common.SyntaxKind.SyntaxList || common.ts.isJSDocCommentContainingNode(child.compilerNode))\n                            continue;\n                        return child.getStart();\n                    }\n                    return node.getStart();\n                }\n            }\n        }\n        removeModifier(text) {\n            const modifiers = this.getModifiers();\n            const modifier = modifiers.find(m => m.getText() === text);\n            if (modifier == null)\n                return false;\n            removeChildren({\n                children: [modifiers.length === 1 ? modifier.getParentSyntaxListOrThrow() : modifier],\n                removeFollowingSpaces: true,\n            });\n            return true;\n        }\n        getCompilerModifiers() {\n            return this.compilerNode.modifiers || [];\n        }\n    };\n}\nfunction getAddAfterModifierTexts(text) {\n    switch (text) {\n        case \"export\":\n            return [];\n        case \"public\":\n        case \"protected\":\n        case \"private\":\n            return [];\n        case \"default\":\n            return [\"export\"];\n        case \"const\":\n            return [\"export\"];\n        case \"declare\":\n            return [\"export\", \"default\"];\n        case \"static\":\n            return [\"public\", \"protected\", \"private\"];\n        case \"override\":\n            return [\"public\", \"private\", \"protected\", \"static\"];\n        case \"abstract\":\n            return [\"export\", \"default\", \"declare\", \"public\", \"private\", \"protected\", \"static\", \"override\"];\n        case \"async\":\n            return [\"export\", \"default\", \"declare\", \"public\", \"private\", \"protected\", \"static\", \"override\", \"abstract\"];\n        case \"readonly\":\n            return [\"export\", \"default\", \"declare\", \"public\", \"private\", \"protected\", \"static\", \"override\", \"abstract\"];\n        case \"out\":\n            return [\"in\"];\n        case \"in\":\n            return [];\n        default:\n            common.errors.throwNotImplementedForNeverValueError(text);\n    }\n}\n\nfunction ModuledNode(Base) {\n    return class extends Base {\n        addImportDeclaration(structure) {\n            return this.addImportDeclarations([structure])[0];\n        }\n        addImportDeclarations(structures) {\n            const compilerChildren = this._getCompilerStatementsWithComments();\n            return this.insertImportDeclarations(getInsertIndex(), structures);\n            function getInsertIndex() {\n                let insertIndex = 0;\n                let wasLastComment = true;\n                for (let i = 0; i < compilerChildren.length; i++) {\n                    const child = compilerChildren[i];\n                    if (wasLastComment && child.kind === common.SyntaxKind.MultiLineCommentTrivia)\n                        insertIndex = i + 1;\n                    else {\n                        wasLastComment = false;\n                        if (child.kind === common.SyntaxKind.ImportDeclaration)\n                            insertIndex = i + 1;\n                    }\n                }\n                return insertIndex;\n            }\n        }\n        insertImportDeclaration(index, structure) {\n            return this.insertImportDeclarations(index, [structure])[0];\n        }\n        insertImportDeclarations(index, structures) {\n            return this._insertChildren({\n                expectedKind: common.SyntaxKind.ImportDeclaration,\n                index,\n                structures,\n                write: (writer, info) => {\n                    this._standardWrite(writer, info, () => {\n                        this._context.structurePrinterFactory.forImportDeclaration().printTexts(writer, structures);\n                    }, {\n                        previousNewLine: previousMember => Node.isImportDeclaration(previousMember) || isComment(previousMember.compilerNode),\n                        nextNewLine: nextMember => Node.isImportDeclaration(nextMember),\n                    });\n                },\n            });\n        }\n        getImportDeclaration(conditionOrModuleSpecifier) {\n            return this.getImportDeclarations().find(getCondition());\n            function getCondition() {\n                if (typeof conditionOrModuleSpecifier === \"string\")\n                    return (dec) => dec.getModuleSpecifierValue() === conditionOrModuleSpecifier;\n                else\n                    return conditionOrModuleSpecifier;\n            }\n        }\n        getImportDeclarationOrThrow(conditionOrModuleSpecifier) {\n            return common.errors.throwIfNullOrUndefined(this.getImportDeclaration(conditionOrModuleSpecifier), \"Expected to find an import with the provided condition.\");\n        }\n        getImportDeclarations() {\n            return this.getStatements().filter(Node.isImportDeclaration);\n        }\n        addExportDeclaration(structure) {\n            return this.addExportDeclarations([structure])[0];\n        }\n        addExportDeclarations(structures) {\n            return this.insertExportDeclarations(this.getChildSyntaxListOrThrow().getChildCount(), structures);\n        }\n        insertExportDeclaration(index, structure) {\n            return this.insertExportDeclarations(index, [structure])[0];\n        }\n        insertExportDeclarations(index, structures) {\n            return this._insertChildren({\n                expectedKind: common.SyntaxKind.ExportDeclaration,\n                index,\n                structures,\n                write: (writer, info) => {\n                    this._standardWrite(writer, info, () => {\n                        this._context.structurePrinterFactory.forExportDeclaration().printTexts(writer, structures);\n                    }, {\n                        previousNewLine: previousMember => Node.isExportDeclaration(previousMember) || isComment(previousMember.compilerNode),\n                        nextNewLine: nextMember => Node.isExportDeclaration(nextMember),\n                    });\n                },\n            });\n        }\n        getExportDeclaration(conditionOrModuleSpecifier) {\n            return this.getExportDeclarations().find(getCondition());\n            function getCondition() {\n                if (typeof conditionOrModuleSpecifier === \"string\")\n                    return (dec) => dec.getModuleSpecifierValue() === conditionOrModuleSpecifier;\n                else\n                    return conditionOrModuleSpecifier;\n            }\n        }\n        getExportDeclarationOrThrow(conditionOrModuleSpecifier) {\n            return common.errors.throwIfNullOrUndefined(this.getExportDeclaration(conditionOrModuleSpecifier), \"Expected to find an export declaration with the provided condition.\");\n        }\n        getExportDeclarations() {\n            return this.getStatements().filter(Node.isExportDeclaration);\n        }\n        addExportAssignment(structure) {\n            return this.addExportAssignments([structure])[0];\n        }\n        addExportAssignments(structures) {\n            return this.insertExportAssignments(this.getChildSyntaxListOrThrow().getChildCount(), structures);\n        }\n        insertExportAssignment(index, structure) {\n            return this.insertExportAssignments(index, [structure])[0];\n        }\n        insertExportAssignments(index, structures) {\n            return this._insertChildren({\n                expectedKind: common.SyntaxKind.ExportAssignment,\n                index,\n                structures,\n                write: (writer, info) => {\n                    this._standardWrite(writer, info, () => {\n                        this._context.structurePrinterFactory.forExportAssignment().printTexts(writer, structures);\n                    }, {\n                        previousNewLine: previousMember => Node.isExportAssignment(previousMember) || isComment(previousMember.compilerNode),\n                        nextNewLine: nextMember => Node.isExportAssignment(nextMember),\n                    });\n                },\n            });\n        }\n        getExportAssignment(condition) {\n            return this.getExportAssignments().find(condition);\n        }\n        getExportAssignmentOrThrow(condition) {\n            return common.errors.throwIfNullOrUndefined(this.getExportAssignment(condition), \"Expected to find an export assignment with the provided condition.\");\n        }\n        getExportAssignments() {\n            return this.getStatements().filter(Node.isExportAssignment);\n        }\n        getDefaultExportSymbol() {\n            const sourceFileSymbol = this.getSymbol();\n            if (sourceFileSymbol == null)\n                return undefined;\n            return sourceFileSymbol.getExport(\"default\");\n        }\n        getDefaultExportSymbolOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getDefaultExportSymbol(), \"Expected to find a default export symbol\");\n        }\n        getExportSymbols() {\n            const symbol = this.getSymbol();\n            return symbol == null ? [] : this._context.typeChecker.getExportsOfModule(symbol);\n        }\n        getExportedDeclarations() {\n            const result = new Map();\n            const exportSymbols = this.getExportSymbols();\n            for (const symbol of exportSymbols) {\n                for (const declaration of symbol.getDeclarations()) {\n                    const declarations = Array.from(getDeclarationHandlingImportsAndExports(declaration));\n                    const name = symbol.getName();\n                    const existingArray = result.get(name);\n                    if (existingArray != null)\n                        existingArray.push(...declarations);\n                    else\n                        result.set(symbol.getName(), declarations);\n                }\n            }\n            return result;\n            function* getDeclarationHandlingImportsAndExports(declaration) {\n                if (Node.isExportSpecifier(declaration)) {\n                    for (const d of declaration.getLocalTargetDeclarations())\n                        yield* getDeclarationHandlingImportsAndExports(d);\n                }\n                else if (Node.isExportAssignment(declaration)) {\n                    const expression = declaration.getExpression();\n                    if (expression == null || expression.getKind() !== common.SyntaxKind.Identifier) {\n                        yield expression;\n                        return;\n                    }\n                    yield* getDeclarationsForSymbol(expression.getSymbol());\n                }\n                else if (Node.isImportSpecifier(declaration)) {\n                    const identifier = declaration.getNameNode();\n                    const symbol = identifier.getSymbol();\n                    if (symbol == null)\n                        return;\n                    yield* getDeclarationsForSymbol(symbol.getAliasedSymbol() || symbol);\n                }\n                else if (Node.isImportClause(declaration)) {\n                    const identifier = declaration.getDefaultImport();\n                    if (identifier == null)\n                        return;\n                    const symbol = identifier.getSymbol();\n                    if (symbol == null)\n                        return;\n                    yield* getDeclarationsForSymbol(symbol.getAliasedSymbol() || symbol);\n                }\n                else if (Node.isNamespaceImport(declaration) || Node.isNamespaceExport(declaration)) {\n                    const symbol = declaration.getNameNode().getSymbol();\n                    if (symbol == null)\n                        return;\n                    yield* getDeclarationsForSymbol(symbol.getAliasedSymbol() || symbol);\n                }\n                else {\n                    yield declaration;\n                }\n                function* getDeclarationsForSymbol(symbol) {\n                    if (symbol == null)\n                        return;\n                    for (const d of symbol.getDeclarations())\n                        yield* getDeclarationHandlingImportsAndExports(d);\n                }\n            }\n        }\n        removeDefaultExport(defaultExportSymbol) {\n            defaultExportSymbol = defaultExportSymbol || this.getDefaultExportSymbol();\n            if (defaultExportSymbol == null)\n                return this;\n            const declaration = defaultExportSymbol.getDeclarations()[0];\n            if (declaration.compilerNode.kind === common.SyntaxKind.ExportAssignment)\n                removeChildrenWithFormatting({ children: [declaration], getSiblingFormatting: () => FormattingKind.Newline });\n            else if (Node.isModifierable(declaration)) {\n                declaration.toggleModifier(\"default\", false);\n                declaration.toggleModifier(\"export\", false);\n            }\n            return this;\n        }\n    };\n}\n\nfunction NamedNodeBase(Base) {\n    return class extends Base {\n        getNameNode() {\n            return this._getNodeFromCompilerNode(this.compilerNode.name);\n        }\n        getName() {\n            return this.getNameNode().getText();\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.name != null)\n                this.getNameNode().replaceWithText(structure.name);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                name: this.getName(),\n            });\n        }\n    };\n}\n\nfunction ReferenceFindableNode(Base) {\n    return class extends Base {\n        findReferences() {\n            return this._context.languageService.findReferences(getNodeForReferences(this));\n        }\n        findReferencesAsNodes() {\n            return this._context.languageService.findReferencesAsNodes(getNodeForReferences(this));\n        }\n    };\n}\nfunction getNodeForReferences(node) {\n    if (Node.isIdentifier(node) || Node.isStringLiteral(node))\n        return node;\n    const nameNode = node.getNodeProperty(\"name\");\n    if (nameNode != null)\n        return nameNode;\n    if (Node.isExportable(node))\n        return node.getDefaultKeyword() || node;\n    return node;\n}\n\nfunction RenameableNode(Base) {\n    return class extends Base {\n        rename(newName, options) {\n            renameNode(getNodeToRename(this), newName, options);\n            return this;\n            function getNodeToRename(thisNode) {\n                if (Node.isIdentifier(thisNode) || Node.isPrivateIdentifier(thisNode) || Node.isStringLiteral(thisNode))\n                    return thisNode;\n                else if (thisNode.getNameNode != null) {\n                    const node = thisNode.getNameNode();\n                    common.errors.throwIfNullOrUndefined(node, \"Expected to find a name node when renaming.\");\n                    if (Node.isArrayBindingPattern(node) || Node.isObjectBindingPattern(node))\n                        throw new common.errors.NotImplementedError(`Not implemented renameable scenario for ${node.getKindName()}.`);\n                    return node;\n                }\n                else {\n                    throw new common.errors.NotImplementedError(`Not implemented renameable scenario for ${thisNode.getKindName()}`);\n                }\n            }\n        }\n    };\n}\n\nfunction AssertionKeyNamedNode(Base) {\n    const base = ReferenceFindableNode(RenameableNode(Base));\n    return NamedNodeBase(base);\n}\n\nfunction BindingNamedNode(Base) {\n    const base = ReferenceFindableNode(RenameableNode(Base));\n    return NamedNodeBase(base);\n}\n\nfunction ModuleNamedNode(Base) {\n    const base = ReferenceFindableNode(RenameableNode(Base));\n    return NamedNodeBase(base);\n}\n\nfunction NameableNode(Base) {\n    return NameableNodeInternal(ReferenceFindableNode(RenameableNode(Base)));\n}\nfunction NameableNodeInternal(Base) {\n    return class extends Base {\n        getNameNode() {\n            return this._getNodeFromCompilerNodeIfExists(this.compilerNode.name);\n        }\n        getNameNodeOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getNameNode(), \"Expected to have a name node.\");\n        }\n        getName() {\n            var _a, _b;\n            return (_b = (_a = this.getNameNode()) === null || _a === void 0 ? void 0 : _a.getText()) !== null && _b !== void 0 ? _b : undefined;\n        }\n        getNameOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getName(), \"Expected to have a name.\");\n        }\n        rename(newName) {\n            if (newName === this.getName())\n                return this;\n            if (common.StringUtils.isNullOrWhitespace(newName)) {\n                this.removeName();\n                return this;\n            }\n            const nameNode = this.getNameNode();\n            if (nameNode == null)\n                addNameNode(this, newName);\n            else\n                Base.prototype.rename.call(this, newName);\n            return this;\n        }\n        removeName() {\n            const nameNode = this.getNameNode();\n            if (nameNode == null)\n                return this;\n            removeChildren({ children: [nameNode], removePrecedingSpaces: true });\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.name != null) {\n                common.errors.throwIfWhitespaceOrNotString(structure.name, \"structure.name\");\n                const nameNode = this.getNameNode();\n                if (nameNode == null)\n                    addNameNode(this, structure.name);\n                else\n                    nameNode.replaceWithText(structure.name);\n            }\n            else if (structure.hasOwnProperty(common.nameof(structure, \"name\"))) {\n                this.removeName();\n            }\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                name: this.getName(),\n            });\n        }\n    };\n}\nfunction addNameNode(node, newName) {\n    if (Node.isClassDeclaration(node) || Node.isClassExpression(node)) {\n        const classKeyword = node.getFirstChildByKindOrThrow(common.SyntaxKind.ClassKeyword);\n        insertIntoParentTextRange({\n            insertPos: classKeyword.getEnd(),\n            newText: \" \" + newName,\n            parent: node,\n        });\n    }\n    else {\n        const openParenToken = node.getFirstChildByKindOrThrow(common.SyntaxKind.OpenParenToken);\n        insertIntoParentTextRange({\n            insertPos: openParenToken.getStart(),\n            newText: \" \" + newName,\n            parent: node,\n        });\n    }\n}\n\nfunction NamedNode(Base) {\n    const base = RenameableNode(ReferenceFindableNode(Base));\n    return NamedNodeBase(base);\n}\n\nfunction PropertyNamedNode(Base) {\n    const base = ReferenceFindableNode(RenameableNode(Base));\n    return NamedNodeBase(base);\n}\n\nfunction OverrideableNode(Base) {\n    return class extends Base {\n        hasOverrideKeyword() {\n            return this.hasModifier(common.SyntaxKind.OverrideKeyword);\n        }\n        getOverrideKeyword() {\n            return this.getFirstModifierByKind(common.SyntaxKind.OverrideKeyword);\n        }\n        getOverrideKeywordOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getOverrideKeyword(), \"Expected to find an override keyword.\");\n        }\n        setHasOverrideKeyword(value) {\n            this.toggleModifier(\"override\", value);\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.hasOverrideKeyword != null)\n                this.setHasOverrideKeyword(structure.hasOverrideKeyword);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                hasOverrideKeyword: this.hasOverrideKeyword(),\n            });\n        }\n    };\n}\n\nfunction ParameteredNode(Base) {\n    return class extends Base {\n        getParameter(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getParameters(), nameOrFindFunction);\n        }\n        getParameterOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getParameter(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"parameter\", nameOrFindFunction));\n        }\n        getParameters() {\n            return this.compilerNode.parameters.map(p => this._getNodeFromCompilerNode(p));\n        }\n        addParameter(structure) {\n            return this.addParameters([structure])[0];\n        }\n        addParameters(structures) {\n            return this.insertParameters(getEndIndexFromArray(this.compilerNode.parameters), structures);\n        }\n        insertParameter(index, structure) {\n            return this.insertParameters(index, [structure])[0];\n        }\n        insertParameters(index, structures) {\n            if (common.ArrayUtils.isNullOrEmpty(structures))\n                return [];\n            const parameters = this.getParameters();\n            const syntaxList = this.getFirstChildByKindOrThrow(common.SyntaxKind.OpenParenToken).getNextSiblingIfKindOrThrow(common.SyntaxKind.SyntaxList);\n            index = verifyAndGetIndex(index, parameters.length);\n            const writer = this._getWriterWithQueuedChildIndentation();\n            const structurePrinter = this._context.structurePrinterFactory.forParameterDeclaration();\n            structurePrinter.printTexts(writer, structures);\n            insertIntoCommaSeparatedNodes({\n                parent: syntaxList,\n                currentNodes: parameters,\n                insertIndex: index,\n                newText: writer.toString(),\n                useTrailingCommas: false,\n            });\n            return getNodesToReturn(parameters, this.getParameters(), index, false);\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.parameters != null) {\n                this.getParameters().forEach(p => p.remove());\n                this.addParameters(structure.parameters);\n            }\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                parameters: this.getParameters().map(p => p.getStructure()),\n            });\n        }\n    };\n}\n\nfunction QuestionDotTokenableNode(Base) {\n    return class extends Base {\n        hasQuestionDotToken() {\n            return this.compilerNode.questionDotToken != null;\n        }\n        getQuestionDotTokenNode() {\n            return this._getNodeFromCompilerNodeIfExists(this.compilerNode.questionDotToken);\n        }\n        getQuestionDotTokenNodeOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getQuestionDotTokenNode(), \"Expected to find a question dot token.\");\n        }\n        setHasQuestionDotToken(value) {\n            const questionDotTokenNode = this.getQuestionDotTokenNode();\n            const hasQuestionDotToken = questionDotTokenNode != null;\n            if (value === hasQuestionDotToken)\n                return this;\n            if (value) {\n                if (Node.isPropertyAccessExpression(this))\n                    this.getFirstChildByKindOrThrow(common.SyntaxKind.DotToken).replaceWithText(\"?.\");\n                else {\n                    insertIntoParentTextRange({\n                        insertPos: getInsertPos.call(this),\n                        parent: this,\n                        newText: \"?.\",\n                    });\n                }\n            }\n            else {\n                if (Node.isPropertyAccessExpression(this))\n                    questionDotTokenNode.replaceWithText(\".\");\n                else\n                    removeChildren({ children: [questionDotTokenNode] });\n            }\n            return this;\n            function getInsertPos() {\n                if (Node.isCallExpression(this))\n                    return this.getFirstChildByKindOrThrow(common.SyntaxKind.OpenParenToken).getStart();\n                if (Node.isElementAccessExpression(this))\n                    return this.getFirstChildByKindOrThrow(common.SyntaxKind.OpenBracketToken).getStart();\n                common.errors.throwNotImplementedForSyntaxKindError(this.compilerNode.kind);\n            }\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.hasQuestionDotToken != null)\n                this.setHasQuestionDotToken(structure.hasQuestionDotToken);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                hasQuestionDotToken: this.hasQuestionDotToken(),\n            });\n        }\n    };\n}\n\nfunction QuestionTokenableNode(Base) {\n    return class extends Base {\n        hasQuestionToken() {\n            return this.compilerNode.questionToken != null;\n        }\n        getQuestionTokenNode() {\n            return this._getNodeFromCompilerNodeIfExists(this.compilerNode.questionToken);\n        }\n        getQuestionTokenNodeOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getQuestionTokenNode(), \"Expected to find a question token.\");\n        }\n        setHasQuestionToken(value) {\n            const questionTokenNode = this.getQuestionTokenNode();\n            const hasQuestionToken = questionTokenNode != null;\n            if (value === hasQuestionToken)\n                return this;\n            if (value) {\n                if (Node.isExclamationTokenable(this))\n                    this.setHasExclamationToken(false);\n                insertIntoParentTextRange({\n                    insertPos: getInsertPos.call(this),\n                    parent: this,\n                    newText: \"?\",\n                });\n            }\n            else {\n                removeChildren({ children: [questionTokenNode] });\n            }\n            return this;\n            function getInsertPos() {\n                if (Node.hasName(this))\n                    return this.getNameNode().getEnd();\n                const colonNode = this.getFirstChildByKind(common.SyntaxKind.ColonToken);\n                if (colonNode != null)\n                    return colonNode.getStart();\n                const semicolonToken = this.getLastChildByKind(common.SyntaxKind.SemicolonToken);\n                if (semicolonToken != null)\n                    return semicolonToken.getStart();\n                return this.getEnd();\n            }\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.hasQuestionToken != null)\n                this.setHasQuestionToken(structure.hasQuestionToken);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                hasQuestionToken: this.hasQuestionToken(),\n            });\n        }\n    };\n}\n\nfunction ReadonlyableNode(Base) {\n    return class extends Base {\n        isReadonly() {\n            return this.getReadonlyKeyword() != null;\n        }\n        getReadonlyKeyword() {\n            return this.getFirstModifierByKind(common.SyntaxKind.ReadonlyKeyword);\n        }\n        getReadonlyKeywordOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getReadonlyKeyword(), \"Expected to find a readonly keyword.\");\n        }\n        setIsReadonly(value) {\n            this.toggleModifier(\"readonly\", value);\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.isReadonly != null)\n                this.setIsReadonly(structure.isReadonly);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                isReadonly: this.isReadonly(),\n            });\n        }\n    };\n}\n\nfunction ReturnTypedNode(Base) {\n    return class extends Base {\n        getReturnType() {\n            return this.getSignature().getReturnType();\n        }\n        getReturnTypeNode() {\n            return this._getNodeFromCompilerNodeIfExists(this.compilerNode.type);\n        }\n        getReturnTypeNodeOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getReturnTypeNode(), \"Expected to find a return type node.\");\n        }\n        setReturnType(textOrWriterFunction) {\n            const text = getTextFromStringOrWriter(this._getWriterWithQueuedChildIndentation(), textOrWriterFunction);\n            if (common.StringUtils.isNullOrWhitespace(text))\n                return this.removeReturnType();\n            const returnTypeNode = this.getReturnTypeNode();\n            if (returnTypeNode != null) {\n                if (returnTypeNode.getText() !== text)\n                    returnTypeNode.replaceWithText(text);\n                return this;\n            }\n            insertIntoParentTextRange({\n                parent: this,\n                insertPos: getEndNode(this).getEnd(),\n                newText: `: ${text}`,\n            });\n            return this;\n            function getEndNode(thisNode) {\n                if (thisNode.getKind() === common.SyntaxKind.IndexSignature)\n                    return thisNode.getFirstChildByKindOrThrow(common.SyntaxKind.CloseBracketToken);\n                return thisNode.getFirstChildByKindOrThrow(common.SyntaxKind.CloseParenToken);\n            }\n        }\n        removeReturnType() {\n            const returnTypeNode = this.getReturnTypeNode();\n            if (returnTypeNode == null)\n                return this;\n            const colonToken = returnTypeNode.getPreviousSiblingIfKindOrThrow(common.SyntaxKind.ColonToken);\n            removeChildren({ children: [colonToken, returnTypeNode], removePrecedingSpaces: true });\n            return this;\n        }\n        getSignature() {\n            const signature = this._context.typeChecker.getSignatureFromNode(this);\n            if (signature == null)\n                throw new common.errors.NotImplementedError(\"Expected the node to have a signature.\");\n            return signature;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.returnType != null)\n                this.setReturnType(structure.returnType);\n            else if (structure.hasOwnProperty(common.nameof(structure, \"returnType\")))\n                this.removeReturnType();\n            return this;\n        }\n        getStructure() {\n            const returnTypeNode = this.getReturnTypeNode();\n            return callBaseGetStructure(Base.prototype, this, {\n                returnType: returnTypeNode ? returnTypeNode.getText({ trimLeadingIndentation: true }) : undefined,\n            });\n        }\n    };\n}\n\nfunction ScopeableNode(Base) {\n    return class extends Base {\n        getScope() {\n            const scope = getScopeForNode(this);\n            if (scope != null)\n                return scope;\n            if (Node.isParameterDeclaration(this) && this.isReadonly())\n                return exports.Scope.Public;\n            return undefined;\n        }\n        setScope(scope) {\n            setScopeForNode(this, scope);\n            return this;\n        }\n        getScopeKeyword() {\n            return this.getModifiers().find(m => {\n                const text = m.getText();\n                return text === \"public\" || text === \"protected\" || text === \"private\";\n            });\n        }\n        hasScopeKeyword() {\n            return this.getScopeKeyword() != null;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.hasOwnProperty(common.nameof(structure, \"scope\")))\n                this.setScope(structure.scope);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                scope: this.getScope(),\n            });\n        }\n    };\n}\nfunction getScopeForNode(node) {\n    const modifierFlags = node.getCombinedModifierFlags();\n    if ((modifierFlags & common.ts.ModifierFlags.Private) !== 0)\n        return exports.Scope.Private;\n    else if ((modifierFlags & common.ts.ModifierFlags.Protected) !== 0)\n        return exports.Scope.Protected;\n    else if ((modifierFlags & common.ts.ModifierFlags.Public) !== 0)\n        return exports.Scope.Public;\n    else\n        return undefined;\n}\nfunction setScopeForNode(node, scope) {\n    node.toggleModifier(\"public\", scope === exports.Scope.Public);\n    node.toggleModifier(\"protected\", scope === exports.Scope.Protected);\n    node.toggleModifier(\"private\", scope === exports.Scope.Private);\n}\n\nfunction ScopedNode(Base) {\n    return class extends Base {\n        getScope() {\n            return getScopeForNode(this) || exports.Scope.Public;\n        }\n        setScope(scope) {\n            setScopeForNode(this, scope);\n            return this;\n        }\n        hasScopeKeyword() {\n            return getScopeForNode(this) != null;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.hasOwnProperty(common.nameof(structure, \"scope\")))\n                this.setScope(structure.scope);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                scope: this.hasScopeKeyword() ? this.getScope() : undefined,\n            });\n        }\n    };\n}\n\nfunction SignaturedDeclaration(Base) {\n    return ReturnTypedNode(ParameteredNode(Base));\n}\n\nfunction StaticableNode(Base) {\n    return class extends Base {\n        isStatic() {\n            return this.hasModifier(common.SyntaxKind.StaticKeyword);\n        }\n        getStaticKeyword() {\n            return this.getFirstModifierByKind(common.SyntaxKind.StaticKeyword);\n        }\n        getStaticKeywordOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getStaticKeyword(), \"Expected to find a static keyword.\");\n        }\n        setIsStatic(value) {\n            this.toggleModifier(\"static\", value);\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.isStatic != null)\n                this.setIsStatic(structure.isStatic);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                isStatic: this.isStatic(),\n            });\n        }\n    };\n}\n\nfunction TextInsertableNode(Base) {\n    return class extends Base {\n        insertText(pos, textOrWriterFunction) {\n            this.replaceText([pos, pos], textOrWriterFunction);\n            return this;\n        }\n        removeText(pos, end) {\n            if (pos == null)\n                this.replaceText(getValidRange(this), \"\");\n            else\n                this.replaceText([pos, end], \"\");\n            return this;\n        }\n        replaceText(range, textOrWriterFunction) {\n            const childSyntaxList = this.getChildSyntaxListOrThrow();\n            const validRange = getValidRange(this);\n            const pos = range[0];\n            const end = range[1];\n            verifyArguments();\n            insertIntoParentTextRange({\n                insertPos: pos,\n                newText: getTextFromStringOrWriter(this._getWriter(), textOrWriterFunction),\n                parent: childSyntaxList.getParentOrThrow(),\n                replacing: {\n                    textLength: end - pos,\n                    nodes: [childSyntaxList],\n                },\n            });\n            return this;\n            function verifyArguments() {\n                verifyInRange(pos);\n                verifyInRange(end);\n                if (pos > end)\n                    throw new common.errors.ArgumentError(\"range\", \"Cannot specify a start position greater than the end position.\");\n            }\n            function verifyInRange(i) {\n                if (i >= validRange[0] && i <= validRange[1])\n                    return;\n                throw new common.errors.InvalidOperationError(`Cannot insert or replace text outside the bounds of the node. `\n                    + `Expected a position between [${validRange[0]}, ${validRange[1]}], but received ${i}.`);\n            }\n        }\n    };\n}\nfunction getValidRange(thisNode) {\n    const rangeNode = getRangeNode();\n    const openBrace = Node.isSourceFile(rangeNode) ? undefined : rangeNode.getPreviousSiblingIfKind(common.SyntaxKind.OpenBraceToken);\n    const closeBrace = openBrace == null ? undefined : rangeNode.getNextSiblingIfKind(common.SyntaxKind.CloseBraceToken);\n    if (openBrace != null && closeBrace != null)\n        return [openBrace.getEnd(), closeBrace.getStart()];\n    else\n        return [rangeNode.getPos(), rangeNode.getEnd()];\n    function getRangeNode() {\n        if (Node.isSourceFile(thisNode))\n            return thisNode;\n        return thisNode.getChildSyntaxListOrThrow();\n    }\n}\n\nfunction TypeArgumentedNode(Base) {\n    return class extends Base {\n        getTypeArguments() {\n            if (this.compilerNode.typeArguments == null)\n                return [];\n            return this.compilerNode.typeArguments.map(a => this._getNodeFromCompilerNode(a));\n        }\n        addTypeArgument(argumentText) {\n            return this.addTypeArguments([argumentText])[0];\n        }\n        addTypeArguments(argumentTexts) {\n            return this.insertTypeArguments(this.getTypeArguments().length, argumentTexts);\n        }\n        insertTypeArgument(index, argumentText) {\n            return this.insertTypeArguments(index, [argumentText])[0];\n        }\n        insertTypeArguments(index, argumentTexts) {\n            if (common.ArrayUtils.isNullOrEmpty(argumentTexts))\n                return [];\n            const typeArguments = this.getTypeArguments();\n            index = verifyAndGetIndex(index, typeArguments.length);\n            if (typeArguments.length === 0) {\n                const identifier = this.getFirstChildByKindOrThrow(common.SyntaxKind.Identifier);\n                insertIntoParentTextRange({\n                    insertPos: identifier.getEnd(),\n                    parent: this,\n                    newText: `<${argumentTexts.join(\", \")}>`,\n                });\n            }\n            else {\n                insertIntoCommaSeparatedNodes({\n                    parent: this.getFirstChildByKindOrThrow(common.SyntaxKind.LessThanToken).getNextSiblingIfKindOrThrow(common.SyntaxKind.SyntaxList),\n                    currentNodes: typeArguments,\n                    insertIndex: index,\n                    newText: argumentTexts.join(\", \"),\n                    useTrailingCommas: false,\n                });\n            }\n            return getNodesToReturn(typeArguments, this.getTypeArguments(), index, false);\n        }\n        removeTypeArgument(typeArgOrIndex) {\n            const typeArguments = this.getTypeArguments();\n            if (typeArguments.length === 0)\n                throw new common.errors.InvalidOperationError(\"Cannot remove a type argument when none exist.\");\n            const typeArgToRemove = typeof typeArgOrIndex === \"number\" ? getTypeArgFromIndex(typeArgOrIndex) : typeArgOrIndex;\n            if (typeArguments.length === 1) {\n                const childSyntaxList = typeArguments[0].getParentSyntaxListOrThrow();\n                removeChildren({\n                    children: [\n                        childSyntaxList.getPreviousSiblingIfKindOrThrow(common.SyntaxKind.LessThanToken),\n                        childSyntaxList,\n                        childSyntaxList.getNextSiblingIfKindOrThrow(common.SyntaxKind.GreaterThanToken),\n                    ],\n                });\n            }\n            else {\n                removeCommaSeparatedChild(typeArgToRemove);\n            }\n            return this;\n            function getTypeArgFromIndex(index) {\n                return typeArguments[verifyAndGetIndex(index, typeArguments.length - 1)];\n            }\n        }\n    };\n}\n\nfunction TypedNode(Base) {\n    return class extends Base {\n        getTypeNode() {\n            return this._getNodeFromCompilerNodeIfExists(this.compilerNode.type);\n        }\n        getTypeNodeOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getTypeNode(), \"Expected to find a type node.\");\n        }\n        setType(textOrWriterFunction) {\n            const text = getTextFromStringOrWriter(this._getWriterWithQueuedChildIndentation(), textOrWriterFunction);\n            if (common.StringUtils.isNullOrWhitespace(text))\n                return this.removeType();\n            const typeNode = this.getTypeNode();\n            if (typeNode != null && typeNode.getText() === text)\n                return this;\n            const separatorSyntaxKind = getSeparatorSyntaxKindForNode(this);\n            const separatorNode = this.getFirstChildByKind(separatorSyntaxKind);\n            let insertPos;\n            let newText;\n            if (separatorNode == null) {\n                insertPos = getInsertPosWhenNoType(this);\n                newText = (separatorSyntaxKind === common.SyntaxKind.EqualsToken ? \" = \" : \": \") + text;\n            }\n            else {\n                insertPos = typeNode.getStart();\n                newText = text;\n            }\n            insertIntoParentTextRange({\n                parent: this,\n                insertPos,\n                newText,\n                replacing: {\n                    textLength: typeNode == null ? 0 : typeNode.getWidth(),\n                },\n            });\n            return this;\n            function getInsertPosWhenNoType(node) {\n                const identifier = node.getFirstChildByKindOrThrow(common.SyntaxKind.Identifier);\n                const nextSibling = identifier.getNextSibling();\n                const insertAfterNode = isQuestionOrExclamation(nextSibling) ? nextSibling : identifier;\n                return insertAfterNode.getEnd();\n            }\n            function isQuestionOrExclamation(node) {\n                if (node == null)\n                    return false;\n                const kind = node.getKind();\n                return kind === common.SyntaxKind.QuestionToken || kind === common.SyntaxKind.ExclamationToken;\n            }\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.type != null)\n                this.setType(structure.type);\n            else if (structure.hasOwnProperty(common.nameof(structure, \"type\")))\n                this.removeType();\n            return this;\n        }\n        removeType() {\n            if (this.getKind() === common.SyntaxKind.TypeAliasDeclaration)\n                throw new common.errors.NotSupportedError(`Cannot remove the type of a type alias. Use ${common.nameof(\"setType\")} instead.`);\n            const typeNode = this.getTypeNode();\n            if (typeNode == null)\n                return this;\n            const separatorToken = typeNode.getPreviousSiblingIfKindOrThrow(getSeparatorSyntaxKindForNode(this));\n            removeChildren({ children: [separatorToken, typeNode], removePrecedingSpaces: true });\n            return this;\n        }\n        getStructure() {\n            const typeNode = this.getTypeNode();\n            return callBaseGetStructure(Base.prototype, this, {\n                type: typeNode ? typeNode.getText({ trimLeadingIndentation: true }) : undefined,\n            });\n        }\n    };\n}\nfunction getSeparatorSyntaxKindForNode(node) {\n    switch (node.getKind()) {\n        case common.SyntaxKind.TypeAliasDeclaration:\n            return common.SyntaxKind.EqualsToken;\n        default:\n            return common.SyntaxKind.ColonToken;\n    }\n}\n\nfunction TypeElementMemberedNode(Base) {\n    return class extends Base {\n        addMember(member) {\n            return this.addMembers([member])[0];\n        }\n        addMembers(members) {\n            return this.insertMembers(getEndIndexFromArray(this.getMembersWithComments()), members);\n        }\n        insertMember(index, member) {\n            return this.insertMembers(index, [member])[0];\n        }\n        insertMembers(index, members) {\n            return insertIntoBracesOrSourceFileWithGetChildrenWithComments({\n                getIndexedChildren: () => this.getMembersWithComments(),\n                index,\n                parent: this,\n                write: writer => {\n                    writer.newLineIfLastNot();\n                    const memberWriter = this._getWriter();\n                    const memberPrinter = this._context.structurePrinterFactory.forTypeElementMember();\n                    memberPrinter.printTexts(memberWriter, members);\n                    writer.write(memberWriter.toString());\n                    writer.newLineIfLastNot();\n                },\n            });\n        }\n        addConstructSignature(structure) {\n            return this.addConstructSignatures([structure])[0];\n        }\n        addConstructSignatures(structures) {\n            return this.insertConstructSignatures(getEndIndexFromArray(this.getMembersWithComments()), structures);\n        }\n        insertConstructSignature(index, structure) {\n            return this.insertConstructSignatures(index, [structure])[0];\n        }\n        insertConstructSignatures(index, structures) {\n            return insertChildren$1({\n                thisNode: this,\n                index,\n                structures,\n                expectedKind: common.SyntaxKind.ConstructSignature,\n                createStructurePrinter: () => this._context.structurePrinterFactory.forConstructSignatureDeclaration(),\n            });\n        }\n        getConstructSignature(findFunction) {\n            return this.getConstructSignatures().find(findFunction);\n        }\n        getConstructSignatureOrThrow(findFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getConstructSignature(findFunction), \"Expected to find a construct signature with the provided condition.\");\n        }\n        getConstructSignatures() {\n            return this.compilerNode.members.filter(m => m.kind === common.SyntaxKind.ConstructSignature)\n                .map(m => this._getNodeFromCompilerNode(m));\n        }\n        addCallSignature(structure) {\n            return this.addCallSignatures([structure])[0];\n        }\n        addCallSignatures(structures) {\n            return this.insertCallSignatures(getEndIndexFromArray(this.getMembersWithComments()), structures);\n        }\n        insertCallSignature(index, structure) {\n            return this.insertCallSignatures(index, [structure])[0];\n        }\n        insertCallSignatures(index, structures) {\n            return insertChildren$1({\n                thisNode: this,\n                index,\n                structures,\n                expectedKind: common.SyntaxKind.CallSignature,\n                createStructurePrinter: () => this._context.structurePrinterFactory.forCallSignatureDeclaration(),\n            });\n        }\n        getCallSignature(findFunction) {\n            return this.getCallSignatures().find(findFunction);\n        }\n        getCallSignatureOrThrow(findFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getCallSignature(findFunction), \"Expected to find a call signature with the provided condition.\");\n        }\n        getCallSignatures() {\n            return this.compilerNode.members.filter(m => m.kind === common.SyntaxKind.CallSignature)\n                .map(m => this._getNodeFromCompilerNode(m));\n        }\n        addIndexSignature(structure) {\n            return this.addIndexSignatures([structure])[0];\n        }\n        addIndexSignatures(structures) {\n            return this.insertIndexSignatures(getEndIndexFromArray(this.getMembersWithComments()), structures);\n        }\n        insertIndexSignature(index, structure) {\n            return this.insertIndexSignatures(index, [structure])[0];\n        }\n        insertIndexSignatures(index, structures) {\n            return insertChildren$1({\n                thisNode: this,\n                index,\n                structures,\n                expectedKind: common.SyntaxKind.IndexSignature,\n                createStructurePrinter: () => this._context.structurePrinterFactory.forIndexSignatureDeclaration(),\n            });\n        }\n        getIndexSignature(findFunction) {\n            return this.getIndexSignatures().find(findFunction);\n        }\n        getIndexSignatureOrThrow(findFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getIndexSignature(findFunction), \"Expected to find a index signature with the provided condition.\");\n        }\n        getIndexSignatures() {\n            return this.compilerNode.members.filter(m => m.kind === common.SyntaxKind.IndexSignature)\n                .map(m => this._getNodeFromCompilerNode(m));\n        }\n        addMethod(structure) {\n            return this.addMethods([structure])[0];\n        }\n        addMethods(structures) {\n            return this.insertMethods(getEndIndexFromArray(this.getMembersWithComments()), structures);\n        }\n        insertMethod(index, structure) {\n            return this.insertMethods(index, [structure])[0];\n        }\n        insertMethods(index, structures) {\n            return insertChildren$1({\n                thisNode: this,\n                index,\n                structures,\n                expectedKind: common.SyntaxKind.MethodSignature,\n                createStructurePrinter: () => this._context.structurePrinterFactory.forMethodSignature(),\n            });\n        }\n        getMethod(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getMethods(), nameOrFindFunction);\n        }\n        getMethodOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getMethod(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"interface method signature\", nameOrFindFunction));\n        }\n        getMethods() {\n            return this.compilerNode.members.filter(m => m.kind === common.SyntaxKind.MethodSignature)\n                .map(m => this._getNodeFromCompilerNode(m));\n        }\n        addProperty(structure) {\n            return this.addProperties([structure])[0];\n        }\n        addProperties(structures) {\n            return this.insertProperties(getEndIndexFromArray(this.getMembersWithComments()), structures);\n        }\n        insertProperty(index, structure) {\n            return this.insertProperties(index, [structure])[0];\n        }\n        insertProperties(index, structures) {\n            return insertChildren$1({\n                thisNode: this,\n                index,\n                structures,\n                expectedKind: common.SyntaxKind.PropertySignature,\n                createStructurePrinter: () => this._context.structurePrinterFactory.forPropertySignature(),\n            });\n        }\n        getProperty(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getProperties(), nameOrFindFunction);\n        }\n        getPropertyOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getProperty(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"interface property signature\", nameOrFindFunction));\n        }\n        getProperties() {\n            return this.compilerNode.members.filter(m => m.kind === common.SyntaxKind.PropertySignature)\n                .map(m => this._getNodeFromCompilerNode(m));\n        }\n        getMembers() {\n            return this.compilerNode.members.map(m => this._getNodeFromCompilerNode(m));\n        }\n        getMembersWithComments() {\n            const compilerNode = this.compilerNode;\n            return ExtendedParser.getContainerArray(compilerNode, this._sourceFile.compilerNode)\n                .map(m => this._getNodeFromCompilerNode(m));\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.callSignatures != null) {\n                this.getCallSignatures().forEach(c => c.remove());\n                this.addCallSignatures(structure.callSignatures);\n            }\n            if (structure.constructSignatures != null) {\n                this.getConstructSignatures().forEach(c => c.remove());\n                this.addConstructSignatures(structure.constructSignatures);\n            }\n            if (structure.indexSignatures != null) {\n                this.getIndexSignatures().forEach(c => c.remove());\n                this.addIndexSignatures(structure.indexSignatures);\n            }\n            if (structure.properties != null) {\n                this.getProperties().forEach(c => c.remove());\n                this.addProperties(structure.properties);\n            }\n            if (structure.methods != null) {\n                this.getMethods().forEach(c => c.remove());\n                this.addMethods(structure.methods);\n            }\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                callSignatures: this.getCallSignatures().map(node => node.getStructure()),\n                constructSignatures: this.getConstructSignatures().map(node => node.getStructure()),\n                indexSignatures: this.getIndexSignatures().map(node => node.getStructure()),\n                methods: this.getMethods().map(node => node.getStructure()),\n                properties: this.getProperties().map(node => node.getStructure()),\n            });\n        }\n    };\n}\nfunction insertChildren$1(opts) {\n    return insertIntoBracesOrSourceFileWithGetChildren({\n        getIndexedChildren: () => opts.thisNode.getMembersWithComments(),\n        parent: opts.thisNode,\n        index: opts.index,\n        structures: opts.structures,\n        expectedKind: opts.expectedKind,\n        write: (writer, info) => {\n            writer.newLineIfLastNot();\n            opts.createStructurePrinter().printTexts(writer, opts.structures);\n            writer.newLineIfLastNot();\n        },\n    });\n}\n\nfunction TypeParameteredNode(Base) {\n    return class extends Base {\n        getTypeParameter(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getTypeParameters(), nameOrFindFunction);\n        }\n        getTypeParameterOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getTypeParameter(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"type parameter\", nameOrFindFunction));\n        }\n        getTypeParameters() {\n            const typeParameters = this.compilerNode.typeParameters;\n            if (typeParameters == null)\n                return [];\n            return typeParameters.map(t => this._getNodeFromCompilerNode(t));\n        }\n        addTypeParameter(structure) {\n            return this.addTypeParameters([structure])[0];\n        }\n        addTypeParameters(structures) {\n            return this.insertTypeParameters(getEndIndexFromArray(this.compilerNode.typeParameters), structures);\n        }\n        insertTypeParameter(index, structure) {\n            return this.insertTypeParameters(index, [structure])[0];\n        }\n        insertTypeParameters(index, structures) {\n            if (common.ArrayUtils.isNullOrEmpty(structures))\n                return [];\n            const typeParameters = this.getTypeParameters();\n            const writer = this._getWriterWithQueuedChildIndentation();\n            const structurePrinter = this._context.structurePrinterFactory.forTypeParameterDeclaration();\n            index = verifyAndGetIndex(index, typeParameters.length);\n            structurePrinter.printTexts(writer, structures);\n            if (typeParameters.length === 0) {\n                insertIntoParentTextRange({\n                    insertPos: getInsertPos(this),\n                    parent: this,\n                    newText: `<${writer.toString()}>`,\n                });\n            }\n            else {\n                insertIntoCommaSeparatedNodes({\n                    parent: this.getFirstChildByKindOrThrow(common.SyntaxKind.LessThanToken).getNextSiblingIfKindOrThrow(common.SyntaxKind.SyntaxList),\n                    currentNodes: typeParameters,\n                    insertIndex: index,\n                    newText: writer.toString(),\n                    useTrailingCommas: false,\n                });\n            }\n            return getNodesToReturn(typeParameters, this.getTypeParameters(), index, false);\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.typeParameters != null) {\n                this.getTypeParameters().forEach(t => t.remove());\n                this.addTypeParameters(structure.typeParameters);\n            }\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                typeParameters: this.getTypeParameters().map(p => p.getStructure()),\n            });\n        }\n    };\n}\nfunction getInsertPos(node) {\n    const namedNode = node;\n    if (namedNode.getNameNode != null)\n        return namedNode.getNameNode().getEnd();\n    else if (Node.isCallSignatureDeclaration(node) || Node.isFunctionTypeNode(node))\n        return node.getFirstChildByKindOrThrow(common.SyntaxKind.OpenParenToken).getStart();\n    else\n        throw new common.errors.NotImplementedError(`Not implemented scenario inserting type parameters for node with kind ${node.getKindName()}.`);\n}\n\nfunction UnwrappableNode(Base) {\n    return class extends Base {\n        unwrap() {\n            unwrapNode(this);\n        }\n    };\n}\n\nclass ArrayBindingPattern extends Node {\n    getElements() {\n        return this.compilerNode.elements.map(e => this._getNodeFromCompilerNode(e));\n    }\n}\n\nconst createBase$D = (ctor) => DotDotDotTokenableNode(InitializerExpressionableNode(BindingNamedNode(ctor)));\nconst BindingElementBase = createBase$D(Node);\nclass BindingElement extends BindingElementBase {\n    getPropertyNameNodeOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getPropertyNameNode(), \"Expected to find a property name node.\");\n    }\n    getPropertyNameNode() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.propertyName);\n    }\n}\n\nclass ObjectBindingPattern extends Node {\n    getElements() {\n        return this.compilerNode.elements.map(e => this._getNodeFromCompilerNode(e));\n    }\n}\n\nfunction AbstractableNode(Base) {\n    return class extends Base {\n        isAbstract() {\n            return this.getAbstractKeyword() != null;\n        }\n        getAbstractKeyword() {\n            return this.getFirstModifierByKind(common.SyntaxKind.AbstractKeyword);\n        }\n        getAbstractKeywordOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getAbstractKeyword(), \"Expected to find an abstract keyword.\");\n        }\n        setIsAbstract(isAbstract) {\n            this.toggleModifier(\"abstract\", isAbstract);\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.isAbstract != null)\n                this.setIsAbstract(structure.isAbstract);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                isAbstract: this.isAbstract(),\n            });\n        }\n    };\n}\n\nclass Expression extends Node {\n    getContextualType() {\n        return this._context.typeChecker.getContextualType(this);\n    }\n}\n\nconst BinaryExpressionBase = Expression;\nclass BinaryExpression extends BinaryExpressionBase {\n    getLeft() {\n        return this._getNodeFromCompilerNode(this.compilerNode.left);\n    }\n    getOperatorToken() {\n        return this._getNodeFromCompilerNode(this.compilerNode.operatorToken);\n    }\n    getRight() {\n        return this._getNodeFromCompilerNode(this.compilerNode.right);\n    }\n}\n\nconst AssignmentExpressionBase = BinaryExpression;\nclass AssignmentExpression extends AssignmentExpressionBase {\n    getOperatorToken() {\n        return this._getNodeFromCompilerNode(this.compilerNode.operatorToken);\n    }\n}\n\nconst ArrayDestructuringAssignmentBase = AssignmentExpression;\nclass ArrayDestructuringAssignment extends ArrayDestructuringAssignmentBase {\n    getLeft() {\n        return this._getNodeFromCompilerNode(this.compilerNode.left);\n    }\n}\n\nclass UnaryExpression extends Expression {\n}\n\nclass UpdateExpression extends UnaryExpression {\n}\n\nclass LeftHandSideExpression extends UpdateExpression {\n}\n\nclass MemberExpression extends LeftHandSideExpression {\n}\n\nclass PrimaryExpression extends MemberExpression {\n}\n\nclass ArrayLiteralExpression extends PrimaryExpression {\n    getElements() {\n        return this.compilerNode.elements.map(e => this._getNodeFromCompilerNode(e));\n    }\n    addElement(textOrWriterFunction, options) {\n        return this.addElements([textOrWriterFunction], options)[0];\n    }\n    addElements(textsOrWriterFunction, options) {\n        return this.insertElements(this.compilerNode.elements.length, textsOrWriterFunction, options);\n    }\n    insertElement(index, textOrWriterFunction, options) {\n        return this.insertElements(index, [textOrWriterFunction], options)[0];\n    }\n    insertElements(index, textsOrWriterFunction, options = {}) {\n        const elements = this.getElements();\n        index = verifyAndGetIndex(index, elements.length);\n        const useNewLines = getUseNewLines(this);\n        const writer = useNewLines ? this._getWriterWithChildIndentation() : this._getWriterWithQueuedChildIndentation();\n        const stringStructurePrinter = new StringStructurePrinter();\n        const structurePrinter = useNewLines\n            ? new CommaNewLineSeparatedStructuresPrinter(stringStructurePrinter)\n            : new CommaSeparatedStructuresPrinter(stringStructurePrinter);\n        structurePrinter.printText(writer, textsOrWriterFunction);\n        return insertTexts(this);\n        function insertTexts(node) {\n            insertIntoCommaSeparatedNodes({\n                parent: node.getFirstChildByKindOrThrow(common.SyntaxKind.SyntaxList),\n                currentNodes: elements,\n                insertIndex: index,\n                newText: writer.toString(),\n                useNewLines,\n                useTrailingCommas: useNewLines && node._context.manipulationSettings.getUseTrailingCommas(),\n            });\n            const newElements = node.getElements();\n            return getNodesToReturn(elements, newElements, index, false);\n        }\n        function getUseNewLines(node) {\n            if (options.useNewLines != null)\n                return options.useNewLines;\n            if (elements.length > 1)\n                return allElementsOnDifferentLines();\n            return node.getStartLineNumber() !== node.getEndLineNumber();\n            function allElementsOnDifferentLines() {\n                let previousLine = elements[0].getStartLineNumber();\n                for (let i = 1; i < elements.length; i++) {\n                    const currentLine = elements[i].getStartLineNumber();\n                    if (previousLine === currentLine)\n                        return false;\n                    previousLine = currentLine;\n                }\n                return true;\n            }\n        }\n    }\n    removeElement(elementOrIndex) {\n        const elements = this.getElements();\n        if (elements.length === 0)\n            throw new common.errors.InvalidOperationError(\"Cannot remove an element when none exist.\");\n        const elementToRemove = typeof elementOrIndex === \"number\" ? getElementFromIndex(elementOrIndex) : elementOrIndex;\n        removeCommaSeparatedChild(elementToRemove);\n        function getElementFromIndex(index) {\n            return elements[verifyAndGetIndex(index, elements.length - 1)];\n        }\n    }\n}\n\nfunction ExpressionableNode(Base) {\n    return class extends Base {\n        getExpression() {\n            return this._getNodeFromCompilerNodeIfExists(this.compilerNode.expression);\n        }\n        getExpressionOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getExpression(), \"Expected to find an expression.\");\n        }\n        getExpressionIfKind(kind) {\n            const expression = this.getExpression();\n            return (expression === null || expression === void 0 ? void 0 : expression.getKind()) === kind ? expression : undefined;\n        }\n        getExpressionIfKindOrThrow(kind) {\n            return common.errors.throwIfNullOrUndefined(this.getExpressionIfKind(kind), `An expression with the kind kind ${common.getSyntaxKindName(kind)} was expected.`);\n        }\n    };\n}\n\nfunction BaseExpressionedNode(Base) {\n    return class extends Base {\n        getExpression() {\n            return this._getNodeFromCompilerNode(this.compilerNode.expression);\n        }\n        getExpressionIfKind(kind) {\n            const { expression } = this.compilerNode;\n            return expression.kind === kind ? this._getNodeFromCompilerNode(expression) : undefined;\n        }\n        getExpressionIfKindOrThrow(kind) {\n            return common.errors.throwIfNullOrUndefined(this.getExpressionIfKind(kind), `An expression of the kind ${common.getSyntaxKindName(kind)} was expected.`);\n        }\n        setExpression(textOrWriterFunction) {\n            this.getExpression().replaceWithText(textOrWriterFunction, this._getWriterWithQueuedChildIndentation());\n            return this;\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.expression != null)\n                this.setExpression(structure.expression);\n            return this;\n        }\n    };\n}\nfunction ExpressionedNode(Base) {\n    return BaseExpressionedNode(Base);\n}\n\nfunction ImportExpressionedNode(Base) {\n    return BaseExpressionedNode(Base);\n}\n\nfunction LeftHandSideExpressionedNode(Base) {\n    return BaseExpressionedNode(Base);\n}\n\nfunction SuperExpressionedNode(Base) {\n    return BaseExpressionedNode(Base);\n}\n\nfunction UnaryExpressionedNode(Base) {\n    return BaseExpressionedNode(Base);\n}\n\nconst createBase$C = (ctor) => TypedNode(ExpressionedNode(ctor));\nconst AsExpressionBase = createBase$C(Expression);\nclass AsExpression extends AsExpressionBase {\n}\n\nconst AwaitExpressionBase = UnaryExpressionedNode(UnaryExpression);\nclass AwaitExpression extends AwaitExpressionBase {\n}\n\nconst createBase$B = (ctor) => TypeArgumentedNode(ArgumentedNode(QuestionDotTokenableNode(LeftHandSideExpressionedNode(ctor))));\nconst CallExpressionBase = createBase$B(LeftHandSideExpression);\nclass CallExpression extends CallExpressionBase {\n    getReturnType() {\n        return this._context.typeChecker.getTypeAtLocation(this);\n    }\n}\n\nconst CommaListExpressionBase = Expression;\nclass CommaListExpression extends CommaListExpressionBase {\n    getElements() {\n        return this.compilerNode.elements.map(e => this._getNodeFromCompilerNode(e));\n    }\n}\n\nconst ConditionalExpressionBase = Expression;\nclass ConditionalExpression extends ConditionalExpressionBase {\n    getCondition() {\n        return this._getNodeFromCompilerNode(this.compilerNode.condition);\n    }\n    getQuestionToken() {\n        return this._getNodeFromCompilerNode(this.compilerNode.questionToken);\n    }\n    getWhenTrue() {\n        return this._getNodeFromCompilerNode(this.compilerNode.whenTrue);\n    }\n    getColonToken() {\n        return this._getNodeFromCompilerNode(this.compilerNode.colonToken);\n    }\n    getWhenFalse() {\n        return this._getNodeFromCompilerNode(this.compilerNode.whenFalse);\n    }\n}\n\nconst DeleteExpressionBase = UnaryExpressionedNode(UnaryExpression);\nclass DeleteExpression extends DeleteExpressionBase {\n}\n\nconst createBase$A = (ctor) => QuestionDotTokenableNode(LeftHandSideExpressionedNode(ctor));\nconst ElementAccessExpressionBase = createBase$A(MemberExpression);\nclass ElementAccessExpression extends ElementAccessExpressionBase {\n    getArgumentExpression() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.argumentExpression);\n    }\n    getArgumentExpressionOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getArgumentExpression(), \"Expected to find an argument expression.\");\n    }\n}\n\nconst ImportExpressionBase = PrimaryExpression;\nclass ImportExpression extends ImportExpressionBase {\n}\n\nconst LiteralExpressionBase = LiteralLikeNode(PrimaryExpression);\nclass LiteralExpression extends LiteralExpressionBase {\n}\n\nconst MetaPropertyBase = NamedNode(PrimaryExpression);\nclass MetaProperty extends MetaPropertyBase {\n    getKeywordToken() {\n        return this.compilerNode.keywordToken;\n    }\n}\n\nconst createBase$z = (ctor) => TypeArgumentedNode(ArgumentedNode(LeftHandSideExpressionedNode(ctor)));\nconst NewExpressionBase = createBase$z(PrimaryExpression);\nclass NewExpression extends NewExpressionBase {\n}\n\nconst NonNullExpressionBase = ExpressionedNode(LeftHandSideExpression);\nclass NonNullExpression extends NonNullExpressionBase {\n}\n\nclass ObjectLiteralElement extends Node {\n    remove() {\n        removeCommaSeparatedChild(this);\n    }\n}\n\nclass CommentObjectLiteralElement extends ObjectLiteralElement {\n}\n\nconst ObjectDestructuringAssignmentBase = AssignmentExpression;\nclass ObjectDestructuringAssignment extends ObjectDestructuringAssignmentBase {\n    getLeft() {\n        return this._getNodeFromCompilerNode(this.compilerNode.left);\n    }\n}\n\nconst ObjectLiteralExpressionBase = PrimaryExpression;\nclass ObjectLiteralExpression extends ObjectLiteralExpressionBase {\n    getPropertyOrThrow(nameOrFindFunction) {\n        return common.errors.throwIfNullOrUndefined(this.getProperty(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"property\", nameOrFindFunction));\n    }\n    getProperty(nameOrFindFunction) {\n        let findFunc;\n        if (typeof nameOrFindFunction === \"string\") {\n            findFunc = prop => {\n                if (prop[common.nameof(\"getName\")] == null)\n                    return false;\n                return prop.getName() === nameOrFindFunction;\n            };\n        }\n        else {\n            findFunc = nameOrFindFunction;\n        }\n        return this.getProperties().find(findFunc);\n    }\n    getProperties() {\n        return this.compilerNode.properties.map(p => this._getNodeFromCompilerNode(p));\n    }\n    getPropertiesWithComments() {\n        const members = ExtendedParser.getContainerArray(this.compilerNode, this.getSourceFile().compilerNode);\n        return members.map(p => this._getNodeFromCompilerNode(p));\n    }\n    _getAddIndex() {\n        const members = ExtendedParser.getContainerArray(this.compilerNode, this.getSourceFile().compilerNode);\n        return members.length;\n    }\n    addProperty(structure) {\n        return this.insertProperties(this._getAddIndex(), [structure])[0];\n    }\n    addProperties(structures) {\n        return this.insertProperties(this._getAddIndex(), structures);\n    }\n    insertProperty(index, structure) {\n        return this.insertProperties(index, [structure])[0];\n    }\n    insertProperties(index, structures) {\n        const properties = this.getPropertiesWithComments();\n        index = verifyAndGetIndex(index, properties.length);\n        const writer = this._getWriterWithChildIndentation();\n        const structurePrinter = this._context.structurePrinterFactory.forObjectLiteralExpressionProperty();\n        structurePrinter.printTexts(writer, structures);\n        insertIntoCommaSeparatedNodes({\n            parent: this.getChildSyntaxListOrThrow(),\n            currentNodes: properties,\n            insertIndex: index,\n            newText: writer.toString(),\n            useNewLines: true,\n            useTrailingCommas: this._context.manipulationSettings.getUseTrailingCommas(),\n        });\n        return getNodesToReturn(properties, this.getPropertiesWithComments(), index, true);\n    }\n    addPropertyAssignment(structure) {\n        return this.addPropertyAssignments([structure])[0];\n    }\n    addPropertyAssignments(structures) {\n        return this.insertPropertyAssignments(this._getAddIndex(), structures);\n    }\n    insertPropertyAssignment(index, structure) {\n        return this.insertPropertyAssignments(index, [structure])[0];\n    }\n    insertPropertyAssignments(index, structures) {\n        return this._insertProperty(index, structures, () => this._context.structurePrinterFactory.forPropertyAssignment());\n    }\n    addShorthandPropertyAssignment(structure) {\n        return this.addShorthandPropertyAssignments([structure])[0];\n    }\n    addShorthandPropertyAssignments(structures) {\n        return this.insertShorthandPropertyAssignments(this._getAddIndex(), structures);\n    }\n    insertShorthandPropertyAssignment(index, structure) {\n        return this.insertShorthandPropertyAssignments(index, [structure])[0];\n    }\n    insertShorthandPropertyAssignments(index, structures) {\n        return this._insertProperty(index, structures, () => this._context.structurePrinterFactory.forShorthandPropertyAssignment());\n    }\n    addSpreadAssignment(structure) {\n        return this.addSpreadAssignments([structure])[0];\n    }\n    addSpreadAssignments(structures) {\n        return this.insertSpreadAssignments(this._getAddIndex(), structures);\n    }\n    insertSpreadAssignment(index, structure) {\n        return this.insertSpreadAssignments(index, [structure])[0];\n    }\n    insertSpreadAssignments(index, structures) {\n        return this._insertProperty(index, structures, () => this._context.structurePrinterFactory.forSpreadAssignment());\n    }\n    addMethod(structure) {\n        return this.addMethods([structure])[0];\n    }\n    addMethods(structures) {\n        return this.insertMethods(this._getAddIndex(), structures);\n    }\n    insertMethod(index, structure) {\n        return this.insertMethods(index, [structure])[0];\n    }\n    insertMethods(index, structures) {\n        return this._insertProperty(index, structures, () => this._context.structurePrinterFactory.forMethodDeclaration({ isAmbient: false }));\n    }\n    addGetAccessor(structure) {\n        return this.addGetAccessors([structure])[0];\n    }\n    addGetAccessors(structures) {\n        return this.insertGetAccessors(this._getAddIndex(), structures);\n    }\n    insertGetAccessor(index, structure) {\n        return this.insertGetAccessors(index, [structure])[0];\n    }\n    insertGetAccessors(index, structures) {\n        return this._insertProperty(index, structures, () => this._context.structurePrinterFactory.forGetAccessorDeclaration({ isAmbient: false }));\n    }\n    addSetAccessor(structure) {\n        return this.addSetAccessors([structure])[0];\n    }\n    addSetAccessors(structures) {\n        return this.insertSetAccessors(this._getAddIndex(), structures);\n    }\n    insertSetAccessor(index, structure) {\n        return this.insertSetAccessors(index, [structure])[0];\n    }\n    insertSetAccessors(index, structures) {\n        return this._insertProperty(index, structures, () => this._context.structurePrinterFactory.forSetAccessorDeclaration({ isAmbient: false }));\n    }\n    _insertProperty(index, structures, createStructurePrinter) {\n        index = verifyAndGetIndex(index, this._getAddIndex());\n        const writer = this._getWriterWithChildIndentation();\n        const structurePrinter = new CommaNewLineSeparatedStructuresPrinter(createStructurePrinter());\n        const oldProperties = this.getPropertiesWithComments();\n        structurePrinter.printText(writer, structures);\n        insertIntoCommaSeparatedNodes({\n            parent: this.getFirstChildByKindOrThrow(common.SyntaxKind.SyntaxList),\n            currentNodes: oldProperties,\n            insertIndex: index,\n            newText: writer.toString(),\n            useNewLines: true,\n            useTrailingCommas: this._context.manipulationSettings.getUseTrailingCommas(),\n        });\n        return getNodesToReturn(oldProperties, this.getPropertiesWithComments(), index, false);\n    }\n}\n\nconst createBase$y = (ctor) => InitializerExpressionGetableNode(QuestionTokenableNode(PropertyNamedNode(ctor)));\nconst PropertyAssignmentBase = createBase$y(ObjectLiteralElement);\nclass PropertyAssignment extends PropertyAssignmentBase {\n    removeInitializer() {\n        const initializer = this.getInitializerOrThrow();\n        const colonToken = initializer.getPreviousSiblingIfKindOrThrow(common.SyntaxKind.ColonToken);\n        const childIndex = this.getChildIndex();\n        const sourceFileText = this._sourceFile.getFullText();\n        const insertPos = this.getStart();\n        const newText = sourceFileText.substring(insertPos, colonToken.getPos()) + sourceFileText.substring(initializer.getEnd(), this.getEnd());\n        const parent = this.getParentSyntaxList() || this.getParentOrThrow();\n        insertIntoParentTextRange({\n            insertPos,\n            newText,\n            parent,\n            replacing: {\n                textLength: this.getWidth(),\n            },\n        });\n        return parent.getChildAtIndexIfKindOrThrow(childIndex, common.SyntaxKind.ShorthandPropertyAssignment);\n    }\n    setInitializer(textOrWriterFunction) {\n        const initializer = this.getInitializerOrThrow();\n        insertIntoParentTextRange({\n            insertPos: initializer.getStart(),\n            newText: getTextFromStringOrWriter(this._getWriterWithQueuedChildIndentation(), textOrWriterFunction),\n            parent: this,\n            replacing: {\n                textLength: initializer.getWidth(),\n            },\n        });\n        return this;\n    }\n    set(structure) {\n        callBaseSet(PropertyAssignmentBase.prototype, this, structure);\n        if (structure.initializer != null)\n            this.setInitializer(structure.initializer);\n        else if (structure.hasOwnProperty(common.nameof(structure, \"initializer\")))\n            return this.removeInitializer();\n        return this;\n    }\n    getStructure() {\n        const initializer = this.getInitializerOrThrow();\n        const structure = callBaseGetStructure(PropertyAssignmentBase.prototype, this, {\n            kind: exports.StructureKind.PropertyAssignment,\n            initializer: initializer.getText(),\n        });\n        delete structure.hasQuestionToken;\n        return structure;\n    }\n}\n\nconst createBase$x = (ctor) => InitializerExpressionGetableNode(QuestionTokenableNode(NamedNode(ctor)));\nconst ShorthandPropertyAssignmentBase = createBase$x(ObjectLiteralElement);\nclass ShorthandPropertyAssignment extends ShorthandPropertyAssignmentBase {\n    hasObjectAssignmentInitializer() {\n        return this.compilerNode.objectAssignmentInitializer != null;\n    }\n    getObjectAssignmentInitializerOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getObjectAssignmentInitializer(), \"Expected to find an object assignment initializer.\");\n    }\n    getObjectAssignmentInitializer() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.objectAssignmentInitializer);\n    }\n    getEqualsTokenOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getEqualsToken(), \"Expected to find an equals token.\");\n    }\n    getEqualsToken() {\n        const equalsToken = this.compilerNode.equalsToken;\n        if (equalsToken == null)\n            return undefined;\n        return this._getNodeFromCompilerNode(equalsToken);\n    }\n    removeObjectAssignmentInitializer() {\n        if (!this.hasObjectAssignmentInitializer())\n            return this;\n        removeChildren({\n            children: [this.getEqualsTokenOrThrow(), this.getObjectAssignmentInitializerOrThrow()],\n            removePrecedingSpaces: true,\n        });\n        return this;\n    }\n    setInitializer(text) {\n        const parent = this.getParentSyntaxList() || this.getParentOrThrow();\n        const childIndex = this.getChildIndex();\n        insertIntoParentTextRange({\n            insertPos: this.getStart(),\n            newText: this.getText() + `: ${text}`,\n            parent,\n            replacing: {\n                textLength: this.getWidth(),\n            },\n        });\n        return parent.getChildAtIndexIfKindOrThrow(childIndex, common.SyntaxKind.PropertyAssignment);\n    }\n    set(structure) {\n        callBaseSet(ShorthandPropertyAssignmentBase.prototype, this, structure);\n        return this;\n    }\n    getStructure() {\n        const structure = callBaseGetStructure(ShorthandPropertyAssignmentBase.prototype, this, {\n            kind: exports.StructureKind.ShorthandPropertyAssignment,\n        });\n        delete structure.hasQuestionToken;\n        return structure;\n    }\n}\n\nconst SpreadAssignmentBase = ExpressionedNode(ObjectLiteralElement);\nclass SpreadAssignment extends SpreadAssignmentBase {\n    set(structure) {\n        callBaseSet(SpreadAssignmentBase.prototype, this, structure);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(SpreadAssignmentBase.prototype, this, {\n            kind: exports.StructureKind.SpreadAssignment,\n            expression: this.getExpression().getText(),\n        });\n    }\n}\n\nconst OmittedExpressionBase = Expression;\nclass OmittedExpression extends OmittedExpressionBase {\n}\n\nconst ParenthesizedExpressionBase = ExpressionedNode(Expression);\nclass ParenthesizedExpression extends ParenthesizedExpressionBase {\n}\n\nconst PartiallyEmittedExpressionBase = ExpressionedNode(Expression);\nclass PartiallyEmittedExpression extends PartiallyEmittedExpressionBase {\n}\n\nconst PostfixUnaryExpressionBase = UnaryExpression;\nclass PostfixUnaryExpression extends PostfixUnaryExpressionBase {\n    getOperatorToken() {\n        return this.compilerNode.operator;\n    }\n    getOperand() {\n        return this._getNodeFromCompilerNode(this.compilerNode.operand);\n    }\n}\n\nconst PrefixUnaryExpressionBase = UnaryExpression;\nclass PrefixUnaryExpression extends PrefixUnaryExpressionBase {\n    getOperatorToken() {\n        return this.compilerNode.operator;\n    }\n    getOperand() {\n        return this._getNodeFromCompilerNode(this.compilerNode.operand);\n    }\n}\n\nconst createBase$w = (ctor) => NamedNode(QuestionDotTokenableNode(LeftHandSideExpressionedNode(ctor)));\nconst PropertyAccessExpressionBase = createBase$w(MemberExpression);\nclass PropertyAccessExpression extends PropertyAccessExpressionBase {\n}\n\nconst SpreadElementBase = ExpressionedNode(Expression);\nclass SpreadElement extends SpreadElementBase {\n}\n\nconst SuperElementAccessExpressionBase = SuperExpressionedNode(ElementAccessExpression);\nclass SuperElementAccessExpression extends SuperElementAccessExpressionBase {\n}\n\nconst SuperExpressionBase = PrimaryExpression;\nclass SuperExpression extends SuperExpressionBase {\n}\n\nconst SuperPropertyAccessExpressionBase = SuperExpressionedNode(PropertyAccessExpression);\nclass SuperPropertyAccessExpression extends SuperPropertyAccessExpressionBase {\n}\n\nconst ThisExpressionBase = PrimaryExpression;\nclass ThisExpression extends ThisExpressionBase {\n}\n\nconst createBase$v = (ctor) => TypedNode(UnaryExpressionedNode(ctor));\nconst TypeAssertionBase = createBase$v(UnaryExpression);\nclass TypeAssertion extends TypeAssertionBase {\n}\n\nconst TypeOfExpressionBase = UnaryExpressionedNode(UnaryExpression);\nclass TypeOfExpression extends TypeOfExpressionBase {\n}\n\nconst VoidExpressionBase = UnaryExpressionedNode(UnaryExpression);\nclass VoidExpression extends VoidExpressionBase {\n}\n\nconst YieldExpressionBase = ExpressionableNode(GeneratorableNode(Expression));\nclass YieldExpression extends YieldExpressionBase {\n}\n\nconst StatementBase = ChildOrderableNode(Node);\nclass Statement extends StatementBase {\n    remove() {\n        removeStatementedNodeChild(this);\n    }\n}\n\nfunction StatementedNode(Base) {\n    return class extends Base {\n        getStatements() {\n            var _a;\n            const statementsContainer = this._getCompilerStatementsContainer();\n            const statements = (_a = statementsContainer === null || statementsContainer === void 0 ? void 0 : statementsContainer.statements) !== null && _a !== void 0 ? _a : [];\n            return statements.map(s => this._getNodeFromCompilerNode(s));\n        }\n        getStatementsWithComments() {\n            return this._getCompilerStatementsWithComments().map(s => this._getNodeFromCompilerNode(s));\n        }\n        getStatement(findFunction) {\n            return this.getStatements().find(findFunction);\n        }\n        getStatementOrThrow(findFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getStatement(findFunction), \"Expected to find a statement matching the provided condition.\");\n        }\n        getStatementByKind(kind) {\n            const statement = this._getCompilerStatementsWithComments().find(s => s.kind === kind);\n            return this._getNodeFromCompilerNodeIfExists(statement);\n        }\n        getStatementByKindOrThrow(kind) {\n            return common.errors.throwIfNullOrUndefined(this.getStatementByKind(kind), `Expected to find a statement with syntax kind ${common.getSyntaxKindName(kind)}.`);\n        }\n        addStatements(textOrWriterFunction) {\n            return this.insertStatements(this._getCompilerStatementsWithComments().length, textOrWriterFunction);\n        }\n        insertStatements(index, statements) {\n            addBodyIfNotExists(this);\n            const writerFunction = (writer) => {\n                const statementsPrinter = this._context.structurePrinterFactory.forStatement({ isAmbient: isNodeAmbientOrInAmbientContext(this) });\n                statementsPrinter.printTexts(writer, statements);\n            };\n            return getChildSyntaxList.call(this).insertChildText(index, writerFunction);\n            function getChildSyntaxList() {\n                const childSyntaxList = this.getChildSyntaxListOrThrow();\n                if (Node.isCaseClause(this) || Node.isDefaultClause(this)) {\n                    const block = childSyntaxList.getFirstChildIfKind(common.SyntaxKind.Block);\n                    if (block != null)\n                        return block.getChildSyntaxListOrThrow();\n                }\n                return childSyntaxList;\n            }\n        }\n        removeStatement(index) {\n            index = verifyAndGetIndex(index, this._getCompilerStatementsWithComments().length - 1);\n            return this.removeStatements([index, index]);\n        }\n        removeStatements(indexRange) {\n            const statements = this.getStatementsWithComments();\n            common.errors.throwIfRangeOutOfRange(indexRange, [0, statements.length], \"indexRange\");\n            removeStatementedNodeChildren(statements.slice(indexRange[0], indexRange[1] + 1));\n            return this;\n        }\n        addClass(structure) {\n            return this.addClasses([structure])[0];\n        }\n        addClasses(structures) {\n            return this.insertClasses(this._getCompilerStatementsWithComments().length, structures);\n        }\n        insertClass(index, structure) {\n            return this.insertClasses(index, [structure])[0];\n        }\n        insertClasses(index, structures) {\n            return this._insertChildren({\n                expectedKind: common.SyntaxKind.ClassDeclaration,\n                index,\n                structures,\n                write: (writer, info) => {\n                    this._standardWrite(writer, info, () => {\n                        this._context.structurePrinterFactory.forClassDeclaration({ isAmbient: isNodeAmbientOrInAmbientContext(this) })\n                            .printTexts(writer, structures);\n                    });\n                },\n            });\n        }\n        getClasses() {\n            return this.getStatements().filter(Node.isClassDeclaration);\n        }\n        getClass(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getClasses(), nameOrFindFunction);\n        }\n        getClassOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getClass(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"class\", nameOrFindFunction));\n        }\n        addEnum(structure) {\n            return this.addEnums([structure])[0];\n        }\n        addEnums(structures) {\n            return this.insertEnums(this._getCompilerStatementsWithComments().length, structures);\n        }\n        insertEnum(index, structure) {\n            return this.insertEnums(index, [structure])[0];\n        }\n        insertEnums(index, structures) {\n            return this._insertChildren({\n                expectedKind: common.SyntaxKind.EnumDeclaration,\n                index,\n                structures,\n                write: (writer, info) => {\n                    this._standardWrite(writer, info, () => {\n                        this._context.structurePrinterFactory.forEnumDeclaration().printTexts(writer, structures);\n                    });\n                },\n            });\n        }\n        getEnums() {\n            return this.getStatements().filter(Node.isEnumDeclaration);\n        }\n        getEnum(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getEnums(), nameOrFindFunction);\n        }\n        getEnumOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getEnum(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"enum\", nameOrFindFunction));\n        }\n        addFunction(structure) {\n            return this.addFunctions([structure])[0];\n        }\n        addFunctions(structures) {\n            return this.insertFunctions(this._getCompilerStatementsWithComments().length, structures);\n        }\n        insertFunction(index, structure) {\n            return this.insertFunctions(index, [structure])[0];\n        }\n        insertFunctions(index, structures) {\n            return this._insertChildren({\n                expectedKind: common.SyntaxKind.FunctionDeclaration,\n                index,\n                structures,\n                write: (writer, info) => {\n                    this._standardWrite(writer, info, () => {\n                        this._context.structurePrinterFactory.forFunctionDeclaration({\n                            isAmbient: isNodeAmbientOrInAmbientContext(this),\n                        }).printTexts(writer, structures);\n                    }, {\n                        previousNewLine: previousMember => structures[0].hasDeclareKeyword === true\n                            && Node.isFunctionDeclaration(previousMember)\n                            && previousMember.getBody() == null,\n                        nextNewLine: nextMember => structures[structures.length - 1].hasDeclareKeyword === true\n                            && Node.isFunctionDeclaration(nextMember)\n                            && nextMember.getBody() == null,\n                    });\n                },\n            });\n        }\n        getFunctions() {\n            return this.getStatements().filter(Node.isFunctionDeclaration).filter(f => f.isAmbient() || f.isImplementation());\n        }\n        getFunction(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getFunctions(), nameOrFindFunction);\n        }\n        getFunctionOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getFunction(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"function\", nameOrFindFunction));\n        }\n        addInterface(structure) {\n            return this.addInterfaces([structure])[0];\n        }\n        addInterfaces(structures) {\n            return this.insertInterfaces(this._getCompilerStatementsWithComments().length, structures);\n        }\n        insertInterface(index, structure) {\n            return this.insertInterfaces(index, [structure])[0];\n        }\n        insertInterfaces(index, structures) {\n            return this._insertChildren({\n                expectedKind: common.SyntaxKind.InterfaceDeclaration,\n                index,\n                structures,\n                write: (writer, info) => {\n                    this._standardWrite(writer, info, () => {\n                        this._context.structurePrinterFactory.forInterfaceDeclaration().printTexts(writer, structures);\n                    });\n                },\n            });\n        }\n        getInterfaces() {\n            return this.getStatements().filter(Node.isInterfaceDeclaration);\n        }\n        getInterface(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getInterfaces(), nameOrFindFunction);\n        }\n        getInterfaceOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getInterface(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"interface\", nameOrFindFunction));\n        }\n        addModule(structure) {\n            return this.addModules([structure])[0];\n        }\n        addModules(structures) {\n            return this.insertModules(this._getCompilerStatementsWithComments().length, structures);\n        }\n        insertModule(index, structure) {\n            return this.insertModules(index, [structure])[0];\n        }\n        insertModules(index, structures) {\n            return this._insertChildren({\n                expectedKind: common.SyntaxKind.ModuleDeclaration,\n                index,\n                structures,\n                write: (writer, info) => {\n                    this._standardWrite(writer, info, () => {\n                        this._context.structurePrinterFactory.forModuleDeclaration({ isAmbient: isNodeAmbientOrInAmbientContext(this) })\n                            .printTexts(writer, structures);\n                    });\n                },\n            });\n        }\n        getModules() {\n            return this.getStatements().filter(Node.isModuleDeclaration);\n        }\n        getModule(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getModules(), nameOrFindFunction);\n        }\n        getModuleOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getModule(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"module\", nameOrFindFunction));\n        }\n        addTypeAlias(structure) {\n            return this.addTypeAliases([structure])[0];\n        }\n        addTypeAliases(structures) {\n            return this.insertTypeAliases(this._getCompilerStatementsWithComments().length, structures);\n        }\n        insertTypeAlias(index, structure) {\n            return this.insertTypeAliases(index, [structure])[0];\n        }\n        insertTypeAliases(index, structures) {\n            return this._insertChildren({\n                expectedKind: common.SyntaxKind.TypeAliasDeclaration,\n                index,\n                structures,\n                write: (writer, info) => {\n                    this._standardWrite(writer, info, () => {\n                        this._context.structurePrinterFactory.forTypeAliasDeclaration().printTexts(writer, structures);\n                    }, {\n                        previousNewLine: previousMember => Node.isTypeAliasDeclaration(previousMember),\n                        nextNewLine: nextMember => Node.isTypeAliasDeclaration(nextMember),\n                    });\n                },\n            });\n        }\n        getTypeAliases() {\n            return this.getStatements().filter(Node.isTypeAliasDeclaration);\n        }\n        getTypeAlias(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getTypeAliases(), nameOrFindFunction);\n        }\n        getTypeAliasOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getTypeAlias(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"type alias\", nameOrFindFunction));\n        }\n        getVariableStatements() {\n            return this.getStatements().filter(Node.isVariableStatement);\n        }\n        getVariableStatement(nameOrFindFunction) {\n            return this.getVariableStatements().find(getFindFunction());\n            function getFindFunction() {\n                if (typeof nameOrFindFunction === \"string\")\n                    return (statement) => statement.getDeclarations().some(d => nodeHasName(d, nameOrFindFunction));\n                return nameOrFindFunction;\n            }\n        }\n        getVariableStatementOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getVariableStatement(nameOrFindFunction), \"Expected to find a variable statement that matched the provided condition.\");\n        }\n        addVariableStatement(structure) {\n            return this.addVariableStatements([structure])[0];\n        }\n        addVariableStatements(structures) {\n            return this.insertVariableStatements(this._getCompilerStatementsWithComments().length, structures);\n        }\n        insertVariableStatement(index, structure) {\n            return this.insertVariableStatements(index, [structure])[0];\n        }\n        insertVariableStatements(index, structures) {\n            return this._insertChildren({\n                expectedKind: common.SyntaxKind.VariableStatement,\n                index,\n                structures,\n                write: (writer, info) => {\n                    this._standardWrite(writer, info, () => {\n                        this._context.structurePrinterFactory.forVariableStatement().printTexts(writer, structures);\n                    }, {\n                        previousNewLine: previousMember => Node.isVariableStatement(previousMember),\n                        nextNewLine: nextMember => Node.isVariableStatement(nextMember),\n                    });\n                },\n            });\n        }\n        getVariableDeclarations() {\n            const variables = [];\n            for (const list of this.getVariableStatements())\n                variables.push(...list.getDeclarations());\n            return variables;\n        }\n        getVariableDeclaration(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getVariableDeclarations(), nameOrFindFunction);\n        }\n        getVariableDeclarationOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getVariableDeclaration(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"variable declaration\", nameOrFindFunction));\n        }\n        getStructure() {\n            const structure = {};\n            if (Node.isBodyable(this) && !this.hasBody())\n                structure.statements = undefined;\n            else {\n                structure.statements = this.getStatements().map(s => {\n                    if (Node._hasStructure(s))\n                        return s.getStructure();\n                    return s.getText({ trimLeadingIndentation: true });\n                });\n            }\n            return callBaseGetStructure(Base.prototype, this, structure);\n        }\n        set(structure) {\n            if (Node.isBodyable(this) && structure.statements == null && structure.hasOwnProperty(common.nameof(structure, \"statements\")))\n                this.removeBody();\n            else if (structure.statements != null) {\n                const statementCount = this._getCompilerStatementsWithComments().length;\n                if (statementCount > 0)\n                    this.removeStatements([0, statementCount - 1]);\n            }\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.statements != null)\n                this.addStatements(structure.statements);\n            return this;\n        }\n        _getCompilerStatementsWithComments() {\n            const statementsContainer = this._getCompilerStatementsContainer();\n            if (statementsContainer == null)\n                return [];\n            else {\n                return ExtendedParser.getContainerArray(statementsContainer, this._sourceFile.compilerNode);\n            }\n        }\n        _getCompilerStatementsContainer() {\n            var _a;\n            if (Node.isSourceFile(this) || Node.isCaseClause(this) || Node.isDefaultClause(this))\n                return this.compilerNode;\n            else if (Node.isModuleDeclaration(this)) {\n                const body = this._getInnerBody();\n                if (body == null)\n                    return undefined;\n                else\n                    return body.compilerNode;\n            }\n            else if (Node.isBodyable(this) || Node.isBodied(this))\n                return (_a = this.getBody()) === null || _a === void 0 ? void 0 : _a.compilerNode;\n            else if (Node.isBlock(this) || Node.isModuleBlock(this))\n                return this.compilerNode;\n            else\n                throw new common.errors.NotImplementedError(`Could not find the statements for node kind: ${this.getKindName()}, text: ${this.getText()}`);\n        }\n        _insertChildren(opts) {\n            addBodyIfNotExists(this);\n            return insertIntoBracesOrSourceFileWithGetChildren({\n                expectedKind: opts.expectedKind,\n                getIndexedChildren: () => this.getStatementsWithComments(),\n                index: opts.index,\n                parent: this,\n                structures: opts.structures,\n                write: (writer, info) => opts.write(writer, info),\n            });\n        }\n        _standardWrite(writer, info, writeStructures, opts = {}) {\n            if (info.previousMember != null && (opts.previousNewLine == null || !opts.previousNewLine(info.previousMember))\n                && !Node.isCommentNode(info.previousMember)) {\n                writer.blankLine();\n            }\n            else if (!info.isStartOfFile) {\n                writer.newLineIfLastNot();\n            }\n            writeStructures();\n            if (info.nextMember != null && (opts.nextNewLine == null || !opts.nextNewLine(info.nextMember)))\n                writer.blankLine();\n            else\n                writer.newLineIfLastNot();\n        }\n    };\n}\nfunction addBodyIfNotExists(node) {\n    if (Node.isBodyable(node) && !node.hasBody())\n        node.addBody();\n}\n\nconst createBase$u = (ctor) => TextInsertableNode(StatementedNode(ctor));\nconst BlockBase = createBase$u(Statement);\nclass Block extends BlockBase {\n}\n\nclass BreakStatement extends Statement {\n    getLabel() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.label);\n    }\n    getLabelOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getLabel(), \"Expected to find a label.\");\n    }\n}\n\nconst CaseBlockBase = TextInsertableNode(Node);\nclass CaseBlock extends CaseBlockBase {\n    getClauses() {\n        const clauses = this.compilerNode.clauses || [];\n        return clauses.map(s => this._getNodeFromCompilerNode(s));\n    }\n    removeClause(index) {\n        index = verifyAndGetIndex(index, this.getClauses().length - 1);\n        return this.removeClauses([index, index]);\n    }\n    removeClauses(indexRange) {\n        const clauses = this.getClauses();\n        common.errors.throwIfRangeOutOfRange(indexRange, [0, clauses.length], \"indexRange\");\n        removeClausedNodeChildren(clauses.slice(indexRange[0], indexRange[1] + 1));\n        return this;\n    }\n}\n\nconst createBase$t = (ctor) => JSDocableNode(ExpressionedNode(TextInsertableNode(StatementedNode(ctor))));\nconst CaseClauseBase = createBase$t(Node);\nclass CaseClause extends CaseClauseBase {\n    remove() {\n        removeClausedNodeChild(this);\n    }\n}\n\nconst CatchClauseBase = Node;\nclass CatchClause extends CatchClauseBase {\n    getBlock() {\n        return this._getNodeFromCompilerNode(this.compilerNode.block);\n    }\n    getVariableDeclaration() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.variableDeclaration);\n    }\n    getVariableDeclarationOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getVariableDeclaration(), \"Expected to find a variable declaration.\");\n    }\n}\n\nclass CommentStatement extends Statement {\n}\n\nclass ContinueStatement extends Statement {\n    getLabel() {\n        return this.compilerNode.label == null\n            ? undefined\n            : this._getNodeFromCompilerNode(this.compilerNode.label);\n    }\n    getLabelOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getLabel(), \"Expected to find a label.\");\n    }\n}\n\nconst DebuggerStatementBase = Statement;\nclass DebuggerStatement extends DebuggerStatementBase {\n}\n\nconst createBase$s = (ctor) => TextInsertableNode(StatementedNode(ctor));\nconst DefaultClauseBase = createBase$s(Node);\nclass DefaultClause extends DefaultClauseBase {\n    remove() {\n        removeClausedNodeChild(this);\n    }\n}\n\nclass IterationStatement extends Statement {\n    getStatement() {\n        return this._getNodeFromCompilerNode(this.compilerNode.statement);\n    }\n}\n\nconst DoStatementBase = ExpressionedNode(IterationStatement);\nclass DoStatement extends DoStatementBase {\n}\n\nconst EmptyStatementBase = Statement;\nclass EmptyStatement extends EmptyStatementBase {\n}\n\nconst ExpressionStatementBase = ExpressionedNode(JSDocableNode(Statement));\nclass ExpressionStatement extends ExpressionStatementBase {\n}\n\nconst ForInStatementBase = ExpressionedNode(IterationStatement);\nclass ForInStatement extends ForInStatementBase {\n    getInitializer() {\n        return this._getNodeFromCompilerNode(this.compilerNode.initializer);\n    }\n}\n\nconst ForOfStatementBase = ExpressionedNode(AwaitableNode(IterationStatement));\nclass ForOfStatement extends ForOfStatementBase {\n    getInitializer() {\n        return this._getNodeFromCompilerNode(this.compilerNode.initializer);\n    }\n}\n\nconst ForStatementBase = IterationStatement;\nclass ForStatement extends ForStatementBase {\n    getInitializer() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.initializer);\n    }\n    getInitializerOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getInitializer(), \"Expected to find an initializer.\");\n    }\n    getCondition() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.condition);\n    }\n    getConditionOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getCondition(), \"Expected to find a condition.\");\n    }\n    getIncrementor() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.incrementor);\n    }\n    getIncrementorOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getIncrementor(), \"Expected to find an incrementor.\");\n    }\n}\n\nconst IfStatementBase = ExpressionedNode(Statement);\nclass IfStatement extends IfStatementBase {\n    getThenStatement() {\n        return this._getNodeFromCompilerNode(this.compilerNode.thenStatement);\n    }\n    getElseStatement() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.elseStatement);\n    }\n    remove() {\n        const nodes = [];\n        if (Node.isIfStatement(this.getParentOrThrow()))\n            nodes.push(this.getPreviousSiblingIfKindOrThrow(common.SyntaxKind.ElseKeyword));\n        nodes.push(this);\n        removeStatementedNodeChildren(nodes);\n    }\n}\n\nconst LabeledStatementBase = JSDocableNode(Statement);\nclass LabeledStatement extends LabeledStatementBase {\n    getLabel() {\n        return this._getNodeFromCompilerNode(this.compilerNode.label);\n    }\n    getStatement() {\n        return this._getNodeFromCompilerNode(this.compilerNode.statement);\n    }\n}\n\nconst NotEmittedStatementBase = Statement;\nclass NotEmittedStatement extends NotEmittedStatementBase {\n}\n\nconst ReturnStatementBase = ExpressionableNode(Statement);\nclass ReturnStatement extends ReturnStatementBase {\n}\n\nconst SwitchStatementBase = ExpressionedNode(Statement);\nclass SwitchStatement extends SwitchStatementBase {\n    getCaseBlock() {\n        return this._getNodeFromCompilerNode(this.compilerNode.caseBlock);\n    }\n    getClauses() {\n        return this.getCaseBlock().getClauses();\n    }\n    removeClause(index) {\n        return this.getCaseBlock().removeClause(index);\n    }\n    removeClauses(indexRange) {\n        return this.getCaseBlock().removeClauses(indexRange);\n    }\n}\n\nconst ThrowStatementBase = ExpressionedNode(Statement);\nclass ThrowStatement extends ThrowStatementBase {\n}\n\nconst TryStatementBase = Statement;\nclass TryStatement extends TryStatementBase {\n    getTryBlock() {\n        return this._getNodeFromCompilerNode(this.compilerNode.tryBlock);\n    }\n    getCatchClause() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.catchClause);\n    }\n    getCatchClauseOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getCatchClause(), \"Expected to find a catch clause.\");\n    }\n    getFinallyBlock() {\n        if (this.compilerNode.finallyBlock == null || this.compilerNode.finallyBlock.getFullWidth() === 0)\n            return undefined;\n        return this._getNodeFromCompilerNode(this.compilerNode.finallyBlock);\n    }\n    getFinallyBlockOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getFinallyBlock(), \"Expected to find a finally block.\");\n    }\n}\n\nconst AssertClauseBase = Node;\nclass AssertClause extends AssertClauseBase {\n    setElements(elements) {\n        this.replaceWithText(writer => {\n            const structurePrinter = this._context.structurePrinterFactory.forAssertEntry();\n            structurePrinter.printAssertClause(writer, elements);\n        });\n        return this;\n    }\n    getElements() {\n        return this.compilerNode.elements.map(e => this._getNodeFromCompilerNode(e));\n    }\n    remove() {\n        removeChildren({\n            children: [this],\n            removePrecedingNewLines: true,\n            removePrecedingSpaces: true,\n        });\n    }\n}\n\nconst AssertEntryBase = AssertionKeyNamedNode(Node);\nclass AssertEntry extends AssertEntryBase {\n    getValue() {\n        return this._getNodeFromCompilerNode(this.compilerNode.value);\n    }\n    set(structure) {\n        callBaseSet(AssertEntryBase.prototype, this, structure);\n        if (structure.value)\n            this.getValue().replaceWithText(structure.value);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(AssertEntryBase.prototype, this, {\n            kind: exports.StructureKind.AssertEntry,\n            value: this.getValue().getText(),\n        });\n    }\n}\n\nconst ExportAssignmentBase = ExpressionedNode(Statement);\nclass ExportAssignment extends ExportAssignmentBase {\n    isExportEquals() {\n        return this.compilerNode.isExportEquals || false;\n    }\n    setIsExportEquals(value) {\n        if (this.isExportEquals() === value)\n            return this;\n        if (value)\n            this.getFirstChildByKindOrThrow(common.SyntaxKind.DefaultKeyword).replaceWithText(\"=\");\n        else\n            this.getFirstChildByKindOrThrow(common.SyntaxKind.EqualsToken).replaceWithText(\"default\");\n        return this;\n    }\n    set(structure) {\n        callBaseSet(ExportAssignmentBase.prototype, this, structure);\n        if (structure.expression != null)\n            this.setExpression(structure.expression);\n        if (structure.isExportEquals != null)\n            this.setIsExportEquals(structure.isExportEquals);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(Statement.prototype, this, {\n            kind: exports.StructureKind.ExportAssignment,\n            expression: this.getExpression().getText(),\n            isExportEquals: this.isExportEquals(),\n        });\n    }\n}\n\nconst ExportDeclarationBase = Statement;\nclass ExportDeclaration extends ExportDeclarationBase {\n    isTypeOnly() {\n        return this.compilerNode.isTypeOnly;\n    }\n    setIsTypeOnly(value) {\n        var _a;\n        if (this.isTypeOnly() === value)\n            return this;\n        if (value) {\n            insertIntoParentTextRange({\n                parent: this,\n                insertPos: ((_a = this.getNodeProperty(\"exportClause\")) !== null && _a !== void 0 ? _a : this.getFirstChildByKindOrThrow(common.SyntaxKind.AsteriskToken)).getStart(),\n                newText: \"type \",\n            });\n        }\n        else {\n            const typeKeyword = this.getFirstChildByKindOrThrow(common.ts.SyntaxKind.TypeKeyword);\n            removeChildren({\n                children: [typeKeyword],\n                removeFollowingSpaces: true,\n            });\n        }\n        return this;\n    }\n    getNamespaceExport() {\n        const exportClause = this.getNodeProperty(\"exportClause\");\n        return exportClause != null && Node.isNamespaceExport(exportClause) ? exportClause : undefined;\n    }\n    getNamespaceExportOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getNamespaceExport(), \"Expected to find a namespace export.\");\n    }\n    setNamespaceExport(name) {\n        const exportClause = this.getNodeProperty(\"exportClause\");\n        const newText = common.StringUtils.isNullOrWhitespace(name) ? \"*\" : `* as ${name}`;\n        if (exportClause == null) {\n            const asteriskToken = this.getFirstChildByKindOrThrow(common.SyntaxKind.AsteriskToken);\n            insertIntoParentTextRange({\n                insertPos: asteriskToken.getStart(),\n                parent: this,\n                newText,\n                replacing: {\n                    textLength: 1,\n                },\n            });\n        }\n        else if (Node.isNamespaceExport(exportClause))\n            exportClause.getNameNode().replaceWithText(name);\n        else {\n            insertIntoParentTextRange({\n                insertPos: exportClause.getStart(),\n                parent: this,\n                newText,\n                replacing: {\n                    textLength: exportClause.getWidth(),\n                },\n            });\n        }\n        return this;\n    }\n    setModuleSpecifier(textOrSourceFile) {\n        const text = typeof textOrSourceFile === \"string\" ? textOrSourceFile : this._sourceFile.getRelativePathAsModuleSpecifierTo(textOrSourceFile);\n        if (common.StringUtils.isNullOrEmpty(text)) {\n            this.removeModuleSpecifier();\n            return this;\n        }\n        const stringLiteral = this.getModuleSpecifier();\n        if (stringLiteral == null) {\n            const semiColonToken = this.getLastChildIfKind(common.SyntaxKind.SemicolonToken);\n            const quoteKind = this._context.manipulationSettings.getQuoteKind();\n            insertIntoParentTextRange({\n                insertPos: semiColonToken != null ? semiColonToken.getPos() : this.getEnd(),\n                parent: this,\n                newText: ` from ${quoteKind}${text}${quoteKind}`,\n            });\n        }\n        else {\n            stringLiteral.setLiteralValue(text);\n        }\n        return this;\n    }\n    getModuleSpecifier() {\n        const moduleSpecifier = this._getNodeFromCompilerNodeIfExists(this.compilerNode.moduleSpecifier);\n        if (moduleSpecifier == null)\n            return undefined;\n        if (!Node.isStringLiteral(moduleSpecifier))\n            throw new common.errors.InvalidOperationError(\"Expected the module specifier to be a string literal.\");\n        return moduleSpecifier;\n    }\n    getModuleSpecifierValue() {\n        const moduleSpecifier = this.getModuleSpecifier();\n        return moduleSpecifier === null || moduleSpecifier === void 0 ? void 0 : moduleSpecifier.getLiteralValue();\n    }\n    getModuleSpecifierSourceFileOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getModuleSpecifierSourceFile(), `A module specifier source file was expected.`);\n    }\n    getModuleSpecifierSourceFile() {\n        const stringLiteral = this.getLastChildByKind(common.SyntaxKind.StringLiteral);\n        if (stringLiteral == null)\n            return undefined;\n        const symbol = stringLiteral.getSymbol();\n        if (symbol == null)\n            return undefined;\n        const declaration = symbol.getDeclarations()[0];\n        return declaration != null && Node.isSourceFile(declaration) ? declaration : undefined;\n    }\n    isModuleSpecifierRelative() {\n        const moduleSpecifierValue = this.getModuleSpecifierValue();\n        if (moduleSpecifierValue == null)\n            return false;\n        return ModuleUtils.isModuleSpecifierRelative(moduleSpecifierValue);\n    }\n    removeModuleSpecifier() {\n        const moduleSpecifier = this.getModuleSpecifier();\n        if (moduleSpecifier == null)\n            return this;\n        if (!this.hasNamedExports())\n            throw new common.errors.InvalidOperationError(`Cannot remove the module specifier from an export declaration that has no named exports.`);\n        removeChildren({\n            children: [this.getFirstChildByKindOrThrow(common.SyntaxKind.FromKeyword), moduleSpecifier],\n            removePrecedingNewLines: true,\n            removePrecedingSpaces: true,\n        });\n        return this;\n    }\n    hasModuleSpecifier() {\n        return this.getLastChildByKind(common.SyntaxKind.StringLiteral) != null;\n    }\n    isNamespaceExport() {\n        return !this.hasNamedExports();\n    }\n    hasNamedExports() {\n        var _a;\n        return ((_a = this.compilerNode.exportClause) === null || _a === void 0 ? void 0 : _a.kind) === common.SyntaxKind.NamedExports;\n    }\n    addNamedExport(namedExport) {\n        return this.addNamedExports([namedExport])[0];\n    }\n    addNamedExports(namedExports) {\n        return this.insertNamedExports(this.getNamedExports().length, namedExports);\n    }\n    insertNamedExport(index, namedExport) {\n        return this.insertNamedExports(index, [namedExport])[0];\n    }\n    insertNamedExports(index, namedExports) {\n        if (!(namedExports instanceof Function) && common.ArrayUtils.isNullOrEmpty(namedExports))\n            return [];\n        const originalNamedExports = this.getNamedExports();\n        const writer = this._getWriterWithIndentation();\n        const namedExportStructurePrinter = this._context.structurePrinterFactory.forNamedImportExportSpecifier();\n        index = verifyAndGetIndex(index, originalNamedExports.length);\n        const exportClause = this.getNodeProperty(\"exportClause\");\n        if (exportClause == null) {\n            namedExportStructurePrinter.printTextsWithBraces(writer, namedExports);\n            const asteriskToken = this.getFirstChildByKindOrThrow(common.SyntaxKind.AsteriskToken);\n            insertIntoParentTextRange({\n                insertPos: asteriskToken.getStart(),\n                parent: this,\n                newText: writer.toString(),\n                replacing: {\n                    textLength: 1,\n                },\n            });\n        }\n        else if (exportClause.getKind() === common.SyntaxKind.NamespaceExport) {\n            namedExportStructurePrinter.printTextsWithBraces(writer, namedExports);\n            insertIntoParentTextRange({\n                insertPos: exportClause.getStart(),\n                parent: this,\n                newText: writer.toString(),\n                replacing: {\n                    textLength: exportClause.getWidth(),\n                },\n            });\n        }\n        else {\n            namedExportStructurePrinter.printTexts(writer, namedExports);\n            insertIntoCommaSeparatedNodes({\n                parent: this.getFirstChildByKindOrThrow(common.SyntaxKind.NamedExports).getFirstChildByKindOrThrow(common.SyntaxKind.SyntaxList),\n                currentNodes: originalNamedExports,\n                insertIndex: index,\n                newText: writer.toString(),\n                surroundWithSpaces: this._context.getFormatCodeSettings().insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces,\n                useTrailingCommas: false,\n            });\n        }\n        const newNamedExports = this.getNamedExports();\n        return getNodesToReturn(originalNamedExports, newNamedExports, index, false);\n    }\n    getNamedExports() {\n        const namedExports = this.compilerNode.exportClause;\n        if (namedExports == null || common.ts.isNamespaceExport(namedExports))\n            return [];\n        return namedExports.elements.map(e => this._getNodeFromCompilerNode(e));\n    }\n    toNamespaceExport() {\n        if (!this.hasModuleSpecifier())\n            throw new common.errors.InvalidOperationError(\"Cannot change to a namespace export when no module specifier exists.\");\n        const namedExportsNode = this.getNodeProperty(\"exportClause\");\n        if (namedExportsNode == null)\n            return this;\n        insertIntoParentTextRange({\n            parent: this,\n            newText: \"*\",\n            insertPos: namedExportsNode.getStart(),\n            replacing: {\n                textLength: namedExportsNode.getWidth(),\n            },\n        });\n        return this;\n    }\n    setAssertElements(elements) {\n        let assertClause = this.getAssertClause();\n        if (assertClause) {\n            if (elements)\n                assertClause.setElements(elements);\n            else\n                assertClause.remove();\n        }\n        else if (elements) {\n            const printer = this._context.structurePrinterFactory.forAssertEntry();\n            const writer = this._context.createWriter();\n            writer.space();\n            printer.printAssertClause(writer, elements);\n            insertIntoParentTextRange({\n                parent: this,\n                newText: writer.toString(),\n                insertPos: this.getSourceFile().getFullText()[this.getEnd() - 1] === \";\" ? this.getEnd() - 1 : this.getEnd(),\n            });\n        }\n        return this;\n    }\n    getAssertClause() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.assertClause);\n    }\n    set(structure) {\n        callBaseSet(ExportDeclarationBase.prototype, this, structure);\n        if (structure.namedExports != null) {\n            setEmptyNamedExport(this);\n            this.addNamedExports(structure.namedExports);\n        }\n        else if (structure.hasOwnProperty(common.nameof(structure, \"namedExports\")) && structure.moduleSpecifier == null) {\n            this.toNamespaceExport();\n        }\n        if (structure.moduleSpecifier != null)\n            this.setModuleSpecifier(structure.moduleSpecifier);\n        else if (structure.hasOwnProperty(common.nameof(structure, \"moduleSpecifier\")))\n            this.removeModuleSpecifier();\n        if (structure.namedExports == null && structure.hasOwnProperty(common.nameof(structure, \"namedExports\")))\n            this.toNamespaceExport();\n        if (structure.namespaceExport != null)\n            this.setNamespaceExport(structure.namespaceExport);\n        if (structure.isTypeOnly != null)\n            this.setIsTypeOnly(structure.isTypeOnly);\n        if (structure.hasOwnProperty(common.nameof(structure, \"assertElements\")))\n            this.setAssertElements(structure.assertElements);\n        return this;\n    }\n    getStructure() {\n        var _a;\n        const moduleSpecifier = this.getModuleSpecifier();\n        const assertClause = this.getAssertClause();\n        return callBaseGetStructure(ExportDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.ExportDeclaration,\n            isTypeOnly: this.isTypeOnly(),\n            moduleSpecifier: moduleSpecifier === null || moduleSpecifier === void 0 ? void 0 : moduleSpecifier.getLiteralText(),\n            namedExports: this.getNamedExports().map(node => node.getStructure()),\n            namespaceExport: (_a = this.getNamespaceExport()) === null || _a === void 0 ? void 0 : _a.getName(),\n            assertElements: assertClause ? assertClause.getElements().map(e => e.getStructure()) : undefined,\n        });\n    }\n}\nfunction setEmptyNamedExport(node) {\n    const namedExportsNode = node.getNodeProperty(\"exportClause\");\n    let replaceNode;\n    if (namedExportsNode != null) {\n        if (node.getNamedExports().length === 0)\n            return;\n        replaceNode = namedExportsNode;\n    }\n    else {\n        replaceNode = node.getFirstChildByKindOrThrow(common.SyntaxKind.AsteriskToken);\n    }\n    insertIntoParentTextRange({\n        parent: node,\n        newText: \"{ }\",\n        insertPos: replaceNode.getStart(),\n        replacing: {\n            textLength: replaceNode.getWidth(),\n        },\n    });\n}\n\nconst ExportSpecifierBase = Node;\nclass ExportSpecifier extends ExportSpecifierBase {\n    setName(name) {\n        const nameNode = this.getNameNode();\n        if (nameNode.getText() === name)\n            return this;\n        nameNode.replaceWithText(name);\n        return this;\n    }\n    getName() {\n        return this.getNameNode().getText();\n    }\n    getNameNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.propertyName || this.compilerNode.name);\n    }\n    renameAlias(alias) {\n        if (common.StringUtils.isNullOrWhitespace(alias)) {\n            this.removeAliasWithRename();\n            return this;\n        }\n        let aliasIdentifier = this.getAliasNode();\n        if (aliasIdentifier == null) {\n            this.setAlias(this.getName());\n            aliasIdentifier = this.getAliasNode();\n        }\n        aliasIdentifier.rename(alias);\n        return this;\n    }\n    setAlias(alias) {\n        if (common.StringUtils.isNullOrWhitespace(alias)) {\n            this.removeAlias();\n            return this;\n        }\n        const aliasIdentifier = this.getAliasNode();\n        if (aliasIdentifier == null) {\n            insertIntoParentTextRange({\n                insertPos: this.getNameNode().getEnd(),\n                parent: this,\n                newText: ` as ${alias}`,\n            });\n        }\n        else {\n            aliasIdentifier.replaceWithText(alias);\n        }\n        return this;\n    }\n    removeAlias() {\n        const aliasIdentifier = this.getAliasNode();\n        if (aliasIdentifier == null)\n            return this;\n        removeChildren({\n            children: [this.getFirstChildByKindOrThrow(common.SyntaxKind.AsKeyword), aliasIdentifier],\n            removePrecedingSpaces: true,\n            removePrecedingNewLines: true,\n        });\n        return this;\n    }\n    removeAliasWithRename() {\n        const aliasIdentifier = this.getAliasNode();\n        if (aliasIdentifier == null)\n            return this;\n        aliasIdentifier.rename(this.getName());\n        this.removeAlias();\n        return this;\n    }\n    getAliasNode() {\n        if (this.compilerNode.propertyName == null)\n            return undefined;\n        return this._getNodeFromCompilerNode(this.compilerNode.name);\n    }\n    isTypeOnly() {\n        return this.compilerNode.isTypeOnly;\n    }\n    setIsTypeOnly(value) {\n        if (this.isTypeOnly() === value)\n            return this;\n        if (value) {\n            insertIntoParentTextRange({\n                insertPos: this.getStart(),\n                parent: this,\n                newText: `type `,\n            });\n        }\n        else {\n            removeChildren({\n                children: [this.getFirstChildByKindOrThrow(common.ts.SyntaxKind.TypeKeyword)],\n                removeFollowingSpaces: true,\n            });\n        }\n        return this;\n    }\n    getExportDeclaration() {\n        return this.getFirstAncestorByKindOrThrow(common.SyntaxKind.ExportDeclaration);\n    }\n    getLocalTargetSymbolOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getLocalTargetSymbol(), `The export specifier's local target symbol was expected.`);\n    }\n    getLocalTargetSymbol() {\n        return this._context.typeChecker.getExportSpecifierLocalTargetSymbol(this);\n    }\n    getLocalTargetDeclarations() {\n        var _a, _b;\n        return (_b = (_a = this.getLocalTargetSymbol()) === null || _a === void 0 ? void 0 : _a.getDeclarations()) !== null && _b !== void 0 ? _b : [];\n    }\n    remove() {\n        const exportDeclaration = this.getExportDeclaration();\n        const exports = exportDeclaration.getNamedExports();\n        if (exports.length > 1)\n            removeCommaSeparatedChild(this);\n        else if (exportDeclaration.hasModuleSpecifier())\n            exportDeclaration.toNamespaceExport();\n        else\n            exportDeclaration.remove();\n    }\n    set(structure) {\n        callBaseSet(ExportSpecifierBase.prototype, this, structure);\n        if (structure.name != null)\n            this.setName(structure.name);\n        if (structure.alias != null)\n            this.setAlias(structure.alias);\n        else if (structure.hasOwnProperty(common.nameof(structure, \"alias\")))\n            this.removeAlias();\n        return this;\n    }\n    getStructure() {\n        const alias = this.getAliasNode();\n        return callBaseGetStructure(Node.prototype, this, {\n            kind: exports.StructureKind.ExportSpecifier,\n            alias: alias ? alias.getText() : undefined,\n            name: this.getNameNode().getText(),\n        });\n    }\n}\n\nconst ExternalModuleReferenceBase = ExpressionableNode(Node);\nclass ExternalModuleReference extends ExternalModuleReferenceBase {\n    getReferencedSourceFileOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getReferencedSourceFile(), \"Expected to find the referenced source file.\");\n    }\n    isRelative() {\n        const expression = this.getExpression();\n        if (expression == null || !Node.isStringLiteral(expression))\n            return false;\n        return ModuleUtils.isModuleSpecifierRelative(expression.getLiteralText());\n    }\n    getReferencedSourceFile() {\n        const expression = this.getExpression();\n        if (expression == null)\n            return undefined;\n        const symbol = expression.getSymbol();\n        if (symbol == null)\n            return undefined;\n        return ModuleUtils.getReferencedSourceFileFromSymbol(symbol);\n    }\n}\n\nconst ImportClauseBase = Node;\nclass ImportClause extends ImportClauseBase {\n    isTypeOnly() {\n        return this.compilerNode.isTypeOnly;\n    }\n    setIsTypeOnly(value) {\n        if (this.isTypeOnly() === value)\n            return this;\n        if (value) {\n            insertIntoParentTextRange({\n                parent: this,\n                insertPos: this.getStart(),\n                newText: \"type \",\n            });\n        }\n        else {\n            const typeKeyword = this.getFirstChildByKindOrThrow(common.ts.SyntaxKind.TypeKeyword);\n            removeChildren({\n                children: [typeKeyword],\n                removeFollowingSpaces: true,\n            });\n        }\n        return this;\n    }\n    getDefaultImportOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getDefaultImport(), \"Expected to find a default import.\");\n    }\n    getDefaultImport() {\n        return this.getNodeProperty(\"name\");\n    }\n    getNamedBindingsOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getNamedBindings(), \"Expected to find an import declaration's named bindings.\");\n    }\n    getNamedBindings() {\n        return this.getNodeProperty(\"namedBindings\");\n    }\n    getNamespaceImportOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getNamespaceImport(), \"Expected to find a namespace import.\");\n    }\n    getNamespaceImport() {\n        const namedBindings = this.getNamedBindings();\n        if (namedBindings == null || !Node.isNamespaceImport(namedBindings))\n            return undefined;\n        return namedBindings.getNameNode();\n    }\n    getNamedImports() {\n        const namedBindings = this.getNamedBindings();\n        if (namedBindings == null || !Node.isNamedImports(namedBindings))\n            return [];\n        return namedBindings.getElements();\n    }\n}\n\nconst ImportDeclarationBase = Statement;\nclass ImportDeclaration extends ImportDeclarationBase {\n    isTypeOnly() {\n        var _a, _b;\n        return (_b = (_a = this.getImportClause()) === null || _a === void 0 ? void 0 : _a.isTypeOnly()) !== null && _b !== void 0 ? _b : false;\n    }\n    setIsTypeOnly(value) {\n        const importClause = this.getImportClause();\n        if (importClause == null) {\n            if (!value)\n                return this;\n            else\n                throw new common.errors.InvalidOperationError(\"Cannot set an import as type only when there is no import clause.\");\n        }\n        importClause.setIsTypeOnly(value);\n        return this;\n    }\n    setModuleSpecifier(textOrSourceFile) {\n        const text = typeof textOrSourceFile === \"string\" ? textOrSourceFile : this._sourceFile.getRelativePathAsModuleSpecifierTo(textOrSourceFile);\n        this.getModuleSpecifier().setLiteralValue(text);\n        return this;\n    }\n    getModuleSpecifier() {\n        const moduleSpecifier = this._getNodeFromCompilerNode(this.compilerNode.moduleSpecifier);\n        if (!Node.isStringLiteral(moduleSpecifier))\n            throw new common.errors.InvalidOperationError(\"Expected the module specifier to be a string literal.\");\n        return moduleSpecifier;\n    }\n    getModuleSpecifierValue() {\n        return this.getModuleSpecifier().getLiteralValue();\n    }\n    getModuleSpecifierSourceFileOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getModuleSpecifierSourceFile(), `A module specifier source file was expected.`);\n    }\n    getModuleSpecifierSourceFile() {\n        const symbol = this.getModuleSpecifier().getSymbol();\n        if (symbol == null)\n            return undefined;\n        return ModuleUtils.getReferencedSourceFileFromSymbol(symbol);\n    }\n    isModuleSpecifierRelative() {\n        return ModuleUtils.isModuleSpecifierRelative(this.getModuleSpecifierValue());\n    }\n    setDefaultImport(text) {\n        if (common.StringUtils.isNullOrWhitespace(text))\n            return this.removeDefaultImport();\n        const defaultImport = this.getDefaultImport();\n        if (defaultImport != null) {\n            defaultImport.replaceWithText(text);\n            return this;\n        }\n        const importKeyword = this.getFirstChildByKindOrThrow(common.SyntaxKind.ImportKeyword);\n        const importClause = this.getImportClause();\n        if (importClause == null) {\n            insertIntoParentTextRange({\n                insertPos: importKeyword.getEnd(),\n                parent: this,\n                newText: ` ${text} from`,\n            });\n            return this;\n        }\n        insertIntoParentTextRange({\n            insertPos: importKeyword.getEnd(),\n            parent: importClause,\n            newText: ` ${text},`,\n        });\n        return this;\n    }\n    renameDefaultImport(text) {\n        if (common.StringUtils.isNullOrWhitespace(text))\n            return this.removeDefaultImport();\n        const defaultImport = this.getDefaultImport();\n        if (defaultImport != null) {\n            defaultImport.rename(text);\n            return this;\n        }\n        this.setDefaultImport(text);\n        return this;\n    }\n    getDefaultImportOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getDefaultImport(), \"Expected to find a default import.\");\n    }\n    getDefaultImport() {\n        var _a, _b;\n        return (_b = (_a = this.getImportClause()) === null || _a === void 0 ? void 0 : _a.getDefaultImport()) !== null && _b !== void 0 ? _b : undefined;\n    }\n    setNamespaceImport(text) {\n        if (common.StringUtils.isNullOrWhitespace(text))\n            return this.removeNamespaceImport();\n        const namespaceImport = this.getNamespaceImport();\n        if (namespaceImport != null) {\n            namespaceImport.rename(text);\n            return this;\n        }\n        if (this.getNamedImports().length > 0)\n            throw new common.errors.InvalidOperationError(\"Cannot add a namespace import to an import declaration that has named imports.\");\n        const defaultImport = this.getDefaultImport();\n        if (defaultImport != null) {\n            insertIntoParentTextRange({\n                insertPos: defaultImport.getEnd(),\n                parent: this.getImportClause(),\n                newText: `, * as ${text}`,\n            });\n            return this;\n        }\n        insertIntoParentTextRange({\n            insertPos: this.getFirstChildByKindOrThrow(common.SyntaxKind.ImportKeyword).getEnd(),\n            parent: this,\n            newText: ` * as ${text} from`,\n        });\n        return this;\n    }\n    removeNamespaceImport() {\n        const namespaceImport = this.getNamespaceImport();\n        if (namespaceImport == null)\n            return this;\n        removeChildren({\n            children: getChildrenToRemove.call(this),\n            removePrecedingSpaces: true,\n            removePrecedingNewLines: true,\n        });\n        return this;\n        function getChildrenToRemove() {\n            const defaultImport = this.getDefaultImport();\n            if (defaultImport == null)\n                return [this.getImportClauseOrThrow(), this.getLastChildByKindOrThrow(common.SyntaxKind.FromKeyword)];\n            else\n                return [defaultImport.getNextSiblingIfKindOrThrow(common.SyntaxKind.CommaToken), namespaceImport];\n        }\n    }\n    removeDefaultImport() {\n        const importClause = this.getImportClause();\n        if (importClause == null)\n            return this;\n        const defaultImport = importClause.getDefaultImport();\n        if (defaultImport == null)\n            return this;\n        const hasOnlyDefaultImport = importClause.getChildCount() === 1;\n        if (hasOnlyDefaultImport) {\n            removeChildren({\n                children: [importClause, importClause.getNextSiblingIfKindOrThrow(common.SyntaxKind.FromKeyword)],\n                removePrecedingSpaces: true,\n                removePrecedingNewLines: true,\n            });\n        }\n        else {\n            removeChildren({\n                children: [defaultImport, defaultImport.getNextSiblingIfKindOrThrow(common.SyntaxKind.CommaToken)],\n                removePrecedingSpaces: true,\n                removePrecedingNewLines: true,\n            });\n        }\n        return this;\n    }\n    getNamespaceImportOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getNamespaceImport(), \"Expected to find a namespace import.\");\n    }\n    getNamespaceImport() {\n        var _a, _b;\n        return (_b = (_a = this.getImportClause()) === null || _a === void 0 ? void 0 : _a.getNamespaceImport()) !== null && _b !== void 0 ? _b : undefined;\n    }\n    addNamedImport(namedImport) {\n        return this.addNamedImports([namedImport])[0];\n    }\n    addNamedImports(namedImports) {\n        return this.insertNamedImports(this.getNamedImports().length, namedImports);\n    }\n    insertNamedImport(index, namedImport) {\n        return this.insertNamedImports(index, [namedImport])[0];\n    }\n    insertNamedImports(index, namedImports) {\n        if (!(namedImports instanceof Function) && common.ArrayUtils.isNullOrEmpty(namedImports))\n            return [];\n        const originalNamedImports = this.getNamedImports();\n        const writer = this._getWriterWithQueuedIndentation();\n        const namedImportStructurePrinter = this._context.structurePrinterFactory.forNamedImportExportSpecifier();\n        const importClause = this.getImportClause();\n        index = verifyAndGetIndex(index, originalNamedImports.length);\n        if (originalNamedImports.length === 0) {\n            namedImportStructurePrinter.printTextsWithBraces(writer, namedImports);\n            if (importClause == null) {\n                insertIntoParentTextRange({\n                    insertPos: this.getFirstChildByKindOrThrow(common.SyntaxKind.ImportKeyword).getEnd(),\n                    parent: this,\n                    newText: ` ${writer.toString()} from`,\n                });\n            }\n            else if (this.getNamespaceImport() != null)\n                throw getErrorWhenNamespaceImportsExist();\n            else if (importClause.getNamedBindings() != null) {\n                const namedBindings = importClause.getNamedBindingsOrThrow();\n                insertIntoParentTextRange({\n                    insertPos: namedBindings.getStart(),\n                    replacing: {\n                        textLength: namedBindings.getWidth(),\n                    },\n                    parent: importClause,\n                    newText: writer.toString(),\n                });\n            }\n            else {\n                insertIntoParentTextRange({\n                    insertPos: this.getDefaultImport().getEnd(),\n                    parent: importClause,\n                    newText: `, ${writer.toString()}`,\n                });\n            }\n        }\n        else {\n            if (importClause == null)\n                throw new common.errors.NotImplementedError(\"Expected to have an import clause.\");\n            namedImportStructurePrinter.printTexts(writer, namedImports);\n            insertIntoCommaSeparatedNodes({\n                parent: importClause.getFirstChildByKindOrThrow(common.SyntaxKind.NamedImports).getFirstChildByKindOrThrow(common.SyntaxKind.SyntaxList),\n                currentNodes: originalNamedImports,\n                insertIndex: index,\n                newText: writer.toString(),\n                surroundWithSpaces: this._context.getFormatCodeSettings().insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces,\n                useTrailingCommas: false,\n            });\n        }\n        const newNamedImports = this.getNamedImports();\n        return getNodesToReturn(originalNamedImports, newNamedImports, index, false);\n    }\n    getNamedImports() {\n        var _a, _b;\n        return (_b = (_a = this.getImportClause()) === null || _a === void 0 ? void 0 : _a.getNamedImports()) !== null && _b !== void 0 ? _b : [];\n    }\n    removeNamedImports() {\n        const importClause = this.getImportClause();\n        if (importClause == null)\n            return this;\n        const namedImportsNode = importClause.getNamedBindings();\n        if (namedImportsNode == null || namedImportsNode.getKind() !== common.SyntaxKind.NamedImports)\n            return this;\n        const defaultImport = this.getDefaultImport();\n        if (defaultImport != null) {\n            const commaToken = defaultImport.getNextSiblingIfKindOrThrow(common.SyntaxKind.CommaToken);\n            removeChildren({ children: [commaToken, namedImportsNode] });\n            return this;\n        }\n        const fromKeyword = importClause.getNextSiblingIfKindOrThrow(common.SyntaxKind.FromKeyword);\n        removeChildren({ children: [importClause, fromKeyword], removePrecedingSpaces: true });\n        return this;\n    }\n    getImportClauseOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getImportClause(), \"Expected to find an import clause.\");\n    }\n    getImportClause() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.importClause);\n    }\n    setAssertElements(elements) {\n        let assertClause = this.getAssertClause();\n        if (assertClause) {\n            if (elements)\n                assertClause.setElements(elements);\n            else\n                assertClause.remove();\n        }\n        else if (elements) {\n            const printer = this._context.structurePrinterFactory.forAssertEntry();\n            const writer = this._context.createWriter();\n            writer.space();\n            printer.printAssertClause(writer, elements);\n            insertIntoParentTextRange({\n                parent: this,\n                newText: writer.toString(),\n                insertPos: this.getSourceFile().getFullText()[this.getEnd() - 1] === \";\" ? this.getEnd() - 1 : this.getEnd(),\n            });\n        }\n        return this;\n    }\n    getAssertClause() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.assertClause);\n    }\n    set(structure) {\n        callBaseSet(ImportDeclarationBase.prototype, this, structure);\n        if (structure.defaultImport != null)\n            this.setDefaultImport(structure.defaultImport);\n        else if (structure.hasOwnProperty(common.nameof(structure, \"defaultImport\")))\n            this.removeDefaultImport();\n        if (structure.hasOwnProperty(common.nameof(structure, \"namedImports\")))\n            this.removeNamedImports();\n        if (structure.namespaceImport != null)\n            this.setNamespaceImport(structure.namespaceImport);\n        else if (structure.hasOwnProperty(common.nameof(structure, \"namespaceImport\")))\n            this.removeNamespaceImport();\n        if (structure.namedImports != null) {\n            setEmptyNamedImport(this);\n            this.addNamedImports(structure.namedImports);\n        }\n        if (structure.moduleSpecifier != null)\n            this.setModuleSpecifier(structure.moduleSpecifier);\n        if (structure.isTypeOnly != null)\n            this.setIsTypeOnly(structure.isTypeOnly);\n        if (structure.hasOwnProperty(common.nameof(structure, \"assertElements\")))\n            this.setAssertElements(structure.assertElements);\n        return this;\n    }\n    getStructure() {\n        const namespaceImport = this.getNamespaceImport();\n        const defaultImport = this.getDefaultImport();\n        const assertClause = this.getAssertClause();\n        return callBaseGetStructure(ImportDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.ImportDeclaration,\n            isTypeOnly: this.isTypeOnly(),\n            defaultImport: defaultImport ? defaultImport.getText() : undefined,\n            moduleSpecifier: this.getModuleSpecifier().getLiteralText(),\n            namedImports: this.getNamedImports().map(node => node.getStructure()),\n            namespaceImport: namespaceImport ? namespaceImport.getText() : undefined,\n            assertElements: assertClause ? assertClause.getElements().map(e => e.getStructure()) : undefined,\n        });\n    }\n}\nfunction setEmptyNamedImport(node) {\n    const importClause = node.getNodeProperty(\"importClause\");\n    const writer = node._getWriterWithQueuedChildIndentation();\n    const namedImportStructurePrinter = node._context.structurePrinterFactory.forNamedImportExportSpecifier();\n    namedImportStructurePrinter.printTextsWithBraces(writer, []);\n    const emptyBracesText = writer.toString();\n    if (node.getNamespaceImport() != null)\n        throw getErrorWhenNamespaceImportsExist();\n    if (importClause == null) {\n        insertIntoParentTextRange({\n            insertPos: node.getFirstChildByKindOrThrow(common.SyntaxKind.ImportKeyword).getEnd(),\n            parent: node,\n            newText: ` ${emptyBracesText} from`,\n        });\n        return;\n    }\n    const replaceNode = importClause.getNamedBindings();\n    if (replaceNode != null) {\n        insertIntoParentTextRange({\n            parent: importClause,\n            newText: emptyBracesText,\n            insertPos: replaceNode.getStart(),\n            replacing: {\n                textLength: replaceNode.getWidth(),\n            },\n        });\n        return;\n    }\n    const defaultImport = importClause.getDefaultImport();\n    if (defaultImport != null) {\n        insertIntoParentTextRange({\n            insertPos: defaultImport.getEnd(),\n            parent: importClause,\n            newText: `, ${emptyBracesText}`,\n        });\n        return;\n    }\n}\nfunction getErrorWhenNamespaceImportsExist() {\n    return new common.errors.InvalidOperationError(\"Cannot add a named import to an import declaration that has a namespace import.\");\n}\n\nconst createBase$r = (ctor) => JSDocableNode(NamedNode(ctor));\nconst ImportEqualsDeclarationBase = createBase$r(Statement);\nclass ImportEqualsDeclaration extends ImportEqualsDeclarationBase {\n    isTypeOnly() {\n        var _a;\n        return (_a = this.compilerNode.isTypeOnly) !== null && _a !== void 0 ? _a : false;\n    }\n    setIsTypeOnly(value) {\n        if (this.isTypeOnly() === value)\n            return this;\n        if (value) {\n            insertIntoParentTextRange({\n                parent: this,\n                insertPos: this.getNameNode().getStart(),\n                newText: \"type \",\n            });\n        }\n        else {\n            const typeKeyword = this.getFirstChildByKindOrThrow(common.ts.SyntaxKind.TypeKeyword);\n            removeChildren({\n                children: [typeKeyword],\n                removeFollowingSpaces: true,\n            });\n        }\n        return this;\n    }\n    getModuleReference() {\n        return this._getNodeFromCompilerNode(this.compilerNode.moduleReference);\n    }\n    isExternalModuleReferenceRelative() {\n        const moduleReference = this.getModuleReference();\n        if (!Node.isExternalModuleReference(moduleReference))\n            return false;\n        return moduleReference.isRelative();\n    }\n    setExternalModuleReference(textOrSourceFile) {\n        const text = typeof textOrSourceFile === \"string\" ? textOrSourceFile : this._sourceFile.getRelativePathAsModuleSpecifierTo(textOrSourceFile);\n        const moduleReference = this.getModuleReference();\n        if (Node.isExternalModuleReference(moduleReference) && moduleReference.getExpression() != null)\n            moduleReference.getExpressionOrThrow().replaceWithText(writer => writer.quote(text));\n        else\n            moduleReference.replaceWithText(writer => writer.write(\"require(\").quote(text).write(\")\"));\n        return this;\n    }\n    getExternalModuleReferenceSourceFileOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getExternalModuleReferenceSourceFile(), \"Expected to find an external module reference's referenced source file.\");\n    }\n    getExternalModuleReferenceSourceFile() {\n        const moduleReference = this.getModuleReference();\n        if (!Node.isExternalModuleReference(moduleReference))\n            return undefined;\n        return moduleReference.getReferencedSourceFile();\n    }\n}\n\nconst ImportSpecifierBase = Node;\nclass ImportSpecifier extends ImportSpecifierBase {\n    setName(name) {\n        const nameNode = this.getNameNode();\n        if (nameNode.getText() === name)\n            return this;\n        nameNode.replaceWithText(name);\n        return this;\n    }\n    getName() {\n        return this.getNameNode().getText();\n    }\n    getNameNode() {\n        var _a;\n        return this._getNodeFromCompilerNode((_a = this.compilerNode.propertyName) !== null && _a !== void 0 ? _a : this.compilerNode.name);\n    }\n    renameAlias(alias) {\n        if (common.StringUtils.isNullOrWhitespace(alias)) {\n            this.removeAliasWithRename();\n            return this;\n        }\n        let aliasIdentifier = this.getAliasNode();\n        if (aliasIdentifier == null) {\n            this.setAlias(this.getName());\n            aliasIdentifier = this.getAliasNode();\n        }\n        aliasIdentifier.rename(alias);\n        return this;\n    }\n    setAlias(alias) {\n        if (common.StringUtils.isNullOrWhitespace(alias)) {\n            this.removeAlias();\n            return this;\n        }\n        const aliasIdentifier = this.getAliasNode();\n        if (aliasIdentifier == null) {\n            insertIntoParentTextRange({\n                insertPos: this.getNameNode().getEnd(),\n                parent: this,\n                newText: ` as ${alias}`,\n            });\n        }\n        else {\n            aliasIdentifier.replaceWithText(alias);\n        }\n        return this;\n    }\n    removeAlias() {\n        const aliasIdentifier = this.getAliasNode();\n        if (aliasIdentifier == null)\n            return this;\n        removeChildren({\n            children: [this.getFirstChildByKindOrThrow(common.SyntaxKind.AsKeyword), aliasIdentifier],\n            removePrecedingSpaces: true,\n            removePrecedingNewLines: true,\n        });\n        return this;\n    }\n    removeAliasWithRename() {\n        const aliasIdentifier = this.getAliasNode();\n        if (aliasIdentifier == null)\n            return this;\n        aliasIdentifier.rename(this.getName());\n        this.removeAlias();\n        return this;\n    }\n    getAliasNode() {\n        if (this.compilerNode.propertyName == null)\n            return undefined;\n        return this._getNodeFromCompilerNode(this.compilerNode.name);\n    }\n    isTypeOnly() {\n        return this.compilerNode.isTypeOnly;\n    }\n    setIsTypeOnly(value) {\n        if (this.isTypeOnly() === value)\n            return this;\n        if (value) {\n            insertIntoParentTextRange({\n                insertPos: this.getStart(),\n                parent: this,\n                newText: `type `,\n            });\n        }\n        else {\n            removeChildren({\n                children: [this.getFirstChildByKindOrThrow(common.ts.SyntaxKind.TypeKeyword)],\n                removeFollowingSpaces: true,\n            });\n        }\n        return this;\n    }\n    getImportDeclaration() {\n        return this.getFirstAncestorByKindOrThrow(common.SyntaxKind.ImportDeclaration);\n    }\n    remove() {\n        const importDeclaration = this.getImportDeclaration();\n        const namedImports = importDeclaration.getNamedImports();\n        if (namedImports.length > 1)\n            removeCommaSeparatedChild(this);\n        else\n            importDeclaration.removeNamedImports();\n    }\n    set(structure) {\n        callBaseSet(ImportSpecifierBase.prototype, this, structure);\n        if (structure.name != null)\n            this.setName(structure.name);\n        if (structure.alias != null)\n            this.setAlias(structure.alias);\n        else if (structure.hasOwnProperty(common.nameof(structure, \"alias\")))\n            this.removeAlias();\n        return this;\n    }\n    getStructure() {\n        const alias = this.getAliasNode();\n        return callBaseGetStructure(ImportSpecifierBase.prototype, this, {\n            kind: exports.StructureKind.ImportSpecifier,\n            name: this.getName(),\n            alias: alias ? alias.getText() : undefined,\n        });\n    }\n}\n\nconst ModuleBlockBase = StatementedNode(Statement);\nclass ModuleBlock extends ModuleBlockBase {\n}\n\nfunction ModuleChildableNode(Base) {\n    return class extends Base {\n        getParentModuleOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getParentModule(), \"Expected to find the parent module declaration.\");\n        }\n        getParentModule() {\n            let parent = this.getParentOrThrow();\n            if (!Node.isModuleBlock(parent))\n                return undefined;\n            while (parent.getParentOrThrow().getKind() === common.SyntaxKind.ModuleDeclaration)\n                parent = parent.getParentOrThrow();\n            return parent;\n        }\n    };\n}\n\nexports.ModuleDeclarationKind = void 0;\n(function (ModuleDeclarationKind) {\n    ModuleDeclarationKind[\"Namespace\"] = \"namespace\";\n    ModuleDeclarationKind[\"Module\"] = \"module\";\n    ModuleDeclarationKind[\"Global\"] = \"global\";\n})(exports.ModuleDeclarationKind || (exports.ModuleDeclarationKind = {}));\n\nconst createBase$q = (ctor) => ModuledNode(UnwrappableNode(TextInsertableNode(BodyableNode(ModuleChildableNode(StatementedNode(JSDocableNode(AmbientableNode(ExportableNode(ModifierableNode(ModuleNamedNode(ctor)))))))))));\nconst ModuleDeclarationBase = createBase$q(Statement);\nclass ModuleDeclaration extends ModuleDeclarationBase {\n    getName() {\n        const nameNodesOrStringLit = this.getNameNodes();\n        if (nameNodesOrStringLit instanceof Array)\n            return nameNodesOrStringLit.map(n => n.getText()).join(\".\");\n        return nameNodesOrStringLit.getText();\n    }\n    setName(newName) {\n        const openIssueText = `Please open an issue if you really need this and I'll up the priority.`;\n        if (newName.indexOf(\".\") >= 0)\n            throw new common.errors.NotImplementedError(`Not implemented to set a namespace name to a name containing a period. ${openIssueText}`);\n        const moduleName = this.getNameNodes();\n        if (moduleName instanceof Array) {\n            if (moduleName.length > 1)\n                throw new common.errors.NotImplementedError(`Not implemented to set a namespace name that uses dot notation. ${openIssueText}`);\n            if (newName !== \"global\")\n                addNamespaceKeywordIfNecessary(this);\n            if (common.StringUtils.isQuoted(newName))\n                changeToAmbientModuleIfNecessary(this);\n            moduleName[0].replaceWithText(newName);\n        }\n        else {\n            moduleName.replaceWithText(newName);\n        }\n        return this;\n    }\n    rename(newName, options) {\n        if (newName.indexOf(\".\") >= 0)\n            throw new common.errors.NotSupportedError(`Cannot rename a namespace name to a name containing a period.`);\n        const nameNodes = this.getNameNodes();\n        if (nameNodes instanceof Array) {\n            if (nameNodes.length > 1) {\n                throw new common.errors.NotSupportedError(`Cannot rename a namespace name that uses dot notation. Rename the individual nodes via .${common.nameof(this, \"getNameNodes\")}()`);\n            }\n            if (newName !== \"global\")\n                addNamespaceKeywordIfNecessary(this);\n            nameNodes[0].rename(newName, options);\n        }\n        else {\n            renameNode(nameNodes, common.StringUtils.stripQuotes(newName), options);\n        }\n        return this;\n    }\n    getNameNodes() {\n        const name = this.getNameNode();\n        if (Node.isStringLiteral(name))\n            return name;\n        else {\n            const nodes = [];\n            let current = this;\n            do {\n                nodes.push(this._getNodeFromCompilerNode(current.compilerNode.name));\n                current = current.getFirstChildByKind(common.SyntaxKind.ModuleDeclaration);\n            } while (current != null);\n            return nodes;\n        }\n    }\n    hasNamespaceKeyword() {\n        return this.getDeclarationKind() === exports.ModuleDeclarationKind.Namespace;\n    }\n    hasModuleKeyword() {\n        return this.getDeclarationKind() === exports.ModuleDeclarationKind.Module;\n    }\n    setDeclarationKind(kind) {\n        if (this.getDeclarationKind() === kind)\n            return this;\n        if (kind === exports.ModuleDeclarationKind.Global) {\n            const declarationKindKeyword = this.getDeclarationKindKeyword();\n            this.getNameNode().replaceWithText(\"global\");\n            if (declarationKindKeyword != null) {\n                removeChildren({\n                    children: [declarationKindKeyword],\n                    removeFollowingNewLines: true,\n                    removeFollowingSpaces: true,\n                });\n            }\n        }\n        else {\n            const declarationKindKeyword = this.getDeclarationKindKeyword();\n            if (declarationKindKeyword != null)\n                declarationKindKeyword.replaceWithText(kind);\n            else {\n                insertIntoParentTextRange({\n                    parent: this,\n                    insertPos: this.getNameNode().getStart(),\n                    newText: kind + \" \",\n                });\n            }\n        }\n        return this;\n    }\n    getDeclarationKind() {\n        const nodeFlags = this.getFlags();\n        if ((nodeFlags & common.ts.NodeFlags.GlobalAugmentation) !== 0)\n            return exports.ModuleDeclarationKind.Global;\n        if ((nodeFlags & common.ts.NodeFlags.Namespace) !== 0)\n            return exports.ModuleDeclarationKind.Namespace;\n        return exports.ModuleDeclarationKind.Module;\n    }\n    getDeclarationKindKeyword() {\n        return this.getFirstChild(child => child.getKind() === common.SyntaxKind.NamespaceKeyword\n            || child.getKind() === common.SyntaxKind.ModuleKeyword);\n    }\n    set(structure) {\n        if (structure.name != null && structure.name !== \"global\")\n            addNamespaceKeywordIfNecessary(this);\n        callBaseSet(ModuleDeclarationBase.prototype, this, structure);\n        if (structure.declarationKind != null)\n            this.setDeclarationKind(structure.declarationKind);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(ModuleDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.Module,\n            declarationKind: this.getDeclarationKind(),\n        });\n    }\n    _getInnerBody() {\n        let node = this.getBody();\n        while (node != null && Node.isBodyable(node) && node.compilerNode.statements == null)\n            node = node.getBody();\n        return node;\n    }\n}\nfunction addNamespaceKeywordIfNecessary(namespaceDec) {\n    if (namespaceDec.getDeclarationKind() === exports.ModuleDeclarationKind.Global)\n        namespaceDec.setDeclarationKind(exports.ModuleDeclarationKind.Namespace);\n}\nfunction changeToAmbientModuleIfNecessary(namespaceDec) {\n    if (namespaceDec.hasNamespaceKeyword())\n        namespaceDec.setDeclarationKind(exports.ModuleDeclarationKind.Module);\n    if (!namespaceDec.hasDeclareKeyword())\n        namespaceDec.setHasDeclareKeyword(true);\n}\n\nconst NamedExportsBase = Node;\nclass NamedExports extends NamedExportsBase {\n    getElements() {\n        return this.compilerNode.elements.map(e => this._getNodeFromCompilerNode(e));\n    }\n}\n\nconst NamedImportsBase = Node;\nclass NamedImports extends NamedImportsBase {\n    getElements() {\n        return this.compilerNode.elements.map(e => this._getNodeFromCompilerNode(e));\n    }\n}\n\nconst NamespaceExportBase = RenameableNode(Node);\nclass NamespaceExport extends NamespaceExportBase {\n    setName(name) {\n        const nameNode = this.getNameNode();\n        if (nameNode.getText() === name)\n            return this;\n        nameNode.replaceWithText(name);\n        return this;\n    }\n    getName() {\n        return this.getNameNode().getText();\n    }\n    getNameNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.name);\n    }\n}\n\nconst NamespaceImportBase = RenameableNode(Node);\nclass NamespaceImport extends NamespaceImportBase {\n    setName(name) {\n        const nameNode = this.getNameNode();\n        if (nameNode.getText() === name)\n            return this;\n        nameNode.replaceWithText(name);\n        return this;\n    }\n    getName() {\n        return this.getNameNode().getText();\n    }\n    getNameNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.name);\n    }\n}\n\nclass FileReference extends TextRange {\n    constructor(compilerObject, sourceFile) {\n        super(compilerObject, sourceFile);\n    }\n    getFileName() {\n        return this.compilerObject.fileName;\n    }\n}\n\nexports.FileSystemRefreshResult = void 0;\n(function (FileSystemRefreshResult) {\n    FileSystemRefreshResult[FileSystemRefreshResult[\"NoChange\"] = 0] = \"NoChange\";\n    FileSystemRefreshResult[FileSystemRefreshResult[\"Updated\"] = 1] = \"Updated\";\n    FileSystemRefreshResult[FileSystemRefreshResult[\"Deleted\"] = 2] = \"Deleted\";\n})(exports.FileSystemRefreshResult || (exports.FileSystemRefreshResult = {}));\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\n\nconst SourceFileBase = ModuledNode(TextInsertableNode(StatementedNode(Node)));\nclass SourceFile extends SourceFileBase {\n    constructor(context, node) {\n        super(context, node, undefined);\n        this._isSaved = false;\n        this._modifiedEventContainer = new common.EventContainer();\n        this._preModifiedEventContainer = new common.EventContainer();\n        this._referenceContainer = new SourceFileReferenceContainer(this);\n        this.__sourceFile = this;\n        const onPreModified = () => {\n            this.isFromExternalLibrary();\n            this._preModifiedEventContainer.unsubscribe(onPreModified);\n        };\n        this._preModifiedEventContainer.subscribe(onPreModified);\n    }\n    _replaceCompilerNodeFromFactory(compilerNode) {\n        super._replaceCompilerNodeFromFactory(compilerNode);\n        this._context.resetProgram();\n        this._isSaved = false;\n        this._modifiedEventContainer.fire(this);\n    }\n    _clearInternals() {\n        super._clearInternals();\n        clearTextRanges(this._referencedFiles);\n        clearTextRanges(this._typeReferenceDirectives);\n        clearTextRanges(this._libReferenceDirectives);\n        delete this._referencedFiles;\n        delete this._typeReferenceDirectives;\n        delete this._libReferenceDirectives;\n        function clearTextRanges(textRanges) {\n            textRanges === null || textRanges === void 0 ? void 0 : textRanges.forEach(r => r._forget());\n        }\n    }\n    getFilePath() {\n        return this.compilerNode.fileName;\n    }\n    getBaseName() {\n        return common.FileUtils.getBaseName(this.getFilePath());\n    }\n    getBaseNameWithoutExtension() {\n        const baseName = this.getBaseName();\n        const extension = this.getExtension();\n        return baseName.substring(0, baseName.length - extension.length);\n    }\n    getExtension() {\n        return common.FileUtils.getExtension(this.getFilePath());\n    }\n    getDirectory() {\n        return this._context.compilerFactory.getDirectoryFromCache(this.getDirectoryPath());\n    }\n    getDirectoryPath() {\n        return this._context.fileSystemWrapper.getStandardizedAbsolutePath(common.FileUtils.getDirPath(this.compilerNode.fileName));\n    }\n    getFullText() {\n        return this.compilerNode.text;\n    }\n    getLineAndColumnAtPos(pos) {\n        const fullText = this.getFullText();\n        return {\n            line: common.StringUtils.getLineNumberAtPos(fullText, pos),\n            column: common.StringUtils.getLengthFromLineStartAtPos(fullText, pos) + 1,\n        };\n    }\n    getLengthFromLineStartAtPos(pos) {\n        return common.StringUtils.getLengthFromLineStartAtPos(this.getFullText(), pos);\n    }\n    copyToDirectory(dirPathOrDirectory, options) {\n        const dirPath = typeof dirPathOrDirectory === \"string\" ? dirPathOrDirectory : dirPathOrDirectory.getPath();\n        return this.copy(common.FileUtils.pathJoin(dirPath, this.getBaseName()), options);\n    }\n    copy(filePath, options = {}) {\n        this._throwIfIsInMemoryLibFile();\n        const result = this._copyInternal(filePath, options);\n        if (result === false)\n            return this;\n        const copiedSourceFile = result;\n        if (copiedSourceFile.getDirectoryPath() !== this.getDirectoryPath())\n            copiedSourceFile._updateReferencesForCopyInternal(this._getReferencesForCopyInternal());\n        return copiedSourceFile;\n    }\n    _copyInternal(fileAbsoluteOrRelativePath, options = {}) {\n        const { overwrite = false } = options;\n        const { compilerFactory, fileSystemWrapper } = this._context;\n        const standardizedFilePath = fileSystemWrapper.getStandardizedAbsolutePath(fileAbsoluteOrRelativePath, this.getDirectoryPath());\n        if (standardizedFilePath === this.getFilePath())\n            return false;\n        return getCopiedSourceFile(this);\n        function getCopiedSourceFile(currentFile) {\n            try {\n                return compilerFactory.createSourceFileFromText(standardizedFilePath, currentFile.getFullText(), { overwrite, markInProject: getShouldBeInProject() });\n            }\n            catch (err) {\n                if (err instanceof common.errors.InvalidOperationError)\n                    throw new common.errors.InvalidOperationError(`Did you mean to provide the overwrite option? ` + err.message);\n                else\n                    throw err;\n            }\n            function getShouldBeInProject() {\n                if (currentFile._isInProject())\n                    return true;\n                const destinationFile = compilerFactory.getSourceFileFromCacheFromFilePath(standardizedFilePath);\n                return destinationFile != null && destinationFile._isInProject();\n            }\n        }\n    }\n    _getReferencesForCopyInternal() {\n        return Array.from(this._referenceContainer.getLiteralsReferencingOtherSourceFilesEntries());\n    }\n    _updateReferencesForCopyInternal(literalReferences) {\n        for (const reference of literalReferences)\n            reference[0] = this.getChildSyntaxListOrThrow().getDescendantAtStartWithWidth(reference[0].getStart(), reference[0].getWidth());\n        updateStringLiteralReferences(literalReferences);\n    }\n    async copyImmediately(filePath, options) {\n        const newSourceFile = this.copy(filePath, options);\n        await newSourceFile.save();\n        return newSourceFile;\n    }\n    copyImmediatelySync(filePath, options) {\n        const newSourceFile = this.copy(filePath, options);\n        newSourceFile.saveSync();\n        return newSourceFile;\n    }\n    moveToDirectory(dirPathOrDirectory, options) {\n        const dirPath = typeof dirPathOrDirectory === \"string\" ? dirPathOrDirectory : dirPathOrDirectory.getPath();\n        return this.move(common.FileUtils.pathJoin(dirPath, this.getBaseName()), options);\n    }\n    move(filePath, options = {}) {\n        this._throwIfIsInMemoryLibFile();\n        const oldDirPath = this.getDirectoryPath();\n        const sourceFileReferences = this._getReferencesForMoveInternal();\n        const oldFilePath = this.getFilePath();\n        if (!this._moveInternal(filePath, options))\n            return this;\n        this._context.fileSystemWrapper.queueFileDelete(oldFilePath);\n        this._updateReferencesForMoveInternal(sourceFileReferences, oldDirPath);\n        this._context.lazyReferenceCoordinator.clearDirtySourceFiles();\n        this._context.lazyReferenceCoordinator.addDirtySourceFile(this);\n        return this;\n    }\n    _moveInternal(fileRelativeOrAbsolutePath, options = {}) {\n        const { overwrite = false } = options;\n        const filePath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(fileRelativeOrAbsolutePath, this.getDirectoryPath());\n        if (filePath === this.getFilePath())\n            return false;\n        let markAsInProject = false;\n        if (overwrite) {\n            const existingSourceFile = this._context.compilerFactory.getSourceFileFromCacheFromFilePath(filePath);\n            if (existingSourceFile != null) {\n                markAsInProject = existingSourceFile._isInProject();\n                existingSourceFile.forget();\n            }\n        }\n        else {\n            this._context.compilerFactory.throwIfFileExists(filePath, \"Did you mean to provide the overwrite option?\");\n        }\n        replaceSourceFileForFilePathMove({\n            newFilePath: filePath,\n            sourceFile: this,\n        });\n        if (markAsInProject)\n            this._markAsInProject();\n        if (this._isInProject())\n            this.getDirectory()._markAsInProject();\n        return true;\n    }\n    _getReferencesForMoveInternal() {\n        return {\n            literalReferences: Array.from(this._referenceContainer.getLiteralsReferencingOtherSourceFilesEntries()),\n            referencingLiterals: Array.from(this._referenceContainer.getReferencingLiteralsInOtherSourceFiles()),\n        };\n    }\n    _updateReferencesForMoveInternal(sourceFileReferences, oldDirPath) {\n        const { literalReferences, referencingLiterals } = sourceFileReferences;\n        if (oldDirPath !== this.getDirectoryPath())\n            updateStringLiteralReferences(literalReferences);\n        updateStringLiteralReferences(referencingLiterals.map(node => [node, this]));\n    }\n    async moveImmediately(filePath, options) {\n        const oldFilePath = this.getFilePath();\n        const newFilePath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(filePath, this.getDirectoryPath());\n        this.move(filePath, options);\n        if (oldFilePath !== newFilePath) {\n            await this._context.fileSystemWrapper.moveFileImmediately(oldFilePath, newFilePath, this.getFullText());\n            this._isSaved = true;\n        }\n        else {\n            await this.save();\n        }\n        return this;\n    }\n    moveImmediatelySync(filePath, options) {\n        const oldFilePath = this.getFilePath();\n        const newFilePath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(filePath, this.getDirectoryPath());\n        this.move(filePath, options);\n        if (oldFilePath !== newFilePath) {\n            this._context.fileSystemWrapper.moveFileImmediatelySync(oldFilePath, newFilePath, this.getFullText());\n            this._isSaved = true;\n        }\n        else {\n            this.saveSync();\n        }\n        return this;\n    }\n    delete() {\n        this._throwIfIsInMemoryLibFile();\n        const filePath = this.getFilePath();\n        this.forget();\n        this._context.fileSystemWrapper.queueFileDelete(filePath);\n    }\n    async deleteImmediately() {\n        this._throwIfIsInMemoryLibFile();\n        const filePath = this.getFilePath();\n        this.forget();\n        await this._context.fileSystemWrapper.deleteFileImmediately(filePath);\n    }\n    deleteImmediatelySync() {\n        this._throwIfIsInMemoryLibFile();\n        const filePath = this.getFilePath();\n        this.forget();\n        this._context.fileSystemWrapper.deleteFileImmediatelySync(filePath);\n    }\n    async save() {\n        if (this._isLibFileInMemory())\n            return;\n        await this._context.fileSystemWrapper.writeFile(this.getFilePath(), this._getTextForSave());\n        this._isSaved = true;\n    }\n    saveSync() {\n        if (this._isLibFileInMemory())\n            return;\n        this._context.fileSystemWrapper.writeFileSync(this.getFilePath(), this._getTextForSave());\n        this._isSaved = true;\n    }\n    _getTextForSave() {\n        const text = this.getFullText();\n        return this._hasBom ? \"\\uFEFF\" + text : text;\n    }\n    getPathReferenceDirectives() {\n        if (this._referencedFiles == null) {\n            this._referencedFiles = (this.compilerNode.referencedFiles || [])\n                .map(f => new FileReference(f, this));\n        }\n        return this._referencedFiles;\n    }\n    getTypeReferenceDirectives() {\n        if (this._typeReferenceDirectives == null) {\n            this._typeReferenceDirectives = (this.compilerNode.typeReferenceDirectives || [])\n                .map(f => new FileReference(f, this));\n        }\n        return this._typeReferenceDirectives;\n    }\n    getLibReferenceDirectives() {\n        if (this._libReferenceDirectives == null) {\n            this._libReferenceDirectives = (this.compilerNode.libReferenceDirectives || [])\n                .map(f => new FileReference(f, this));\n        }\n        return this._libReferenceDirectives;\n    }\n    getReferencingSourceFiles() {\n        return Array.from(this._referenceContainer.getDependentSourceFiles());\n    }\n    getReferencingNodesInOtherSourceFiles() {\n        const literals = this.getReferencingLiteralsInOtherSourceFiles();\n        return Array.from(getNodes());\n        function* getNodes() {\n            for (const literal of literals)\n                yield getReferencingNodeFromStringLiteral(literal);\n        }\n    }\n    getReferencingLiteralsInOtherSourceFiles() {\n        return Array.from(this._referenceContainer.getReferencingLiteralsInOtherSourceFiles());\n    }\n    getReferencedSourceFiles() {\n        const entries = this._referenceContainer.getLiteralsReferencingOtherSourceFilesEntries();\n        return Array.from(new Set(getSourceFilesFromEntries()).values());\n        function* getSourceFilesFromEntries() {\n            for (const [, sourceFile] of entries)\n                yield sourceFile;\n        }\n    }\n    getNodesReferencingOtherSourceFiles() {\n        const entries = this._referenceContainer.getLiteralsReferencingOtherSourceFilesEntries();\n        return Array.from(getNodes());\n        function* getNodes() {\n            for (const [literal] of entries)\n                yield getReferencingNodeFromStringLiteral(literal);\n        }\n    }\n    getLiteralsReferencingOtherSourceFiles() {\n        const entries = this._referenceContainer.getLiteralsReferencingOtherSourceFilesEntries();\n        return Array.from(getLiteralsFromEntries());\n        function* getLiteralsFromEntries() {\n            for (const [literal] of entries)\n                yield literal;\n        }\n    }\n    getImportStringLiterals() {\n        this._ensureBound();\n        const literals = (this.compilerNode.imports || []);\n        return literals.filter(l => l.pos !== -1).map(l => this._getNodeFromCompilerNode(l));\n    }\n    getLanguageVersion() {\n        return this.compilerNode.languageVersion;\n    }\n    getLanguageVariant() {\n        return this.compilerNode.languageVariant;\n    }\n    getScriptKind() {\n        return this.compilerNode.scriptKind;\n    }\n    isDeclarationFile() {\n        return this.compilerNode.isDeclarationFile;\n    }\n    isFromExternalLibrary() {\n        if (!this._context.program._isCompilerProgramCreated())\n            return false;\n        const compilerProgram = this._context.program.compilerObject;\n        return compilerProgram.isSourceFileFromExternalLibrary(this.compilerNode);\n    }\n    isInNodeModules() {\n        return this.getFilePath().indexOf(\"/node_modules/\") >= 0;\n    }\n    isSaved() {\n        return this._isSaved && !this._isLibFileInMemory();\n    }\n    _setIsSaved(value) {\n        this._isSaved = value;\n    }\n    getPreEmitDiagnostics() {\n        return this._context.getPreEmitDiagnostics(this);\n    }\n    unindent(positionRangeOrPos, times = 1) {\n        return this.indent(positionRangeOrPos, times * -1);\n    }\n    indent(positionRangeOrPos, times = 1) {\n        if (times === 0)\n            return this;\n        const sourceFileText = this.getFullText();\n        const positionRange = typeof positionRangeOrPos === \"number\" ? [positionRangeOrPos, positionRangeOrPos] : positionRangeOrPos;\n        common.errors.throwIfRangeOutOfRange(positionRange, [0, sourceFileText.length], \"positionRange\");\n        const startLinePos = getPreviousMatchingPos(sourceFileText, positionRange[0], char => char === CharCodes.NEWLINE);\n        const endLinePos = getNextMatchingPos(sourceFileText, positionRange[1], char => char === CharCodes.CARRIAGE_RETURN || char === CharCodes.NEWLINE);\n        const correctedText = common.StringUtils.indent(sourceFileText.substring(startLinePos, endLinePos), times, {\n            indentText: this._context.manipulationSettings.getIndentationText(),\n            indentSizeInSpaces: this._context.manipulationSettings._getIndentSizeInSpaces(),\n            isInStringAtPos: pos => this.isInStringAtPos(pos + startLinePos),\n        });\n        replaceSourceFileTextForFormatting({\n            sourceFile: this,\n            newText: sourceFileText.substring(0, startLinePos) + correctedText + sourceFileText.substring(endLinePos),\n        });\n        return this;\n    }\n    emit(options) {\n        return this._context.program.emit({ targetSourceFile: this, ...options });\n    }\n    emitSync(options) {\n        return this._context.program.emitSync({ targetSourceFile: this, ...options });\n    }\n    getEmitOutput(options = {}) {\n        return this._context.languageService.getEmitOutput(this, options.emitOnlyDtsFiles || false);\n    }\n    formatText(settings = {}) {\n        replaceSourceFileTextForFormatting({\n            sourceFile: this,\n            newText: this._context.languageService.getFormattedDocumentText(this.getFilePath(), settings),\n        });\n    }\n    async refreshFromFileSystem() {\n        const fileReadResult = await this._context.fileSystemWrapper.readFileOrNotExists(this.getFilePath(), this._context.getEncoding());\n        return this._refreshFromFileSystemInternal(fileReadResult);\n    }\n    refreshFromFileSystemSync() {\n        const fileReadResult = this._context.fileSystemWrapper.readFileOrNotExistsSync(this.getFilePath(), this._context.getEncoding());\n        return this._refreshFromFileSystemInternal(fileReadResult);\n    }\n    getRelativePathTo(sourceFileDirOrPath) {\n        return this.getDirectory().getRelativePathTo(sourceFileDirOrPath);\n    }\n    getRelativePathAsModuleSpecifierTo(sourceFileDirOrFilePath) {\n        return this.getDirectory().getRelativePathAsModuleSpecifierTo(sourceFileDirOrFilePath);\n    }\n    onModified(subscription, subscribe = true) {\n        if (subscribe)\n            this._modifiedEventContainer.subscribe(subscription);\n        else\n            this._modifiedEventContainer.unsubscribe(subscription);\n        return this;\n    }\n    _doActionPreNextModification(action) {\n        const wrappedSubscription = () => {\n            action();\n            this._preModifiedEventContainer.unsubscribe(wrappedSubscription);\n        };\n        this._preModifiedEventContainer.subscribe(wrappedSubscription);\n        return this;\n    }\n    _firePreModified() {\n        this._preModifiedEventContainer.fire(this);\n    }\n    organizeImports(formatSettings = {}, userPreferences = {}) {\n        this._context.languageService.organizeImports(this, formatSettings, userPreferences).forEach(fileTextChanges => fileTextChanges.applyChanges());\n        return this;\n    }\n    fixUnusedIdentifiers(formatSettings = {}, userPreferences = {}) {\n        this._context.languageService.getCombinedCodeFix(this, \"unusedIdentifier_delete\", formatSettings, userPreferences).applyChanges();\n        this._context.languageService.getCombinedCodeFix(this, \"unusedIdentifier_deleteImports\", formatSettings, userPreferences).applyChanges();\n        return this;\n    }\n    fixMissingImports(formatSettings = {}, userPreferences = {}) {\n        const combinedCodeFix = this._context.languageService.getCombinedCodeFix(this, \"fixMissingImport\", formatSettings, userPreferences);\n        const sourceFile = this;\n        for (const fileTextChanges of combinedCodeFix.getChanges()) {\n            const changes = fileTextChanges.getTextChanges();\n            removeUnnecessaryDoubleBlankLines(changes);\n            applyTextChanges(changes);\n        }\n        return this;\n        function removeUnnecessaryDoubleBlankLines(changes) {\n            changes.sort((a, b) => a.getSpan().getStart() - b.getSpan().getStart());\n            for (let i = 0; i < changes.length - 1; i++) {\n                const { compilerObject } = changes[i];\n                compilerObject.newText = compilerObject.newText.replace(/(\\r?)\\n\\r?\\n$/, \"$1\\n\");\n            }\n        }\n        function applyTextChanges(changes) {\n            const groups = common.ArrayUtils.groupBy(changes, change => change.getSpan().getStart());\n            let addedLength = 0;\n            for (const group of groups) {\n                const insertPos = group[0].getSpan().getStart() + addedLength;\n                const newText = group.map(item => item.getNewText()).join(\"\");\n                insertIntoTextRange({\n                    sourceFile,\n                    insertPos,\n                    newText,\n                });\n                addedLength += newText.length;\n            }\n        }\n    }\n    applyTextChanges(textChanges) {\n        if (textChanges.length === 0)\n            return this;\n        this.forgetDescendants();\n        replaceNodeText({\n            sourceFile: this._sourceFile,\n            start: 0,\n            replacingLength: this.getFullWidth(),\n            newText: getTextFromTextChanges(this, textChanges),\n        });\n        return this;\n    }\n    set(structure) {\n        callBaseSet(SourceFileBase.prototype, this, structure);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(SourceFileBase.prototype, this, {\n            kind: exports.StructureKind.SourceFile,\n        });\n    }\n    _refreshFromFileSystemInternal(fileReadResult) {\n        if (fileReadResult === false) {\n            this.forget();\n            return exports.FileSystemRefreshResult.Deleted;\n        }\n        const fileText = fileReadResult;\n        if (fileText === this.getFullText())\n            return exports.FileSystemRefreshResult.NoChange;\n        this.replaceText([0, this.getEnd()], fileText);\n        this._setIsSaved(true);\n        return exports.FileSystemRefreshResult.Updated;\n    }\n    _isLibFileInMemory() {\n        return this.compilerNode.fileName.startsWith(common.libFolderInMemoryPath);\n    }\n    _throwIfIsInMemoryLibFile() {\n        if (this._isLibFileInMemory())\n            throw new common.errors.InvalidOperationError(`This operation is not permitted on an in memory lib folder file.`);\n    }\n    _isInProject() {\n        return this._context.inProjectCoordinator.isSourceFileInProject(this);\n    }\n    _markAsInProject() {\n        this._context.inProjectCoordinator.markSourceFileAsInProject(this);\n    }\n}\n__decorate([\n    common.Memoize\n], SourceFile.prototype, \"isFromExternalLibrary\", null);\nfunction updateStringLiteralReferences(nodeReferences) {\n    for (const [stringLiteral, sourceFile] of nodeReferences) {\n        if (ModuleUtils.isModuleSpecifierRelative(stringLiteral.getLiteralText()))\n            stringLiteral.setLiteralValue(stringLiteral._sourceFile.getRelativePathAsModuleSpecifierTo(sourceFile));\n    }\n}\nfunction getReferencingNodeFromStringLiteral(literal) {\n    const parent = literal.getParentOrThrow();\n    const grandParent = parent.getParent();\n    if (grandParent != null && Node.isImportEqualsDeclaration(grandParent))\n        return grandParent;\n    else\n        return parent;\n}\n\nconst createBase$p = (ctor) => ModuleChildableNode(JSDocableNode(AmbientableNode(ExportableNode(ModifierableNode(ctor)))));\nconst VariableStatementBase = createBase$p(Statement);\nclass VariableStatement extends VariableStatementBase {\n    getDeclarationList() {\n        return this._getNodeFromCompilerNode(this.compilerNode.declarationList);\n    }\n    getDeclarations() {\n        return this.getDeclarationList().getDeclarations();\n    }\n    getDeclarationKind() {\n        return this.getDeclarationList().getDeclarationKind();\n    }\n    getDeclarationKindKeyword() {\n        return this.getDeclarationList().getDeclarationKindKeyword();\n    }\n    setDeclarationKind(type) {\n        return this.getDeclarationList().setDeclarationKind(type);\n    }\n    addDeclaration(structure) {\n        return this.getDeclarationList().addDeclaration(structure);\n    }\n    addDeclarations(structures) {\n        return this.getDeclarationList().addDeclarations(structures);\n    }\n    insertDeclaration(index, structure) {\n        return this.getDeclarationList().insertDeclaration(index, structure);\n    }\n    insertDeclarations(index, structures) {\n        return this.getDeclarationList().insertDeclarations(index, structures);\n    }\n    set(structure) {\n        callBaseSet(VariableStatementBase.prototype, this, structure);\n        if (structure.declarationKind != null)\n            this.setDeclarationKind(structure.declarationKind);\n        if (structure.declarations != null) {\n            const existingDeclarations = this.getDeclarations();\n            this.addDeclarations(structure.declarations);\n            existingDeclarations.forEach(d => d.remove());\n        }\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(VariableStatementBase.prototype, this, {\n            kind: exports.StructureKind.VariableStatement,\n            declarationKind: this.getDeclarationKind(),\n            declarations: this.getDeclarations().map(declaration => declaration.getStructure()),\n        });\n    }\n}\n\nconst WhileStatementBase = ExpressionedNode(IterationStatement);\nclass WhileStatement extends WhileStatementBase {\n}\n\nconst WithStatementBase = ExpressionedNode(Statement);\nclass WithStatement extends WithStatementBase {\n    getStatement() {\n        return this._getNodeFromCompilerNode(this.compilerNode.statement);\n    }\n}\n\nfunction FunctionLikeDeclaration(Base) {\n    return JSDocableNode(TypeParameteredNode(SignaturedDeclaration(StatementedNode(ModifierableNode(Base)))));\n}\n\nconst createBase$o = (ctor) => TextInsertableNode(BodiedNode(AsyncableNode(FunctionLikeDeclaration(ctor))));\nconst ArrowFunctionBase = createBase$o(Expression);\nclass ArrowFunction extends ArrowFunctionBase {\n    getEqualsGreaterThan() {\n        return this._getNodeFromCompilerNode(this.compilerNode.equalsGreaterThanToken);\n    }\n}\n\nfunction OverloadableNode(Base) {\n    return class extends Base {\n        getOverloads() {\n            return getOverloadsAndImplementation(this).filter(n => n.isOverload());\n        }\n        getImplementation() {\n            if (this.isImplementation())\n                return this;\n            return getOverloadsAndImplementation(this).find(n => n.isImplementation());\n        }\n        getImplementationOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getImplementation(), \"Expected to find a corresponding implementation for the overload.\");\n        }\n        isOverload() {\n            return !this.isImplementation();\n        }\n        isImplementation() {\n            return this.getBody() != null;\n        }\n    };\n}\nfunction getOverloadsAndImplementation(node) {\n    const parent = node.getParentOrThrow();\n    const name = getNameIfNamedNode(node);\n    const kind = node.getKind();\n    return parent.forEachChildAsArray().filter(n => {\n        const hasSameName = getNameIfNamedNode(n) === name;\n        const hasSameKind = n.getKind() === kind;\n        return hasSameName && hasSameKind;\n    });\n}\nfunction getNameIfNamedNode(node) {\n    const nodeAsNamedNode = node;\n    if (nodeAsNamedNode.getName instanceof Function)\n        return nodeAsNamedNode.getName();\n    return undefined;\n}\nfunction insertOverloads(opts) {\n    if (opts.structures.length === 0)\n        return [];\n    const parentSyntaxList = opts.node.getParentSyntaxListOrThrow();\n    const implementationNode = opts.node.getImplementation() || opts.node;\n    const overloads = opts.node.getOverloads();\n    const overloadsCount = overloads.length;\n    const firstIndex = overloads.length > 0 ? overloads[0].getChildIndex() : implementationNode.getChildIndex();\n    const index = verifyAndGetIndex(opts.index, overloadsCount);\n    const mainIndex = firstIndex + index;\n    const thisStructure = opts.getThisStructure(implementationNode);\n    const structures = opts.structures.map(structure => common.ObjectUtils.assign(common.ObjectUtils.assign({}, thisStructure), structure));\n    const writer = implementationNode._getWriterWithQueuedIndentation();\n    for (const structure of structures) {\n        if (writer.getLength() > 0)\n            writer.newLine();\n        opts.printStructure(writer, structure);\n    }\n    writer.newLine();\n    writer.write(\"\");\n    insertIntoParentTextRange({\n        parent: parentSyntaxList,\n        insertPos: (overloads[index] || implementationNode).getNonWhitespaceStart(),\n        newText: writer.toString(),\n    });\n    return getRangeWithoutCommentsFromArray(parentSyntaxList.getChildren(), mainIndex, structures.length, opts.expectedSyntaxKind);\n}\n\nconst createBase$n = (ctor) => UnwrappableNode(TextInsertableNode(OverloadableNode(BodyableNode(AsyncableNode(GeneratorableNode(AmbientableNode(ExportableNode(FunctionLikeDeclaration(ModuleChildableNode(NameableNode(ctor)))))))))));\nconst FunctionDeclarationBase = createBase$n(Statement);\nconst createOverloadBase$2 = (ctor) => UnwrappableNode(TextInsertableNode(AsyncableNode(GeneratorableNode(SignaturedDeclaration(AmbientableNode(ModuleChildableNode(JSDocableNode(TypeParameteredNode(ExportableNode(ModifierableNode(ctor)))))))))));\nconst FunctionDeclarationOverloadBase = createOverloadBase$2(Statement);\nclass FunctionDeclaration extends FunctionDeclarationBase {\n    addOverload(structure) {\n        return this.addOverloads([structure])[0];\n    }\n    addOverloads(structures) {\n        return this.insertOverloads(this.getOverloads().length, structures);\n    }\n    insertOverload(index, structure) {\n        return this.insertOverloads(index, [structure])[0];\n    }\n    insertOverloads(index, structures) {\n        const thisName = this.getName();\n        const printer = this._context.structurePrinterFactory.forFunctionDeclaration({\n            isAmbient: this.isAmbient(),\n        });\n        return insertOverloads({\n            node: this,\n            index,\n            structures,\n            printStructure: (writer, structure) => {\n                printer.printOverload(writer, thisName, structure);\n            },\n            getThisStructure: fromFunctionDeclarationOverload,\n            expectedSyntaxKind: common.SyntaxKind.FunctionDeclaration,\n        });\n    }\n    remove() {\n        removeOverloadableStatementedNodeChild(this);\n    }\n    set(structure) {\n        callBaseSet(FunctionDeclarationBase.prototype, this, structure);\n        if (structure.overloads != null) {\n            this.getOverloads().forEach(o => o.remove());\n            this.addOverloads(structure.overloads);\n        }\n        return this;\n    }\n    getStructure() {\n        const isOverload = this.isOverload();\n        const hasImplementation = this.getImplementation();\n        const basePrototype = isOverload && hasImplementation ? FunctionDeclarationOverloadBase.prototype : FunctionDeclarationBase.prototype;\n        return callBaseGetStructure(basePrototype, this, getStructure(this));\n        function getStructure(thisNode) {\n            if (hasImplementation && isOverload)\n                return getOverloadSpecificStructure();\n            return getSpecificStructure();\n            function getOverloadSpecificStructure() {\n                return { kind: exports.StructureKind.FunctionOverload };\n            }\n            function getSpecificStructure() {\n                if (!hasImplementation)\n                    return { kind: exports.StructureKind.Function };\n                else {\n                    return {\n                        kind: exports.StructureKind.Function,\n                        overloads: thisNode.getOverloads().map(o => o.getStructure()),\n                    };\n                }\n            }\n        }\n    }\n}\n\nconst createBase$m = (ctor) => JSDocableNode(TextInsertableNode(BodiedNode(AsyncableNode(GeneratorableNode(StatementedNode(TypeParameteredNode(SignaturedDeclaration(ModifierableNode(NameableNode(ctor))))))))));\nconst FunctionExpressionBase = createBase$m(PrimaryExpression);\nclass FunctionExpression extends FunctionExpressionBase {\n}\n\nconst createBase$l = (ctor) => OverrideableNode(QuestionTokenableNode(DecoratableNode(ScopeableNode(ReadonlyableNode(ModifierableNode(DotDotDotTokenableNode(TypedNode(InitializerExpressionableNode(BindingNamedNode(ctor))))))))));\nconst ParameterDeclarationBase = createBase$l(Node);\nclass ParameterDeclaration extends ParameterDeclarationBase {\n    isRestParameter() {\n        return this.compilerNode.dotDotDotToken != null;\n    }\n    isParameterProperty() {\n        return this.getScope() != null || this.isReadonly() || this.hasOverrideKeyword();\n    }\n    setIsRestParameter(value) {\n        if (this.isRestParameter() === value)\n            return this;\n        if (value) {\n            addParensIfNecessary(this);\n            insertIntoParentTextRange({\n                insertPos: this.getNameNode().getStart(),\n                parent: this,\n                newText: \"...\",\n            });\n        }\n        else {\n            removeChildren({ children: [this.getDotDotDotTokenOrThrow()] });\n        }\n        return this;\n    }\n    isOptional() {\n        return this.compilerNode.questionToken != null || this.isRestParameter() || this.hasInitializer();\n    }\n    remove() {\n        removeCommaSeparatedChild(this);\n    }\n    set(structure) {\n        callBaseSet(ParameterDeclarationBase.prototype, this, structure);\n        if (structure.isRestParameter != null)\n            this.setIsRestParameter(structure.isRestParameter);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(ParameterDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.Parameter,\n            isRestParameter: this.isRestParameter(),\n        });\n    }\n    setHasQuestionToken(value) {\n        if (value)\n            addParensIfNecessary(this);\n        super.setHasQuestionToken(value);\n        return this;\n    }\n    setInitializer(textOrWriterFunction) {\n        addParensIfNecessary(this);\n        super.setInitializer(textOrWriterFunction);\n        return this;\n    }\n    setType(textOrWriterFunction) {\n        addParensIfNecessary(this);\n        super.setType.call(this, textOrWriterFunction);\n        return this;\n    }\n}\nfunction addParensIfNecessary(parameter) {\n    const parent = parameter.getParentOrThrow();\n    if (isParameterWithoutParens())\n        addParens();\n    function isParameterWithoutParens() {\n        return Node.isArrowFunction(parent)\n            && parent.compilerNode.parameters.length === 1\n            && parameter.getParentSyntaxListOrThrow().getPreviousSiblingIfKind(common.SyntaxKind.OpenParenToken) == null;\n    }\n    function addParens() {\n        const paramText = parameter.getText();\n        insertIntoParentTextRange({\n            parent,\n            insertPos: parameter.getStart(),\n            newText: `(${paramText})`,\n            replacing: {\n                textLength: paramText.length,\n            },\n            customMappings: newParent => {\n                return [{ currentNode: parameter, newNode: newParent.parameters[0] }];\n            },\n        });\n    }\n}\n\nclass ClassElement extends Node {\n    remove() {\n        const parent = this.getParentOrThrow();\n        if (Node.isClassDeclaration(parent) || Node.isClassExpression(parent))\n            removeClassMember(this);\n        else if (Node.isObjectLiteralExpression(parent))\n            removeCommaSeparatedChild(this);\n        else\n            common.errors.throwNotImplementedForSyntaxKindError(parent.getKind());\n    }\n}\n\nconst createBase$k = (ctor) => ChildOrderableNode(TextInsertableNode(OverrideableNode(OverloadableNode(BodyableNode(DecoratableNode(AbstractableNode(ScopedNode(QuestionTokenableNode(StaticableNode(AsyncableNode(GeneratorableNode(FunctionLikeDeclaration(PropertyNamedNode(ctor))))))))))))));\nconst MethodDeclarationBase = createBase$k(ClassElement);\nconst createOverloadBase$1 = (ctor) => JSDocableNode(ChildOrderableNode(TextInsertableNode(OverrideableNode(ScopedNode(TypeParameteredNode(AbstractableNode(QuestionTokenableNode(StaticableNode(AsyncableNode(ModifierableNode(GeneratorableNode(SignaturedDeclaration(ctor)))))))))))));\nconst MethodDeclarationOverloadBase = createOverloadBase$1(ClassElement);\nclass MethodDeclaration extends MethodDeclarationBase {\n    set(structure) {\n        callBaseSet(MethodDeclarationBase.prototype, this, structure);\n        if (structure.overloads != null) {\n            this.getOverloads().forEach(o => o.remove());\n            this.addOverloads(structure.overloads);\n        }\n        return this;\n    }\n    addOverload(structure) {\n        return this.addOverloads([structure])[0];\n    }\n    addOverloads(structures) {\n        return this.insertOverloads(this.getOverloads().length, structures);\n    }\n    insertOverload(index, structure) {\n        return this.insertOverloads(index, [structure])[0];\n    }\n    insertOverloads(index, structures) {\n        const thisName = this.getName();\n        const printer = this._context.structurePrinterFactory.forMethodDeclaration({\n            isAmbient: isNodeAmbientOrInAmbientContext(this),\n        });\n        return insertOverloads({\n            node: this,\n            index,\n            structures,\n            printStructure: (writer, structure) => {\n                printer.printOverload(writer, thisName, structure);\n            },\n            getThisStructure: fromMethodDeclarationOverload,\n            expectedSyntaxKind: common.SyntaxKind.MethodDeclaration,\n        });\n    }\n    getStructure() {\n        const hasImplementation = this.getImplementation() != null;\n        const isOverload = this.isOverload();\n        const basePrototype = isOverload && hasImplementation ? MethodDeclarationOverloadBase.prototype : MethodDeclarationBase.prototype;\n        return callBaseGetStructure(basePrototype, this, getStructure(this));\n        function getStructure(thisNode) {\n            if (hasImplementation && isOverload)\n                return getOverloadSpecificStructure();\n            return getSpecificStructure();\n            function getOverloadSpecificStructure() {\n                return { kind: exports.StructureKind.MethodOverload };\n            }\n            function getSpecificStructure() {\n                if (!hasImplementation)\n                    return { kind: exports.StructureKind.Method };\n                else {\n                    return {\n                        kind: exports.StructureKind.Method,\n                        overloads: thisNode.getOverloads().map(o => o.getStructure()),\n                    };\n                }\n            }\n        }\n    }\n}\n\nfunction ClassLikeDeclarationBase(Base) {\n    return ClassLikeDeclarationBaseSpecific(NameableNode(TextInsertableNode(ImplementsClauseableNode(HeritageClauseableNode(AbstractableNode(JSDocableNode(TypeParameteredNode(DecoratableNode(ModifierableNode(Base))))))))));\n}\nfunction ClassLikeDeclarationBaseSpecific(Base) {\n    return class extends Base {\n        setExtends(text) {\n            text = this._getTextWithQueuedChildIndentation(text);\n            if (common.StringUtils.isNullOrWhitespace(text))\n                return this.removeExtends();\n            const extendsClause = this.getHeritageClauseByKind(common.SyntaxKind.ExtendsKeyword);\n            if (extendsClause != null) {\n                const childSyntaxList = extendsClause.getFirstChildByKindOrThrow(common.SyntaxKind.SyntaxList);\n                const childSyntaxListStart = childSyntaxList.getStart();\n                insertIntoParentTextRange({\n                    parent: extendsClause,\n                    newText: text,\n                    insertPos: childSyntaxListStart,\n                    replacing: {\n                        textLength: childSyntaxList.getEnd() - childSyntaxListStart,\n                    },\n                });\n            }\n            else {\n                const implementsClause = this.getHeritageClauseByKind(common.SyntaxKind.ImplementsKeyword);\n                let insertPos;\n                if (implementsClause != null)\n                    insertPos = implementsClause.getStart();\n                else\n                    insertPos = this.getFirstChildByKindOrThrow(common.SyntaxKind.OpenBraceToken).getStart();\n                const isLastSpace = /\\s/.test(this.getSourceFile().getFullText()[insertPos - 1]);\n                let newText = `extends ${text} `;\n                if (!isLastSpace)\n                    newText = \" \" + newText;\n                insertIntoParentTextRange({\n                    parent: implementsClause == null ? this : implementsClause.getParentSyntaxListOrThrow(),\n                    insertPos,\n                    newText,\n                });\n            }\n            return this;\n        }\n        removeExtends() {\n            const extendsClause = this.getHeritageClauseByKind(common.SyntaxKind.ExtendsKeyword);\n            if (extendsClause == null)\n                return this;\n            extendsClause.removeExpression(0);\n            return this;\n        }\n        getExtendsOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getExtends(), `Expected to find the extends expression for the class ${this.getName()}.`);\n        }\n        getExtends() {\n            const extendsClause = this.getHeritageClauseByKind(common.SyntaxKind.ExtendsKeyword);\n            if (extendsClause == null)\n                return undefined;\n            const types = extendsClause.getTypeNodes();\n            return types.length === 0 ? undefined : types[0];\n        }\n        addMembers(members) {\n            return this.insertMembers(getEndIndexFromArray(this.getMembersWithComments()), members);\n        }\n        addMember(member) {\n            return this.insertMember(getEndIndexFromArray(this.getMembersWithComments()), member);\n        }\n        insertMember(index, member) {\n            return this.insertMembers(index, [member])[0];\n        }\n        insertMembers(index, members) {\n            const isAmbient = isNodeAmbientOrInAmbientContext(this);\n            return insertIntoBracesOrSourceFileWithGetChildrenWithComments({\n                getIndexedChildren: () => this.getMembersWithComments(),\n                index,\n                parent: this,\n                write: (writer, info) => {\n                    const previousMemberHasBody = !isAmbient && info.previousMember != null && Node.isBodyable(info.previousMember)\n                        && info.previousMember.hasBody();\n                    const firstStructureHasBody = !isAmbient && members instanceof Array && structureHasBody(members[0]);\n                    if (previousMemberHasBody || info.previousMember != null && firstStructureHasBody)\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                    const memberWriter = this._getWriter();\n                    const memberPrinter = this._context.structurePrinterFactory.forClassMember({ isAmbient });\n                    memberPrinter.printTexts(memberWriter, members);\n                    writer.write(memberWriter.toString());\n                    const lastStructureHasBody = !isAmbient && members instanceof Array && structureHasBody(members[members.length - 1]);\n                    const nextMemberHasBody = !isAmbient && info.nextMember != null && Node.isBodyable(info.nextMember) && info.nextMember.hasBody();\n                    if (info.nextMember != null && lastStructureHasBody || nextMemberHasBody)\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                },\n            });\n            function structureHasBody(value) {\n                if (isAmbient || value == null || typeof value.kind !== \"number\")\n                    return false;\n                const structure = value;\n                return Structure.isMethod(structure)\n                    || Structure.isGetAccessor(structure)\n                    || Structure.isSetAccessor(structure)\n                    || Structure.isConstructor(structure);\n            }\n        }\n        addConstructor(structure = {}) {\n            return this.insertConstructor(getEndIndexFromArray(this.getMembersWithComments()), structure);\n        }\n        addConstructors(structures) {\n            return this.insertConstructors(getEndIndexFromArray(this.getMembersWithComments()), structures);\n        }\n        insertConstructor(index, structure = {}) {\n            return this.insertConstructors(index, [structure])[0];\n        }\n        insertConstructors(index, structures) {\n            const isAmbient = isNodeAmbientOrInAmbientContext(this);\n            return insertChildren(this, {\n                index,\n                structures,\n                expectedKind: common.SyntaxKind.Constructor,\n                write: (writer, info) => {\n                    if (!isAmbient && info.previousMember != null && !Node.isCommentNode(info.previousMember))\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                    this._context.structurePrinterFactory.forConstructorDeclaration({ isAmbient }).printTexts(writer, structures);\n                    if (!isAmbient && info.nextMember != null)\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                },\n            });\n        }\n        getConstructors() {\n            return this.getMembers().filter(m => Node.isConstructorDeclaration(m));\n        }\n        addStaticBlock(structure = {}) {\n            return this.insertStaticBlock(getEndIndexFromArray(this.getMembersWithComments()), structure);\n        }\n        addStaticBlocks(structures) {\n            return this.insertStaticBlocks(getEndIndexFromArray(this.getMembersWithComments()), structures);\n        }\n        insertStaticBlock(index, structure = {}) {\n            return this.insertStaticBlocks(index, [structure])[0];\n        }\n        insertStaticBlocks(index, structures) {\n            const isAmbient = isNodeAmbientOrInAmbientContext(this);\n            return insertChildren(this, {\n                index,\n                structures,\n                expectedKind: common.SyntaxKind.ClassStaticBlockDeclaration,\n                write: (writer, info) => {\n                    if (!isAmbient && info.previousMember != null && !Node.isCommentNode(info.previousMember))\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                    this._context.structurePrinterFactory.forClassStaticBlockDeclaration().printTexts(writer, structures);\n                    if (!isAmbient && info.nextMember != null)\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                },\n            });\n        }\n        getStaticBlocks() {\n            return this.getMembers().filter(m => Node.isClassStaticBlockDeclaration(m));\n        }\n        addGetAccessor(structure) {\n            return this.addGetAccessors([structure])[0];\n        }\n        addGetAccessors(structures) {\n            return this.insertGetAccessors(getEndIndexFromArray(this.getMembersWithComments()), structures);\n        }\n        insertGetAccessor(index, structure) {\n            return this.insertGetAccessors(index, [structure])[0];\n        }\n        insertGetAccessors(index, structures) {\n            return insertChildren(this, {\n                index,\n                structures,\n                expectedKind: common.SyntaxKind.GetAccessor,\n                write: (writer, info) => {\n                    if (info.previousMember != null && !Node.isCommentNode(info.previousMember))\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                    this._context.structurePrinterFactory.forGetAccessorDeclaration({\n                        isAmbient: isNodeAmbientOrInAmbientContext(this),\n                    }).printTexts(writer, structures);\n                    if (info.nextMember != null)\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                },\n            });\n        }\n        addSetAccessor(structure) {\n            return this.addSetAccessors([structure])[0];\n        }\n        addSetAccessors(structures) {\n            return this.insertSetAccessors(getEndIndexFromArray(this.getMembersWithComments()), structures);\n        }\n        insertSetAccessor(index, structure) {\n            return this.insertSetAccessors(index, [structure])[0];\n        }\n        insertSetAccessors(index, structures) {\n            return insertChildren(this, {\n                index,\n                structures,\n                expectedKind: common.SyntaxKind.SetAccessor,\n                write: (writer, info) => {\n                    if (info.previousMember != null && !Node.isCommentNode(info.previousMember))\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                    this._context.structurePrinterFactory.forSetAccessorDeclaration({\n                        isAmbient: isNodeAmbientOrInAmbientContext(this),\n                    }).printTexts(writer, structures);\n                    if (info.nextMember != null)\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                },\n            });\n        }\n        addProperty(structure) {\n            return this.addProperties([structure])[0];\n        }\n        addProperties(structures) {\n            return this.insertProperties(getEndIndexFromArray(this.getMembersWithComments()), structures);\n        }\n        insertProperty(index, structure) {\n            return this.insertProperties(index, [structure])[0];\n        }\n        insertProperties(index, structures) {\n            return insertChildren(this, {\n                index,\n                structures,\n                expectedKind: common.SyntaxKind.PropertyDeclaration,\n                write: (writer, info) => {\n                    if (info.previousMember != null && Node.hasBody(info.previousMember))\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                    this._context.structurePrinterFactory.forPropertyDeclaration().printTexts(writer, structures);\n                    if (info.nextMember != null && Node.hasBody(info.nextMember))\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                },\n            });\n        }\n        addMethod(structure) {\n            return this.addMethods([structure])[0];\n        }\n        addMethods(structures) {\n            return this.insertMethods(getEndIndexFromArray(this.getMembersWithComments()), structures);\n        }\n        insertMethod(index, structure) {\n            return this.insertMethods(index, [structure])[0];\n        }\n        insertMethods(index, structures) {\n            const isAmbient = isNodeAmbientOrInAmbientContext(this);\n            structures = structures.map(s => ({ ...s }));\n            return insertChildren(this, {\n                index,\n                write: (writer, info) => {\n                    if (!isAmbient && info.previousMember != null && !Node.isCommentNode(info.previousMember))\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                    this._context.structurePrinterFactory.forMethodDeclaration({ isAmbient }).printTexts(writer, structures);\n                    if (!isAmbient && info.nextMember != null)\n                        writer.blankLineIfLastNot();\n                    else\n                        writer.newLineIfLastNot();\n                },\n                structures,\n                expectedKind: common.SyntaxKind.MethodDeclaration,\n            });\n        }\n        getInstanceProperty(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getInstanceProperties(), nameOrFindFunction);\n        }\n        getInstancePropertyOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getInstanceProperty(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"class instance property\", nameOrFindFunction));\n        }\n        getInstanceProperties() {\n            return this.getInstanceMembers()\n                .filter(m => isClassPropertyType(m));\n        }\n        getStaticProperty(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getStaticProperties(), nameOrFindFunction);\n        }\n        getStaticPropertyOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getStaticProperty(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"class static property\", nameOrFindFunction));\n        }\n        getStaticProperties() {\n            return this.getStaticMembers()\n                .filter(m => isClassPropertyType(m));\n        }\n        getProperty(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getProperties(), nameOrFindFunction);\n        }\n        getPropertyOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getProperty(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"class property declaration\", nameOrFindFunction));\n        }\n        getProperties() {\n            return this.getMembers()\n                .filter(m => Node.isPropertyDeclaration(m));\n        }\n        getGetAccessor(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getGetAccessors(), nameOrFindFunction);\n        }\n        getGetAccessorOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getGetAccessor(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"class getAccessor declaration\", nameOrFindFunction));\n        }\n        getGetAccessors() {\n            return this.getMembers()\n                .filter(m => Node.isGetAccessorDeclaration(m));\n        }\n        getSetAccessor(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getSetAccessors(), nameOrFindFunction);\n        }\n        getSetAccessorOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getSetAccessor(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"class setAccessor declaration\", nameOrFindFunction));\n        }\n        getSetAccessors() {\n            return this.getMembers()\n                .filter(m => Node.isSetAccessorDeclaration(m));\n        }\n        getMethod(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getMethods(), nameOrFindFunction);\n        }\n        getMethodOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getMethod(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"class method declaration\", nameOrFindFunction));\n        }\n        getMethods() {\n            return this.getMembers()\n                .filter(m => Node.isMethodDeclaration(m));\n        }\n        getInstanceMethod(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getInstanceMethods(), nameOrFindFunction);\n        }\n        getInstanceMethodOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getInstanceMethod(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"class instance method\", nameOrFindFunction));\n        }\n        getInstanceMethods() {\n            return this.getInstanceMembers().filter(m => m instanceof MethodDeclaration);\n        }\n        getStaticMethod(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getStaticMethods(), nameOrFindFunction);\n        }\n        getStaticMethodOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getStaticMethod(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"class static method\", nameOrFindFunction));\n        }\n        getStaticMethods() {\n            return this.getStaticMembers().filter(m => m instanceof MethodDeclaration);\n        }\n        getInstanceMember(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getInstanceMembers(), nameOrFindFunction);\n        }\n        getInstanceMemberOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getInstanceMember(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"class instance member\", nameOrFindFunction));\n        }\n        getInstanceMembers() {\n            return this.getMembersWithParameterProperties().filter(m => {\n                if (Node.isConstructorDeclaration(m))\n                    return false;\n                return Node.isParameterDeclaration(m) || !m.isStatic();\n            });\n        }\n        getStaticMember(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getStaticMembers(), nameOrFindFunction);\n        }\n        getStaticMemberOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getStaticMember(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"class static member\", nameOrFindFunction));\n        }\n        getStaticMembers() {\n            return this.getMembers().filter(m => {\n                if (Node.isConstructorDeclaration(m))\n                    return false;\n                return !Node.isParameterDeclaration(m) && m.isStatic();\n            });\n        }\n        getMembersWithParameterProperties() {\n            const members = this.getMembers();\n            const implementationCtors = members.filter(c => Node.isConstructorDeclaration(c) && c.isImplementation());\n            for (const ctor of implementationCtors) {\n                let insertIndex = members.indexOf(ctor) + 1;\n                for (const param of ctor.getParameters()) {\n                    if (param.isParameterProperty()) {\n                        members.splice(insertIndex, 0, param);\n                        insertIndex++;\n                    }\n                }\n            }\n            return members;\n        }\n        getMembers() {\n            return getAllMembers(this, this.compilerNode.members).filter(m => isSupportedClassMember(m));\n        }\n        getMembersWithComments() {\n            const compilerNode = this.compilerNode;\n            const members = ExtendedParser.getContainerArray(compilerNode, this.getSourceFile().compilerNode);\n            return getAllMembers(this, members)\n                .filter(m => isSupportedClassMember(m) || Node.isCommentClassElement(m));\n        }\n        getMember(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getMembers(), nameOrFindFunction);\n        }\n        getMemberOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getMember(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"class member\", nameOrFindFunction));\n        }\n        getBaseTypes() {\n            return this.getType().getBaseTypes();\n        }\n        getBaseClassOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getBaseClass(), `Expected to find the base class of ${this.getName()}.`);\n        }\n        getBaseClass() {\n            const baseTypes = common.ArrayUtils.flatten(this.getBaseTypes().map(t => t.isIntersection() ? t.getIntersectionTypes() : [t]));\n            const declarations = baseTypes\n                .map(t => t.getSymbol())\n                .filter(s => s != null)\n                .map(s => s.getDeclarations())\n                .reduce((a, b) => a.concat(b), [])\n                .filter(d => d.getKind() === common.SyntaxKind.ClassDeclaration);\n            if (declarations.length !== 1)\n                return undefined;\n            return declarations[0];\n        }\n        getDerivedClasses() {\n            const classes = getImmediateDerivedClasses(this);\n            for (let i = 0; i < classes.length; i++) {\n                const derivedClasses = getImmediateDerivedClasses(classes[i]);\n                for (const derivedClass of derivedClasses) {\n                    if (derivedClass !== this && classes.indexOf(derivedClass) === -1)\n                        classes.push(derivedClass);\n                }\n            }\n            return classes;\n        }\n    };\n}\nfunction getAllMembers(classDec, compilerMembers) {\n    const isAmbient = isNodeAmbientOrInAmbientContext(classDec);\n    const members = compilerMembers.map(m => classDec._getNodeFromCompilerNode(m));\n    return isAmbient ? members : members.filter(m => {\n        if (!(Node.isConstructorDeclaration(m) || Node.isMethodDeclaration(m)))\n            return true;\n        if (Node.isMethodDeclaration(m) && m.isAbstract())\n            return true;\n        return m.isImplementation();\n    });\n}\nfunction getImmediateDerivedClasses(classDec) {\n    const classes = [];\n    const nameNode = classDec.getNameNode();\n    if (nameNode == null)\n        return classes;\n    for (const node of nameNode.findReferencesAsNodes()) {\n        const nodeParent = node.getParentIfKind(common.SyntaxKind.ExpressionWithTypeArguments);\n        if (nodeParent == null)\n            continue;\n        const heritageClause = nodeParent.getParentIfKind(common.SyntaxKind.HeritageClause);\n        if (heritageClause == null || heritageClause.getToken() !== common.SyntaxKind.ExtendsKeyword)\n            continue;\n        const derivedClass = heritageClause.getParentIfKind(common.SyntaxKind.ClassDeclaration);\n        if (derivedClass == null)\n            continue;\n        classes.push(derivedClass);\n    }\n    return classes;\n}\nfunction isClassPropertyType(m) {\n    return Node.isPropertyDeclaration(m)\n        || Node.isSetAccessorDeclaration(m)\n        || Node.isGetAccessorDeclaration(m)\n        || Node.isParameterDeclaration(m);\n}\nfunction isSupportedClassMember(m) {\n    return Node.isMethodDeclaration(m)\n        || Node.isPropertyDeclaration(m)\n        || Node.isGetAccessorDeclaration(m)\n        || Node.isSetAccessorDeclaration(m)\n        || Node.isConstructorDeclaration(m)\n        || Node.isClassStaticBlockDeclaration(m);\n}\nfunction insertChildren(classDeclaration, opts) {\n    return insertIntoBracesOrSourceFileWithGetChildren({\n        getIndexedChildren: () => classDeclaration.getMembersWithComments(),\n        parent: classDeclaration,\n        ...opts,\n    });\n}\n\nconst createBase$j = (ctor) => ModuleChildableNode(AmbientableNode(ExportableNode(ClassLikeDeclarationBase(ctor))));\nconst ClassDeclarationBase = createBase$j(Statement);\nclass ClassDeclaration extends ClassDeclarationBase {\n    set(structure) {\n        callBaseSet(ClassDeclarationBase.prototype, this, structure);\n        if (structure.extends != null)\n            this.setExtends(structure.extends);\n        else if (structure.hasOwnProperty(common.nameof(structure, \"extends\")))\n            this.removeExtends();\n        if (structure.ctors != null) {\n            this.getConstructors().forEach(c => c.remove());\n            this.addConstructors(structure.ctors);\n        }\n        if (structure.properties != null) {\n            this.getProperties().forEach(p => p.remove());\n            this.addProperties(structure.properties);\n        }\n        if (structure.getAccessors != null) {\n            this.getGetAccessors().forEach(a => a.remove());\n            this.addGetAccessors(structure.getAccessors);\n        }\n        if (structure.setAccessors != null) {\n            this.getSetAccessors().forEach(a => a.remove());\n            this.addSetAccessors(structure.setAccessors);\n        }\n        if (structure.methods != null) {\n            this.getMethods().forEach(m => m.remove());\n            this.addMethods(structure.methods);\n        }\n        return this;\n    }\n    getStructure() {\n        const getExtends = this.getExtends();\n        const isAmbient = this.isAmbient();\n        return callBaseGetStructure(ClassDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.Class,\n            ctors: this.getConstructors().filter(ctor => isAmbient || !ctor.isOverload()).map(ctor => ctor.getStructure()),\n            methods: this.getMethods().filter(method => isAmbient || !method.isOverload()).map(method => method.getStructure()),\n            properties: this.getProperties().map(property => property.getStructure()),\n            extends: getExtends ? getExtends.getText() : undefined,\n            getAccessors: this.getGetAccessors().map(getAccessor => getAccessor.getStructure()),\n            setAccessors: this.getSetAccessors().map(accessor => accessor.getStructure()),\n        });\n    }\n    extractInterface(name) {\n        const { constructors, properties, methods, accessors } = getExtractedClassDetails(this, false);\n        const parameterProperties = common.ArrayUtils.flatten(constructors.map(c => c.getParameters().filter(p => p.isParameterProperty())))\n            .filter(p => p.getName() != null && p.getScope() === exports.Scope.Public);\n        return {\n            kind: exports.StructureKind.Interface,\n            name: getDefaultExtractedName(name, this),\n            docs: this.getJsDocs().map(d => d.getStructure()),\n            typeParameters: this.getTypeParameters().map(p => p.getStructure()),\n            properties: [\n                ...parameterProperties.map(p => {\n                    const jsDocComment = common.ArrayUtils.flatten(p.getParentOrThrow().getJsDocs().map(j => j.getTags()))\n                        .filter(Node.isJSDocParameterTag)\n                        .filter(t => t.getTagName() === \"param\" && t.getName() === p.getName() && t.getComment() != null)\n                        .map(t => t.getCommentText().trim())[0];\n                    return {\n                        kind: exports.StructureKind.PropertySignature,\n                        docs: jsDocComment == null ? [] : [{ kind: exports.StructureKind.JSDoc, description: jsDocComment }],\n                        name: p.getName(),\n                        type: p.getType().getText(p),\n                        hasQuestionToken: p.hasQuestionToken(),\n                        isReadonly: p.isReadonly(),\n                    };\n                }),\n                ...properties.map(getExtractedInterfacePropertyStructure),\n                ...accessors.map(getExtractedInterfaceAccessorStructure),\n            ],\n            methods: methods.map(getExtractedInterfaceMethodStructure),\n        };\n    }\n    extractStaticInterface(name) {\n        const { constructors, properties, methods, accessors } = getExtractedClassDetails(this, true);\n        const instanceName = getDefaultExtractedName(undefined, this);\n        return {\n            kind: exports.StructureKind.Interface,\n            name,\n            properties: [\n                ...properties.map(getExtractedInterfacePropertyStructure),\n                ...accessors.map(getExtractedInterfaceAccessorStructure),\n            ],\n            methods: methods.map(getExtractedInterfaceMethodStructure),\n            constructSignatures: constructors.map(c => ({\n                kind: exports.StructureKind.ConstructSignature,\n                docs: c.getJsDocs().map(d => d.getStructure()),\n                parameters: c.getParameters().map(p => ({\n                    ...getExtractedInterfaceParameterStructure(p),\n                    scope: undefined,\n                    isReadonly: false,\n                })),\n                returnType: instanceName,\n            })),\n        };\n    }\n}\nfunction getExtractedClassDetails(classDec, isStatic) {\n    const constructors = common.ArrayUtils.flatten(classDec.getConstructors().map(c => c.getOverloads().length > 0 ? c.getOverloads() : [c]));\n    const properties = classDec.getProperties().filter(p => p.isStatic() === isStatic && p.getScope() === exports.Scope.Public);\n    const methods = common.ArrayUtils.flatten(classDec.getMethods()\n        .filter(p => p.isStatic() === isStatic && p.getScope() === exports.Scope.Public)\n        .map(m => m.getOverloads().length > 0 ? m.getOverloads() : [m]));\n    return { constructors, properties, methods, accessors: getAccessors() };\n    function getAccessors() {\n        const result = new common.KeyValueCache();\n        for (const accessor of [...classDec.getGetAccessors(), ...classDec.getSetAccessors()]) {\n            if (accessor.isStatic() === isStatic && accessor.getScope() === exports.Scope.Public)\n                result.getOrCreate(accessor.getName(), () => []).push(accessor);\n        }\n        return result.getValuesAsArray();\n    }\n}\nfunction getDefaultExtractedName(name, classDec) {\n    name = common.StringUtils.isNullOrWhitespace(name) ? undefined : name;\n    return name || classDec.getName() || classDec.getSourceFile().getBaseNameWithoutExtension().replace(/[^a-zA-Z0-9_$]/g, \"\");\n}\nfunction getExtractedInterfacePropertyStructure(prop) {\n    return {\n        kind: exports.StructureKind.PropertySignature,\n        docs: prop.getJsDocs().map(d => d.getStructure()),\n        name: prop.getName(),\n        type: prop.getType().getText(prop),\n        hasQuestionToken: prop.hasQuestionToken(),\n        isReadonly: prop.isReadonly(),\n    };\n}\nfunction getExtractedInterfaceAccessorStructure(getAndSet) {\n    return {\n        kind: exports.StructureKind.PropertySignature,\n        docs: getAndSet[0].getJsDocs().map(d => d.getStructure()),\n        name: getAndSet[0].getName(),\n        type: getAndSet[0].getType().getText(getAndSet[0]),\n        hasQuestionToken: false,\n        isReadonly: getAndSet.every(Node.isGetAccessorDeclaration),\n    };\n}\nfunction getExtractedInterfaceMethodStructure(method) {\n    return {\n        kind: exports.StructureKind.MethodSignature,\n        docs: method.getJsDocs().map(d => d.getStructure()),\n        name: method.getName(),\n        hasQuestionToken: method.hasQuestionToken(),\n        returnType: method.getReturnType().getText(method),\n        parameters: method.getParameters().map(getExtractedInterfaceParameterStructure),\n        typeParameters: method.getTypeParameters().map(p => p.getStructure()),\n    };\n}\nfunction getExtractedInterfaceParameterStructure(param) {\n    return {\n        ...param.getStructure(),\n        decorators: [],\n    };\n}\n\nconst ClassExpressionBase = ClassLikeDeclarationBase(PrimaryExpression);\nclass ClassExpression extends ClassExpressionBase {\n}\n\nconst createBase$i = (ctor) => ChildOrderableNode(TextInsertableNode(StatementedNode(JSDocableNode(BodiedNode(ctor)))));\nconst ClassStaticBlockDeclarationBase = createBase$i(ClassElement);\nclass ClassStaticBlockDeclaration extends ClassStaticBlockDeclarationBase {\n    getName() {\n        return \"static\";\n    }\n    isStatic() {\n        return true;\n    }\n    set(structure) {\n        callBaseSet(ClassStaticBlockDeclarationBase.prototype, this, structure);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(ClassStaticBlockDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.ClassStaticBlock,\n        });\n    }\n}\n\nclass CommentClassElement extends ClassElement {\n}\n\nconst createBase$h = (ctor) => ReferenceFindableNode(ChildOrderableNode(TextInsertableNode(OverloadableNode(ScopedNode(FunctionLikeDeclaration(BodyableNode(ctor)))))));\nconst ConstructorDeclarationBase = createBase$h(ClassElement);\nconst createOverloadBase = (ctor) => TypeParameteredNode(JSDocableNode(ChildOrderableNode(TextInsertableNode(ScopedNode(ModifierableNode(SignaturedDeclaration(ctor)))))));\nconst ConstructorDeclarationOverloadBase = createOverloadBase(ClassElement);\nclass ConstructorDeclaration extends ConstructorDeclarationBase {\n    set(structure) {\n        callBaseSet(ConstructorDeclarationBase.prototype, this, structure);\n        if (structure.overloads != null) {\n            this.getOverloads().forEach(o => o.remove());\n            this.addOverloads(structure.overloads);\n        }\n        return this;\n    }\n    addOverload(structure) {\n        return this.addOverloads([structure])[0];\n    }\n    addOverloads(structures) {\n        return this.insertOverloads(this.getOverloads().length, structures);\n    }\n    insertOverload(index, structure) {\n        return this.insertOverloads(index, [structure])[0];\n    }\n    insertOverloads(index, structures) {\n        const printer = this._context.structurePrinterFactory.forConstructorDeclaration({\n            isAmbient: isNodeAmbientOrInAmbientContext(this),\n        });\n        return insertOverloads({\n            node: this,\n            index,\n            structures,\n            printStructure: (writer, structure) => {\n                printer.printOverload(writer, structure);\n            },\n            getThisStructure: fromConstructorDeclarationOverload,\n            expectedSyntaxKind: common.SyntaxKind.Constructor,\n        });\n    }\n    getStructure() {\n        const hasImplementation = this.getImplementation() != null;\n        const isOverload = this.isOverload();\n        const basePrototype = isOverload && hasImplementation ? ConstructorDeclarationOverloadBase.prototype : ConstructorDeclarationBase.prototype;\n        return callBaseGetStructure(basePrototype, this, getStructure(this));\n        function getStructure(thisNode) {\n            if (hasImplementation && isOverload)\n                return getSpecificOverloadStructure();\n            return getSpecificStructure();\n            function getSpecificOverloadStructure() {\n                return { kind: exports.StructureKind.ConstructorOverload };\n            }\n            function getSpecificStructure() {\n                if (!hasImplementation)\n                    return { kind: exports.StructureKind.Constructor };\n                else {\n                    return {\n                        kind: exports.StructureKind.Constructor,\n                        overloads: thisNode.getOverloads().map(o => o.getStructure()),\n                    };\n                }\n            }\n        }\n    }\n}\n\nconst createBase$g = (ctor) => ChildOrderableNode(TextInsertableNode(DecoratableNode(AbstractableNode(ScopedNode(StaticableNode(FunctionLikeDeclaration(BodyableNode(PropertyNamedNode(ctor)))))))));\nconst GetAccessorDeclarationBase = createBase$g(ClassElement);\nclass GetAccessorDeclaration extends GetAccessorDeclarationBase {\n    set(structure) {\n        callBaseSet(GetAccessorDeclarationBase.prototype, this, structure);\n        return this;\n    }\n    getSetAccessor() {\n        const thisName = this.getName();\n        const isStatic = this.isStatic();\n        return this.getParentOrThrow().forEachChild(sibling => {\n            if (Node.isSetAccessorDeclaration(sibling) && sibling.getName() === thisName && sibling.isStatic() === isStatic)\n                return sibling;\n            return undefined;\n        });\n    }\n    getSetAccessorOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getSetAccessor(), () => `Expected to find a corresponding set accessor for ${this.getName()}.`);\n    }\n    getStructure() {\n        return callBaseGetStructure(GetAccessorDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.GetAccessor,\n        });\n    }\n}\n\nconst createBase$f = (ctor) => ChildOrderableNode(OverrideableNode(AmbientableNode(DecoratableNode(AbstractableNode(ScopedNode(StaticableNode(JSDocableNode(ReadonlyableNode(ExclamationTokenableNode(QuestionTokenableNode(InitializerExpressionableNode(TypedNode(PropertyNamedNode(ModifierableNode(ctor)))))))))))))));\nconst PropertyDeclarationBase = createBase$f(ClassElement);\nclass PropertyDeclaration extends PropertyDeclarationBase {\n    set(structure) {\n        callBaseSet(PropertyDeclarationBase.prototype, this, structure);\n        return this;\n    }\n    remove() {\n        const parent = this.getParentOrThrow();\n        switch (parent.getKind()) {\n            case common.SyntaxKind.ClassDeclaration:\n                super.remove();\n                break;\n            default:\n                throw new common.errors.NotImplementedError(`Not implemented parent syntax kind: ${parent.getKindName()}`);\n        }\n    }\n    getStructure() {\n        return callBaseGetStructure(PropertyDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.Property,\n        });\n    }\n}\n\nconst createBase$e = (ctor) => ChildOrderableNode(TextInsertableNode(DecoratableNode(AbstractableNode(ScopedNode(StaticableNode(FunctionLikeDeclaration(BodyableNode(PropertyNamedNode(ctor)))))))));\nconst SetAccessorDeclarationBase = createBase$e(ClassElement);\nclass SetAccessorDeclaration extends SetAccessorDeclarationBase {\n    set(structure) {\n        callBaseSet(SetAccessorDeclarationBase.prototype, this, structure);\n        return this;\n    }\n    getGetAccessor() {\n        const thisName = this.getName();\n        const isStatic = this.isStatic();\n        return this.getParentOrThrow().forEachChild(sibling => {\n            if (Node.isGetAccessorDeclaration(sibling) && sibling.getName() === thisName && sibling.isStatic() === isStatic)\n                return sibling;\n            return undefined;\n        });\n    }\n    getGetAccessorOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getGetAccessor(), () => `Expected to find a corresponding get accessor for ${this.getName()}.`);\n    }\n    getStructure() {\n        return callBaseGetStructure(SetAccessorDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.SetAccessor,\n        });\n    }\n}\n\nconst DecoratorBase = LeftHandSideExpressionedNode(Node);\nclass Decorator extends DecoratorBase {\n    getName() {\n        return this.getNameNode().getText();\n    }\n    getNameNode() {\n        const callExpression = this.getCallExpression();\n        if (callExpression)\n            return getIdentifierFromName(callExpression.getExpression());\n        else\n            return getIdentifierFromName(this._getInnerExpression());\n        function getIdentifierFromName(expression) {\n            const identifier = getNameFromExpression(expression);\n            if (!Node.isIdentifier(identifier)) {\n                throw new common.errors.NotImplementedError(`Expected the decorator expression '${identifier.getText()}' to be an identifier. `\n                    + `Please deal directly with 'getExpression()' on the decorator to handle more complex scenarios.`);\n            }\n            return identifier;\n        }\n        function getNameFromExpression(expression) {\n            if (Node.isPropertyAccessExpression(expression))\n                return expression.getNameNode();\n            return expression;\n        }\n    }\n    getFullName() {\n        const sourceFile = this.getSourceFile();\n        if (this.isDecoratorFactory())\n            return this.getCallExpression().getExpression().getText();\n        return this.compilerNode.expression.getText(sourceFile.compilerNode);\n    }\n    isDecoratorFactory() {\n        return Node.isCallExpression(this._getInnerExpression());\n    }\n    setIsDecoratorFactory(isDecoratorFactory) {\n        if (this.isDecoratorFactory() === isDecoratorFactory)\n            return this;\n        if (isDecoratorFactory) {\n            const expression = this._getInnerExpression();\n            const expressionText = expression.getText();\n            insertIntoParentTextRange({\n                parent: this,\n                insertPos: expression.getStart(),\n                newText: `${expressionText}()`,\n                replacing: {\n                    textLength: expressionText.length,\n                },\n                customMappings: newParent => {\n                    return [{ currentNode: expression, newNode: newParent.expression.expression }];\n                },\n            });\n        }\n        else {\n            const callExpression = this.getCallExpressionOrThrow();\n            const expression = callExpression.getExpression();\n            const expressionText = expression.getText();\n            insertIntoParentTextRange({\n                parent: this,\n                insertPos: callExpression.getStart(),\n                newText: `${expressionText}`,\n                replacing: {\n                    textLength: callExpression.getWidth(),\n                },\n                customMappings: newParent => {\n                    return [{ currentNode: expression, newNode: newParent.expression }];\n                },\n            });\n        }\n        return this;\n    }\n    getCallExpressionOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getCallExpression(), \"Expected to find a call expression.\");\n    }\n    getCallExpression() {\n        const expression = this._getInnerExpression();\n        return Node.isCallExpression(expression) ? expression : undefined;\n    }\n    getArguments() {\n        var _a, _b;\n        return (_b = (_a = this.getCallExpression()) === null || _a === void 0 ? void 0 : _a.getArguments()) !== null && _b !== void 0 ? _b : [];\n    }\n    getTypeArguments() {\n        var _a, _b;\n        return (_b = (_a = this.getCallExpression()) === null || _a === void 0 ? void 0 : _a.getTypeArguments()) !== null && _b !== void 0 ? _b : [];\n    }\n    addTypeArgument(argumentText) {\n        return this.getCallExpressionOrThrow().addTypeArgument(argumentText);\n    }\n    addTypeArguments(argumentTexts) {\n        return this.getCallExpressionOrThrow().addTypeArguments(argumentTexts);\n    }\n    insertTypeArgument(index, argumentText) {\n        return this.getCallExpressionOrThrow().insertTypeArgument(index, argumentText);\n    }\n    insertTypeArguments(index, argumentTexts) {\n        return this.getCallExpressionOrThrow().insertTypeArguments(index, argumentTexts);\n    }\n    removeTypeArgument(typeArgOrIndex) {\n        const callExpression = this.getCallExpression();\n        if (callExpression == null)\n            throw new common.errors.InvalidOperationError(\"Cannot remove a type argument from a decorator that has no type arguments.\");\n        callExpression.removeTypeArgument(typeArgOrIndex);\n        return this;\n    }\n    addArgument(argumentText) {\n        return this.addArguments([argumentText])[0];\n    }\n    addArguments(argumentTexts) {\n        return this.insertArguments(this.getArguments().length, argumentTexts);\n    }\n    insertArgument(index, argumentText) {\n        return this.insertArguments(index, [argumentText])[0];\n    }\n    insertArguments(index, argumentTexts) {\n        this.setIsDecoratorFactory(true);\n        return this.getCallExpressionOrThrow().insertArguments(index, argumentTexts);\n    }\n    removeArgument(argOrIndex) {\n        const callExpression = this.getCallExpression();\n        if (callExpression == null)\n            throw new common.errors.InvalidOperationError(\"Cannot remove an argument from a decorator that has no arguments.\");\n        callExpression.removeArgument(argOrIndex);\n        return this;\n    }\n    remove() {\n        const thisStartLinePos = this.getStartLinePos();\n        const previousDecorator = this.getPreviousSiblingIfKind(common.SyntaxKind.Decorator);\n        if (previousDecorator != null && previousDecorator.getStartLinePos() === thisStartLinePos) {\n            removeChildren({\n                children: [this],\n                removePrecedingSpaces: true,\n            });\n        }\n        else {\n            removeChildrenWithFormattingFromCollapsibleSyntaxList({\n                children: [this],\n                getSiblingFormatting: (parent, sibling) => sibling.getStartLinePos() === thisStartLinePos ? FormattingKind.Space : FormattingKind.Newline,\n            });\n        }\n    }\n    _getInnerExpression() {\n        let expr = this.getExpression();\n        while (Node.isParenthesizedExpression(expr))\n            expr = expr.getExpression();\n        return expr;\n    }\n    set(structure) {\n        callBaseSet(DecoratorBase.prototype, this, structure);\n        if (structure.name != null)\n            this.getNameNode().replaceWithText(structure.name);\n        if (structure.arguments != null) {\n            this.setIsDecoratorFactory(true);\n            this.getArguments().map(a => this.removeArgument(a));\n            this.addArguments(structure.arguments);\n        }\n        if (structure.typeArguments != null && structure.typeArguments.length > 0) {\n            this.setIsDecoratorFactory(true);\n            this.getTypeArguments().map(a => this.removeTypeArgument(a));\n            this.addTypeArguments(structure.typeArguments);\n        }\n        return this;\n    }\n    getStructure() {\n        const isDecoratorFactory = this.isDecoratorFactory();\n        return callBaseGetStructure(DecoratorBase.prototype, this, {\n            kind: exports.StructureKind.Decorator,\n            name: this.getName(),\n            arguments: isDecoratorFactory ? this.getArguments().map(arg => arg.getText()) : undefined,\n            typeArguments: isDecoratorFactory ? this.getTypeArguments().map(arg => arg.getText()) : undefined,\n        });\n    }\n}\n\nfunction JSDocPropertyLikeTag(Base) {\n    return class extends Base {\n        getTypeExpression() {\n            return this._getNodeFromCompilerNodeIfExists(this.compilerNode.typeExpression);\n        }\n        getTypeExpressionOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getTypeExpression(), `Expected to find a JS doc type expression.`);\n        }\n        getName() {\n            return this.getNameNode().getText();\n        }\n        getNameNode() {\n            return this._getNodeFromCompilerNode(this.compilerNode.name);\n        }\n        isBracketed() {\n            return this.compilerNode.isBracketed;\n        }\n    };\n}\n\nfunction JSDocTypeExpressionableTag(Base) {\n    return class extends Base {\n        getTypeExpression() {\n            const result = this._getNodeFromCompilerNodeIfExists(this.compilerNode.typeExpression);\n            if (result != null && result.getWidth() === 0)\n                return undefined;\n            return result;\n        }\n        getTypeExpressionOrThrow() {\n            return common.errors.throwIfNullOrUndefined(this.getTypeExpression(), `Expected to find the JS doc tag's type expression.`);\n        }\n    };\n}\n\nfunction JSDocTypeParameteredTag(Base) {\n    return class extends Base {\n        getTypeParameters() {\n            return this.compilerNode.typeParameters\n                .map(p => this._getNodeFromCompilerNode(p))\n                .filter(p => p.getWidth() > 0);\n        }\n    };\n}\n\nfunction getTextWithoutStars(inputText) {\n    const innerTextWithStars = inputText.replace(/^\\/\\*\\*[^\\S\\n]*\\n?/, \"\").replace(/(\\r?\\n)?[^\\S\\n]*\\*\\/$/, \"\");\n    return innerTextWithStars.split(/\\n/).map(line => {\n        const starPos = getStarPosIfFirstNonWhitespaceChar(line);\n        if (starPos === -1)\n            return line;\n        const substringStart = line[starPos + 1] === \" \" ? starPos + 2 : starPos + 1;\n        return line.substring(substringStart);\n    }).join(\"\\n\");\n    function getStarPosIfFirstNonWhitespaceChar(text) {\n        for (let i = 0; i < text.length; i++) {\n            const charCode = text.charCodeAt(i);\n            if (charCode === CharCodes.ASTERISK)\n                return i;\n            else if (!common.StringUtils.isWhitespaceCharCode(charCode))\n                break;\n        }\n        return -1;\n    }\n}\n\nconst JSDocBase = Node;\nclass JSDoc extends JSDocBase {\n    isMultiLine() {\n        return this.getText().includes(\"\\n\");\n    }\n    getTags() {\n        var _a, _b;\n        return (_b = (_a = this.compilerNode.tags) === null || _a === void 0 ? void 0 : _a.map(t => this._getNodeFromCompilerNode(t))) !== null && _b !== void 0 ? _b : [];\n    }\n    getInnerText() {\n        return getTextWithoutStars(this.getText());\n    }\n    getComment() {\n        if (this.compilerNode.comment == null)\n            return undefined;\n        else if (typeof this.compilerNode.comment === \"string\")\n            return this.compilerNode.comment;\n        else\n            return this.compilerNode.comment.map(n => this._getNodeFromCompilerNodeIfExists(n));\n    }\n    getCommentText() {\n        if (typeof this.compilerNode.comment === \"string\")\n            return this.compilerNode.comment;\n        else\n            return common.ts.getTextOfJSDocComment(this.compilerNode.comment);\n    }\n    getDescription() {\n        var _a, _b;\n        const sourceFileText = this.getSourceFile().getFullText();\n        const endSearchStart = (_b = (_a = this.getTags()[0]) === null || _a === void 0 ? void 0 : _a.getStart()) !== null && _b !== void 0 ? _b : this.getEnd() - 2;\n        const start = getStart(this);\n        return getTextWithoutStars(sourceFileText.substring(start, Math.max(start, getEndPos())));\n        function getStart(jsDoc) {\n            const startOrSpacePos = jsDoc.getStart() + 3;\n            if (sourceFileText.charCodeAt(startOrSpacePos) === CharCodes.SPACE)\n                return startOrSpacePos + 1;\n            return startOrSpacePos;\n        }\n        function getEndPos() {\n            const endOrNewLinePos = getPreviousMatchingPos(sourceFileText, endSearchStart, charCode => charCode === CharCodes.NEWLINE || !common.StringUtils.isWhitespaceCharCode(charCode) && charCode !== CharCodes.ASTERISK);\n            return getPreviousMatchingPos(sourceFileText, endOrNewLinePos, charCode => charCode !== CharCodes.NEWLINE && charCode !== CharCodes.CARRIAGE_RETURN);\n        }\n    }\n    setDescription(textOrWriterFunction) {\n        const tags = this.getTags();\n        const startEditPos = this.getStart() + 3;\n        const endEditPos = tags.length > 0\n            ? getPreviousMatchingPos(this._sourceFile.getFullText(), tags[0].getStart(), c => c === CharCodes.ASTERISK) - 1\n            : this.getEnd() - 2;\n        replaceTextPossiblyCreatingChildNodes({\n            parent: this,\n            newText: getNewText.call(this),\n            replacePos: startEditPos,\n            replacingLength: endEditPos - startEditPos,\n        });\n        return this;\n        function getNewText() {\n            var _a, _b;\n            const indentationText = this.getIndentationText();\n            const newLineKind = this._context.manipulationSettings.getNewLineKindAsString();\n            const rawLines = getTextFromStringOrWriter(this._getWriter(), textOrWriterFunction).split(/\\r?\\n/);\n            const startsWithNewLine = rawLines[0].length === 0;\n            const isSingleLine = rawLines.length === 1 && ((_b = (_a = this.compilerNode.tags) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) === 0;\n            const linesText = isSingleLine ? rawLines[0] : rawLines.map(l => l.length === 0 ? `${indentationText} *` : `${indentationText} * ${l}`)\n                .slice(startsWithNewLine ? 1 : 0)\n                .join(newLineKind);\n            return isSingleLine ? \" \" + linesText + \" \" : newLineKind + linesText + newLineKind + indentationText + \" \";\n        }\n    }\n    addTag(structure) {\n        return this.addTags([structure])[0];\n    }\n    addTags(structures) {\n        var _a, _b;\n        return this.insertTags((_b = (_a = this.compilerNode.tags) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0, structures);\n    }\n    insertTag(index, structure) {\n        return this.insertTags(index, [structure])[0];\n    }\n    insertTags(index, structures) {\n        if (common.ArrayUtils.isNullOrEmpty(structures))\n            return [];\n        const writer = this._getWriterWithQueuedIndentation();\n        const tags = this.getTags();\n        index = verifyAndGetIndex(index, tags.length);\n        if (tags.length === 0 && !this.isMultiLine()) {\n            const structurePrinter = this._context.structurePrinterFactory.forJSDoc();\n            this.replaceWithText(writer => {\n                structurePrinter.printText(writer, {\n                    description: this.getDescription(),\n                    tags: structures,\n                });\n            });\n        }\n        else {\n            const structurePrinter = this._context.structurePrinterFactory.forJSDocTag({ printStarsOnNewLine: true });\n            writer.newLine().write(\" * \");\n            structurePrinter.printTexts(writer, structures);\n            writer.newLine().write(\" *\");\n            writer.conditionalWrite(index < tags.length, \" \");\n            const replaceStart = getReplaceStart.call(this);\n            const replaceEnd = getReplaceEnd.call(this);\n            insertIntoParentTextRange({\n                parent: this,\n                insertPos: replaceStart,\n                replacing: { textLength: replaceEnd - replaceStart },\n                newText: writer.toString(),\n            });\n        }\n        return getNodesToReturn(tags, this.getTags(), index, false);\n        function getReplaceStart() {\n            const searchStart = index < tags.length ? tags[index].getStart() : this.getEnd() - 2;\n            const maxMin = this.getStart() + 3;\n            return Math.max(maxMin, getPreviousMatchingPos(this.getSourceFile().getFullText(), searchStart, charCode => !common.StringUtils.isWhitespaceCharCode(charCode) && charCode !== CharCodes.ASTERISK));\n        }\n        function getReplaceEnd() {\n            if (index < tags.length)\n                return tags[index].getStart();\n            return this.getEnd() - 1;\n        }\n    }\n    remove() {\n        removeChildren({\n            children: [this],\n            removeFollowingSpaces: true,\n            removeFollowingNewLines: true,\n        });\n    }\n    set(structure) {\n        callBaseSet(JSDocBase.prototype, this, structure);\n        if (structure.tags != null) {\n            return this.replaceWithText(writer => {\n                var _a;\n                this._context.structurePrinterFactory.forJSDoc().printText(writer, {\n                    description: (_a = structure.description) !== null && _a !== void 0 ? _a : this.getDescription(),\n                    tags: structure.tags,\n                });\n            });\n        }\n        else if (structure.description != null) {\n            this.setDescription(structure.description);\n        }\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(JSDocBase.prototype, this, {\n            kind: exports.StructureKind.JSDoc,\n            description: this.getDescription(),\n            tags: this.getTags().map(t => t.getStructure()),\n        });\n    }\n}\n\nclass TypeNode extends Node {\n}\nconst NodeWithTypeArgumentsBase = TypeArgumentedNode(TypeNode);\nclass NodeWithTypeArguments extends NodeWithTypeArgumentsBase {\n}\n\nclass ArrayTypeNode extends TypeNode {\n    getElementTypeNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.elementType);\n    }\n}\n\nclass ConditionalTypeNode extends TypeNode {\n    getCheckType() {\n        return this._getNodeFromCompilerNode(this.compilerNode.checkType);\n    }\n    getExtendsType() {\n        return this._getNodeFromCompilerNode(this.compilerNode.extendsType);\n    }\n    getTrueType() {\n        return this._getNodeFromCompilerNode(this.compilerNode.trueType);\n    }\n    getFalseType() {\n        return this._getNodeFromCompilerNode(this.compilerNode.falseType);\n    }\n}\n\nconst FunctionOrConstructorTypeNodeBaseBase = SignaturedDeclaration(TypeNode);\nclass FunctionOrConstructorTypeNodeBase extends FunctionOrConstructorTypeNodeBaseBase {\n}\n\nconst ConstructorTypeNodeBase = AbstractableNode(ModifierableNode(FunctionOrConstructorTypeNodeBase));\nclass ConstructorTypeNode extends ConstructorTypeNodeBase {\n}\n\nconst ExpressionWithTypeArgumentsBase = LeftHandSideExpressionedNode(NodeWithTypeArguments);\nclass ExpressionWithTypeArguments extends ExpressionWithTypeArgumentsBase {\n}\n\nconst FunctionTypeNodeBase = TypeParameteredNode(FunctionOrConstructorTypeNodeBase);\nclass FunctionTypeNode extends FunctionTypeNodeBase {\n}\n\nclass ImportTypeAssertionContainer extends Node {\n    getAssertClause() {\n        return this._getNodeFromCompilerNode(this.compilerNode.assertClause);\n    }\n    isMultiline() {\n        var _a;\n        return (_a = this.compilerNode.multiLine) !== null && _a !== void 0 ? _a : false;\n    }\n}\n\nclass ImportTypeNode extends NodeWithTypeArguments {\n    setArgument(text) {\n        const arg = this.getArgument();\n        if (Node.isLiteralTypeNode(arg)) {\n            const literal = arg.getLiteral();\n            if (Node.isStringLiteral(literal)) {\n                literal.setLiteralValue(text);\n                return this;\n            }\n        }\n        arg.replaceWithText(writer => writer.quote(text), this._getWriterWithQueuedChildIndentation());\n        return this;\n    }\n    getArgument() {\n        return this._getNodeFromCompilerNode(this.compilerNode.argument);\n    }\n    setQualifier(text) {\n        const qualifier = this.getQualifier();\n        if (qualifier != null)\n            qualifier.replaceWithText(text, this._getWriterWithQueuedChildIndentation());\n        else {\n            const paren = this.getFirstChildByKindOrThrow(common.SyntaxKind.CloseParenToken);\n            insertIntoParentTextRange({\n                insertPos: paren.getEnd(),\n                parent: this,\n                newText: this._getWriterWithQueuedIndentation().write(\".\").write(text).toString(),\n            });\n        }\n        return this;\n    }\n    getQualifierOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getQualifier(), () => `Expected to find a qualifier for the import type: ${this.getText()}`);\n    }\n    getQualifier() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.qualifier);\n    }\n    getAssertions() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.assertions);\n    }\n    getAssertionsOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this._getNodeFromCompilerNodeIfExists(this.compilerNode.assertions), \"Could not find import type assertion container.\");\n    }\n}\n\nclass IndexedAccessTypeNode extends TypeNode {\n    getObjectTypeNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.objectType);\n    }\n    getIndexTypeNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.indexType);\n    }\n}\n\nclass InferTypeNode extends TypeNode {\n    getTypeParameter() {\n        return this._getNodeFromCompilerNode(this.compilerNode.typeParameter);\n    }\n}\n\nclass IntersectionTypeNode extends TypeNode {\n    getTypeNodes() {\n        return this.compilerNode.types.map(t => this._getNodeFromCompilerNode(t));\n    }\n}\n\nclass LiteralTypeNode extends TypeNode {\n    getLiteral() {\n        const tsLiteral = this.compilerNode.literal;\n        return this._getNodeFromCompilerNode(tsLiteral);\n    }\n}\n\nclass MappedTypeNode extends TypeNode {\n    getNameTypeNode() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.nameType);\n    }\n    getNameTypeNodeOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getNameTypeNode(), \"Type did not exist.\");\n    }\n    getReadonlyToken() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.readonlyToken);\n    }\n    getReadonlyTokenOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getReadonlyToken(), \"Readonly token did not exist.\");\n    }\n    getQuestionToken() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.questionToken);\n    }\n    getQuestionTokenOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getQuestionToken(), \"Question token did not exist.\");\n    }\n    getTypeParameter() {\n        return this._getNodeFromCompilerNode(this.compilerNode.typeParameter);\n    }\n    getTypeNode() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.type);\n    }\n    getTypeNodeOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getTypeNode(), \"Type did not exist, but was expected to exist.\");\n    }\n}\n\nconst createBase$d = (ctor) => TypedNode(QuestionTokenableNode(DotDotDotTokenableNode(JSDocableNode(NamedNode(ctor)))));\nconst NamedTupleMemberBase = createBase$d(TypeNode);\nclass NamedTupleMember extends NamedTupleMemberBase {\n    getTypeNode() {\n        return super.getTypeNode();\n    }\n    removeType() {\n        throw new common.errors.InvalidOperationError(\"Cannot remove the type of a named tuple member.\");\n    }\n}\n\nclass ParenthesizedTypeNode extends TypeNode {\n    getTypeNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.type);\n    }\n    setType(textOrWriterFunction) {\n        this.getTypeNode().replaceWithText(textOrWriterFunction);\n        return this;\n    }\n}\n\nclass TemplateLiteralTypeNode extends TypeNode {\n    getHead() {\n        return this._getNodeFromCompilerNode(this.compilerNode.head);\n    }\n    getTemplateSpans() {\n        return this.compilerNode.templateSpans.map(s => this._getNodeFromCompilerNode(s));\n    }\n    setLiteralValue(value) {\n        var _a;\n        const childIndex = this.getChildIndex();\n        const parent = (_a = this.getParentSyntaxList()) !== null && _a !== void 0 ? _a : this.getParentOrThrow();\n        replaceNodeText({\n            sourceFile: this._sourceFile,\n            start: this.getStart() + 1,\n            replacingLength: this.getWidth() - 2,\n            newText: value,\n        });\n        return parent.getChildAtIndex(childIndex);\n    }\n}\n\nclass ThisTypeNode extends TypeNode {\n}\n\nclass TupleTypeNode extends TypeNode {\n    getElements() {\n        return this.compilerNode.elements.map(t => this._getNodeFromCompilerNode(t));\n    }\n}\n\nconst createBase$c = (ctor) => TypeParameteredNode(TypedNode(JSDocableNode(AmbientableNode(ExportableNode(ModifierableNode(NamedNode(ctor)))))));\nconst TypeAliasDeclarationBase = createBase$c(Statement);\nclass TypeAliasDeclaration extends TypeAliasDeclarationBase {\n    set(structure) {\n        callBaseSet(TypeAliasDeclarationBase.prototype, this, structure);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(TypeAliasDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.TypeAlias,\n            type: this.getTypeNodeOrThrow().getText(),\n        });\n    }\n}\n\nconst TypeLiteralNodeBase = TypeElementMemberedNode(TypeNode);\nclass TypeLiteralNode extends TypeLiteralNodeBase {\n}\n\nclass TypeOperatorTypeNode extends TypeNode {\n    getOperator() {\n        return this.compilerNode.operator;\n    }\n    getTypeNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.type);\n    }\n}\n\nexports.TypeParameterVariance = void 0;\n(function (TypeParameterVariance) {\n    TypeParameterVariance[TypeParameterVariance[\"None\"] = 0] = \"None\";\n    TypeParameterVariance[TypeParameterVariance[\"In\"] = 1] = \"In\";\n    TypeParameterVariance[TypeParameterVariance[\"Out\"] = 2] = \"Out\";\n    TypeParameterVariance[TypeParameterVariance[\"InOut\"] = 3] = \"InOut\";\n})(exports.TypeParameterVariance || (exports.TypeParameterVariance = {}));\nconst TypeParameterDeclarationBase = ModifierableNode(NamedNode(Node));\nclass TypeParameterDeclaration extends TypeParameterDeclarationBase {\n    getConstraint() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.constraint);\n    }\n    getConstraintOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getConstraint(), \"Expected to find the type parameter's constraint.\");\n    }\n    setConstraint(text) {\n        text = this.getParentOrThrow()._getTextWithQueuedChildIndentation(text);\n        if (common.StringUtils.isNullOrWhitespace(text)) {\n            this.removeConstraint();\n            return this;\n        }\n        const constraint = this.getConstraint();\n        if (constraint != null) {\n            constraint.replaceWithText(text);\n            return this;\n        }\n        const nameNode = this.getNameNode();\n        insertIntoParentTextRange({\n            parent: this,\n            insertPos: nameNode.getEnd(),\n            newText: ` extends ${text}`,\n        });\n        return this;\n    }\n    removeConstraint() {\n        removeConstraintOrDefault(this.getConstraint(), common.SyntaxKind.ExtendsKeyword);\n        return this;\n    }\n    getDefault() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.default);\n    }\n    getDefaultOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getDefault(), \"Expected to find the type parameter's default.\");\n    }\n    setDefault(text) {\n        text = this.getParentOrThrow()._getTextWithQueuedChildIndentation(text);\n        if (common.StringUtils.isNullOrWhitespace(text)) {\n            this.removeDefault();\n            return this;\n        }\n        const defaultNode = this.getDefault();\n        if (defaultNode != null) {\n            defaultNode.replaceWithText(text);\n            return this;\n        }\n        const insertAfterNode = this.getConstraint() || this.getNameNode();\n        insertIntoParentTextRange({\n            parent: this,\n            insertPos: insertAfterNode.getEnd(),\n            newText: ` = ${text}`,\n        });\n        return this;\n    }\n    removeDefault() {\n        removeConstraintOrDefault(this.getDefault(), common.SyntaxKind.EqualsToken);\n        return this;\n    }\n    setVariance(variance) {\n        this.toggleModifier(\"in\", (variance & exports.TypeParameterVariance.In) !== 0);\n        this.toggleModifier(\"out\", (variance & exports.TypeParameterVariance.Out) !== 0);\n        return this;\n    }\n    getVariance() {\n        let variance = exports.TypeParameterVariance.None;\n        if (this.hasModifier(\"in\"))\n            variance |= exports.TypeParameterVariance.In;\n        if (this.hasModifier(\"out\"))\n            variance |= exports.TypeParameterVariance.Out;\n        return variance;\n    }\n    remove() {\n        const parentSyntaxList = this.getParentSyntaxListOrThrow();\n        const typeParameters = parentSyntaxList.getChildrenOfKind(common.SyntaxKind.TypeParameter);\n        if (typeParameters.length === 1)\n            removeAllTypeParameters();\n        else\n            removeCommaSeparatedChild(this);\n        function removeAllTypeParameters() {\n            const children = [\n                parentSyntaxList.getPreviousSiblingIfKindOrThrow(common.SyntaxKind.LessThanToken),\n                parentSyntaxList,\n                parentSyntaxList.getNextSiblingIfKindOrThrow(common.SyntaxKind.GreaterThanToken),\n            ];\n            removeChildren({ children });\n        }\n    }\n    set(structure) {\n        callBaseSet(TypeParameterDeclarationBase.prototype, this, structure);\n        if (structure.constraint != null)\n            this.setConstraint(structure.constraint);\n        else if (structure.hasOwnProperty(common.nameof(structure, \"constraint\")))\n            this.removeConstraint();\n        if (structure.default != null)\n            this.setDefault(structure.default);\n        else if (structure.hasOwnProperty(common.nameof(structure, \"default\")))\n            this.removeDefault();\n        if (structure.variance != null)\n            this.setVariance(structure.variance);\n        return this;\n    }\n    getStructure() {\n        const constraintNode = this.getConstraint();\n        const defaultNode = this.getDefault();\n        return callBaseGetStructure(TypeParameterDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.TypeParameter,\n            constraint: constraintNode != null ? constraintNode.getText({ trimLeadingIndentation: true }) : undefined,\n            default: defaultNode ? defaultNode.getText({ trimLeadingIndentation: true }) : undefined,\n            variance: this.getVariance(),\n        });\n    }\n}\nfunction removeConstraintOrDefault(nodeToRemove, siblingKind) {\n    if (nodeToRemove == null)\n        return;\n    removeChildren({\n        children: [nodeToRemove.getPreviousSiblingIfKindOrThrow(siblingKind), nodeToRemove],\n        removePrecedingSpaces: true,\n    });\n}\n\nclass TypePredicateNode extends TypeNode {\n    getParameterNameNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.parameterName);\n    }\n    hasAssertsModifier() {\n        return this.compilerNode.assertsModifier != null;\n    }\n    getAssertsModifier() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.assertsModifier);\n    }\n    getAssertsModifierOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getAssertsModifier(), \"Expected to find an asserts modifier.\");\n    }\n    getTypeNode() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.type);\n    }\n    getTypeNodeOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getTypeNode(), \"Expected to find a type node.\");\n    }\n}\n\nclass TypeQueryNode extends NodeWithTypeArguments {\n    getExprName() {\n        return this._getNodeFromCompilerNode(this.compilerNode.exprName);\n    }\n}\n\nclass TypeReferenceNode extends NodeWithTypeArguments {\n    getTypeName() {\n        return this._getNodeFromCompilerNode(this.compilerNode.typeName);\n    }\n}\n\nclass UnionTypeNode extends TypeNode {\n    getTypeNodes() {\n        return this.compilerNode.types.map(t => this._getNodeFromCompilerNode(t));\n    }\n}\n\nclass JSDocType extends TypeNode {\n}\n\nclass JSDocAllType extends JSDocType {\n}\n\nconst JSDocTagBase = Node;\nclass JSDocTag extends JSDocTagBase {\n    getTagName() {\n        return this.getTagNameNode().getText();\n    }\n    getTagNameNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.tagName);\n    }\n    setTagName(tagName) {\n        return this.set({ tagName });\n    }\n    getComment() {\n        if (this.compilerNode.comment == null)\n            return undefined;\n        else if (typeof this.compilerNode.comment === \"string\")\n            return this.compilerNode.comment;\n        else\n            return this.compilerNode.comment.map(n => this._getNodeFromCompilerNodeIfExists(n));\n    }\n    getCommentText() {\n        if (typeof this.compilerNode.comment === \"string\")\n            return this.compilerNode.comment;\n        else\n            return common.ts.getTextOfJSDocComment(this.compilerNode.comment);\n    }\n    remove() {\n        const jsDocBodyStart = this.getParentOrThrow().getStart() + 3;\n        const nextJsDocTag = getNextJsDocTag(this);\n        const isLastJsDoc = nextJsDocTag == null;\n        const removalStart = getRemovalStart.call(this);\n        removeChildren({\n            children: [this],\n            customRemovalPos: removalStart,\n            customRemovalEnd: getNextTagStartOrDocEnd(this, nextJsDocTag),\n            replaceTrivia: getReplaceTrivia.call(this),\n        });\n        function getRemovalStart() {\n            return Math.max(jsDocBodyStart, getPreviousNonWhiteSpacePos(this, this.getStart()));\n        }\n        function getReplaceTrivia() {\n            if (removalStart === jsDocBodyStart && isLastJsDoc)\n                return \"\";\n            const newLineKind = this._context.manipulationSettings.getNewLineKindAsString();\n            const indentationText = this.getParentOrThrow().getIndentationText();\n            return `${newLineKind}${indentationText} ` + (isLastJsDoc ? \"\" : \"* \");\n        }\n    }\n    set(structure) {\n        callBaseSet(JSDocTagBase.prototype, this, structure);\n        if (structure.text != null || structure.tagName != null) {\n            return this.replaceWithText(writer => {\n                var _a;\n                this._context.structurePrinterFactory.forJSDocTag({ printStarsOnNewLine: true }).printText(writer, {\n                    tagName: (_a = structure.tagName) !== null && _a !== void 0 ? _a : this.getTagName(),\n                    text: structure.text != null ? structure.text : getText(this),\n                });\n            });\n        }\n        return this;\n    }\n    replaceWithText(textOrWriterFunction) {\n        const newText = getTextFromStringOrWriter(this._getWriterWithQueuedIndentation(), textOrWriterFunction);\n        const parent = this.getParentOrThrow();\n        const childIndex = this.getChildIndex();\n        const start = this.getStart();\n        insertIntoParentTextRange({\n            parent,\n            insertPos: start,\n            newText,\n            replacing: {\n                textLength: getTagEnd(this) - start,\n            },\n        });\n        return parent.getChildren()[childIndex];\n    }\n    getStructure() {\n        const text = getText(this);\n        return callBaseGetStructure(JSDocTagBase.prototype, this, {\n            kind: exports.StructureKind.JSDocTag,\n            tagName: this.getTagName(),\n            text: text.length === 0 ? undefined : text,\n        });\n    }\n}\nfunction getText(jsDocTag) {\n    const text = jsDocTag.getSourceFile().getFullText();\n    const nameEnd = jsDocTag.getTagNameNode().getEnd();\n    const tagEnd = getTagEnd(jsDocTag);\n    const startPos = Math.min(text.charCodeAt(nameEnd) === CharCodes.SPACE ? nameEnd + 1 : nameEnd, tagEnd);\n    return getTextWithoutStars(text.substring(startPos, tagEnd));\n}\nfunction getTagEnd(jsDocTag) {\n    return getPreviousNonWhiteSpacePos(jsDocTag, getNextTagStartOrDocEnd(jsDocTag));\n}\nfunction getNextTagStartOrDocEnd(jsDocTag, nextJsDocTag) {\n    nextJsDocTag = nextJsDocTag !== null && nextJsDocTag !== void 0 ? nextJsDocTag : getNextJsDocTag(jsDocTag);\n    return nextJsDocTag != null\n        ? nextJsDocTag.getStart()\n        : jsDocTag.getParentOrThrow().getEnd() - 2;\n}\nfunction getNextJsDocTag(jsDocTag) {\n    const parent = jsDocTag.getParentIfKindOrThrow(common.SyntaxKind.JSDoc);\n    const tags = parent.getTags();\n    const thisIndex = tags.indexOf(jsDocTag);\n    return tags[thisIndex + 1];\n}\nfunction getPreviousNonWhiteSpacePos(jsDocTag, pos) {\n    const sourceFileText = jsDocTag.getSourceFile().getFullText();\n    return getPreviousMatchingPos(sourceFileText, pos, charCode => charCode !== CharCodes.ASTERISK && !common.StringUtils.isWhitespaceCharCode(charCode));\n}\n\nclass JSDocAugmentsTag extends JSDocTag {\n}\n\nclass JSDocAuthorTag extends JSDocTag {\n}\n\nclass JSDocCallbackTag extends JSDocTag {\n}\n\nclass JSDocClassTag extends JSDocTag {\n}\n\nclass JSDocDeprecatedTag extends JSDocTag {\n}\n\nclass JSDocEnumTag extends JSDocTag {\n}\n\nconst JSDocFunctionTypeBase = SignaturedDeclaration(JSDocType);\nclass JSDocFunctionType extends JSDocFunctionTypeBase {\n}\n\nclass JSDocImplementsTag extends JSDocTag {\n}\n\nclass JSDocLink extends Node {\n}\n\nclass JSDocLinkCode extends Node {\n}\n\nclass JSDocLinkPlain extends Node {\n}\n\nclass JSDocMemberName extends Node {\n}\n\nclass JSDocNamepathType extends JSDocType {\n    getTypeNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.type);\n    }\n}\n\nclass JSDocNameReference extends Node {\n    getName() {\n        return this._getNodeFromCompilerNode(this.compilerNode.name);\n    }\n}\n\nclass JSDocNonNullableType extends JSDocType {\n    getTypeNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.type);\n    }\n    isPostfix() {\n        return this.compilerNode.postfix;\n    }\n}\n\nclass JSDocNullableType extends JSDocType {\n    getTypeNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.type);\n    }\n    isPostfix() {\n        return this.compilerNode.postfix;\n    }\n}\n\nclass JSDocOptionalType extends JSDocType {\n    getTypeNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.type);\n    }\n}\n\nclass JSDocOverrideTag extends JSDocTag {\n}\n\nconst JSDocParameterTagBase = JSDocPropertyLikeTag(JSDocTag);\nclass JSDocParameterTag extends JSDocParameterTagBase {\n}\n\nclass JSDocPrivateTag extends JSDocTag {\n}\n\nconst JSDocPropertyTagBase = JSDocPropertyLikeTag(JSDocTag);\nclass JSDocPropertyTag extends JSDocPropertyTagBase {\n}\n\nclass JSDocProtectedTag extends JSDocTag {\n}\n\nclass JSDocPublicTag extends JSDocTag {\n}\n\nclass JSDocReadonlyTag extends JSDocTag {\n}\n\nconst JSDocReturnTagBase = JSDocTypeExpressionableTag(JSDocTag);\nclass JSDocReturnTag extends JSDocReturnTagBase {\n}\n\nconst JSDocSeeTagBase = JSDocTypeExpressionableTag(JSDocTag);\nclass JSDocSeeTag extends JSDocSeeTagBase {\n}\n\nclass JSDocSignature extends JSDocType {\n    getTypeNode() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.type);\n    }\n}\n\nclass JSDocTagInfo {\n    constructor(compilerObject) {\n        this._compilerObject = compilerObject;\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getName() {\n        return this.compilerObject.name;\n    }\n    getText() {\n        var _a;\n        return (_a = this.compilerObject.text) !== null && _a !== void 0 ? _a : [];\n    }\n}\n\nconst JSDocTemplateTagBase = JSDocTypeParameteredTag(JSDocTag);\nclass JSDocTemplateTag extends JSDocTemplateTagBase {\n    getConstraint() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.constraint);\n    }\n    getConstraintOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getConstraint(), \"Expected to find the JS doc template tag's constraint.\");\n    }\n}\n\nclass JSDocText extends Node {\n}\n\nconst JSDocThisTagBase = JSDocTypeExpressionableTag(JSDocTag);\nclass JSDocThisTag extends JSDocThisTagBase {\n}\n\nclass JSDocTypedefTag extends JSDocTag {\n}\n\nclass JSDocTypeExpression extends TypeNode {\n    getTypeNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.type);\n    }\n}\n\nclass JSDocTypeLiteral extends JSDocType {\n    isArrayType() {\n        return this.compilerNode.isArrayType;\n    }\n    getPropertyTags() {\n        return this.compilerNode.jsDocPropertyTags ? this.compilerNode.jsDocPropertyTags.map(t => this._getNodeFromCompilerNode(t)) : undefined;\n    }\n}\n\nclass JSDocTypeTag extends JSDocTag {\n    getTypeExpression() {\n        const node = this.compilerNode.typeExpression;\n        if (node != null && node.pos === node.end)\n            return undefined;\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.typeExpression);\n    }\n}\n\nclass JSDocUnknownTag extends JSDocTag {\n}\n\nclass JSDocUnknownType extends JSDocType {\n}\n\nclass JSDocVariadicType extends JSDocType {\n    getTypeNode() {\n        return this._getNodeFromCompilerNode(this.compilerNode.type);\n    }\n}\n\nclass CommentEnumMember extends Node {\n    remove() {\n        removeChildrenWithFormatting({\n            children: [this],\n            getSiblingFormatting: () => FormattingKind.Newline,\n        });\n    }\n}\n\nconst createBase$b = (ctor) => TextInsertableNode(ModuleChildableNode(JSDocableNode(AmbientableNode(ExportableNode(ModifierableNode(NamedNode(ctor)))))));\nconst EnumDeclarationBase = createBase$b(Statement);\nclass EnumDeclaration extends EnumDeclarationBase {\n    set(structure) {\n        callBaseSet(EnumDeclarationBase.prototype, this, structure);\n        if (structure.isConst != null)\n            this.setIsConstEnum(structure.isConst);\n        if (structure.members != null) {\n            this.getMembers().forEach(m => m.remove());\n            this.addMembers(structure.members);\n        }\n        return this;\n    }\n    addMember(structure) {\n        return this.addMembers([structure])[0];\n    }\n    addMembers(structures) {\n        return this.insertMembers(this.getMembers().length, structures);\n    }\n    insertMember(index, structure) {\n        return this.insertMembers(index, [structure])[0];\n    }\n    insertMembers(index, structures) {\n        if (structures.length === 0)\n            return [];\n        const members = this.getMembersWithComments();\n        index = verifyAndGetIndex(index, members.length);\n        const writer = this._getWriterWithChildIndentation();\n        const structurePrinter = this._context.structurePrinterFactory.forEnumMember();\n        structurePrinter.printTexts(writer, structures);\n        insertIntoCommaSeparatedNodes({\n            parent: this.getChildSyntaxListOrThrow(),\n            currentNodes: members,\n            insertIndex: index,\n            newText: writer.toString(),\n            useNewLines: true,\n            useTrailingCommas: this._context.manipulationSettings.getUseTrailingCommas(),\n        });\n        return getNodesToReturn(members, this.getMembersWithComments(), index, !areAllStructuresStructures());\n        function areAllStructuresStructures() {\n            if (!(structures instanceof Array))\n                return false;\n            return structures.every(s => typeof s === \"object\");\n        }\n    }\n    getMember(nameOrFindFunction) {\n        return getNodeByNameOrFindFunction(this.getMembers(), nameOrFindFunction);\n    }\n    getMemberOrThrow(nameOrFindFunction) {\n        return common.errors.throwIfNullOrUndefined(this.getMember(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"enum member\", nameOrFindFunction));\n    }\n    getMembers() {\n        return this.compilerNode.members.map(m => this._getNodeFromCompilerNode(m));\n    }\n    getMembersWithComments() {\n        const compilerNode = this.compilerNode;\n        return ExtendedParser.getContainerArray(compilerNode, this.getSourceFile().compilerNode)\n            .map(m => this._getNodeFromCompilerNode(m));\n    }\n    setIsConstEnum(value) {\n        return this.toggleModifier(\"const\", value);\n    }\n    isConstEnum() {\n        return this.getConstKeyword() != null;\n    }\n    getConstKeyword() {\n        return this.getFirstModifierByKind(common.SyntaxKind.ConstKeyword);\n    }\n    getStructure() {\n        return callBaseGetStructure(EnumDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.Enum,\n            isConst: this.isConstEnum(),\n            members: this.getMembers().map(member => member.getStructure()),\n        });\n    }\n}\n\nconst createBase$a = (ctor) => JSDocableNode(InitializerExpressionableNode(PropertyNamedNode(ctor)));\nconst EnumMemberBase = createBase$a(Node);\nclass EnumMember extends EnumMemberBase {\n    getValue() {\n        return this._context.typeChecker.getConstantValue(this);\n    }\n    setValue(value) {\n        let text;\n        if (typeof value === \"string\") {\n            const quoteKind = this._context.manipulationSettings.getQuoteKind();\n            text = quoteKind + common.StringUtils.escapeForWithinString(value, quoteKind) + quoteKind;\n        }\n        else {\n            text = value.toString();\n        }\n        this.setInitializer(text);\n        return this;\n    }\n    remove() {\n        const childrenToRemove = [this];\n        const commaToken = this.getNextSiblingIfKind(common.SyntaxKind.CommaToken);\n        if (commaToken != null)\n            childrenToRemove.push(commaToken);\n        removeChildrenWithFormatting({\n            children: childrenToRemove,\n            getSiblingFormatting: () => FormattingKind.Newline,\n        });\n    }\n    set(structure) {\n        callBaseSet(EnumMemberBase.prototype, this, structure);\n        if (structure.value != null)\n            this.setValue(structure.value);\n        else if (structure.hasOwnProperty(common.nameof(structure, \"value\")) && structure.initializer == null)\n            this.removeInitializer();\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(EnumMemberBase.prototype, this, {\n            kind: exports.StructureKind.EnumMember,\n            value: undefined,\n        });\n    }\n}\n\nclass HeritageClause extends Node {\n    getTypeNodes() {\n        var _a, _b;\n        return (_b = (_a = this.compilerNode.types) === null || _a === void 0 ? void 0 : _a.map(t => this._getNodeFromCompilerNode(t))) !== null && _b !== void 0 ? _b : [];\n    }\n    getToken() {\n        return this.compilerNode.token;\n    }\n    removeExpression(expressionNodeOrIndex) {\n        const expressions = this.getTypeNodes();\n        const expressionNodeToRemove = typeof expressionNodeOrIndex === \"number\" ? getExpressionFromIndex(expressionNodeOrIndex) : expressionNodeOrIndex;\n        if (expressions.length === 1) {\n            const heritageClauses = this.getParentSyntaxListOrThrow().getChildren();\n            if (heritageClauses.length === 1)\n                removeChildren({ children: [heritageClauses[0].getParentSyntaxListOrThrow()], removePrecedingSpaces: true });\n            else\n                removeChildren({ children: [this], removePrecedingSpaces: true });\n        }\n        else {\n            removeCommaSeparatedChild(expressionNodeToRemove);\n        }\n        return this;\n        function getExpressionFromIndex(index) {\n            return expressions[verifyAndGetIndex(index, expressions.length - 1)];\n        }\n    }\n}\n\nclass TypeElement extends Node {\n    remove() {\n        removeInterfaceMember(this);\n    }\n}\n\nconst createBase$9 = (ctor) => TypeParameteredNode(ChildOrderableNode(JSDocableNode(SignaturedDeclaration(ctor))));\nconst CallSignatureDeclarationBase = createBase$9(TypeElement);\nclass CallSignatureDeclaration extends CallSignatureDeclarationBase {\n    set(structure) {\n        callBaseSet(CallSignatureDeclarationBase.prototype, this, structure);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(CallSignatureDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.CallSignature,\n        });\n    }\n}\n\nclass CommentTypeElement extends TypeElement {\n}\n\nconst createBase$8 = (ctor) => TypeParameteredNode(ChildOrderableNode(JSDocableNode(SignaturedDeclaration(ctor))));\nconst ConstructSignatureDeclarationBase = createBase$8(TypeElement);\nclass ConstructSignatureDeclaration extends ConstructSignatureDeclarationBase {\n    set(structure) {\n        callBaseSet(ConstructSignatureDeclarationBase.prototype, this, structure);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(ConstructSignatureDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.ConstructSignature,\n        });\n    }\n}\n\nconst createBase$7 = (ctor) => ReturnTypedNode(ChildOrderableNode(JSDocableNode(ReadonlyableNode(ModifierableNode(ctor)))));\nconst IndexSignatureDeclarationBase = createBase$7(TypeElement);\nclass IndexSignatureDeclaration extends IndexSignatureDeclarationBase {\n    getKeyName() {\n        return this.getKeyNameNode().getText();\n    }\n    setKeyName(name) {\n        common.errors.throwIfWhitespaceOrNotString(name, \"name\");\n        if (this.getKeyName() === name)\n            return;\n        this.getKeyNameNode().replaceWithText(name, this._getWriterWithQueuedChildIndentation());\n    }\n    getKeyNameNode() {\n        const param = this.compilerNode.parameters[0];\n        return this._getNodeFromCompilerNode(param.name);\n    }\n    getKeyType() {\n        return this.getKeyNameNode().getType();\n    }\n    setKeyType(type) {\n        common.errors.throwIfWhitespaceOrNotString(type, \"type\");\n        const keyTypeNode = this.getKeyTypeNode();\n        if (keyTypeNode.getText() === type)\n            return this;\n        keyTypeNode.replaceWithText(type, this._getWriterWithQueuedChildIndentation());\n        return this;\n    }\n    getKeyTypeNode() {\n        const param = this.compilerNode.parameters[0];\n        return this._getNodeFromCompilerNode(param.type);\n    }\n    set(structure) {\n        callBaseSet(IndexSignatureDeclarationBase.prototype, this, structure);\n        if (structure.keyName != null)\n            this.setKeyName(structure.keyName);\n        if (structure.keyType != null)\n            this.setKeyType(structure.keyType);\n        return this;\n    }\n    getStructure() {\n        const keyTypeNode = this.getKeyTypeNode();\n        return callBaseGetStructure(IndexSignatureDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.IndexSignature,\n            keyName: this.getKeyName(),\n            keyType: keyTypeNode.getText(),\n        });\n    }\n}\n\nconst createBase$6 = (ctor) => TypeElementMemberedNode(TextInsertableNode(ExtendsClauseableNode(HeritageClauseableNode(TypeParameteredNode(JSDocableNode(AmbientableNode(ModuleChildableNode(ExportableNode(ModifierableNode(NamedNode(ctor)))))))))));\nconst InterfaceDeclarationBase = createBase$6(Statement);\nclass InterfaceDeclaration extends InterfaceDeclarationBase {\n    getBaseTypes() {\n        return this.getType().getBaseTypes();\n    }\n    getBaseDeclarations() {\n        return common.ArrayUtils.flatten(this.getType().getBaseTypes().map(t => {\n            var _a, _b;\n            return (_b = (_a = t.getSymbol()) === null || _a === void 0 ? void 0 : _a.getDeclarations()) !== null && _b !== void 0 ? _b : [];\n        }));\n    }\n    getImplementations() {\n        return this.getNameNode().getImplementations();\n    }\n    set(structure) {\n        callBaseSet(InterfaceDeclarationBase.prototype, this, structure);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(InterfaceDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.Interface,\n        });\n    }\n}\n\nconst createBase$5 = (ctor) => ChildOrderableNode(JSDocableNode(QuestionTokenableNode(TypeParameteredNode(SignaturedDeclaration(PropertyNamedNode(ctor))))));\nconst MethodSignatureBase = createBase$5(TypeElement);\nclass MethodSignature extends MethodSignatureBase {\n    set(structure) {\n        callBaseSet(MethodSignatureBase.prototype, this, structure);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(MethodSignatureBase.prototype, this, {\n            kind: exports.StructureKind.MethodSignature,\n        });\n    }\n}\n\nconst createBase$4 = (ctor) => ChildOrderableNode(JSDocableNode(ReadonlyableNode(QuestionTokenableNode(InitializerExpressionableNode(TypedNode(PropertyNamedNode(ModifierableNode(ctor))))))));\nconst PropertySignatureBase = createBase$4(TypeElement);\nclass PropertySignature extends PropertySignatureBase {\n    set(structure) {\n        callBaseSet(PropertySignatureBase.prototype, this, structure);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(PropertySignatureBase.prototype, this, {\n            kind: exports.StructureKind.PropertySignature,\n        });\n    }\n}\n\nfunction JsxAttributedNode(Base) {\n    return class extends Base {\n        getAttributes() {\n            return this.compilerNode.attributes.properties.map(p => this._getNodeFromCompilerNode(p));\n        }\n        getAttributeOrThrow(nameOrFindFunction) {\n            return common.errors.throwIfNullOrUndefined(this.getAttribute(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"attribute\", nameOrFindFunction));\n        }\n        getAttribute(nameOrFindFunction) {\n            return getNodeByNameOrFindFunction(this.getAttributes(), nameOrFindFunction);\n        }\n        addAttribute(structure) {\n            return this.addAttributes([structure])[0];\n        }\n        addAttributes(structures) {\n            return this.insertAttributes(this.compilerNode.attributes.properties.length, structures);\n        }\n        insertAttribute(index, structure) {\n            return this.insertAttributes(index, [structure])[0];\n        }\n        insertAttributes(index, structures) {\n            if (structures.length === 0)\n                return [];\n            const originalChildrenCount = this.compilerNode.attributes.properties.length;\n            index = verifyAndGetIndex(index, originalChildrenCount);\n            const insertPos = index === 0 ? this.getTagNameNode().getEnd() : this.getAttributes()[index - 1].getEnd();\n            const writer = this._getWriterWithQueuedChildIndentation();\n            const structuresPrinter = new SpaceFormattingStructuresPrinter(this._context.structurePrinterFactory.forJsxAttributeDecider());\n            structuresPrinter.printText(writer, structures);\n            insertIntoParentTextRange({\n                insertPos,\n                newText: \" \" + writer.toString(),\n                parent: this.getNodeProperty(\"attributes\").getFirstChildByKindOrThrow(common.SyntaxKind.SyntaxList),\n            });\n            return getNodesToReturn(originalChildrenCount, this.getAttributes(), index, false);\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.attributes != null) {\n                this.getAttributes().forEach(a => a.remove());\n                this.addAttributes(structure.attributes);\n            }\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                attributes: this.getAttributes().map(a => a.getStructure()),\n            });\n        }\n    };\n}\n\nfunction JsxTagNamedNode(Base) {\n    return class extends Base {\n        getTagNameNode() {\n            return this._getNodeFromCompilerNode(this.compilerNode.tagName);\n        }\n        set(structure) {\n            callBaseSet(Base.prototype, this, structure);\n            if (structure.name != null)\n                this.getTagNameNode().replaceWithText(structure.name);\n            return this;\n        }\n        getStructure() {\n            return callBaseGetStructure(Base.prototype, this, {\n                name: this.getTagNameNode().getText(),\n            });\n        }\n    };\n}\n\nconst JsxAttributeBase = NamedNode(Node);\nclass JsxAttribute extends JsxAttributeBase {\n    getInitializerOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getInitializer(), `Expected to find an initializer for the JSX attribute '${this.getName()}'`);\n    }\n    getInitializer() {\n        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.initializer);\n    }\n    setInitializer(textOrWriterFunction) {\n        const text = getTextFromStringOrWriter(this._getWriterWithQueuedIndentation(), textOrWriterFunction);\n        if (common.StringUtils.isNullOrWhitespace(text)) {\n            this.removeInitializer();\n            return this;\n        }\n        const initializer = this.getInitializer();\n        if (initializer != null) {\n            initializer.replaceWithText(text);\n            return this;\n        }\n        insertIntoParentTextRange({\n            insertPos: this.getNameNode().getEnd(),\n            parent: this,\n            newText: `=${text}`,\n        });\n        return this;\n    }\n    removeInitializer() {\n        const initializer = this.getInitializer();\n        if (initializer == null)\n            return this;\n        removeChildren({\n            children: [initializer.getPreviousSiblingIfKindOrThrow(common.SyntaxKind.EqualsToken), initializer],\n            removePrecedingSpaces: true,\n            removePrecedingNewLines: true,\n        });\n        return this;\n    }\n    remove() {\n        removeChildren({\n            children: [this],\n            removePrecedingNewLines: true,\n            removePrecedingSpaces: true,\n        });\n    }\n    set(structure) {\n        callBaseSet(JsxAttributeBase.prototype, this, structure);\n        if (structure.initializer != null)\n            this.setInitializer(structure.initializer);\n        else if (structure.hasOwnProperty(common.nameof(structure, \"initializer\")))\n            this.removeInitializer();\n        return this;\n    }\n    getStructure() {\n        const initializer = this.getInitializer();\n        return callBaseGetStructure(JsxAttributeBase.prototype, this, {\n            kind: exports.StructureKind.JsxAttribute,\n            initializer: initializer === null || initializer === void 0 ? void 0 : initializer.getText(),\n        });\n    }\n}\n\nconst createBase$3 = (ctor) => JsxTagNamedNode(ctor);\nconst JsxClosingElementBase = createBase$3(Node);\nclass JsxClosingElement extends JsxClosingElementBase {\n}\n\nclass JsxClosingFragment extends Expression {\n}\n\nconst JsxElementBase = PrimaryExpression;\nclass JsxElement extends JsxElementBase {\n    getJsxChildren() {\n        return this.compilerNode.children.map(c => this._getNodeFromCompilerNode(c));\n    }\n    getOpeningElement() {\n        return this._getNodeFromCompilerNode(this.compilerNode.openingElement);\n    }\n    getClosingElement() {\n        return this._getNodeFromCompilerNode(this.compilerNode.closingElement);\n    }\n    setBodyText(textOrWriterFunction) {\n        const newText = getBodyText(this._getWriterWithIndentation(), textOrWriterFunction);\n        setText(this, newText);\n        return this;\n    }\n    setBodyTextInline(textOrWriterFunction) {\n        const writer = this._getWriterWithQueuedChildIndentation();\n        printTextFromStringOrWriter(writer, textOrWriterFunction);\n        if (writer.isLastNewLine()) {\n            writer.setIndentationLevel(Math.max(0, this.getIndentationLevel() - 1));\n            writer.write(\"\");\n        }\n        setText(this, writer.toString());\n        return this;\n    }\n    set(structure) {\n        callBaseSet(JsxElementBase.prototype, this, structure);\n        if (structure.attributes != null) {\n            const openingElement = this.getOpeningElement();\n            openingElement.getAttributes().forEach(a => a.remove());\n            openingElement.addAttributes(structure.attributes);\n        }\n        if (structure.children != null)\n            throw new common.errors.NotImplementedError(\"Setting JSX children is currently not implemented. Please open an issue if you need this.\");\n        if (structure.bodyText != null)\n            this.setBodyText(structure.bodyText);\n        else if (structure.hasOwnProperty(common.nameof(structure, \"bodyText\")))\n            this.setBodyTextInline(\"\");\n        if (structure.name != null) {\n            this.getOpeningElement().getTagNameNode().replaceWithText(structure.name);\n            this.getClosingElement().getTagNameNode().replaceWithText(structure.name);\n        }\n        return this;\n    }\n    getStructure() {\n        const openingElement = this.getOpeningElement();\n        const structure = callBaseGetStructure(JsxElementBase.prototype, this, {\n            kind: exports.StructureKind.JsxElement,\n            name: openingElement.getTagNameNode().getText(),\n            attributes: openingElement.getAttributes().map(a => a.getStructure()),\n            children: undefined,\n            bodyText: getBodyTextWithoutLeadingIndentation(this),\n        });\n        delete structure.children;\n        return structure;\n    }\n}\nfunction setText(element, newText) {\n    const openingElement = element.getOpeningElement();\n    const closingElement = element.getClosingElement();\n    insertIntoParentTextRange({\n        insertPos: openingElement.getEnd(),\n        newText,\n        parent: element.getChildSyntaxListOrThrow(),\n        replacing: {\n            textLength: closingElement.getStart() - openingElement.getEnd(),\n        },\n    });\n}\n\nconst JsxExpressionBase = ExpressionableNode(DotDotDotTokenableNode(Expression));\nclass JsxExpression extends JsxExpressionBase {\n}\n\nclass JsxFragment extends PrimaryExpression {\n    getJsxChildren() {\n        return this.compilerNode.children.map(c => this._getNodeFromCompilerNode(c));\n    }\n    getOpeningFragment() {\n        return this._getNodeFromCompilerNode(this.compilerNode.openingFragment);\n    }\n    getClosingFragment() {\n        return this._getNodeFromCompilerNode(this.compilerNode.closingFragment);\n    }\n}\n\nconst createBase$2 = (ctor) => JsxAttributedNode(JsxTagNamedNode(ctor));\nconst JsxOpeningElementBase = createBase$2(Expression);\nclass JsxOpeningElement extends JsxOpeningElementBase {\n}\n\nclass JsxOpeningFragment extends Expression {\n}\n\nconst createBase$1 = (ctor) => JsxAttributedNode(JsxTagNamedNode(ctor));\nconst JsxSelfClosingElementBase = createBase$1(PrimaryExpression);\nclass JsxSelfClosingElement extends JsxSelfClosingElementBase {\n    set(structure) {\n        callBaseSet(JsxSelfClosingElementBase.prototype, this, structure);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(JsxSelfClosingElementBase.prototype, this, {\n            kind: exports.StructureKind.JsxSelfClosingElement,\n        });\n    }\n}\n\nconst JsxSpreadAttributeBase = ExpressionedNode(Node);\nclass JsxSpreadAttribute extends JsxSpreadAttributeBase {\n    remove() {\n        removeChildren({\n            children: [this],\n            removePrecedingNewLines: true,\n            removePrecedingSpaces: true,\n        });\n    }\n    set(structure) {\n        callBaseSet(JsxSpreadAttributeBase.prototype, this, structure);\n        if (structure.expression != null)\n            this.setExpression(structure.expression);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(JsxSpreadAttributeBase.prototype, this, {\n            kind: exports.StructureKind.JsxSpreadAttribute,\n            expression: this.getExpression().getText(),\n        });\n    }\n}\n\nconst JsxTextBase = LiteralLikeNode(Node);\nclass JsxText extends JsxTextBase {\n    containsOnlyTriviaWhiteSpaces() {\n        const oldCompilerNode = this.compilerNode;\n        if (typeof oldCompilerNode.containsOnlyWhiteSpaces === \"boolean\")\n            return oldCompilerNode.containsOnlyWhiteSpaces;\n        return this.compilerNode.containsOnlyTriviaWhiteSpaces;\n    }\n}\n\nconst BigIntLiteralBase = LiteralExpression;\nclass BigIntLiteral extends BigIntLiteralBase {\n    getLiteralValue() {\n        const text = this.compilerNode.text;\n        if (typeof BigInt === \"undefined\")\n            throw new common.errors.InvalidOperationError(\"Runtime environment does not support BigInts. Perhaps work with the text instead?\");\n        const textWithoutN = text.substring(0, text.length - 1);\n        return BigInt(textWithoutN);\n    }\n    setLiteralValue(value) {\n        if (typeof value !== \"bigint\")\n            throw new common.errors.ArgumentTypeError(\"value\", \"bigint\", typeof value);\n        replaceNodeText({\n            sourceFile: this._sourceFile,\n            start: this.getStart(),\n            replacingLength: this.getWidth(),\n            newText: value.toString() + \"n\",\n        });\n        return this;\n    }\n}\n\nconst TrueLiteralBase = PrimaryExpression;\nclass TrueLiteral extends TrueLiteralBase {\n    getLiteralValue() {\n        return getLiteralValue(this);\n    }\n    setLiteralValue(value) {\n        return setLiteralValue(this, value);\n    }\n}\nconst FalseLiteralBase = PrimaryExpression;\nclass FalseLiteral extends FalseLiteralBase {\n    getLiteralValue() {\n        return getLiteralValue(this);\n    }\n    setLiteralValue(value) {\n        return setLiteralValue(this, value);\n    }\n}\nfunction setLiteralValue(node, value) {\n    if (getLiteralValue(node) === value)\n        return node;\n    const parent = node.getParentSyntaxList() || node.getParentOrThrow();\n    const index = node.getChildIndex();\n    node.replaceWithText(value ? \"true\" : \"false\");\n    return parent.getChildAtIndex(index);\n}\nfunction getLiteralValue(node) {\n    return node.getKind() === common.SyntaxKind.TrueKeyword;\n}\n\nconst NullLiteralBase = PrimaryExpression;\nclass NullLiteral extends NullLiteralBase {\n}\n\nconst NumericLiteralBase = LiteralExpression;\nclass NumericLiteral extends NumericLiteralBase {\n    getLiteralValue() {\n        const text = this.compilerNode.text;\n        if (text.indexOf(\".\") >= 0)\n            return parseFloat(text);\n        return parseInt(text, 10);\n    }\n    setLiteralValue(value) {\n        replaceNodeText({\n            sourceFile: this._sourceFile,\n            start: this.getStart(),\n            replacingLength: this.getWidth(),\n            newText: value.toString(10),\n        });\n        return this;\n    }\n}\n\nexports.QuoteKind = void 0;\n(function (QuoteKind) {\n    QuoteKind[\"Single\"] = \"'\";\n    QuoteKind[\"Double\"] = \"\\\"\";\n})(exports.QuoteKind || (exports.QuoteKind = {}));\n\nconst RegularExpressionLiteralBase = LiteralExpression;\nclass RegularExpressionLiteral extends RegularExpressionLiteralBase {\n    getLiteralValue() {\n        const pattern = /^\\/(.*)\\/([^\\/]*)$/;\n        const text = this.compilerNode.text;\n        const matches = pattern.exec(text);\n        return new RegExp(matches[1], matches[2]);\n    }\n    setLiteralValue(regExpOrPattern, flags) {\n        let pattern;\n        if (typeof regExpOrPattern === \"string\")\n            pattern = regExpOrPattern;\n        else {\n            pattern = regExpOrPattern.source;\n            flags = regExpOrPattern.flags;\n        }\n        replaceNodeText({\n            sourceFile: this._sourceFile,\n            start: this.getStart(),\n            replacingLength: this.getWidth(),\n            newText: `/${pattern}/${flags || \"\"}`,\n        });\n        return this;\n    }\n}\n\nconst StringLiteralBase = LiteralExpression;\nclass StringLiteral extends StringLiteralBase {\n    getLiteralValue() {\n        return this.compilerNode.text;\n    }\n    setLiteralValue(value) {\n        replaceNodeText({\n            sourceFile: this._sourceFile,\n            start: this.getStart() + 1,\n            replacingLength: this.getWidth() - 2,\n            newText: common.StringUtils.escapeForWithinString(value, this.getQuoteKind()),\n        });\n        return this;\n    }\n    getQuoteKind() {\n        return this.getText()[0] === \"'\" ? exports.QuoteKind.Single : exports.QuoteKind.Double;\n    }\n}\n\nconst NoSubstitutionTemplateLiteralBase = LiteralExpression;\nclass NoSubstitutionTemplateLiteral extends NoSubstitutionTemplateLiteralBase {\n    getLiteralValue() {\n        return this.compilerNode.text;\n    }\n    setLiteralValue(value) {\n        const childIndex = this.getChildIndex();\n        const parent = this.getParentSyntaxList() || this.getParentOrThrow();\n        replaceNodeText({\n            sourceFile: this._sourceFile,\n            start: this.getStart() + 1,\n            replacingLength: this.getWidth() - 2,\n            newText: value,\n        });\n        return parent.getChildAtIndex(childIndex);\n    }\n}\n\nclass TaggedTemplateExpression extends MemberExpression {\n    getTag() {\n        return this._getNodeFromCompilerNode(this.compilerNode.tag);\n    }\n    getTemplate() {\n        return this._getNodeFromCompilerNode(this.compilerNode.template);\n    }\n    removeTag() {\n        var _a;\n        const parent = (_a = this.getParentSyntaxList()) !== null && _a !== void 0 ? _a : this.getParentOrThrow();\n        const index = this.getChildIndex();\n        const template = this.getTemplate();\n        insertIntoParentTextRange({\n            customMappings: (newParent, newSourceFile) => [{ currentNode: template, newNode: newParent.getChildren(newSourceFile)[index] }],\n            parent,\n            insertPos: this.getStart(),\n            newText: this.getTemplate().getText(),\n            replacing: {\n                textLength: this.getWidth(),\n                nodes: [this],\n            },\n        });\n        return parent.getChildAtIndex(index);\n    }\n}\n\nconst TemplateExpressionBase = PrimaryExpression;\nclass TemplateExpression extends TemplateExpressionBase {\n    getHead() {\n        return this._getNodeFromCompilerNode(this.compilerNode.head);\n    }\n    getTemplateSpans() {\n        return this.compilerNode.templateSpans.map(s => this._getNodeFromCompilerNode(s));\n    }\n    setLiteralValue(value) {\n        var _a;\n        const childIndex = this.getChildIndex();\n        const parent = (_a = this.getParentSyntaxList()) !== null && _a !== void 0 ? _a : this.getParentOrThrow();\n        replaceNodeText({\n            sourceFile: this._sourceFile,\n            start: this.getStart() + 1,\n            replacingLength: this.getWidth() - 2,\n            newText: value,\n        });\n        return parent.getChildAtIndex(childIndex);\n    }\n}\n\nconst TemplateHeadBase = LiteralLikeNode(Node);\nclass TemplateHead extends TemplateHeadBase {\n}\n\nconst TemplateMiddleBase = LiteralLikeNode(Node);\nclass TemplateMiddle extends TemplateMiddleBase {\n}\n\nconst TemplateSpanBase = ExpressionedNode(Node);\nclass TemplateSpan extends TemplateSpanBase {\n    getLiteral() {\n        return this._getNodeFromCompilerNode(this.compilerNode.literal);\n    }\n}\n\nconst TemplateTailBase = LiteralLikeNode(Node);\nclass TemplateTail extends TemplateTailBase {\n}\n\nfunction CommonIdentifierBase(Base) {\n    return class extends Base {\n        getText() {\n            return this.compilerNode.text;\n        }\n        getDefinitionNodes() {\n            return this.getDefinitions().map(d => d.getDeclarationNode()).filter(d => d != null);\n        }\n        getDefinitions() {\n            return this._context.languageService.getDefinitions(this);\n        }\n    };\n}\n\nconst ComputedPropertyNameBase = ExpressionedNode(Node);\nclass ComputedPropertyName extends ComputedPropertyNameBase {\n}\n\nconst IdentifierBase = CommonIdentifierBase(ReferenceFindableNode(RenameableNode(PrimaryExpression)));\nclass Identifier extends IdentifierBase {\n    getImplementations() {\n        return this._context.languageService.getImplementations(this);\n    }\n}\n\nconst PrivateIdentifierBase = CommonIdentifierBase(ReferenceFindableNode(RenameableNode(Node)));\nclass PrivateIdentifier extends PrivateIdentifierBase {\n}\n\nclass QualifiedName extends Node {\n    getLeft() {\n        return this._getNodeFromCompilerNode(this.compilerNode.left);\n    }\n    getRight() {\n        return this._getNodeFromCompilerNode(this.compilerNode.right);\n    }\n}\n\nconst createBase = (ctor) => ExportGetableNode(ExclamationTokenableNode(TypedNode(InitializerExpressionableNode(BindingNamedNode(ctor)))));\nconst VariableDeclarationBase = createBase(Node);\nclass VariableDeclaration extends VariableDeclarationBase {\n    remove() {\n        const parent = this.getParentOrThrow();\n        switch (parent.getKind()) {\n            case common.SyntaxKind.VariableDeclarationList:\n                removeFromDeclarationList(this);\n                break;\n            case common.SyntaxKind.CatchClause:\n                removeFromCatchClause(this);\n                break;\n            default:\n                throw new common.errors.NotImplementedError(`Not implemented for syntax kind: ${parent.getKindName()}`);\n        }\n        function removeFromDeclarationList(node) {\n            const variableStatement = parent.getParentIfKindOrThrow(common.SyntaxKind.VariableStatement);\n            const declarations = variableStatement.getDeclarations();\n            if (declarations.length === 1)\n                variableStatement.remove();\n            else\n                removeCommaSeparatedChild(node);\n        }\n        function removeFromCatchClause(node) {\n            removeChildren({\n                children: [\n                    node.getPreviousSiblingIfKindOrThrow(common.SyntaxKind.OpenParenToken),\n                    node,\n                    node.getNextSiblingIfKindOrThrow(common.SyntaxKind.CloseParenToken),\n                ],\n                removePrecedingSpaces: true,\n            });\n        }\n    }\n    getVariableStatementOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getVariableStatement(), \"Expected the grandparent to be a variable statement.\");\n    }\n    getVariableStatement() {\n        const grandParent = this.getParentOrThrow().getParentOrThrow();\n        return Node.isVariableStatement(grandParent) ? grandParent : undefined;\n    }\n    set(structure) {\n        callBaseSet(VariableDeclarationBase.prototype, this, structure);\n        return this;\n    }\n    getStructure() {\n        return callBaseGetStructure(VariableDeclarationBase.prototype, this, {\n            kind: exports.StructureKind.VariableDeclaration,\n        });\n    }\n}\n\nconst VariableDeclarationListBase = ModifierableNode(Node);\nclass VariableDeclarationList extends VariableDeclarationListBase {\n    getDeclarations() {\n        return this.compilerNode.declarations.map(d => this._getNodeFromCompilerNode(d));\n    }\n    getDeclarationKind() {\n        const nodeFlags = this.compilerNode.flags;\n        if (nodeFlags & common.ts.NodeFlags.Let)\n            return exports.VariableDeclarationKind.Let;\n        else if (nodeFlags & common.ts.NodeFlags.Const)\n            return exports.VariableDeclarationKind.Const;\n        else\n            return exports.VariableDeclarationKind.Var;\n    }\n    getDeclarationKindKeyword() {\n        const declarationKind = this.getDeclarationKind();\n        switch (declarationKind) {\n            case exports.VariableDeclarationKind.Const:\n                return this.getFirstChildByKindOrThrow(common.SyntaxKind.ConstKeyword);\n            case exports.VariableDeclarationKind.Let:\n                return this.getFirstChildByKindOrThrow(common.SyntaxKind.LetKeyword);\n            case exports.VariableDeclarationKind.Var:\n                return this.getFirstChildByKindOrThrow(common.SyntaxKind.VarKeyword);\n            default:\n                return common.errors.throwNotImplementedForNeverValueError(declarationKind);\n        }\n    }\n    setDeclarationKind(type) {\n        if (this.getDeclarationKind() === type)\n            return this;\n        const keyword = this.getDeclarationKindKeyword();\n        insertIntoParentTextRange({\n            insertPos: keyword.getStart(),\n            newText: type,\n            parent: this,\n            replacing: {\n                textLength: keyword.getWidth(),\n            },\n        });\n        return this;\n    }\n    addDeclaration(structure) {\n        return this.addDeclarations([structure])[0];\n    }\n    addDeclarations(structures) {\n        return this.insertDeclarations(this.getDeclarations().length, structures);\n    }\n    insertDeclaration(index, structure) {\n        return this.insertDeclarations(index, [structure])[0];\n    }\n    insertDeclarations(index, structures) {\n        const writer = this._getWriterWithQueuedChildIndentation();\n        const structurePrinter = new CommaSeparatedStructuresPrinter(this._context.structurePrinterFactory.forVariableDeclaration());\n        const originalChildrenCount = this.compilerNode.declarations.length;\n        index = verifyAndGetIndex(index, originalChildrenCount);\n        structurePrinter.printText(writer, structures);\n        insertIntoCommaSeparatedNodes({\n            parent: this.getFirstChildByKindOrThrow(common.SyntaxKind.SyntaxList),\n            currentNodes: this.getDeclarations(),\n            insertIndex: index,\n            newText: writer.toString(),\n            useTrailingCommas: false,\n        });\n        return getNodesToReturn(originalChildrenCount, this.getDeclarations(), index, false);\n    }\n}\n\nclass Signature {\n    constructor(context, signature) {\n        this._context = context;\n        this._compilerSignature = signature;\n    }\n    get compilerSignature() {\n        return this._compilerSignature;\n    }\n    getTypeParameters() {\n        const typeParameters = this.compilerSignature.typeParameters || [];\n        return typeParameters.map(t => this._context.compilerFactory.getTypeParameter(t));\n    }\n    getParameters() {\n        return this.compilerSignature.parameters.map(p => this._context.compilerFactory.getSymbol(p));\n    }\n    getReturnType() {\n        return this._context.compilerFactory.getType(this.compilerSignature.getReturnType());\n    }\n    getDocumentationComments() {\n        const docs = this.compilerSignature.getDocumentationComment(this._context.typeChecker.compilerObject);\n        return docs.map(d => this._context.compilerFactory.getSymbolDisplayPart(d));\n    }\n    getJsDocTags() {\n        const tags = this.compilerSignature.getJsDocTags();\n        return tags.map(t => this._context.compilerFactory.getJSDocTagInfo(t));\n    }\n    getDeclaration() {\n        const { compilerFactory } = this._context;\n        const compilerSignatureDeclaration = this.compilerSignature.getDeclaration();\n        return compilerFactory.getNodeFromCompilerNode(compilerSignatureDeclaration, compilerFactory.getSourceFileForNode(compilerSignatureDeclaration));\n    }\n}\n\nclass Symbol {\n    constructor(context, symbol) {\n        this._context = context;\n        this._compilerSymbol = symbol;\n        this.getValueDeclaration();\n        this.getDeclarations();\n    }\n    get compilerSymbol() {\n        return this._compilerSymbol;\n    }\n    getName() {\n        return this.compilerSymbol.getName();\n    }\n    getEscapedName() {\n        return this.compilerSymbol.getEscapedName();\n    }\n    getAliasedSymbolOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getAliasedSymbol(), \"Expected to find an aliased symbol.\");\n    }\n    getImmediatelyAliasedSymbol() {\n        return this._context.typeChecker.getImmediatelyAliasedSymbol(this);\n    }\n    getImmediatelyAliasedSymbolOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getImmediatelyAliasedSymbol(), \"Expected to find an immediately aliased symbol.\");\n    }\n    getAliasedSymbol() {\n        return this._context.typeChecker.getAliasedSymbol(this);\n    }\n    getExportSymbol() {\n        return this._context.typeChecker.getExportSymbolOfSymbol(this);\n    }\n    isAlias() {\n        return (this.getFlags() & common.SymbolFlags.Alias) === common.SymbolFlags.Alias;\n    }\n    isOptional() {\n        return (this.getFlags() & common.SymbolFlags.Optional) === common.SymbolFlags.Optional;\n    }\n    getFlags() {\n        return this.compilerSymbol.getFlags();\n    }\n    hasFlags(flags) {\n        return (this.compilerSymbol.flags & flags) === flags;\n    }\n    getValueDeclarationOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getValueDeclaration(), () => `Expected to find the value declaration of symbol '${this.getName()}'.`);\n    }\n    getValueDeclaration() {\n        const declaration = this.compilerSymbol.valueDeclaration;\n        if (declaration == null)\n            return undefined;\n        return this._context.compilerFactory.getNodeFromCompilerNode(declaration, this._context.compilerFactory.getSourceFileForNode(declaration));\n    }\n    getDeclarations() {\n        var _a;\n        return ((_a = this.compilerSymbol.declarations) !== null && _a !== void 0 ? _a : [])\n            .map(d => this._context.compilerFactory.getNodeFromCompilerNode(d, this._context.compilerFactory.getSourceFileForNode(d)));\n    }\n    getExportOrThrow(name) {\n        return common.errors.throwIfNullOrUndefined(this.getExport(name), `Expected to find export with name: ${name}`);\n    }\n    getExport(name) {\n        if (this.compilerSymbol.exports == null)\n            return undefined;\n        const tsSymbol = this.compilerSymbol.exports.get(common.ts.escapeLeadingUnderscores(name));\n        return tsSymbol == null ? undefined : this._context.compilerFactory.getSymbol(tsSymbol);\n    }\n    getExports() {\n        if (this.compilerSymbol.exports == null)\n            return [];\n        return common.ArrayUtils.from(this.compilerSymbol.exports.values()).map(symbol => this._context.compilerFactory.getSymbol(symbol));\n    }\n    getGlobalExportOrThrow(name) {\n        return common.errors.throwIfNullOrUndefined(this.getGlobalExport(name), `Expected to find global export with name: ${name}`);\n    }\n    getGlobalExport(name) {\n        if (this.compilerSymbol.globalExports == null)\n            return undefined;\n        const tsSymbol = this.compilerSymbol.globalExports.get(common.ts.escapeLeadingUnderscores(name));\n        return tsSymbol == null ? undefined : this._context.compilerFactory.getSymbol(tsSymbol);\n    }\n    getGlobalExports() {\n        if (this.compilerSymbol.globalExports == null)\n            return [];\n        return common.ArrayUtils.from(this.compilerSymbol.globalExports.values()).map(symbol => this._context.compilerFactory.getSymbol(symbol));\n    }\n    getMemberOrThrow(name) {\n        return common.errors.throwIfNullOrUndefined(this.getMember(name), `Expected to find member with name: ${name}`);\n    }\n    getMember(name) {\n        if (this.compilerSymbol.members == null)\n            return undefined;\n        const tsSymbol = this.compilerSymbol.members.get(common.ts.escapeLeadingUnderscores(name));\n        return tsSymbol == null ? undefined : this._context.compilerFactory.getSymbol(tsSymbol);\n    }\n    getMembers() {\n        if (this.compilerSymbol.members == null)\n            return [];\n        return common.ArrayUtils.from(this.compilerSymbol.members.values()).map(symbol => this._context.compilerFactory.getSymbol(symbol));\n    }\n    getDeclaredType() {\n        return this._context.typeChecker.getDeclaredTypeOfSymbol(this);\n    }\n    getTypeAtLocation(node) {\n        return this._context.typeChecker.getTypeOfSymbolAtLocation(this, node);\n    }\n    getFullyQualifiedName() {\n        return this._context.typeChecker.getFullyQualifiedName(this);\n    }\n    getJsDocTags() {\n        return this.compilerSymbol.getJsDocTags(this._context.typeChecker.compilerObject)\n            .map(info => new JSDocTagInfo(info));\n    }\n}\n\nclass TextSpan {\n    constructor(compilerObject) {\n        this._compilerObject = compilerObject;\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getStart() {\n        return this.compilerObject.start;\n    }\n    getEnd() {\n        return this.compilerObject.start + this.compilerObject.length;\n    }\n    getLength() {\n        return this.compilerObject.length;\n    }\n}\n\nclass TextChange {\n    constructor(compilerObject) {\n        this._compilerObject = compilerObject;\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getSpan() {\n        return new TextSpan(this.compilerObject.span);\n    }\n    getNewText() {\n        return this.compilerObject.newText;\n    }\n}\n__decorate([\n    common.Memoize\n], TextChange.prototype, \"getSpan\", null);\n\nclass FileTextChanges {\n    constructor(context, compilerObject) {\n        this._context = context;\n        this._compilerObject = compilerObject;\n        const file = context.compilerFactory\n            .addOrGetSourceFileFromFilePath(context.fileSystemWrapper.getStandardizedAbsolutePath(compilerObject.fileName), {\n            markInProject: false,\n            scriptKind: undefined,\n        });\n        this._existingFileExists = file != null;\n        if (!compilerObject.isNewFile)\n            this._sourceFile = file;\n    }\n    getFilePath() {\n        return this._compilerObject.fileName;\n    }\n    getSourceFile() {\n        return this._sourceFile;\n    }\n    getTextChanges() {\n        return this._compilerObject.textChanges.map(c => new TextChange(c));\n    }\n    applyChanges(options = {}) {\n        if (this._isApplied)\n            return;\n        if (this.isNewFile() && this._existingFileExists && !options.overwrite) {\n            throw new common.errors.InvalidOperationError(`Cannot apply file text change for creating a new file when the `\n                + `file exists at path ${this.getFilePath()}. Did you mean to provide the overwrite option?`);\n        }\n        let file;\n        if (this.isNewFile())\n            file = this._context.project.createSourceFile(this.getFilePath(), \"\", { overwrite: options.overwrite });\n        else\n            file = this.getSourceFile();\n        if (file == null) {\n            throw new common.errors.InvalidOperationError(`Cannot apply file text change to modify existing file `\n                + `that doesn't exist at path: ${this.getFilePath()}`);\n        }\n        file.applyTextChanges(this.getTextChanges());\n        file._markAsInProject();\n        this._isApplied = true;\n        return this;\n    }\n    isNewFile() {\n        return !!this._compilerObject.isNewFile;\n    }\n}\n__decorate([\n    common.Memoize\n], FileTextChanges.prototype, \"getTextChanges\", null);\n\nclass CodeAction {\n    constructor(context, compilerObject) {\n        this._context = context;\n        this._compilerObject = compilerObject;\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getDescription() {\n        return this.compilerObject.description;\n    }\n    getChanges() {\n        return this.compilerObject.changes.map(change => new FileTextChanges(this._context, change));\n    }\n}\n\nclass CodeFixAction extends CodeAction {\n    getFixName() {\n        return this.compilerObject.fixName;\n    }\n    getFixId() {\n        return this.compilerObject.fixId;\n    }\n    getFixAllDescription() {\n        return this.compilerObject.fixAllDescription;\n    }\n}\n\nclass CombinedCodeActions {\n    constructor(context, compilerObject) {\n        this._context = context;\n        this._compilerObject = compilerObject;\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getChanges() {\n        return this.compilerObject.changes.map(change => new FileTextChanges(this._context, change));\n    }\n    applyChanges(options) {\n        for (const change of this.getChanges())\n            change.applyChanges(options);\n        return this;\n    }\n}\n__decorate([\n    common.Memoize\n], CombinedCodeActions.prototype, \"getChanges\", null);\n\nclass DocumentSpan {\n    constructor(context, compilerObject) {\n        this._context = context;\n        this._compilerObject = compilerObject;\n        this._sourceFile = this._context.compilerFactory\n            .addOrGetSourceFileFromFilePath(context.fileSystemWrapper.getStandardizedAbsolutePath(this.compilerObject.fileName), {\n            markInProject: false,\n            scriptKind: undefined,\n        });\n        this._sourceFile._doActionPreNextModification(() => this.getNode());\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getSourceFile() {\n        return this._sourceFile;\n    }\n    getTextSpan() {\n        return new TextSpan(this.compilerObject.textSpan);\n    }\n    getNode() {\n        const textSpan = this.getTextSpan();\n        const sourceFile = this.getSourceFile();\n        const start = textSpan.getStart();\n        const width = textSpan.getEnd();\n        return findBestMatchingNode();\n        function findBestMatchingNode() {\n            let bestNode;\n            sourceFile._context.compilerFactory.forgetNodesCreatedInBlock(remember => {\n                let foundNode;\n                let nextNode = sourceFile;\n                while (nextNode != null) {\n                    if (foundNode == null)\n                        bestNode = nextNode;\n                    if (nextNode.getStart() === start && nextNode.getWidth() === width)\n                        bestNode = foundNode = nextNode;\n                    else if (foundNode != null)\n                        break;\n                    nextNode = nextNode.getChildAtPos(start);\n                }\n                if (bestNode != null)\n                    remember(bestNode);\n            });\n            return bestNode;\n        }\n    }\n    getOriginalTextSpan() {\n        const { originalTextSpan } = this.compilerObject;\n        return originalTextSpan == null ? undefined : new TextSpan(originalTextSpan);\n    }\n    getOriginalFileName() {\n        return this.compilerObject.originalFileName;\n    }\n}\n__decorate([\n    common.Memoize\n], DocumentSpan.prototype, \"getTextSpan\", null);\n__decorate([\n    common.Memoize\n], DocumentSpan.prototype, \"getNode\", null);\n__decorate([\n    common.Memoize\n], DocumentSpan.prototype, \"getOriginalTextSpan\", null);\n\nclass DefinitionInfo extends DocumentSpan {\n    constructor(context, compilerObject) {\n        super(context, compilerObject);\n        this.getSourceFile()._doActionPreNextModification(() => this.getDeclarationNode());\n    }\n    getKind() {\n        return this.compilerObject.kind;\n    }\n    getName() {\n        return this.compilerObject.name;\n    }\n    getContainerKind() {\n        return this.compilerObject.containerKind;\n    }\n    getContainerName() {\n        return this.compilerObject.containerName;\n    }\n    getDeclarationNode() {\n        if (this.getKind() === \"module\" && this.getTextSpan().getLength() === this.getSourceFile().getFullWidth())\n            return this.getSourceFile();\n        const start = this.getTextSpan().getStart();\n        const identifier = findIdentifier(this.getSourceFile());\n        return identifier == null ? undefined : identifier.getParentOrThrow();\n        function findIdentifier(node) {\n            if (node.getKind() === common.SyntaxKind.Identifier && node.getStart() === start)\n                return node;\n            for (const child of node._getChildrenIterator()) {\n                if (child.getPos() <= start && child.getEnd() > start)\n                    return findIdentifier(child);\n            }\n            return undefined;\n        }\n    }\n}\n__decorate([\n    common.Memoize\n], DefinitionInfo.prototype, \"getDeclarationNode\", null);\n\nclass DiagnosticMessageChain {\n    constructor(compilerObject) {\n        this._compilerObject = compilerObject;\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getMessageText() {\n        return this.compilerObject.messageText;\n    }\n    getNext() {\n        const next = this.compilerObject.next;\n        if (next == null)\n            return undefined;\n        if (next instanceof Array)\n            return next.map(n => new DiagnosticMessageChain(n));\n        return [new DiagnosticMessageChain(next)];\n    }\n    getCode() {\n        return this.compilerObject.code;\n    }\n    getCategory() {\n        return this.compilerObject.category;\n    }\n}\n\nclass Diagnostic {\n    constructor(context, compilerObject) {\n        this._context = context;\n        this._compilerObject = compilerObject;\n        this.getSourceFile();\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getSourceFile() {\n        if (this._context == null)\n            return undefined;\n        const file = this.compilerObject.file;\n        return file == null ? undefined : this._context.compilerFactory.getSourceFile(file, { markInProject: false });\n    }\n    getMessageText() {\n        const messageText = this._compilerObject.messageText;\n        if (typeof messageText === \"string\")\n            return messageText;\n        if (this._context == null)\n            return new DiagnosticMessageChain(messageText);\n        else\n            return this._context.compilerFactory.getDiagnosticMessageChain(messageText);\n    }\n    getLineNumber() {\n        const sourceFile = this.getSourceFile();\n        const start = this.getStart();\n        if (sourceFile == null || start == null)\n            return undefined;\n        return common.StringUtils.getLineNumberAtPos(sourceFile.getFullText(), start);\n    }\n    getStart() {\n        return this.compilerObject.start;\n    }\n    getLength() {\n        return this.compilerObject.length;\n    }\n    getCategory() {\n        return this.compilerObject.category;\n    }\n    getCode() {\n        return this.compilerObject.code;\n    }\n    getSource() {\n        return this.compilerObject.source;\n    }\n}\n__decorate([\n    common.Memoize\n], Diagnostic.prototype, \"getSourceFile\", null);\n\nclass DiagnosticWithLocation extends Diagnostic {\n    constructor(context, compilerObject) {\n        super(context, compilerObject);\n    }\n    getLineNumber() {\n        return super.getLineNumber();\n    }\n    getStart() {\n        return super.getStart();\n    }\n    getLength() {\n        return super.getLength();\n    }\n    getSourceFile() {\n        return super.getSourceFile();\n    }\n}\n\nclass OutputFile {\n    constructor(context, compilerObject) {\n        this._compilerObject = compilerObject;\n        this._context = context;\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getFilePath() {\n        return this._context.fileSystemWrapper.getStandardizedAbsolutePath(this.compilerObject.name);\n    }\n    getWriteByteOrderMark() {\n        return this.compilerObject.writeByteOrderMark || false;\n    }\n    getText() {\n        return this.compilerObject.text;\n    }\n}\n\nclass EmitOutput {\n    constructor(context, compilerObject) {\n        this._context = context;\n        this._compilerObject = compilerObject;\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getEmitSkipped() {\n        return this.compilerObject.emitSkipped;\n    }\n    getOutputFiles() {\n        return this.compilerObject.outputFiles.map(f => new OutputFile(this._context, f));\n    }\n}\n__decorate([\n    common.Memoize\n], EmitOutput.prototype, \"getOutputFiles\", null);\n\nclass EmitResult {\n    constructor(context, compilerObject) {\n        this._context = context;\n        this._compilerObject = compilerObject;\n        this.getDiagnostics();\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getEmitSkipped() {\n        return this.compilerObject.emitSkipped;\n    }\n    getDiagnostics() {\n        return this.compilerObject.diagnostics.map(d => this._context.compilerFactory.getDiagnostic(d));\n    }\n}\n__decorate([\n    common.Memoize\n], EmitResult.prototype, \"getDiagnostics\", null);\n\nclass ImplementationLocation extends DocumentSpan {\n    constructor(context, compilerObject) {\n        super(context, compilerObject);\n    }\n    getKind() {\n        return this.compilerObject.kind;\n    }\n    getDisplayParts() {\n        return this.compilerObject.displayParts.map(p => this._context.compilerFactory.getSymbolDisplayPart(p));\n    }\n}\n__decorate([\n    common.Memoize\n], ImplementationLocation.prototype, \"getDisplayParts\", null);\n\nclass MemoryEmitResult extends EmitResult {\n    constructor(context, compilerObject, _files) {\n        super(context, compilerObject);\n        this._files = _files;\n    }\n    getFiles() {\n        return this._files;\n    }\n    saveFiles() {\n        const fileSystem = this._context.fileSystemWrapper;\n        const promises = this._files.map(f => fileSystem.writeFile(f.filePath, f.writeByteOrderMark ? \"\\uFEFF\" + f.text : f.text));\n        return Promise.all(promises);\n    }\n    saveFilesSync() {\n        const fileSystem = this._context.fileSystemWrapper;\n        for (const file of this._files)\n            fileSystem.writeFileSync(file.filePath, file.writeByteOrderMark ? \"\\uFEFF\" + file.text : file.text);\n    }\n}\n\nclass RefactorEditInfo {\n    constructor(context, compilerObject) {\n        this._context = context;\n        this._compilerObject = compilerObject;\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getEdits() {\n        return this.compilerObject.edits.map(edit => new FileTextChanges(this._context, edit));\n    }\n    getRenameFilePath() {\n        return this.compilerObject.renameFilename;\n    }\n    getRenameLocation() {\n        return this.compilerObject.renameLocation;\n    }\n    applyChanges(options) {\n        for (const change of this.getEdits())\n            change.applyChanges(options);\n        return this;\n    }\n}\n__decorate([\n    common.Memoize\n], RefactorEditInfo.prototype, \"getEdits\", null);\n\nclass ReferencedSymbol {\n    constructor(context, compilerObject) {\n        this._context = context;\n        this._compilerObject = compilerObject;\n        this._references = this.compilerObject.references.map(r => context.compilerFactory.getReferencedSymbolEntry(r));\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getDefinition() {\n        return this._context.compilerFactory.getReferencedSymbolDefinitionInfo(this.compilerObject.definition);\n    }\n    getReferences() {\n        return this._references;\n    }\n}\n__decorate([\n    common.Memoize\n], ReferencedSymbol.prototype, \"getDefinition\", null);\n\nclass ReferencedSymbolDefinitionInfo extends DefinitionInfo {\n    constructor(context, compilerObject) {\n        super(context, compilerObject);\n    }\n    getDisplayParts() {\n        return this.compilerObject.displayParts.map(p => this._context.compilerFactory.getSymbolDisplayPart(p));\n    }\n}\n__decorate([\n    common.Memoize\n], ReferencedSymbolDefinitionInfo.prototype, \"getDisplayParts\", null);\n\nclass ReferenceEntry extends DocumentSpan {\n    constructor(context, compilerObject) {\n        super(context, compilerObject);\n    }\n    isWriteAccess() {\n        return this.compilerObject.isWriteAccess;\n    }\n    isInString() {\n        return this.compilerObject.isInString;\n    }\n}\nclass ReferencedSymbolEntry extends ReferenceEntry {\n    constructor(context, compilerObject) {\n        super(context, compilerObject);\n    }\n    isDefinition() {\n        return this.compilerObject.isDefinition;\n    }\n}\n\nclass RenameLocation extends DocumentSpan {\n    getPrefixText() {\n        return this._compilerObject.prefixText;\n    }\n    getSuffixText() {\n        return this._compilerObject.suffixText;\n    }\n}\n\nclass SymbolDisplayPart {\n    constructor(compilerObject) {\n        this._compilerObject = compilerObject;\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    getText() {\n        return this.compilerObject.text;\n    }\n    getKind() {\n        return this.compilerObject.kind;\n    }\n}\n\nclass TypeChecker {\n    constructor(context) {\n        this._context = context;\n    }\n    get compilerObject() {\n        return this._getCompilerObject();\n    }\n    _reset(getTypeChecker) {\n        this._getCompilerObject = getTypeChecker;\n    }\n    getAmbientModules() {\n        return this.compilerObject.getAmbientModules().map(s => this._context.compilerFactory.getSymbol(s));\n    }\n    getApparentType(type) {\n        return this._context.compilerFactory.getType(this.compilerObject.getApparentType(type.compilerType));\n    }\n    getConstantValue(node) {\n        return this.compilerObject.getConstantValue(node.compilerNode);\n    }\n    getFullyQualifiedName(symbol) {\n        return this.compilerObject.getFullyQualifiedName(symbol.compilerSymbol);\n    }\n    getTypeAtLocation(node) {\n        return this._context.compilerFactory.getType(this.compilerObject.getTypeAtLocation(node.compilerNode));\n    }\n    getContextualType(expression) {\n        const contextualType = this.compilerObject.getContextualType(expression.compilerNode);\n        return contextualType == null ? undefined : this._context.compilerFactory.getType(contextualType);\n    }\n    getTypeOfSymbolAtLocation(symbol, node) {\n        return this._context.compilerFactory.getType(this.compilerObject.getTypeOfSymbolAtLocation(symbol.compilerSymbol, node.compilerNode));\n    }\n    getDeclaredTypeOfSymbol(symbol) {\n        return this._context.compilerFactory.getType(this.compilerObject.getDeclaredTypeOfSymbol(symbol.compilerSymbol));\n    }\n    getSymbolAtLocation(node) {\n        const compilerSymbol = this.compilerObject.getSymbolAtLocation(node.compilerNode);\n        return compilerSymbol == null ? undefined : this._context.compilerFactory.getSymbol(compilerSymbol);\n    }\n    getAliasedSymbol(symbol) {\n        if (!symbol.hasFlags(common.SymbolFlags.Alias))\n            return undefined;\n        const tsAliasSymbol = this.compilerObject.getAliasedSymbol(symbol.compilerSymbol);\n        return tsAliasSymbol == null ? undefined : this._context.compilerFactory.getSymbol(tsAliasSymbol);\n    }\n    getImmediatelyAliasedSymbol(symbol) {\n        const tsAliasSymbol = this.compilerObject.getImmediateAliasedSymbol(symbol.compilerSymbol);\n        return tsAliasSymbol == null ? undefined : this._context.compilerFactory.getSymbol(tsAliasSymbol);\n    }\n    getExportSymbolOfSymbol(symbol) {\n        return this._context.compilerFactory.getSymbol(this.compilerObject.getExportSymbolOfSymbol(symbol.compilerSymbol));\n    }\n    getPropertiesOfType(type) {\n        return this.compilerObject.getPropertiesOfType(type.compilerType).map(p => this._context.compilerFactory.getSymbol(p));\n    }\n    getTypeText(type, enclosingNode, typeFormatFlags) {\n        if (typeFormatFlags == null)\n            typeFormatFlags = this._getDefaultTypeFormatFlags(enclosingNode);\n        return this.compilerObject.typeToString(type.compilerType, enclosingNode === null || enclosingNode === void 0 ? void 0 : enclosingNode.compilerNode, typeFormatFlags);\n    }\n    getReturnTypeOfSignature(signature) {\n        return this._context.compilerFactory.getType(this.compilerObject.getReturnTypeOfSignature(signature.compilerSignature));\n    }\n    getSignatureFromNode(node) {\n        const signature = this.compilerObject.getSignatureFromDeclaration(node.compilerNode);\n        return signature == null ? undefined : this._context.compilerFactory.getSignature(signature);\n    }\n    getExportsOfModule(moduleSymbol) {\n        const symbols = this.compilerObject.getExportsOfModule(moduleSymbol.compilerSymbol);\n        return (symbols || []).map(s => this._context.compilerFactory.getSymbol(s));\n    }\n    getExportSpecifierLocalTargetSymbol(exportSpecifier) {\n        const symbol = this.compilerObject.getExportSpecifierLocalTargetSymbol(exportSpecifier.compilerNode);\n        return symbol == null ? undefined : this._context.compilerFactory.getSymbol(symbol);\n    }\n    getResolvedSignature(node) {\n        const resolvedSignature = this.compilerObject.getResolvedSignature(node.compilerNode);\n        if (!resolvedSignature || !resolvedSignature.declaration)\n            return undefined;\n        return this._context.compilerFactory.getSignature(resolvedSignature);\n    }\n    getResolvedSignatureOrThrow(node) {\n        return common.errors.throwIfNullOrUndefined(this.getResolvedSignature(node), \"Signature could not be resolved.\");\n    }\n    getBaseTypeOfLiteralType(type) {\n        return this._context.compilerFactory.getType(this.compilerObject.getBaseTypeOfLiteralType(type.compilerType));\n    }\n    getSymbolsInScope(node, meaning) {\n        return this.compilerObject.getSymbolsInScope(node.compilerNode, meaning)\n            .map(s => this._context.compilerFactory.getSymbol(s));\n    }\n    getTypeArguments(typeReference) {\n        return this.compilerObject.getTypeArguments(typeReference.compilerType)\n            .map(arg => this._context.compilerFactory.getType(arg));\n    }\n    _getDefaultTypeFormatFlags(enclosingNode) {\n        let formatFlags = (common.TypeFormatFlags.UseTypeOfFunction | common.TypeFormatFlags.NoTruncation | common.TypeFormatFlags.UseFullyQualifiedType\n            | common.TypeFormatFlags.WriteTypeArgumentsOfSignature);\n        if (enclosingNode != null && enclosingNode.getKind() === common.SyntaxKind.TypeAliasDeclaration)\n            formatFlags |= common.TypeFormatFlags.InTypeAlias;\n        return formatFlags;\n    }\n}\n\nclass Program {\n    constructor(opts) {\n        this._context = opts.context;\n        this._configFileParsingDiagnostics = opts.configFileParsingDiagnostics;\n        this._typeChecker = new TypeChecker(this._context);\n        this._reset(opts.rootNames, opts.host);\n    }\n    get compilerObject() {\n        return this._getOrCreateCompilerObject();\n    }\n    _isCompilerProgramCreated() {\n        return this._createdCompilerObject != null;\n    }\n    _reset(rootNames, host) {\n        const compilerOptions = this._context.compilerOptions.get();\n        this._getOrCreateCompilerObject = () => {\n            if (this._createdCompilerObject == null) {\n                this._createdCompilerObject = common.ts.createProgram(rootNames, compilerOptions, host, this._oldProgram, this._configFileParsingDiagnostics);\n                delete this._oldProgram;\n            }\n            return this._createdCompilerObject;\n        };\n        if (this._createdCompilerObject != null) {\n            this._oldProgram = this._createdCompilerObject;\n            delete this._createdCompilerObject;\n        }\n        this._typeChecker._reset(() => this.compilerObject.getTypeChecker());\n    }\n    getTypeChecker() {\n        return this._typeChecker;\n    }\n    async emit(options = {}) {\n        if (options.writeFile) {\n            const message = `Cannot specify a ${common.nameof(options, \"writeFile\")} option when emitting asynchrously. `\n                + `Use ${common.nameof(this, \"emitSync\")}() instead.`;\n            throw new common.errors.InvalidOperationError(message);\n        }\n        const { fileSystemWrapper } = this._context;\n        const promises = [];\n        const emitResult = this._emit({\n            writeFile: (filePath, text, writeByteOrderMark) => {\n                promises\n                    .push(fileSystemWrapper.writeFile(fileSystemWrapper.getStandardizedAbsolutePath(filePath), writeByteOrderMark ? \"\\uFEFF\" + text : text));\n            },\n            ...options,\n        });\n        await Promise.all(promises);\n        return new EmitResult(this._context, emitResult);\n    }\n    emitSync(options = {}) {\n        return new EmitResult(this._context, this._emit(options));\n    }\n    emitToMemory(options = {}) {\n        const sourceFiles = [];\n        const { fileSystemWrapper } = this._context;\n        const emitResult = this._emit({\n            writeFile: (filePath, text, writeByteOrderMark) => {\n                sourceFiles.push({\n                    filePath: fileSystemWrapper.getStandardizedAbsolutePath(filePath),\n                    text,\n                    writeByteOrderMark: writeByteOrderMark || false,\n                });\n            },\n            ...options,\n        });\n        return new MemoryEmitResult(this._context, emitResult, sourceFiles);\n    }\n    _emit(options = {}) {\n        const targetSourceFile = options.targetSourceFile != null ? options.targetSourceFile.compilerNode : undefined;\n        const { emitOnlyDtsFiles, customTransformers, writeFile } = options;\n        const cancellationToken = undefined;\n        return this.compilerObject.emit(targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers);\n    }\n    getSyntacticDiagnostics(sourceFile) {\n        const compilerDiagnostics = this.compilerObject.getSyntacticDiagnostics(sourceFile == null ? undefined : sourceFile.compilerNode);\n        return compilerDiagnostics.map(d => this._context.compilerFactory.getDiagnosticWithLocation(d));\n    }\n    getSemanticDiagnostics(sourceFile) {\n        const compilerDiagnostics = this.compilerObject.getSemanticDiagnostics(sourceFile === null || sourceFile === void 0 ? void 0 : sourceFile.compilerNode);\n        return compilerDiagnostics.map(d => this._context.compilerFactory.getDiagnostic(d));\n    }\n    getDeclarationDiagnostics(sourceFile) {\n        const compilerDiagnostics = this.compilerObject.getDeclarationDiagnostics(sourceFile === null || sourceFile === void 0 ? void 0 : sourceFile.compilerNode);\n        return compilerDiagnostics.map(d => this._context.compilerFactory.getDiagnosticWithLocation(d));\n    }\n    getGlobalDiagnostics() {\n        const compilerDiagnostics = this.compilerObject.getGlobalDiagnostics();\n        return compilerDiagnostics.map(d => this._context.compilerFactory.getDiagnostic(d));\n    }\n    getConfigFileParsingDiagnostics() {\n        const compilerDiagnostics = this.compilerObject.getConfigFileParsingDiagnostics();\n        return compilerDiagnostics.map(d => this._context.compilerFactory.getDiagnostic(d));\n    }\n    getEmitModuleResolutionKind() {\n        return common.getEmitModuleResolutionKind(this.compilerObject.getCompilerOptions());\n    }\n    isSourceFileFromExternalLibrary(sourceFile) {\n        return sourceFile.isFromExternalLibrary();\n    }\n}\n\nclass LanguageService {\n    constructor(params) {\n        var _a;\n        this._projectVersion = 0;\n        this._context = params.context;\n        const { languageServiceHost, compilerHost } = common.createHosts({\n            transactionalFileSystem: this._context.fileSystemWrapper,\n            sourceFileContainer: this._context.getSourceFileContainer(),\n            compilerOptions: this._context.compilerOptions,\n            getNewLine: () => this._context.manipulationSettings.getNewLineKindAsString(),\n            getProjectVersion: () => `${this._projectVersion}`,\n            resolutionHost: (_a = params.resolutionHost) !== null && _a !== void 0 ? _a : {},\n            libFolderPath: params.libFolderPath,\n            skipLoadingLibFiles: params.skipLoadingLibFiles,\n        });\n        this._compilerHost = compilerHost;\n        this._compilerObject = common.ts.createLanguageService(languageServiceHost, this._context.compilerFactory.documentRegistry);\n        this._program = new Program({\n            context: this._context,\n            rootNames: Array.from(this._context.compilerFactory.getSourceFilePaths()),\n            host: this._compilerHost,\n            configFileParsingDiagnostics: params.configFileParsingDiagnostics,\n        });\n        this._context.compilerFactory.onSourceFileAdded(sourceFile => {\n            if (sourceFile._isInProject())\n                this._reset();\n        });\n        this._context.compilerFactory.onSourceFileRemoved(() => this._reset());\n    }\n    get compilerObject() {\n        return this._compilerObject;\n    }\n    _reset() {\n        this._projectVersion += 1;\n        this._program._reset(Array.from(this._context.compilerFactory.getSourceFilePaths()), this._compilerHost);\n    }\n    getProgram() {\n        return this._program;\n    }\n    getDefinitions(node) {\n        return this.getDefinitionsAtPosition(node._sourceFile, node.getStart());\n    }\n    getDefinitionsAtPosition(sourceFile, pos) {\n        const results = this.compilerObject.getDefinitionAtPosition(sourceFile.getFilePath(), pos) || [];\n        return results.map(info => this._context.compilerFactory.getDefinitionInfo(info));\n    }\n    getImplementations(node) {\n        return this.getImplementationsAtPosition(node._sourceFile, node.getStart());\n    }\n    getImplementationsAtPosition(sourceFile, pos) {\n        const results = this.compilerObject.getImplementationAtPosition(sourceFile.getFilePath(), pos) || [];\n        return results.map(location => new ImplementationLocation(this._context, location));\n    }\n    findReferences(node) {\n        return this.findReferencesAtPosition(node._sourceFile, node.getStart());\n    }\n    findReferencesAsNodes(node) {\n        const referencedSymbols = this.findReferences(node);\n        return Array.from(getReferencingNodes());\n        function* getReferencingNodes() {\n            for (const referencedSymbol of referencedSymbols) {\n                const isAlias = referencedSymbol.getDefinition().getKind() === common.ts.ScriptElementKind.alias;\n                const references = referencedSymbol.getReferences();\n                for (let i = 0; i < references.length; i++) {\n                    const reference = references[i];\n                    if (isAlias || !reference.isDefinition() || i > 0)\n                        yield reference.getNode();\n                }\n            }\n        }\n    }\n    findReferencesAtPosition(sourceFile, pos) {\n        const results = this.compilerObject.findReferences(sourceFile.getFilePath(), pos) || [];\n        return results.map(s => this._context.compilerFactory.getReferencedSymbol(s));\n    }\n    findRenameLocations(node, options = {}) {\n        const usePrefixAndSuffixText = options.usePrefixAndSuffixText == null\n            ? this._context.manipulationSettings.getUsePrefixAndSuffixTextForRename()\n            : options.usePrefixAndSuffixText;\n        const renameLocations = this.compilerObject.findRenameLocations(node._sourceFile.getFilePath(), node.getStart(), options.renameInStrings || false, options.renameInComments || false, usePrefixAndSuffixText) || [];\n        return renameLocations.map(l => new RenameLocation(this._context, l));\n    }\n    getSuggestionDiagnostics(filePathOrSourceFile) {\n        const filePath = this._getFilePathFromFilePathOrSourceFile(filePathOrSourceFile);\n        const suggestionDiagnostics = this.compilerObject.getSuggestionDiagnostics(filePath);\n        return suggestionDiagnostics.map(d => this._context.compilerFactory.getDiagnosticWithLocation(d));\n    }\n    getFormattingEditsForRange(filePath, range, formatSettings) {\n        return (this.compilerObject.getFormattingEditsForRange(filePath, range[0], range[1], this._getFilledSettings(formatSettings)) || []).map(e => new TextChange(e));\n    }\n    getFormattingEditsForDocument(filePath, formatSettings) {\n        const standardizedFilePath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(filePath);\n        return (this.compilerObject.getFormattingEditsForDocument(standardizedFilePath, this._getFilledSettings(formatSettings)) || [])\n            .map(e => new TextChange(e));\n    }\n    getFormattedDocumentText(filePath, formatSettings) {\n        const standardizedFilePath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(filePath);\n        const sourceFile = this._context.compilerFactory.getSourceFileFromCacheFromFilePath(standardizedFilePath);\n        if (sourceFile == null)\n            throw new common.errors.FileNotFoundError(standardizedFilePath);\n        formatSettings = this._getFilledSettings(formatSettings);\n        const formattingEdits = this.getFormattingEditsForDocument(standardizedFilePath, formatSettings);\n        let newText = getTextFromTextChanges(sourceFile, formattingEdits);\n        const newLineChar = formatSettings.newLineCharacter;\n        if (formatSettings.ensureNewLineAtEndOfFile && !newText.endsWith(newLineChar))\n            newText += newLineChar;\n        return newText.replace(/\\r?\\n/g, newLineChar);\n    }\n    getEmitOutput(filePathOrSourceFile, emitOnlyDtsFiles) {\n        const filePath = this._getFilePathFromFilePathOrSourceFile(filePathOrSourceFile);\n        const compilerObject = this.compilerObject;\n        return new EmitOutput(this._context, getCompilerEmitOutput());\n        function getCompilerEmitOutput() {\n            const program = compilerObject.getProgram();\n            if (program == null || program.getSourceFile(filePath) == null)\n                return { emitSkipped: true, outputFiles: [] };\n            return compilerObject.getEmitOutput(filePath, emitOnlyDtsFiles);\n        }\n    }\n    getIdentationAtPosition(filePathOrSourceFile, position, settings) {\n        const filePath = this._getFilePathFromFilePathOrSourceFile(filePathOrSourceFile);\n        if (settings == null)\n            settings = this._context.manipulationSettings.getEditorSettings();\n        else\n            fillDefaultEditorSettings(settings, this._context.manipulationSettings);\n        return this.compilerObject.getIndentationAtPosition(filePath, position, settings);\n    }\n    organizeImports(filePathOrSourceFile, formatSettings = {}, userPreferences = {}) {\n        const scope = {\n            type: \"file\",\n            fileName: this._getFilePathFromFilePathOrSourceFile(filePathOrSourceFile),\n        };\n        return this.compilerObject.organizeImports(scope, this._getFilledSettings(formatSettings), this._getFilledUserPreferences(userPreferences))\n            .map(fileTextChanges => new FileTextChanges(this._context, fileTextChanges));\n    }\n    getEditsForRefactor(filePathOrSourceFile, formatSettings, positionOrRange, refactorName, actionName, preferences = {}) {\n        const filePath = this._getFilePathFromFilePathOrSourceFile(filePathOrSourceFile);\n        const position = typeof positionOrRange === \"number\" ? positionOrRange : { pos: positionOrRange.getPos(), end: positionOrRange.getEnd() };\n        const compilerObject = this.compilerObject.getEditsForRefactor(filePath, this._getFilledSettings(formatSettings), position, refactorName, actionName, this._getFilledUserPreferences(preferences));\n        return compilerObject != null ? new RefactorEditInfo(this._context, compilerObject) : undefined;\n    }\n    getCombinedCodeFix(filePathOrSourceFile, fixId, formatSettings = {}, preferences = {}) {\n        const compilerResult = this.compilerObject.getCombinedCodeFix({\n            type: \"file\",\n            fileName: this._getFilePathFromFilePathOrSourceFile(filePathOrSourceFile),\n        }, fixId, this._getFilledSettings(formatSettings), this._getFilledUserPreferences(preferences || {}));\n        return new CombinedCodeActions(this._context, compilerResult);\n    }\n    getCodeFixesAtPosition(filePathOrSourceFile, start, end, errorCodes, formatOptions = {}, preferences = {}) {\n        const filePath = this._getFilePathFromFilePathOrSourceFile(filePathOrSourceFile);\n        const compilerResult = this.compilerObject.getCodeFixesAtPosition(filePath, start, end, errorCodes, this._getFilledSettings(formatOptions), this._getFilledUserPreferences(preferences || {}));\n        return compilerResult.map(compilerObject => new CodeFixAction(this._context, compilerObject));\n    }\n    _getFilePathFromFilePathOrSourceFile(filePathOrSourceFile) {\n        const filePath = typeof filePathOrSourceFile === \"string\"\n            ? this._context.fileSystemWrapper.getStandardizedAbsolutePath(filePathOrSourceFile)\n            : filePathOrSourceFile.getFilePath();\n        if (!this._context.compilerFactory.containsSourceFileAtPath(filePath))\n            throw new common.errors.FileNotFoundError(filePath);\n        return filePath;\n    }\n    _getFilledSettings(settings) {\n        if (settings[\"_filled\"])\n            return settings;\n        settings = common.ObjectUtils.assign(this._context.getFormatCodeSettings(), settings);\n        fillDefaultFormatCodeSettings(settings, this._context.manipulationSettings);\n        settings[\"_filled\"] = true;\n        return settings;\n    }\n    _getFilledUserPreferences(userPreferences) {\n        return common.ObjectUtils.assign(this._context.getUserPreferences(), userPreferences);\n    }\n}\n\nclass Type {\n    constructor(context, type) {\n        this._context = context;\n        this._compilerType = type;\n    }\n    get compilerType() {\n        return this._compilerType;\n    }\n    getText(enclosingNode, typeFormatFlags) {\n        return this._context.typeChecker.getTypeText(this, enclosingNode, typeFormatFlags);\n    }\n    getAliasSymbol() {\n        return this.compilerType.aliasSymbol == null ? undefined : this._context.compilerFactory.getSymbol(this.compilerType.aliasSymbol);\n    }\n    getAliasSymbolOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getAliasSymbol(), \"Expected to find an alias symbol.\");\n    }\n    getAliasTypeArguments() {\n        const aliasTypeArgs = this.compilerType.aliasTypeArguments || [];\n        return aliasTypeArgs.map(t => this._context.compilerFactory.getType(t));\n    }\n    getApparentType() {\n        return this._context.typeChecker.getApparentType(this);\n    }\n    getArrayElementTypeOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getArrayElementType(), \"Expected to find an array element type.\");\n    }\n    getArrayElementType() {\n        if (!this.isArray())\n            return undefined;\n        return this.getTypeArguments()[0];\n    }\n    getBaseTypes() {\n        const baseTypes = this.compilerType.getBaseTypes() || [];\n        return baseTypes.map(t => this._context.compilerFactory.getType(t));\n    }\n    getBaseTypeOfLiteralType() {\n        return this._context.typeChecker.getBaseTypeOfLiteralType(this);\n    }\n    getCallSignatures() {\n        return this.compilerType.getCallSignatures().map(s => this._context.compilerFactory.getSignature(s));\n    }\n    getConstructSignatures() {\n        return this.compilerType.getConstructSignatures().map(s => this._context.compilerFactory.getSignature(s));\n    }\n    getConstraintOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getConstraint(), \"Expected to find a constraint.\");\n    }\n    getConstraint() {\n        const constraint = this.compilerType.getConstraint();\n        return constraint == null ? undefined : this._context.compilerFactory.getType(constraint);\n    }\n    getDefaultOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getDefault(), \"Expected to find a default type.\");\n    }\n    getDefault() {\n        const defaultType = this.compilerType.getDefault();\n        return defaultType == null ? undefined : this._context.compilerFactory.getType(defaultType);\n    }\n    getProperties() {\n        return this.compilerType.getProperties().map(s => this._context.compilerFactory.getSymbol(s));\n    }\n    getPropertyOrThrow(nameOrFindFunction) {\n        return common.errors.throwIfNullOrUndefined(this.getProperty(nameOrFindFunction), () => getNotFoundErrorMessageForNameOrFindFunction(\"symbol property\", nameOrFindFunction));\n    }\n    getProperty(nameOrFindFunction) {\n        return getSymbolByNameOrFindFunction(this.getProperties(), nameOrFindFunction);\n    }\n    getApparentProperties() {\n        return this.compilerType.getApparentProperties().map(s => this._context.compilerFactory.getSymbol(s));\n    }\n    getApparentProperty(nameOrFindFunction) {\n        return getSymbolByNameOrFindFunction(this.getApparentProperties(), nameOrFindFunction);\n    }\n    isNullable() {\n        return this.getUnionTypes().some(t => t.isNull() || t.isUndefined());\n    }\n    getNonNullableType() {\n        return this._context.compilerFactory.getType(this.compilerType.getNonNullableType());\n    }\n    getNumberIndexType() {\n        const numberIndexType = this.compilerType.getNumberIndexType();\n        return numberIndexType == null ? undefined : this._context.compilerFactory.getType(numberIndexType);\n    }\n    getStringIndexType() {\n        const stringIndexType = this.compilerType.getStringIndexType();\n        return stringIndexType == null ? undefined : this._context.compilerFactory.getType(stringIndexType);\n    }\n    getTargetType() {\n        const targetType = this.compilerType.target || undefined;\n        return targetType == null ? undefined : this._context.compilerFactory.getType(targetType);\n    }\n    getTargetTypeOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getTargetType(), \"Expected to find the target type.\");\n    }\n    getTypeArguments() {\n        return this._context.typeChecker.getTypeArguments(this);\n    }\n    getTupleElements() {\n        return this.isTuple() ? this.getTypeArguments() : [];\n    }\n    getUnionTypes() {\n        if (!this.isUnion())\n            return [];\n        return this.compilerType.types.map(t => this._context.compilerFactory.getType(t));\n    }\n    getIntersectionTypes() {\n        if (!this.isIntersection())\n            return [];\n        return this.compilerType.types.map(t => this._context.compilerFactory.getType(t));\n    }\n    getLiteralValue() {\n        var _a;\n        return (_a = this.compilerType) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    getLiteralValueOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getLiteralValue(), \"Type was not a literal type.\");\n    }\n    getLiteralFreshType() {\n        var _a;\n        const type = (_a = this.compilerType) === null || _a === void 0 ? void 0 : _a.freshType;\n        return type == null ? undefined : this._context.compilerFactory.getType(type);\n    }\n    getLiteralFreshTypeOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getLiteralFreshType(), \"Type was not a literal type.\");\n    }\n    getLiteralRegularType() {\n        var _a;\n        const type = (_a = this.compilerType) === null || _a === void 0 ? void 0 : _a.regularType;\n        return type == null ? undefined : this._context.compilerFactory.getType(type);\n    }\n    getLiteralRegularTypeOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getLiteralRegularType(), \"Type was not a literal type.\");\n    }\n    getSymbol() {\n        const tsSymbol = this.compilerType.getSymbol();\n        return tsSymbol == null ? undefined : this._context.compilerFactory.getSymbol(tsSymbol);\n    }\n    getSymbolOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getSymbol(), \"Expected to find a symbol.\");\n    }\n    isAnonymous() {\n        return this._hasObjectFlag(common.ObjectFlags.Anonymous);\n    }\n    isAny() {\n        return this._hasTypeFlag(common.TypeFlags.Any);\n    }\n    isArray() {\n        const symbol = this.getSymbol();\n        if (symbol == null)\n            return false;\n        return symbol.getName() === \"Array\" && this.getTypeArguments().length === 1;\n    }\n    isTemplateLiteral() {\n        return this._hasTypeFlag(common.TypeFlags.TemplateLiteral);\n    }\n    isBoolean() {\n        return this._hasTypeFlag(common.TypeFlags.Boolean);\n    }\n    isString() {\n        return this._hasTypeFlag(common.TypeFlags.String);\n    }\n    isNumber() {\n        return this._hasTypeFlag(common.TypeFlags.Number);\n    }\n    isLiteral() {\n        const isBooleanLiteralForTs3_0 = this.isBooleanLiteral();\n        return this.compilerType.isLiteral() || isBooleanLiteralForTs3_0;\n    }\n    isBooleanLiteral() {\n        return this._hasTypeFlag(common.TypeFlags.BooleanLiteral);\n    }\n    isEnumLiteral() {\n        return this._hasTypeFlag(common.TypeFlags.EnumLiteral) && !this.isUnion();\n    }\n    isNumberLiteral() {\n        return this._hasTypeFlag(common.TypeFlags.NumberLiteral);\n    }\n    isStringLiteral() {\n        return this.compilerType.isStringLiteral();\n    }\n    isClass() {\n        return this.compilerType.isClass();\n    }\n    isClassOrInterface() {\n        return this.compilerType.isClassOrInterface();\n    }\n    isEnum() {\n        const hasEnumFlag = this._hasTypeFlag(common.TypeFlags.Enum);\n        if (hasEnumFlag)\n            return true;\n        if (this.isEnumLiteral() && !this.isUnion())\n            return false;\n        const symbol = this.getSymbol();\n        if (symbol == null)\n            return false;\n        const valueDeclaration = symbol.getValueDeclaration();\n        return valueDeclaration != null && Node.isEnumDeclaration(valueDeclaration);\n    }\n    isInterface() {\n        return this._hasObjectFlag(common.ObjectFlags.Interface);\n    }\n    isObject() {\n        return this._hasTypeFlag(common.TypeFlags.Object);\n    }\n    isTypeParameter() {\n        return this.compilerType.isTypeParameter();\n    }\n    isTuple() {\n        const targetType = this.getTargetType();\n        if (targetType == null)\n            return false;\n        return targetType._hasObjectFlag(common.ObjectFlags.Tuple);\n    }\n    isUnion() {\n        return this.compilerType.isUnion();\n    }\n    isIntersection() {\n        return this.compilerType.isIntersection();\n    }\n    isUnionOrIntersection() {\n        return this.compilerType.isUnionOrIntersection();\n    }\n    isUnknown() {\n        return this._hasTypeFlag(common.TypeFlags.Unknown);\n    }\n    isNull() {\n        return this._hasTypeFlag(common.TypeFlags.Null);\n    }\n    isUndefined() {\n        return this._hasTypeFlag(common.TypeFlags.Undefined);\n    }\n    getFlags() {\n        return this.compilerType.flags;\n    }\n    getObjectFlags() {\n        if (!this.isObject())\n            return 0;\n        return this.compilerType.objectFlags || 0;\n    }\n    _hasTypeFlag(flag) {\n        return (this.compilerType.flags & flag) === flag;\n    }\n    _hasObjectFlag(flag) {\n        return (this.getObjectFlags() & flag) === flag;\n    }\n}\n\nclass TypeParameter extends Type {\n    getConstraintOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getConstraint(), \"Expected type parameter to have a constraint.\");\n    }\n    getConstraint() {\n        const declaration = this._getTypeParameterDeclaration();\n        if (declaration == null)\n            return undefined;\n        const constraintNode = declaration.getConstraint();\n        if (constraintNode == null)\n            return undefined;\n        return this._context.typeChecker.getTypeAtLocation(constraintNode);\n    }\n    getDefaultOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getDefault(), \"Expected type parameter to have a default type.\");\n    }\n    getDefault() {\n        const declaration = this._getTypeParameterDeclaration();\n        if (declaration == null)\n            return undefined;\n        const defaultNode = declaration.getDefault();\n        if (defaultNode == null)\n            return undefined;\n        return this._context.typeChecker.getTypeAtLocation(defaultNode);\n    }\n    _getTypeParameterDeclaration() {\n        const symbol = this.getSymbol();\n        if (symbol == null)\n            return undefined;\n        const declaration = symbol.getDeclarations()[0];\n        if (declaration == null)\n            return undefined;\n        if (!Node.isTypeParameterDeclaration(declaration))\n            return undefined;\n        return declaration;\n    }\n}\n\nclass DirectoryEmitResult {\n    constructor(_skippedFilePaths, _outputFilePaths) {\n        this._skippedFilePaths = _skippedFilePaths;\n        this._outputFilePaths = _outputFilePaths;\n    }\n    getSkippedFilePaths() {\n        return this._skippedFilePaths;\n    }\n    getOutputFilePaths() {\n        return this._outputFilePaths;\n    }\n}\n\nclass Directory {\n    constructor(context, path) {\n        this.__context = context;\n        this._setPathInternal(path);\n    }\n    _setPathInternal(path) {\n        this._path = path;\n        this._pathParts = path.split(\"/\").filter(p => p.length > 0);\n    }\n    get _context() {\n        this._throwIfDeletedOrRemoved();\n        return this.__context;\n    }\n    isAncestorOf(possibleDescendant) {\n        return Directory._isAncestorOfDir(this, possibleDescendant);\n    }\n    isDescendantOf(possibleAncestor) {\n        return Directory._isAncestorOfDir(possibleAncestor, this);\n    }\n    _getDepth() {\n        return this._pathParts.length;\n    }\n    getPath() {\n        this._throwIfDeletedOrRemoved();\n        return this._path;\n    }\n    getBaseName() {\n        return this._pathParts[this._pathParts.length - 1];\n    }\n    getParentOrThrow() {\n        return common.errors.throwIfNullOrUndefined(this.getParent(), () => `Parent directory of ${this.getPath()} does not exist or was never added.`);\n    }\n    getParent() {\n        if (common.FileUtils.isRootDirPath(this.getPath()))\n            return undefined;\n        return this.addDirectoryAtPathIfExists(common.FileUtils.getDirPath(this.getPath()));\n    }\n    getDirectoryOrThrow(pathOrCondition) {\n        return common.errors.throwIfNullOrUndefined(this.getDirectory(pathOrCondition), () => {\n            if (typeof pathOrCondition === \"string\")\n                return `Could not find a directory at path '${this._context.fileSystemWrapper.getStandardizedAbsolutePath(pathOrCondition, this.getPath())}'.`;\n            return \"Could not find child directory that matched condition.\";\n        });\n    }\n    getDirectory(pathOrCondition) {\n        if (typeof pathOrCondition === \"string\") {\n            const path = this._context.fileSystemWrapper.getStandardizedAbsolutePath(pathOrCondition, this.getPath());\n            return this._context.compilerFactory.getDirectoryFromCache(path);\n        }\n        return this.getDirectories().find(pathOrCondition);\n    }\n    getSourceFileOrThrow(pathOrCondition) {\n        return common.errors.throwIfNullOrUndefined(this.getSourceFile(pathOrCondition), () => {\n            if (typeof pathOrCondition === \"string\") {\n                const absolutePath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(pathOrCondition, this.getPath());\n                return `Could not find child source file at path '${absolutePath}'.`;\n            }\n            return \"Could not find child source file that matched condition.\";\n        });\n    }\n    getSourceFile(pathOrCondition) {\n        if (typeof pathOrCondition === \"string\") {\n            const path = this._context.fileSystemWrapper.getStandardizedAbsolutePath(pathOrCondition, this.getPath());\n            return this._context.compilerFactory.getSourceFileFromCacheFromFilePath(path);\n        }\n        for (const sourceFile of this._getSourceFilesIterator()) {\n            if (pathOrCondition(sourceFile))\n                return sourceFile;\n        }\n        return undefined;\n    }\n    getDirectories() {\n        return Array.from(this._getDirectoriesIterator());\n    }\n    _getDirectoriesIterator() {\n        return this._context.compilerFactory.getChildDirectoriesOfDirectory(this.getPath());\n    }\n    getSourceFiles(globPatterns) {\n        const { compilerFactory, fileSystemWrapper } = this._context;\n        const dir = this;\n        if (typeof globPatterns === \"string\" || globPatterns instanceof Array) {\n            const finalGlobPatterns = typeof globPatterns === \"string\" ? [globPatterns] : globPatterns;\n            return Array.from(getFilteredSourceFiles(finalGlobPatterns));\n        }\n        else {\n            return Array.from(this._getSourceFilesIterator());\n        }\n        function* getFilteredSourceFiles(globPatterns) {\n            const sourceFilePaths = Array.from(getSourceFilePaths());\n            const matchedPaths = common.matchGlobs(sourceFilePaths, globPatterns, dir.getPath());\n            for (const matchedPath of matchedPaths)\n                yield compilerFactory.getSourceFileFromCacheFromFilePath(fileSystemWrapper.getStandardizedAbsolutePath(matchedPath));\n            function* getSourceFilePaths() {\n                for (const sourceFile of dir._getDescendantSourceFilesIterator())\n                    yield sourceFile.getFilePath();\n            }\n        }\n    }\n    _getSourceFilesIterator() {\n        return this._context.compilerFactory.getChildSourceFilesOfDirectory(this.getPath());\n    }\n    getDescendantSourceFiles() {\n        return Array.from(this._getDescendantSourceFilesIterator());\n    }\n    *_getDescendantSourceFilesIterator() {\n        for (const sourceFile of this._getSourceFilesIterator())\n            yield sourceFile;\n        for (const directory of this._getDirectoriesIterator())\n            yield* directory._getDescendantSourceFilesIterator();\n    }\n    getDescendantDirectories() {\n        return Array.from(this._getDescendantDirectoriesIterator());\n    }\n    *_getDescendantDirectoriesIterator() {\n        for (const directory of this.getDirectories()) {\n            yield directory;\n            yield* directory._getDescendantDirectoriesIterator();\n        }\n    }\n    addSourceFilesAtPaths(fileGlobs) {\n        fileGlobs = typeof fileGlobs === \"string\" ? [fileGlobs] : fileGlobs;\n        fileGlobs = fileGlobs.map(g => {\n            if (common.FileUtils.pathIsAbsolute(g))\n                return g;\n            return common.FileUtils.pathJoin(this.getPath(), g);\n        });\n        return this._context.directoryCoordinator.addSourceFilesAtPaths(fileGlobs, { markInProject: this._isInProject() });\n    }\n    addDirectoryAtPathIfExists(relativeOrAbsoluteDirPath, options = {}) {\n        const dirPath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(relativeOrAbsoluteDirPath, this.getPath());\n        return this._context.directoryCoordinator.addDirectoryAtPathIfExists(dirPath, { ...options, markInProject: this._isInProject() });\n    }\n    addDirectoryAtPath(relativeOrAbsoluteDirPath, options = {}) {\n        const dirPath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(relativeOrAbsoluteDirPath, this.getPath());\n        return this._context.directoryCoordinator.addDirectoryAtPath(dirPath, { ...options, markInProject: this._isInProject() });\n    }\n    createDirectory(relativeOrAbsoluteDirPath) {\n        const dirPath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(relativeOrAbsoluteDirPath, this.getPath());\n        return this._context.directoryCoordinator.createDirectoryOrAddIfExists(dirPath, { markInProject: this._isInProject() });\n    }\n    createSourceFile(relativeFilePath, sourceFileText, options) {\n        const filePath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(relativeFilePath, this.getPath());\n        return this._context.compilerFactory.createSourceFile(filePath, sourceFileText || \"\", { ...(options || {}), markInProject: this._isInProject() });\n    }\n    addSourceFileAtPathIfExists(relativeFilePath) {\n        const filePath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(relativeFilePath, this.getPath());\n        return this._context.directoryCoordinator.addSourceFileAtPathIfExists(filePath, { markInProject: this._isInProject() });\n    }\n    addSourceFileAtPath(relativeFilePath) {\n        const filePath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(relativeFilePath, this.getPath());\n        return this._context.directoryCoordinator.addSourceFileAtPath(filePath, { markInProject: this._isInProject() });\n    }\n    async emit(options = {}) {\n        const { fileSystemWrapper } = this._context;\n        const writeTasks = [];\n        const outputFilePaths = [];\n        const skippedFilePaths = [];\n        for (const emitResult of this._emitInternal(options)) {\n            if (isStandardizedFilePath(emitResult))\n                skippedFilePaths.push(emitResult);\n            else {\n                writeTasks.push(fileSystemWrapper.writeFile(emitResult.filePath, emitResult.fileText));\n                outputFilePaths.push(emitResult.filePath);\n            }\n        }\n        await Promise.all(writeTasks);\n        return new DirectoryEmitResult(skippedFilePaths, outputFilePaths);\n    }\n    emitSync(options = {}) {\n        const { fileSystemWrapper } = this._context;\n        const outputFilePaths = [];\n        const skippedFilePaths = [];\n        for (const emitResult of this._emitInternal(options)) {\n            if (isStandardizedFilePath(emitResult))\n                skippedFilePaths.push(emitResult);\n            else {\n                fileSystemWrapper.writeFileSync(emitResult.filePath, emitResult.fileText);\n                outputFilePaths.push(emitResult.filePath);\n            }\n        }\n        return new DirectoryEmitResult(skippedFilePaths, outputFilePaths);\n    }\n    _emitInternal(options = {}) {\n        const { emitOnlyDtsFiles = false } = options;\n        const isJsFile = options.outDir == null ? undefined : /\\.js$/i;\n        const isMapFile = options.outDir == null ? undefined : /\\.js\\.map$/i;\n        const isDtsFile = options.declarationDir == null && options.outDir == null ? undefined : /\\.d\\.ts$/i;\n        const getStandardizedPath = (path) => path == null\n            ? undefined\n            : this._context.fileSystemWrapper.getStandardizedAbsolutePath(path, this.getPath());\n        const getSubDirPath = (path, dir) => path == null\n            ? undefined\n            : common.FileUtils.pathJoin(path, dir.getBaseName());\n        const hasDeclarationDir = this._context.compilerOptions.get().declarationDir != null || options.declarationDir != null;\n        return emitDirectory(this, getStandardizedPath(options.outDir), getStandardizedPath(options.declarationDir));\n        function* emitDirectory(directory, outDir, declarationDir) {\n            for (const sourceFile of directory.getSourceFiles()) {\n                const output = sourceFile.getEmitOutput({ emitOnlyDtsFiles });\n                if (output.getEmitSkipped()) {\n                    yield sourceFile.getFilePath();\n                    continue;\n                }\n                for (const outputFile of output.getOutputFiles()) {\n                    let filePath = outputFile.getFilePath();\n                    const fileText = outputFile.getWriteByteOrderMark() ? common.FileUtils.getTextWithByteOrderMark(outputFile.getText()) : outputFile.getText();\n                    if (outDir != null && (isJsFile.test(filePath) || isMapFile.test(filePath) || (!hasDeclarationDir && isDtsFile.test(filePath))))\n                        filePath = common.FileUtils.pathJoin(outDir, common.FileUtils.getBaseName(filePath));\n                    else if (declarationDir != null && isDtsFile.test(filePath))\n                        filePath = common.FileUtils.pathJoin(declarationDir, common.FileUtils.getBaseName(filePath));\n                    yield { filePath, fileText };\n                }\n            }\n            for (const dir of directory.getDirectories())\n                yield* emitDirectory(dir, getSubDirPath(outDir, dir), getSubDirPath(declarationDir, dir));\n        }\n    }\n    copyToDirectory(dirPathOrDirectory, options) {\n        const dirPath = typeof dirPathOrDirectory === \"string\" ? dirPathOrDirectory : dirPathOrDirectory.getPath();\n        return this.copy(common.FileUtils.pathJoin(dirPath, this.getBaseName()), options);\n    }\n    copy(relativeOrAbsolutePath, options) {\n        const originalPath = this.getPath();\n        const fileSystem = this._context.fileSystemWrapper;\n        const newPath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(relativeOrAbsolutePath, this.getPath());\n        if (originalPath === newPath)\n            return this;\n        options = getDirectoryCopyOptions(options);\n        if (options.includeUntrackedFiles)\n            fileSystem.queueCopyDirectory(originalPath, newPath);\n        return this._copyInternal(newPath, options);\n    }\n    async copyImmediately(relativeOrAbsolutePath, options) {\n        const fileSystem = this._context.fileSystemWrapper;\n        const originalPath = this.getPath();\n        const newPath = fileSystem.getStandardizedAbsolutePath(relativeOrAbsolutePath, originalPath);\n        if (originalPath === newPath) {\n            await this.save();\n            return this;\n        }\n        options = getDirectoryCopyOptions(options);\n        const newDir = this._copyInternal(newPath, options);\n        if (options.includeUntrackedFiles)\n            await fileSystem.copyDirectoryImmediately(originalPath, newPath);\n        await newDir.save();\n        return newDir;\n    }\n    copyImmediatelySync(relativeOrAbsolutePath, options) {\n        const fileSystem = this._context.fileSystemWrapper;\n        const originalPath = this.getPath();\n        const newPath = fileSystem.getStandardizedAbsolutePath(relativeOrAbsolutePath, originalPath);\n        if (originalPath === newPath) {\n            this.saveSync();\n            return this;\n        }\n        options = getDirectoryCopyOptions(options);\n        const newDir = this._copyInternal(newPath, options);\n        if (options.includeUntrackedFiles)\n            fileSystem.copyDirectoryImmediatelySync(originalPath, newPath);\n        newDir.saveSync();\n        return newDir;\n    }\n    _copyInternal(newPath, options) {\n        const originalPath = this.getPath();\n        if (originalPath === newPath)\n            return this;\n        const { fileSystemWrapper: fileSystem, compilerFactory } = this._context;\n        const copyingDirectories = [this, ...this.getDescendantDirectories()].map(directory => ({\n            newDirPath: directory === this ? newPath : fileSystem.getStandardizedAbsolutePath(this.getRelativePathTo(directory), newPath),\n        }));\n        const copyingSourceFiles = this.getDescendantSourceFiles().map(sourceFile => ({\n            sourceFile,\n            newFilePath: fileSystem.getStandardizedAbsolutePath(this.getRelativePathTo(sourceFile), newPath),\n            references: this._getReferencesForCopy(sourceFile),\n        }));\n        for (const { newDirPath } of copyingDirectories)\n            this._context.compilerFactory.createDirectoryOrAddIfExists(newDirPath, { markInProject: this._isInProject() });\n        for (const { sourceFile, newFilePath } of copyingSourceFiles)\n            sourceFile._copyInternal(newFilePath, options);\n        for (const { references, newFilePath } of copyingSourceFiles)\n            this.getSourceFileOrThrow(newFilePath)._updateReferencesForCopyInternal(references);\n        return compilerFactory.getDirectoryFromCache(newPath);\n    }\n    moveToDirectory(dirPathOrDirectory, options) {\n        const dirPath = typeof dirPathOrDirectory === \"string\" ? dirPathOrDirectory : dirPathOrDirectory.getPath();\n        return this.move(common.FileUtils.pathJoin(dirPath, this.getBaseName()), options);\n    }\n    move(relativeOrAbsolutePath, options) {\n        const fileSystem = this._context.fileSystemWrapper;\n        const originalPath = this.getPath();\n        const newPath = fileSystem.getStandardizedAbsolutePath(relativeOrAbsolutePath, originalPath);\n        if (originalPath === newPath)\n            return this;\n        return this._moveInternal(newPath, options, () => fileSystem.queueMoveDirectory(originalPath, newPath));\n    }\n    async moveImmediately(relativeOrAbsolutePath, options) {\n        const fileSystem = this._context.fileSystemWrapper;\n        const originalPath = this.getPath();\n        const newPath = fileSystem.getStandardizedAbsolutePath(relativeOrAbsolutePath, originalPath);\n        if (originalPath === newPath) {\n            await this.save();\n            return this;\n        }\n        this._moveInternal(newPath, options);\n        await fileSystem.moveDirectoryImmediately(originalPath, newPath);\n        await this.save();\n        return this;\n    }\n    moveImmediatelySync(relativeOrAbsolutePath, options) {\n        const fileSystem = this._context.fileSystemWrapper;\n        const originalPath = this.getPath();\n        const newPath = fileSystem.getStandardizedAbsolutePath(relativeOrAbsolutePath, originalPath);\n        if (originalPath === newPath) {\n            this.saveSync();\n            return this;\n        }\n        this._moveInternal(newPath, options);\n        fileSystem.moveDirectoryImmediatelySync(originalPath, newPath);\n        this.saveSync();\n        return this;\n    }\n    _moveInternal(newPath, options, preAction) {\n        const originalPath = this.getPath();\n        if (originalPath === newPath)\n            return this;\n        const existingDir = this._context.compilerFactory.getDirectoryFromCacheOnlyIfInCache(newPath);\n        const markInProject = existingDir != null && existingDir._isInProject();\n        if (preAction)\n            preAction();\n        const fileSystem = this._context.fileSystemWrapper;\n        const compilerFactory = this._context.compilerFactory;\n        const movingDirectories = [this, ...this.getDescendantDirectories()].map(directory => ({\n            directory,\n            oldPath: directory.getPath(),\n            newDirPath: directory === this ? newPath : fileSystem.getStandardizedAbsolutePath(this.getRelativePathTo(directory), newPath),\n        }));\n        const movingSourceFiles = this.getDescendantSourceFiles().map(sourceFile => ({\n            sourceFile,\n            newFilePath: fileSystem.getStandardizedAbsolutePath(this.getRelativePathTo(sourceFile), newPath),\n            references: this._getReferencesForMove(sourceFile),\n        }));\n        for (const { directory, oldPath, newDirPath } of movingDirectories) {\n            compilerFactory.removeDirectoryFromCache(oldPath);\n            const dirToOverwrite = compilerFactory.getDirectoryFromCache(newDirPath);\n            if (dirToOverwrite != null)\n                dirToOverwrite._forgetOnlyThis();\n            directory._setPathInternal(newDirPath);\n            compilerFactory.addDirectoryToCache(directory);\n        }\n        for (const { sourceFile, newFilePath } of movingSourceFiles)\n            sourceFile._moveInternal(newFilePath, options);\n        for (const { sourceFile, references } of movingSourceFiles)\n            sourceFile._updateReferencesForMoveInternal(references, originalPath);\n        if (markInProject)\n            this._markAsInProject();\n        return this;\n    }\n    clear() {\n        const path = this.getPath();\n        this._deleteDescendants();\n        this._context.fileSystemWrapper.queueDirectoryDelete(path);\n        this._context.fileSystemWrapper.queueMkdir(path);\n    }\n    async clearImmediately() {\n        const path = this.getPath();\n        this._deleteDescendants();\n        await this._context.fileSystemWrapper.clearDirectoryImmediately(path);\n    }\n    clearImmediatelySync() {\n        const path = this.getPath();\n        this._deleteDescendants();\n        this._context.fileSystemWrapper.clearDirectoryImmediatelySync(path);\n    }\n    delete() {\n        const path = this.getPath();\n        this._deleteDescendants();\n        this._context.fileSystemWrapper.queueDirectoryDelete(path);\n        this.forget();\n    }\n    _deleteDescendants() {\n        for (const sourceFile of this.getSourceFiles())\n            sourceFile.delete();\n        for (const dir of this.getDirectories())\n            dir.delete();\n    }\n    async deleteImmediately() {\n        const { fileSystemWrapper } = this._context;\n        const path = this.getPath();\n        this.forget();\n        await fileSystemWrapper.deleteDirectoryImmediately(path);\n    }\n    deleteImmediatelySync() {\n        const { fileSystemWrapper } = this._context;\n        const path = this.getPath();\n        this.forget();\n        fileSystemWrapper.deleteDirectoryImmediatelySync(path);\n    }\n    forget() {\n        if (this.wasForgotten())\n            return;\n        for (const sourceFile of this.getSourceFiles())\n            sourceFile.forget();\n        for (const dir of this.getDirectories())\n            dir.forget();\n        this._forgetOnlyThis();\n    }\n    _forgetOnlyThis() {\n        if (this.wasForgotten())\n            return;\n        this._context.compilerFactory.removeDirectoryFromCache(this.getPath());\n        this.__context = undefined;\n    }\n    async save() {\n        await this._context.fileSystemWrapper.saveForDirectory(this.getPath());\n        const unsavedSourceFiles = this.getDescendantSourceFiles().filter(s => !s.isSaved());\n        await Promise.all(unsavedSourceFiles.map(s => s.save()));\n    }\n    saveSync() {\n        this._context.fileSystemWrapper.saveForDirectorySync(this.getPath());\n        const unsavedSourceFiles = this.getDescendantSourceFiles().filter(s => !s.isSaved());\n        unsavedSourceFiles.forEach(s => s.saveSync());\n    }\n    getRelativePathTo(sourceFileDirOrPath) {\n        const thisDirectory = this;\n        return common.FileUtils.getRelativePathTo(this.getPath(), getPath());\n        function getPath() {\n            return sourceFileDirOrPath instanceof SourceFile\n                ? sourceFileDirOrPath.getFilePath()\n                : sourceFileDirOrPath instanceof Directory\n                    ? sourceFileDirOrPath.getPath()\n                    : thisDirectory._context.fileSystemWrapper.getStandardizedAbsolutePath(sourceFileDirOrPath, thisDirectory.getPath());\n        }\n    }\n    getRelativePathAsModuleSpecifierTo(sourceFileDirOrFilePath) {\n        const moduleResolution = this._context.program.getEmitModuleResolutionKind();\n        const thisDirectory = this;\n        const moduleSpecifier = common.FileUtils.getRelativePathTo(this.getPath(), getPath()).replace(/((\\.d\\.ts$)|(\\.[^/.]+$))/i, \"\");\n        return moduleSpecifier.startsWith(\"../\") ? moduleSpecifier : \"./\" + moduleSpecifier;\n        function getPath() {\n            return sourceFileDirOrFilePath instanceof SourceFile\n                ? getPathForSourceFile(sourceFileDirOrFilePath)\n                : sourceFileDirOrFilePath instanceof Directory\n                    ? getPathForDirectory(sourceFileDirOrFilePath)\n                    : getPathForFilePath(thisDirectory._context.fileSystemWrapper.getStandardizedAbsolutePath(sourceFileDirOrFilePath, thisDirectory.getPath()));\n            function getPathForSourceFile(sourceFile) {\n                return getPathForFilePath(sourceFile.getFilePath());\n            }\n            function getPathForDirectory(dir) {\n                switch (moduleResolution) {\n                    case common.ModuleResolutionKind.NodeJs:\n                        if (dir === thisDirectory)\n                            return common.FileUtils.pathJoin(dir.getPath(), \"index.ts\");\n                        return dir.getPath();\n                    case common.ModuleResolutionKind.Classic:\n                    case common.ModuleResolutionKind.Node16:\n                    case common.ModuleResolutionKind.NodeNext:\n                        return common.FileUtils.pathJoin(dir.getPath(), \"index.ts\");\n                    default:\n                        return common.errors.throwNotImplementedForNeverValueError(moduleResolution);\n                }\n            }\n            function getPathForFilePath(filePath) {\n                const dirPath = common.FileUtils.getDirPath(filePath);\n                switch (moduleResolution) {\n                    case common.ModuleResolutionKind.NodeJs:\n                        if (dirPath === thisDirectory.getPath())\n                            return filePath;\n                        return filePath.replace(/\\/index?(\\.d\\.ts|\\.ts|\\.js)$/i, \"\");\n                    case common.ModuleResolutionKind.Classic:\n                    case common.ModuleResolutionKind.Node16:\n                    case common.ModuleResolutionKind.NodeNext:\n                        return filePath;\n                    default:\n                        return common.errors.throwNotImplementedForNeverValueError(moduleResolution);\n                }\n            }\n        }\n    }\n    getProject() {\n        return this._context.project;\n    }\n    wasForgotten() {\n        return this.__context == null;\n    }\n    _isInProject() {\n        return this._context.inProjectCoordinator.isDirectoryInProject(this);\n    }\n    _markAsInProject() {\n        this._context.inProjectCoordinator.markDirectoryAsInProject(this);\n    }\n    _hasLoadedParent() {\n        return this._context.compilerFactory.containsDirectoryAtPath(common.FileUtils.getDirPath(this.getPath()));\n    }\n    _throwIfDeletedOrRemoved() {\n        if (this.wasForgotten())\n            throw new common.errors.InvalidOperationError(\"Cannot use a directory that was deleted, removed, or overwritten.\");\n    }\n    _getReferencesForCopy(sourceFile) {\n        const literalReferences = sourceFile._getReferencesForCopyInternal();\n        return literalReferences.filter(r => !this.isAncestorOf(r[1]));\n    }\n    _getReferencesForMove(sourceFile) {\n        const { literalReferences, referencingLiterals } = sourceFile._getReferencesForMoveInternal();\n        return {\n            literalReferences: literalReferences.filter(r => !this.isAncestorOf(r[1])),\n            referencingLiterals: referencingLiterals.filter(l => !this.isAncestorOf(l._sourceFile)),\n        };\n    }\n    static _isAncestorOfDir(ancestor, descendant) {\n        if (descendant instanceof SourceFile) {\n            descendant = descendant.getDirectory();\n            if (ancestor === descendant)\n                return true;\n        }\n        if (ancestor._pathParts.length >= descendant._pathParts.length)\n            return false;\n        for (let i = ancestor._pathParts.length - 1; i >= 0; i--) {\n            if (ancestor._pathParts[i] !== descendant._pathParts[i])\n                return false;\n        }\n        return true;\n    }\n}\nfunction getDirectoryCopyOptions(options) {\n    options = common.ObjectUtils.clone(options || {});\n    setValueIfUndefined(options, \"includeUntrackedFiles\", true);\n    return options;\n}\nfunction isStandardizedFilePath(filePath) {\n    return typeof filePath === \"string\";\n}\n\nclass DirectoryCoordinator {\n    constructor(compilerFactory, fileSystemWrapper) {\n        this.compilerFactory = compilerFactory;\n        this.fileSystemWrapper = fileSystemWrapper;\n    }\n    addDirectoryAtPathIfExists(dirPath, options) {\n        const directory = this.compilerFactory.getDirectoryFromPath(dirPath, options);\n        if (directory == null)\n            return undefined;\n        if (options.recursive) {\n            for (const descendantDirPath of common.FileUtils.getDescendantDirectories(this.fileSystemWrapper, dirPath))\n                this.compilerFactory.createDirectoryOrAddIfExists(descendantDirPath, options);\n        }\n        return directory;\n    }\n    addDirectoryAtPath(dirPath, options) {\n        const directory = this.addDirectoryAtPathIfExists(dirPath, options);\n        if (directory == null)\n            throw new common.errors.DirectoryNotFoundError(dirPath);\n        return directory;\n    }\n    createDirectoryOrAddIfExists(dirPath, options) {\n        return this.compilerFactory.createDirectoryOrAddIfExists(dirPath, options);\n    }\n    addSourceFileAtPathIfExists(filePath, options) {\n        return this.compilerFactory.addOrGetSourceFileFromFilePath(filePath, {\n            markInProject: options.markInProject,\n            scriptKind: undefined,\n        });\n    }\n    addSourceFileAtPath(filePath, options) {\n        const sourceFile = this.addSourceFileAtPathIfExists(filePath, options);\n        if (sourceFile == null)\n            throw new common.errors.FileNotFoundError(this.fileSystemWrapper.getStandardizedAbsolutePath(filePath));\n        return sourceFile;\n    }\n    addSourceFilesAtPaths(fileGlobs, options) {\n        if (typeof fileGlobs === \"string\")\n            fileGlobs = [fileGlobs];\n        const sourceFiles = [];\n        const globbedDirectories = new Set();\n        for (const filePath of this.fileSystemWrapper.globSync(fileGlobs)) {\n            const sourceFile = this.addSourceFileAtPathIfExists(filePath, options);\n            if (sourceFile != null)\n                sourceFiles.push(sourceFile);\n            globbedDirectories.add(common.FileUtils.getDirPath(filePath));\n        }\n        for (const dirPath of common.FileUtils.getParentMostPaths(Array.from(globbedDirectories)))\n            this.addDirectoryAtPathIfExists(dirPath, { recursive: true, markInProject: options.markInProject });\n        return sourceFiles;\n    }\n}\n\nclass DirectoryCache {\n    constructor(context) {\n        this.context = context;\n        this.directoriesByPath = new common.KeyValueCache();\n        this.sourceFilesByDirPath = new common.KeyValueCache();\n        this.directoriesByDirPath = new common.KeyValueCache();\n        this.orphanDirs = new common.KeyValueCache();\n    }\n    has(dirPath) {\n        return this.directoriesByPath.has(dirPath);\n    }\n    get(dirPath) {\n        if (!this.directoriesByPath.has(dirPath)) {\n            for (const orphanDir of this.orphanDirs.getValues()) {\n                if (common.FileUtils.pathStartsWith(orphanDir.getPath(), dirPath))\n                    return this.createOrAddIfExists(dirPath);\n            }\n            return undefined;\n        }\n        return this.directoriesByPath.get(dirPath);\n    }\n    getOrphans() {\n        return this.orphanDirs.getValues();\n    }\n    getAll() {\n        return this.directoriesByPath.getValuesAsArray();\n    }\n    *getAllByDepth() {\n        const dirLevels = new common.KeyValueCache();\n        let depth = 0;\n        for (const orphanDir of this.getOrphans())\n            addToDirLevels(orphanDir);\n        depth = Math.min(...Array.from(dirLevels.getKeys()));\n        while (dirLevels.getSize() > 0) {\n            for (const dir of dirLevels.get(depth) || []) {\n                yield dir;\n                dir.getDirectories().forEach(addToDirLevels);\n            }\n            dirLevels.removeByKey(depth);\n            depth++;\n        }\n        function addToDirLevels(dir) {\n            const dirDepth = dir._getDepth();\n            if (depth > dirDepth)\n                throw new Error(`For some reason a subdirectory had a lower depth than the parent directory: ${dir.getPath()}`);\n            const dirs = dirLevels.getOrCreate(dirDepth, () => []);\n            dirs.push(dir);\n        }\n    }\n    remove(dirPath) {\n        this.removeFromDirectoriesByDirPath(dirPath);\n        this.directoriesByPath.removeByKey(dirPath);\n        this.orphanDirs.removeByKey(dirPath);\n    }\n    *getChildDirectoriesOfDirectory(dirPath) {\n        var _a;\n        const entries = (_a = this.directoriesByDirPath.get(dirPath)) === null || _a === void 0 ? void 0 : _a.entries();\n        if (entries == null)\n            return;\n        for (const dir of entries)\n            yield dir;\n    }\n    *getChildSourceFilesOfDirectory(dirPath) {\n        var _a;\n        const entries = (_a = this.sourceFilesByDirPath.get(dirPath)) === null || _a === void 0 ? void 0 : _a.entries();\n        if (entries == null)\n            return;\n        for (const sourceFile of entries)\n            yield sourceFile;\n    }\n    addSourceFile(sourceFile) {\n        const dirPath = sourceFile.getDirectoryPath();\n        this.createOrAddIfExists(dirPath);\n        const sourceFiles = this.sourceFilesByDirPath.getOrCreate(dirPath, () => new common.SortedKeyValueArray(item => item.getBaseName(), common.LocaleStringComparer.instance));\n        sourceFiles.set(sourceFile);\n    }\n    removeSourceFile(filePath) {\n        const dirPath = common.FileUtils.getDirPath(filePath);\n        const sourceFiles = this.sourceFilesByDirPath.get(dirPath);\n        if (sourceFiles == null)\n            return;\n        sourceFiles.removeByKey(common.FileUtils.getBaseName(filePath));\n        if (!sourceFiles.hasItems())\n            this.sourceFilesByDirPath.removeByKey(dirPath);\n    }\n    createOrAddIfExists(dirPath) {\n        if (this.has(dirPath))\n            return this.get(dirPath);\n        this.fillParentsOfDirPath(dirPath);\n        return this.createDirectory(dirPath);\n    }\n    createDirectory(path) {\n        const newDirectory = new Directory(this.context, path);\n        this.addDirectory(newDirectory);\n        return newDirectory;\n    }\n    addDirectory(directory) {\n        const path = directory.getPath();\n        const parentDirPath = common.FileUtils.getDirPath(path);\n        const isRootDir = parentDirPath === path;\n        for (const orphanDir of this.orphanDirs.getValues()) {\n            const orphanDirPath = orphanDir.getPath();\n            const orphanDirParentPath = common.FileUtils.getDirPath(orphanDirPath);\n            const isOrphanRootDir = orphanDirParentPath === orphanDirPath;\n            if (!isOrphanRootDir && orphanDirParentPath === path)\n                this.orphanDirs.removeByKey(orphanDirPath);\n        }\n        if (!isRootDir)\n            this.addToDirectoriesByDirPath(directory);\n        if (!this.has(parentDirPath))\n            this.orphanDirs.set(path, directory);\n        this.directoriesByPath.set(path, directory);\n        if (!this.context.fileSystemWrapper.directoryExistsSync(path))\n            this.context.fileSystemWrapper.queueMkdir(path);\n        for (const orphanDir of this.orphanDirs.getValues()) {\n            if (directory.isAncestorOf(orphanDir))\n                this.fillParentsOfDirPath(orphanDir.getPath());\n        }\n    }\n    addToDirectoriesByDirPath(directory) {\n        if (common.FileUtils.isRootDirPath(directory.getPath()))\n            return;\n        const parentDirPath = common.FileUtils.getDirPath(directory.getPath());\n        const directories = this.directoriesByDirPath.getOrCreate(parentDirPath, () => new common.SortedKeyValueArray(item => item.getBaseName(), common.LocaleStringComparer.instance));\n        directories.set(directory);\n    }\n    removeFromDirectoriesByDirPath(dirPath) {\n        if (common.FileUtils.isRootDirPath(dirPath))\n            return;\n        const parentDirPath = common.FileUtils.getDirPath(dirPath);\n        const directories = this.directoriesByDirPath.get(parentDirPath);\n        if (directories == null)\n            return;\n        directories.removeByKey(common.FileUtils.getBaseName(dirPath));\n        if (!directories.hasItems())\n            this.directoriesByDirPath.removeByKey(parentDirPath);\n    }\n    fillParentsOfDirPath(dirPath) {\n        const passedDirPaths = [];\n        let parentDir = common.FileUtils.getDirPath(dirPath);\n        while (dirPath !== parentDir) {\n            dirPath = parentDir;\n            parentDir = common.FileUtils.getDirPath(dirPath);\n            if (this.directoriesByPath.has(dirPath)) {\n                for (const currentDirPath of passedDirPaths)\n                    this.createDirectory(currentDirPath);\n                break;\n            }\n            passedDirPaths.unshift(dirPath);\n        }\n    }\n}\n\nclass ForgetfulNodeCache extends common.KeyValueCache {\n    constructor() {\n        super(...arguments);\n        this.forgetStack = [];\n    }\n    getOrCreate(key, createFunc) {\n        return super.getOrCreate(key, () => {\n            const node = createFunc();\n            if (this.forgetStack.length > 0)\n                this.forgetStack[this.forgetStack.length - 1].add(node);\n            return node;\n        });\n    }\n    setForgetPoint() {\n        this.forgetStack.push(new Set());\n    }\n    forgetLastPoint() {\n        const nodes = this.forgetStack.pop();\n        if (nodes != null)\n            this.forgetNodes(nodes.values());\n    }\n    rememberNode(node) {\n        if (node.wasForgotten())\n            throw new common.errors.InvalidOperationError(\"Cannot remember a node that was removed or forgotten.\");\n        let wasInForgetStack = false;\n        for (const stackItem of this.forgetStack) {\n            if (stackItem.delete(node)) {\n                wasInForgetStack = true;\n                break;\n            }\n        }\n        if (wasInForgetStack)\n            this.rememberParentOfNode(node);\n        return wasInForgetStack;\n    }\n    rememberParentOfNode(node) {\n        const parent = node.getParentSyntaxList() || node.getParent();\n        if (parent != null)\n            this.rememberNode(parent);\n    }\n    forgetNodes(nodes) {\n        for (const node of nodes) {\n            if (node.wasForgotten() || node.getKind() === common.SyntaxKind.SourceFile)\n                continue;\n            node._forgetOnlyThis();\n        }\n    }\n}\n\nconst kindToWrapperMappings = {\n    [common.SyntaxKind.SourceFile]: SourceFile,\n    [common.SyntaxKind.ArrayBindingPattern]: ArrayBindingPattern,\n    [common.SyntaxKind.ArrayLiteralExpression]: ArrayLiteralExpression,\n    [common.SyntaxKind.ArrayType]: ArrayTypeNode,\n    [common.SyntaxKind.ArrowFunction]: ArrowFunction,\n    [common.SyntaxKind.AsExpression]: AsExpression,\n    [common.SyntaxKind.AssertClause]: AssertClause,\n    [common.SyntaxKind.AssertEntry]: AssertEntry,\n    [common.SyntaxKind.AwaitExpression]: AwaitExpression,\n    [common.SyntaxKind.BigIntLiteral]: BigIntLiteral,\n    [common.SyntaxKind.BindingElement]: BindingElement,\n    [common.SyntaxKind.BinaryExpression]: BinaryExpression,\n    [common.SyntaxKind.Block]: Block,\n    [common.SyntaxKind.BreakStatement]: BreakStatement,\n    [common.SyntaxKind.CallExpression]: CallExpression,\n    [common.SyntaxKind.CallSignature]: CallSignatureDeclaration,\n    [common.SyntaxKind.CaseBlock]: CaseBlock,\n    [common.SyntaxKind.CaseClause]: CaseClause,\n    [common.SyntaxKind.CatchClause]: CatchClause,\n    [common.SyntaxKind.ClassDeclaration]: ClassDeclaration,\n    [common.SyntaxKind.ClassExpression]: ClassExpression,\n    [common.SyntaxKind.ClassStaticBlockDeclaration]: ClassStaticBlockDeclaration,\n    [common.SyntaxKind.ConditionalType]: ConditionalTypeNode,\n    [common.SyntaxKind.Constructor]: ConstructorDeclaration,\n    [common.SyntaxKind.ConstructorType]: ConstructorTypeNode,\n    [common.SyntaxKind.ConstructSignature]: ConstructSignatureDeclaration,\n    [common.SyntaxKind.ContinueStatement]: ContinueStatement,\n    [common.SyntaxKind.CommaListExpression]: CommaListExpression,\n    [common.SyntaxKind.ComputedPropertyName]: ComputedPropertyName,\n    [common.SyntaxKind.ConditionalExpression]: ConditionalExpression,\n    [common.SyntaxKind.DebuggerStatement]: DebuggerStatement,\n    [common.SyntaxKind.Decorator]: Decorator,\n    [common.SyntaxKind.DefaultClause]: DefaultClause,\n    [common.SyntaxKind.DeleteExpression]: DeleteExpression,\n    [common.SyntaxKind.DoStatement]: DoStatement,\n    [common.SyntaxKind.ElementAccessExpression]: ElementAccessExpression,\n    [common.SyntaxKind.EmptyStatement]: EmptyStatement,\n    [common.SyntaxKind.EnumDeclaration]: EnumDeclaration,\n    [common.SyntaxKind.EnumMember]: EnumMember,\n    [common.SyntaxKind.ExportAssignment]: ExportAssignment,\n    [common.SyntaxKind.ExportDeclaration]: ExportDeclaration,\n    [common.SyntaxKind.ExportSpecifier]: ExportSpecifier,\n    [common.SyntaxKind.ExpressionWithTypeArguments]: ExpressionWithTypeArguments,\n    [common.SyntaxKind.ExpressionStatement]: ExpressionStatement,\n    [common.SyntaxKind.ExternalModuleReference]: ExternalModuleReference,\n    [common.SyntaxKind.QualifiedName]: QualifiedName,\n    [common.SyntaxKind.ForInStatement]: ForInStatement,\n    [common.SyntaxKind.ForOfStatement]: ForOfStatement,\n    [common.SyntaxKind.ForStatement]: ForStatement,\n    [common.SyntaxKind.FunctionDeclaration]: FunctionDeclaration,\n    [common.SyntaxKind.FunctionExpression]: FunctionExpression,\n    [common.SyntaxKind.FunctionType]: FunctionTypeNode,\n    [common.SyntaxKind.GetAccessor]: GetAccessorDeclaration,\n    [common.SyntaxKind.HeritageClause]: HeritageClause,\n    [common.SyntaxKind.Identifier]: Identifier,\n    [common.SyntaxKind.IfStatement]: IfStatement,\n    [common.SyntaxKind.ImportClause]: ImportClause,\n    [common.SyntaxKind.ImportDeclaration]: ImportDeclaration,\n    [common.SyntaxKind.ImportEqualsDeclaration]: ImportEqualsDeclaration,\n    [common.SyntaxKind.ImportSpecifier]: ImportSpecifier,\n    [common.SyntaxKind.ImportType]: ImportTypeNode,\n    [common.SyntaxKind.ImportTypeAssertionContainer]: ImportTypeAssertionContainer,\n    [common.SyntaxKind.IndexedAccessType]: IndexedAccessTypeNode,\n    [common.SyntaxKind.IndexSignature]: IndexSignatureDeclaration,\n    [common.SyntaxKind.InferType]: InferTypeNode,\n    [common.SyntaxKind.InterfaceDeclaration]: InterfaceDeclaration,\n    [common.SyntaxKind.IntersectionType]: IntersectionTypeNode,\n    [common.SyntaxKind.JSDocAllType]: JSDocAllType,\n    [common.SyntaxKind.JSDocAugmentsTag]: JSDocAugmentsTag,\n    [common.SyntaxKind.JSDocAuthorTag]: JSDocAuthorTag,\n    [common.SyntaxKind.JSDocCallbackTag]: JSDocCallbackTag,\n    [common.SyntaxKind.JSDocClassTag]: JSDocClassTag,\n    [common.SyntaxKind.JSDocDeprecatedTag]: JSDocDeprecatedTag,\n    [common.SyntaxKind.JSDocEnumTag]: JSDocEnumTag,\n    [common.SyntaxKind.JSDocFunctionType]: JSDocFunctionType,\n    [common.SyntaxKind.JSDocImplementsTag]: JSDocImplementsTag,\n    [common.SyntaxKind.JSDocLink]: JSDocLink,\n    [common.SyntaxKind.JSDocLinkCode]: JSDocLinkCode,\n    [common.SyntaxKind.JSDocLinkPlain]: JSDocLinkPlain,\n    [common.SyntaxKind.JSDocMemberName]: JSDocMemberName,\n    [common.SyntaxKind.JSDocNamepathType]: JSDocNamepathType,\n    [common.SyntaxKind.JSDocNameReference]: JSDocNameReference,\n    [common.SyntaxKind.JSDocNonNullableType]: JSDocNonNullableType,\n    [common.SyntaxKind.JSDocNullableType]: JSDocNullableType,\n    [common.SyntaxKind.JSDocOptionalType]: JSDocOptionalType,\n    [common.SyntaxKind.JSDocOverrideTag]: JSDocOverrideTag,\n    [common.SyntaxKind.JSDocParameterTag]: JSDocParameterTag,\n    [common.SyntaxKind.JSDocPrivateTag]: JSDocPrivateTag,\n    [common.SyntaxKind.JSDocPropertyTag]: JSDocPropertyTag,\n    [common.SyntaxKind.JSDocProtectedTag]: JSDocProtectedTag,\n    [common.SyntaxKind.JSDocPublicTag]: JSDocPublicTag,\n    [common.SyntaxKind.JSDocReturnTag]: JSDocReturnTag,\n    [common.SyntaxKind.JSDocReadonlyTag]: JSDocReadonlyTag,\n    [common.SyntaxKind.JSDocSeeTag]: JSDocSeeTag,\n    [common.SyntaxKind.JSDocSignature]: JSDocSignature,\n    [common.SyntaxKind.JSDocTag]: JSDocUnknownTag,\n    [common.SyntaxKind.JSDocTemplateTag]: JSDocTemplateTag,\n    [common.SyntaxKind.JSDocText]: JSDocText,\n    [common.SyntaxKind.JSDocThisTag]: JSDocThisTag,\n    [common.SyntaxKind.JSDocTypeExpression]: JSDocTypeExpression,\n    [common.SyntaxKind.JSDocTypeLiteral]: JSDocTypeLiteral,\n    [common.SyntaxKind.JSDocTypeTag]: JSDocTypeTag,\n    [common.SyntaxKind.JSDocTypedefTag]: JSDocTypedefTag,\n    [common.SyntaxKind.JSDocUnknownType]: JSDocUnknownType,\n    [common.SyntaxKind.JSDocVariadicType]: JSDocVariadicType,\n    [common.SyntaxKind.JsxAttribute]: JsxAttribute,\n    [common.SyntaxKind.JsxClosingElement]: JsxClosingElement,\n    [common.SyntaxKind.JsxClosingFragment]: JsxClosingFragment,\n    [common.SyntaxKind.JsxElement]: JsxElement,\n    [common.SyntaxKind.JsxExpression]: JsxExpression,\n    [common.SyntaxKind.JsxFragment]: JsxFragment,\n    [common.SyntaxKind.JsxOpeningElement]: JsxOpeningElement,\n    [common.SyntaxKind.JsxOpeningFragment]: JsxOpeningFragment,\n    [common.SyntaxKind.JsxSelfClosingElement]: JsxSelfClosingElement,\n    [common.SyntaxKind.JsxSpreadAttribute]: JsxSpreadAttribute,\n    [common.SyntaxKind.JsxText]: JsxText,\n    [common.SyntaxKind.LabeledStatement]: LabeledStatement,\n    [common.SyntaxKind.LiteralType]: LiteralTypeNode,\n    [common.SyntaxKind.MappedType]: MappedTypeNode,\n    [common.SyntaxKind.MetaProperty]: MetaProperty,\n    [common.SyntaxKind.MethodDeclaration]: MethodDeclaration,\n    [common.SyntaxKind.MethodSignature]: MethodSignature,\n    [common.SyntaxKind.ModuleBlock]: ModuleBlock,\n    [common.SyntaxKind.ModuleDeclaration]: ModuleDeclaration,\n    [common.SyntaxKind.NamedExports]: NamedExports,\n    [common.SyntaxKind.NamedImports]: NamedImports,\n    [common.SyntaxKind.NamedTupleMember]: NamedTupleMember,\n    [common.SyntaxKind.NamespaceExport]: NamespaceExport,\n    [common.SyntaxKind.NamespaceImport]: NamespaceImport,\n    [common.SyntaxKind.NewExpression]: NewExpression,\n    [common.SyntaxKind.NonNullExpression]: NonNullExpression,\n    [common.SyntaxKind.NotEmittedStatement]: NotEmittedStatement,\n    [common.SyntaxKind.NoSubstitutionTemplateLiteral]: NoSubstitutionTemplateLiteral,\n    [common.SyntaxKind.NumericLiteral]: NumericLiteral,\n    [common.SyntaxKind.ObjectBindingPattern]: ObjectBindingPattern,\n    [common.SyntaxKind.ObjectLiteralExpression]: ObjectLiteralExpression,\n    [common.SyntaxKind.OmittedExpression]: OmittedExpression,\n    [common.SyntaxKind.Parameter]: ParameterDeclaration,\n    [common.SyntaxKind.ParenthesizedExpression]: ParenthesizedExpression,\n    [common.SyntaxKind.ParenthesizedType]: ParenthesizedTypeNode,\n    [common.SyntaxKind.PartiallyEmittedExpression]: PartiallyEmittedExpression,\n    [common.SyntaxKind.PostfixUnaryExpression]: PostfixUnaryExpression,\n    [common.SyntaxKind.PrefixUnaryExpression]: PrefixUnaryExpression,\n    [common.SyntaxKind.PrivateIdentifier]: PrivateIdentifier,\n    [common.SyntaxKind.PropertyAccessExpression]: PropertyAccessExpression,\n    [common.SyntaxKind.PropertyAssignment]: PropertyAssignment,\n    [common.SyntaxKind.PropertyDeclaration]: PropertyDeclaration,\n    [common.SyntaxKind.PropertySignature]: PropertySignature,\n    [common.SyntaxKind.RegularExpressionLiteral]: RegularExpressionLiteral,\n    [common.SyntaxKind.ReturnStatement]: ReturnStatement,\n    [common.SyntaxKind.SetAccessor]: SetAccessorDeclaration,\n    [common.SyntaxKind.ShorthandPropertyAssignment]: ShorthandPropertyAssignment,\n    [common.SyntaxKind.SpreadAssignment]: SpreadAssignment,\n    [common.SyntaxKind.SpreadElement]: SpreadElement,\n    [common.SyntaxKind.StringLiteral]: StringLiteral,\n    [common.SyntaxKind.SwitchStatement]: SwitchStatement,\n    [common.SyntaxKind.SyntaxList]: SyntaxList,\n    [common.SyntaxKind.TaggedTemplateExpression]: TaggedTemplateExpression,\n    [common.SyntaxKind.TemplateExpression]: TemplateExpression,\n    [common.SyntaxKind.TemplateHead]: TemplateHead,\n    [common.SyntaxKind.TemplateLiteralType]: TemplateLiteralTypeNode,\n    [common.SyntaxKind.TemplateMiddle]: TemplateMiddle,\n    [common.SyntaxKind.TemplateSpan]: TemplateSpan,\n    [common.SyntaxKind.TemplateTail]: TemplateTail,\n    [common.SyntaxKind.ThisType]: ThisTypeNode,\n    [common.SyntaxKind.ThrowStatement]: ThrowStatement,\n    [common.SyntaxKind.TryStatement]: TryStatement,\n    [common.SyntaxKind.TupleType]: TupleTypeNode,\n    [common.SyntaxKind.TypeAliasDeclaration]: TypeAliasDeclaration,\n    [common.SyntaxKind.TypeAssertionExpression]: TypeAssertion,\n    [common.SyntaxKind.TypeLiteral]: TypeLiteralNode,\n    [common.SyntaxKind.TypeOperator]: TypeOperatorTypeNode,\n    [common.SyntaxKind.TypeParameter]: TypeParameterDeclaration,\n    [common.SyntaxKind.TypePredicate]: TypePredicateNode,\n    [common.SyntaxKind.TypeQuery]: TypeQueryNode,\n    [common.SyntaxKind.TypeReference]: TypeReferenceNode,\n    [common.SyntaxKind.UnionType]: UnionTypeNode,\n    [common.SyntaxKind.VariableDeclaration]: VariableDeclaration,\n    [common.SyntaxKind.VariableDeclarationList]: VariableDeclarationList,\n    [common.SyntaxKind.VariableStatement]: VariableStatement,\n    [common.SyntaxKind.JSDoc]: JSDoc,\n    [common.SyntaxKind.TypeOfExpression]: TypeOfExpression,\n    [common.SyntaxKind.WhileStatement]: WhileStatement,\n    [common.SyntaxKind.WithStatement]: WithStatement,\n    [common.SyntaxKind.YieldExpression]: YieldExpression,\n    [common.SyntaxKind.SemicolonToken]: Node,\n    [common.SyntaxKind.AnyKeyword]: Expression,\n    [common.SyntaxKind.BooleanKeyword]: Expression,\n    [common.SyntaxKind.FalseKeyword]: FalseLiteral,\n    [common.SyntaxKind.ImportKeyword]: ImportExpression,\n    [common.SyntaxKind.InferKeyword]: Node,\n    [common.SyntaxKind.NeverKeyword]: Node,\n    [common.SyntaxKind.NullKeyword]: NullLiteral,\n    [common.SyntaxKind.NumberKeyword]: Expression,\n    [common.SyntaxKind.ObjectKeyword]: Expression,\n    [common.SyntaxKind.StringKeyword]: Expression,\n    [common.SyntaxKind.SymbolKeyword]: Expression,\n    [common.SyntaxKind.SuperKeyword]: SuperExpression,\n    [common.SyntaxKind.ThisKeyword]: ThisExpression,\n    [common.SyntaxKind.TrueKeyword]: TrueLiteral,\n    [common.SyntaxKind.UndefinedKeyword]: Expression,\n    [common.SyntaxKind.VoidExpression]: VoidExpression,\n};\n\nclass CompilerFactory {\n    constructor(context) {\n        this.context = context;\n        this.sourceFileCacheByFilePath = new Map();\n        this.diagnosticCache = new common.WeakCache();\n        this.definitionInfoCache = new common.WeakCache();\n        this.documentSpanCache = new common.WeakCache();\n        this.diagnosticMessageChainCache = new common.WeakCache();\n        this.jsDocTagInfoCache = new common.WeakCache();\n        this.signatureCache = new common.WeakCache();\n        this.symbolCache = new common.WeakCache();\n        this.symbolDisplayPartCache = new common.WeakCache();\n        this.referencedSymbolEntryCache = new common.WeakCache();\n        this.referencedSymbolCache = new common.WeakCache();\n        this.referencedSymbolDefinitionInfoCache = new common.WeakCache();\n        this.typeCache = new common.WeakCache();\n        this.typeParameterCache = new common.WeakCache();\n        this.nodeCache = new ForgetfulNodeCache();\n        this.sourceFileAddedEventContainer = new common.EventContainer();\n        this.sourceFileRemovedEventContainer = new common.EventContainer();\n        this.documentRegistry = new common.DocumentRegistry(context.fileSystemWrapper);\n        this.directoryCache = new DirectoryCache(context);\n        this.context.compilerOptions.onModified(() => {\n            const currentSourceFiles = Array.from(this.sourceFileCacheByFilePath.values());\n            for (const sourceFile of currentSourceFiles) {\n                replaceSourceFileForCacheUpdate(sourceFile);\n            }\n        });\n    }\n    *getSourceFilesByDirectoryDepth() {\n        for (const dir of this.getDirectoriesByDepth())\n            yield* dir.getSourceFiles();\n    }\n    getSourceFilePaths() {\n        return this.sourceFileCacheByFilePath.keys();\n    }\n    getChildDirectoriesOfDirectory(dirPath) {\n        return this.directoryCache.getChildDirectoriesOfDirectory(dirPath);\n    }\n    getChildSourceFilesOfDirectory(dirPath) {\n        return this.directoryCache.getChildSourceFilesOfDirectory(dirPath);\n    }\n    onSourceFileAdded(subscription, subscribe = true) {\n        if (subscribe)\n            this.sourceFileAddedEventContainer.subscribe(subscription);\n        else\n            this.sourceFileAddedEventContainer.unsubscribe(subscription);\n    }\n    onSourceFileRemoved(subscription) {\n        this.sourceFileRemovedEventContainer.subscribe(subscription);\n    }\n    createSourceFile(filePath, sourceFileText, options) {\n        sourceFileText = sourceFileText instanceof Function ? getTextFromStringOrWriter(this.context.createWriter(), sourceFileText) : sourceFileText || \"\";\n        if (typeof sourceFileText === \"string\")\n            return this.createSourceFileFromText(filePath, sourceFileText, options);\n        const writer = this.context.createWriter();\n        const structurePrinter = this.context.structurePrinterFactory.forSourceFile({\n            isAmbient: common.FileUtils.getExtension(filePath) === \".d.ts\",\n        });\n        structurePrinter.printText(writer, sourceFileText);\n        return this.createSourceFileFromText(filePath, writer.toString(), options);\n    }\n    createSourceFileFromText(filePath, sourceText, options) {\n        filePath = this.context.fileSystemWrapper.getStandardizedAbsolutePath(filePath);\n        if (options.overwrite === true)\n            return this.createOrOverwriteSourceFileFromText(filePath, sourceText, options);\n        this.throwIfFileExists(filePath, \"Did you mean to provide the overwrite option?\");\n        return this.createSourceFileFromTextInternal(filePath, sourceText, options);\n    }\n    throwIfFileExists(filePath, prefixMessage) {\n        if (!this.containsSourceFileAtPath(filePath) && !this.context.fileSystemWrapper.fileExistsSync(filePath))\n            return;\n        prefixMessage = prefixMessage == null ? \"\" : prefixMessage + \" \";\n        throw new common.errors.InvalidOperationError(`${prefixMessage}A source file already exists at the provided file path: ${filePath}`);\n    }\n    createOrOverwriteSourceFileFromText(filePath, sourceText, options) {\n        filePath = this.context.fileSystemWrapper.getStandardizedAbsolutePath(filePath);\n        const existingSourceFile = this.addOrGetSourceFileFromFilePath(filePath, options);\n        if (existingSourceFile != null) {\n            existingSourceFile.getChildren().forEach(c => c.forget());\n            this.replaceCompilerNode(existingSourceFile, this.createCompilerSourceFileFromText(filePath, sourceText, options.scriptKind));\n            return existingSourceFile;\n        }\n        return this.createSourceFileFromTextInternal(filePath, sourceText, options);\n    }\n    getSourceFileFromCacheFromFilePath(filePath) {\n        filePath = this.context.fileSystemWrapper.getStandardizedAbsolutePath(filePath);\n        return this.sourceFileCacheByFilePath.get(filePath);\n    }\n    addOrGetSourceFileFromFilePath(filePath, options) {\n        filePath = this.context.fileSystemWrapper.getStandardizedAbsolutePath(filePath);\n        let sourceFile = this.sourceFileCacheByFilePath.get(filePath);\n        if (sourceFile == null) {\n            const fileText = this.context.fileSystemWrapper.readFileIfExistsSync(filePath, this.context.getEncoding());\n            if (fileText != null) {\n                this.context.logger.log(`Loaded file: ${filePath}`);\n                sourceFile = this.createSourceFileFromTextInternal(filePath, fileText, options);\n                sourceFile._setIsSaved(true);\n            }\n        }\n        if (sourceFile != null && options.markInProject)\n            sourceFile._markAsInProject();\n        return sourceFile;\n    }\n    containsSourceFileAtPath(filePath) {\n        filePath = this.context.fileSystemWrapper.getStandardizedAbsolutePath(filePath);\n        return this.sourceFileCacheByFilePath.has(filePath);\n    }\n    containsDirectoryAtPath(dirPath) {\n        dirPath = this.context.fileSystemWrapper.getStandardizedAbsolutePath(dirPath);\n        return this.directoryCache.has(dirPath);\n    }\n    getSourceFileForNode(compilerNode) {\n        let currentNode = compilerNode;\n        while (currentNode.kind !== common.SyntaxKind.SourceFile) {\n            if (currentNode.parent == null)\n                return undefined;\n            currentNode = currentNode.parent;\n        }\n        return this.getSourceFile(currentNode, { markInProject: false });\n    }\n    hasCompilerNode(compilerNode) {\n        return this.nodeCache.has(compilerNode);\n    }\n    getExistingNodeFromCompilerNode(compilerNode) {\n        return this.nodeCache.get(compilerNode);\n    }\n    getNodeFromCompilerNode(compilerNode, sourceFile) {\n        if (compilerNode.kind === common.SyntaxKind.SourceFile)\n            return this.getSourceFile(compilerNode, { markInProject: false });\n        return this.nodeCache.getOrCreate(compilerNode, () => {\n            const node = createNode.call(this);\n            initializeNode.call(this, node);\n            return node;\n        });\n        function createNode() {\n            if (isCommentNode(compilerNode)) {\n                if (CommentNodeParser.isCommentStatement(compilerNode))\n                    return new CommentStatement(this.context, compilerNode, sourceFile);\n                if (CommentNodeParser.isCommentClassElement(compilerNode))\n                    return new CommentClassElement(this.context, compilerNode, sourceFile);\n                if (CommentNodeParser.isCommentTypeElement(compilerNode))\n                    return new CommentTypeElement(this.context, compilerNode, sourceFile);\n                if (CommentNodeParser.isCommentObjectLiteralElement(compilerNode))\n                    return new CommentObjectLiteralElement(this.context, compilerNode, sourceFile);\n                if (CommentNodeParser.isCommentEnumMember(compilerNode))\n                    return new CommentEnumMember(this.context, compilerNode, sourceFile);\n                return common.errors.throwNotImplementedForNeverValueError(compilerNode);\n            }\n            const ctor = kindToWrapperMappings[compilerNode.kind] || Node;\n            return new ctor(this.context, compilerNode, sourceFile);\n        }\n        function isCommentNode(node) {\n            return node._commentKind != null;\n        }\n        function initializeNode(node) {\n            if (compilerNode.parent != null) {\n                const parentNode = this.getNodeFromCompilerNode(compilerNode.parent, sourceFile);\n                parentNode._wrappedChildCount++;\n            }\n            const parentSyntaxList = node._getParentSyntaxListIfWrapped();\n            if (parentSyntaxList != null)\n                parentSyntaxList._wrappedChildCount++;\n            if (compilerNode.kind === common.SyntaxKind.SyntaxList) {\n                let count = 0;\n                for (const _ of node._getChildrenInCacheIterator())\n                    count++;\n                node._wrappedChildCount = count;\n            }\n        }\n    }\n    createSourceFileFromTextInternal(filePath, text, options) {\n        const hasBom = common.StringUtils.hasBom(text);\n        if (hasBom)\n            text = common.StringUtils.stripBom(text);\n        const sourceFile = this.getSourceFile(this.createCompilerSourceFileFromText(filePath, text, options.scriptKind), options);\n        if (hasBom)\n            sourceFile._hasBom = true;\n        return sourceFile;\n    }\n    createCompilerSourceFileFromText(filePath, text, scriptKind) {\n        return this.documentRegistry.createOrUpdateSourceFile(filePath, this.context.compilerOptions.get(), common.ts.ScriptSnapshot.fromString(text), scriptKind);\n    }\n    getSourceFile(compilerSourceFile, options) {\n        var _a;\n        let wasAdded = false;\n        const sourceFile = (_a = this.sourceFileCacheByFilePath.get(compilerSourceFile.fileName)) !== null && _a !== void 0 ? _a : this.nodeCache.getOrCreate(compilerSourceFile, () => {\n            const createdSourceFile = new SourceFile(this.context, compilerSourceFile);\n            if (!options.markInProject)\n                this.context.inProjectCoordinator.setSourceFileNotInProject(createdSourceFile);\n            this.addSourceFileToCache(createdSourceFile);\n            wasAdded = true;\n            return createdSourceFile;\n        });\n        if (options.markInProject)\n            sourceFile._markAsInProject();\n        if (wasAdded)\n            this.sourceFileAddedEventContainer.fire(sourceFile);\n        return sourceFile;\n    }\n    addSourceFileToCache(sourceFile) {\n        this.sourceFileCacheByFilePath.set(sourceFile.getFilePath(), sourceFile);\n        this.context.fileSystemWrapper.removeFileDelete(sourceFile.getFilePath());\n        this.directoryCache.addSourceFile(sourceFile);\n    }\n    getDirectoryFromPath(dirPath, options) {\n        dirPath = this.context.fileSystemWrapper.getStandardizedAbsolutePath(dirPath);\n        let directory = this.directoryCache.get(dirPath);\n        if (directory == null && this.context.fileSystemWrapper.directoryExistsSync(dirPath))\n            directory = this.directoryCache.createOrAddIfExists(dirPath);\n        if (directory != null && options.markInProject)\n            directory._markAsInProject();\n        return directory;\n    }\n    createDirectoryOrAddIfExists(dirPath, options) {\n        const directory = this.directoryCache.createOrAddIfExists(dirPath);\n        if (directory != null && options.markInProject)\n            directory._markAsInProject();\n        return directory;\n    }\n    getDirectoryFromCache(dirPath) {\n        return this.directoryCache.get(dirPath);\n    }\n    getDirectoryFromCacheOnlyIfInCache(dirPath) {\n        return this.directoryCache.has(dirPath)\n            ? this.directoryCache.get(dirPath)\n            : undefined;\n    }\n    getDirectoriesByDepth() {\n        return this.directoryCache.getAllByDepth();\n    }\n    getOrphanDirectories() {\n        return this.directoryCache.getOrphans();\n    }\n    getSymbolDisplayPart(compilerObject) {\n        return this.symbolDisplayPartCache.getOrCreate(compilerObject, () => new SymbolDisplayPart(compilerObject));\n    }\n    getType(type) {\n        if ((type.flags & common.TypeFlags.TypeParameter) === common.TypeFlags.TypeParameter)\n            return this.getTypeParameter(type);\n        return this.typeCache.getOrCreate(type, () => new Type(this.context, type));\n    }\n    getTypeParameter(typeParameter) {\n        return this.typeParameterCache.getOrCreate(typeParameter, () => new TypeParameter(this.context, typeParameter));\n    }\n    getSignature(signature) {\n        return this.signatureCache.getOrCreate(signature, () => new Signature(this.context, signature));\n    }\n    getSymbol(symbol) {\n        return this.symbolCache.getOrCreate(symbol, () => new Symbol(this.context, symbol));\n    }\n    getDefinitionInfo(compilerObject) {\n        return this.definitionInfoCache.getOrCreate(compilerObject, () => new DefinitionInfo(this.context, compilerObject));\n    }\n    getDocumentSpan(compilerObject) {\n        return this.documentSpanCache.getOrCreate(compilerObject, () => new DocumentSpan(this.context, compilerObject));\n    }\n    getReferencedSymbolEntry(compilerObject) {\n        return this.referencedSymbolEntryCache.getOrCreate(compilerObject, () => new ReferencedSymbolEntry(this.context, compilerObject));\n    }\n    getReferencedSymbol(compilerObject) {\n        return this.referencedSymbolCache.getOrCreate(compilerObject, () => new ReferencedSymbol(this.context, compilerObject));\n    }\n    getReferencedSymbolDefinitionInfo(compilerObject) {\n        return this.referencedSymbolDefinitionInfoCache.getOrCreate(compilerObject, () => new ReferencedSymbolDefinitionInfo(this.context, compilerObject));\n    }\n    getDiagnostic(diagnostic) {\n        return this.diagnosticCache.getOrCreate(diagnostic, () => {\n            if (diagnostic.start != null)\n                return new DiagnosticWithLocation(this.context, diagnostic);\n            return new Diagnostic(this.context, diagnostic);\n        });\n    }\n    getDiagnosticWithLocation(diagnostic) {\n        return this.diagnosticCache.getOrCreate(diagnostic, () => new DiagnosticWithLocation(this.context, diagnostic));\n    }\n    getDiagnosticMessageChain(compilerObject) {\n        return this.diagnosticMessageChainCache.getOrCreate(compilerObject, () => new DiagnosticMessageChain(compilerObject));\n    }\n    getJSDocTagInfo(jsDocTagInfo) {\n        return this.jsDocTagInfoCache.getOrCreate(jsDocTagInfo, () => new JSDocTagInfo(jsDocTagInfo));\n    }\n    replaceCompilerNode(oldNode, newNode) {\n        const nodeToReplace = oldNode instanceof Node ? oldNode.compilerNode : oldNode;\n        const node = oldNode instanceof Node ? oldNode : this.nodeCache.get(oldNode);\n        if (nodeToReplace.kind === common.SyntaxKind.SourceFile && nodeToReplace.fileName !== newNode.fileName) {\n            const sourceFile = node;\n            this.removeCompilerNodeFromCache(nodeToReplace);\n            sourceFile._replaceCompilerNodeFromFactory(newNode);\n            this.nodeCache.set(newNode, sourceFile);\n            this.addSourceFileToCache(sourceFile);\n            this.sourceFileAddedEventContainer.fire(sourceFile);\n        }\n        else {\n            this.nodeCache.replaceKey(nodeToReplace, newNode);\n            if (node != null)\n                node._replaceCompilerNodeFromFactory(newNode);\n        }\n    }\n    removeNodeFromCache(node) {\n        this.removeCompilerNodeFromCache(node.compilerNode);\n    }\n    removeCompilerNodeFromCache(compilerNode) {\n        this.nodeCache.removeByKey(compilerNode);\n        if (compilerNode.kind === common.SyntaxKind.SourceFile) {\n            const sourceFile = compilerNode;\n            const standardizedFilePath = this.context.fileSystemWrapper.getStandardizedAbsolutePath(sourceFile.fileName);\n            this.directoryCache.removeSourceFile(standardizedFilePath);\n            const wrappedSourceFile = this.sourceFileCacheByFilePath.get(standardizedFilePath);\n            this.sourceFileCacheByFilePath.delete(standardizedFilePath);\n            this.documentRegistry.removeSourceFile(standardizedFilePath);\n            if (wrappedSourceFile != null)\n                this.sourceFileRemovedEventContainer.fire(wrappedSourceFile);\n        }\n    }\n    addDirectoryToCache(directory) {\n        this.directoryCache.addDirectory(directory);\n    }\n    removeDirectoryFromCache(dirPath) {\n        this.directoryCache.remove(dirPath);\n    }\n    forgetNodesCreatedInBlock(block) {\n        this.nodeCache.setForgetPoint();\n        let wasPromise = false;\n        let result;\n        try {\n            result = block((...nodes) => {\n                for (const node of nodes)\n                    this.nodeCache.rememberNode(node);\n            });\n            if (Node.isNode(result))\n                this.nodeCache.rememberNode(result);\n            if (isPromise(result)) {\n                wasPromise = true;\n                return result.then(value => {\n                    if (Node.isNode(value))\n                        this.nodeCache.rememberNode(value);\n                    this.nodeCache.forgetLastPoint();\n                    return value;\n                });\n            }\n        }\n        finally {\n            if (!wasPromise)\n                this.nodeCache.forgetLastPoint();\n        }\n        return result;\n        function isPromise(value) {\n            return value != null && typeof value.then === \"function\";\n        }\n    }\n}\n\nclass InProjectCoordinator {\n    constructor(compilerFactory) {\n        this.compilerFactory = compilerFactory;\n        this.notInProjectFiles = new Set();\n        compilerFactory.onSourceFileRemoved(sourceFile => {\n            this.notInProjectFiles.delete(sourceFile);\n        });\n    }\n    setSourceFileNotInProject(sourceFile) {\n        this.notInProjectFiles.add(sourceFile);\n        sourceFile._inProject = false;\n    }\n    markSourceFileAsInProject(sourceFile) {\n        if (this.isSourceFileInProject(sourceFile))\n            return;\n        this._internalMarkSourceFileAsInProject(sourceFile);\n        this.notInProjectFiles.delete(sourceFile);\n    }\n    markSourceFilesAsInProjectForResolution() {\n        const nodeModulesSearchName = \"/node_modules/\";\n        const compilerFactory = this.compilerFactory;\n        const changedSourceFiles = [];\n        const unchangedSourceFiles = [];\n        for (const sourceFile of [...this.notInProjectFiles.values()]) {\n            if (shouldMarkInProject(sourceFile)) {\n                this._internalMarkSourceFileAsInProject(sourceFile);\n                this.notInProjectFiles.delete(sourceFile);\n                changedSourceFiles.push(sourceFile);\n            }\n            else {\n                unchangedSourceFiles.push(sourceFile);\n            }\n        }\n        return { changedSourceFiles, unchangedSourceFiles };\n        function shouldMarkInProject(sourceFile) {\n            const filePath = sourceFile.getFilePath();\n            const index = filePath.toLowerCase().lastIndexOf(nodeModulesSearchName);\n            if (index === -1)\n                return true;\n            const nodeModulesPath = filePath.substring(0, index + nodeModulesSearchName.length - 1);\n            const nodeModulesDir = compilerFactory.getDirectoryFromCacheOnlyIfInCache(nodeModulesPath);\n            if (nodeModulesDir != null && nodeModulesDir._isInProject())\n                return true;\n            let directory = sourceFile.getDirectory();\n            while (directory != null && directory.getPath() !== nodeModulesPath) {\n                if (directory._isInProject())\n                    return true;\n                directory = compilerFactory.getDirectoryFromCacheOnlyIfInCache(common.FileUtils.getDirPath(directory.getPath()));\n            }\n            return false;\n        }\n    }\n    _internalMarkSourceFileAsInProject(sourceFile) {\n        sourceFile._inProject = true;\n        this.markDirectoryAsInProject(sourceFile.getDirectory());\n    }\n    isSourceFileInProject(sourceFile) {\n        return sourceFile._inProject === true;\n    }\n    setDirectoryAndFilesAsNotInProjectForTesting(directory) {\n        for (const subDir of directory.getDirectories())\n            this.setDirectoryAndFilesAsNotInProjectForTesting(subDir);\n        for (const file of directory.getSourceFiles()) {\n            delete file._inProject;\n            this.notInProjectFiles.add(file);\n        }\n        delete directory._inProject;\n    }\n    markDirectoryAsInProject(directory) {\n        if (this.isDirectoryInProject(directory))\n            return;\n        const inProjectCoordinator = this;\n        const compilerFactory = this.compilerFactory;\n        directory._inProject = true;\n        markAncestorDirs(directory);\n        function markAncestorDirs(dir) {\n            const ancestorDirs = Array.from(getAncestorsUpToOneInProject(dir));\n            const topAncestor = ancestorDirs[ancestorDirs.length - 1];\n            if (topAncestor == null || !inProjectCoordinator.isDirectoryInProject(topAncestor))\n                return;\n            for (const ancestorDir of ancestorDirs)\n                ancestorDir._inProject = true;\n        }\n        function* getAncestorsUpToOneInProject(dir) {\n            if (common.FileUtils.isRootDirPath(dir.getPath()))\n                return;\n            const parentDirPath = common.FileUtils.getDirPath(dir.getPath());\n            const parentDir = compilerFactory.getDirectoryFromCacheOnlyIfInCache(parentDirPath);\n            if (parentDir == null)\n                return;\n            yield parentDir;\n            if (!inProjectCoordinator.isDirectoryInProject(parentDir))\n                yield* getAncestorsUpToOneInProject(parentDir);\n        }\n    }\n    isDirectoryInProject(directory) {\n        return directory._inProject === true;\n    }\n}\n\nclass StructurePrinterFactory {\n    constructor(_getFormatCodeSettings) {\n        this._getFormatCodeSettings = _getFormatCodeSettings;\n    }\n    getFormatCodeSettings() {\n        return this._getFormatCodeSettings();\n    }\n    forInitializerExpressionableNode() {\n        return new InitializerExpressionableNodeStructurePrinter();\n    }\n    forModifierableNode() {\n        return new ModifierableNodeStructurePrinter();\n    }\n    forReturnTypedNode(alwaysWrite) {\n        return new ReturnTypedNodeStructurePrinter(alwaysWrite);\n    }\n    forTypedNode(separator, alwaysWrite) {\n        return new TypedNodeStructurePrinter(separator, alwaysWrite);\n    }\n    forClassDeclaration(options) {\n        return new ClassDeclarationStructurePrinter(this, options);\n    }\n    forClassMember(options) {\n        return new ClassMemberStructurePrinter(this, options);\n    }\n    forClassStaticBlockDeclaration() {\n        return new ClassStaticBlockDeclarationStructurePrinter(this);\n    }\n    forConstructorDeclaration(options) {\n        return new ConstructorDeclarationStructurePrinter(this, options);\n    }\n    forGetAccessorDeclaration(options) {\n        return new GetAccessorDeclarationStructurePrinter(this, options);\n    }\n    forMethodDeclaration(options) {\n        return new MethodDeclarationStructurePrinter(this, options);\n    }\n    forPropertyDeclaration() {\n        return new PropertyDeclarationStructurePrinter(this);\n    }\n    forSetAccessorDeclaration(options) {\n        return new SetAccessorDeclarationStructurePrinter(this, options);\n    }\n    forDecorator() {\n        return new DecoratorStructurePrinter(this);\n    }\n    forJSDoc() {\n        return new JSDocStructurePrinter(this);\n    }\n    forJSDocTag(options) {\n        return new JSDocTagStructurePrinter(this, options);\n    }\n    forEnumDeclaration() {\n        return new EnumDeclarationStructurePrinter(this);\n    }\n    forEnumMember() {\n        return new EnumMemberStructurePrinter(this);\n    }\n    forObjectLiteralExpressionProperty() {\n        return new ObjectLiteralExpressionPropertyStructurePrinter(this);\n    }\n    forPropertyAssignment() {\n        return new PropertyAssignmentStructurePrinter(this);\n    }\n    forShorthandPropertyAssignment() {\n        return new ShorthandPropertyAssignmentStructurePrinter(this);\n    }\n    forSpreadAssignment() {\n        return new SpreadAssignmentStructurePrinter(this);\n    }\n    forFunctionDeclaration(options) {\n        return new FunctionDeclarationStructurePrinter(this, options);\n    }\n    forParameterDeclaration() {\n        return new ParameterDeclarationStructurePrinter(this);\n    }\n    forCallSignatureDeclaration() {\n        return new CallSignatureDeclarationStructurePrinter(this);\n    }\n    forConstructSignatureDeclaration() {\n        return new ConstructSignatureDeclarationStructurePrinter(this);\n    }\n    forIndexSignatureDeclaration() {\n        return new IndexSignatureDeclarationStructurePrinter(this);\n    }\n    forInterfaceDeclaration() {\n        return new InterfaceDeclarationStructurePrinter(this);\n    }\n    forMethodSignature() {\n        return new MethodSignatureStructurePrinter(this);\n    }\n    forPropertySignature() {\n        return new PropertySignatureStructurePrinter(this);\n    }\n    forTypeElementMemberedNode() {\n        return new TypeElementMemberedNodeStructurePrinter(this);\n    }\n    forTypeElementMember() {\n        return new TypeElementMemberStructurePrinter(this);\n    }\n    forJsxAttributeDecider() {\n        return new JsxAttributeDeciderStructurePrinter(this);\n    }\n    forJsxAttribute() {\n        return new JsxAttributeStructurePrinter(this);\n    }\n    forJsxChildDecider() {\n        return new JsxChildDeciderStructurePrinter(this);\n    }\n    forJsxElement() {\n        return new JsxElementStructurePrinter(this);\n    }\n    forJsxSelfClosingElement() {\n        return new JsxSelfClosingElementStructurePrinter(this);\n    }\n    forJsxSpreadAttribute() {\n        return new JsxSpreadAttributeStructurePrinter(this);\n    }\n    forAssertEntry() {\n        return new AssertEntryStructurePrinter(this);\n    }\n    forExportAssignment() {\n        return new ExportAssignmentStructurePrinter(this);\n    }\n    forExportDeclaration() {\n        return new ExportDeclarationStructurePrinter(this);\n    }\n    forImportDeclaration() {\n        return new ImportDeclarationStructurePrinter(this);\n    }\n    forModuleDeclaration(options) {\n        return new ModuleDeclarationStructurePrinter(this, options);\n    }\n    forNamedImportExportSpecifier() {\n        return new NamedImportExportSpecifierStructurePrinter(this);\n    }\n    forSourceFile(options) {\n        return new SourceFileStructurePrinter(this, options);\n    }\n    forStatementedNode(options) {\n        return new StatementedNodeStructurePrinter(this, options);\n    }\n    forStatement(options) {\n        return new StatementStructurePrinter(this, options);\n    }\n    forVariableStatement() {\n        return new VariableStatementStructurePrinter(this);\n    }\n    forTypeAliasDeclaration() {\n        return new TypeAliasDeclarationStructurePrinter(this);\n    }\n    forTypeParameterDeclaration() {\n        return new TypeParameterDeclarationStructurePrinter(this);\n    }\n    forVariableDeclaration() {\n        return new VariableDeclarationStructurePrinter(this);\n    }\n}\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forInitializerExpressionableNode\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forModifierableNode\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forReturnTypedNode\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forTypedNode\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forClassDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forClassMember\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forClassStaticBlockDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forConstructorDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forGetAccessorDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forMethodDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forPropertyDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forSetAccessorDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forDecorator\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forJSDoc\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forJSDocTag\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forEnumDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forEnumMember\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forObjectLiteralExpressionProperty\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forPropertyAssignment\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forShorthandPropertyAssignment\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forSpreadAssignment\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forFunctionDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forParameterDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forCallSignatureDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forConstructSignatureDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forIndexSignatureDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forInterfaceDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forMethodSignature\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forPropertySignature\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forTypeElementMemberedNode\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forTypeElementMember\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forJsxAttributeDecider\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forJsxAttribute\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forJsxChildDecider\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forJsxElement\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forJsxSelfClosingElement\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forJsxSpreadAttribute\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forAssertEntry\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forExportAssignment\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forExportDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forImportDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forModuleDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forNamedImportExportSpecifier\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forSourceFile\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forStatementedNode\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forStatement\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forVariableStatement\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forTypeAliasDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forTypeParameterDeclaration\", null);\n__decorate([\n    common.Memoize\n], StructurePrinterFactory.prototype, \"forVariableDeclaration\", null);\n\nclass ProjectContext {\n    constructor(params) {\n        this.logger = new ConsoleLogger();\n        this.manipulationSettings = new ManipulationSettingsContainer();\n        this._project = params.project;\n        this.fileSystemWrapper = params.fileSystemWrapper;\n        this._compilerOptions = params.compilerOptionsContainer;\n        this.compilerFactory = new CompilerFactory(this);\n        this.inProjectCoordinator = new InProjectCoordinator(this.compilerFactory);\n        this.structurePrinterFactory = new StructurePrinterFactory(() => this.manipulationSettings.getFormatCodeSettings());\n        this.lazyReferenceCoordinator = new LazyReferenceCoordinator(this.compilerFactory);\n        this.directoryCoordinator = new DirectoryCoordinator(this.compilerFactory, params.fileSystemWrapper);\n        this._languageService = params.createLanguageService\n            ? new LanguageService({\n                context: this,\n                configFileParsingDiagnostics: params.configFileParsingDiagnostics,\n                resolutionHost: params.resolutionHost && params.resolutionHost(this.getModuleResolutionHost(), () => this.compilerOptions.get()),\n                skipLoadingLibFiles: params.skipLoadingLibFiles,\n                libFolderPath: params.libFolderPath,\n            })\n            : undefined;\n        if (params.typeChecker != null) {\n            common.errors.throwIfTrue(params.createLanguageService, \"Cannot specify a type checker and create a language service.\");\n            this._customTypeChecker = new TypeChecker(this);\n            this._customTypeChecker._reset(() => params.typeChecker);\n        }\n    }\n    get project() {\n        if (this._project == null)\n            throw new common.errors.InvalidOperationError(\"This operation is not permitted in this context.\");\n        return this._project;\n    }\n    get compilerOptions() {\n        return this._compilerOptions;\n    }\n    get languageService() {\n        if (this._languageService == null)\n            throw this.getToolRequiredError(\"language service\");\n        return this._languageService;\n    }\n    get program() {\n        if (this._languageService == null)\n            throw this.getToolRequiredError(\"program\");\n        return this.languageService.getProgram();\n    }\n    get typeChecker() {\n        if (this._customTypeChecker != null)\n            return this._customTypeChecker;\n        if (this._languageService == null)\n            throw this.getToolRequiredError(\"type checker\");\n        return this.program.getTypeChecker();\n    }\n    hasLanguageService() {\n        return this._languageService != null;\n    }\n    getEncoding() {\n        return this.compilerOptions.getEncoding();\n    }\n    getFormatCodeSettings() {\n        return this.manipulationSettings.getFormatCodeSettings();\n    }\n    getUserPreferences() {\n        return this.manipulationSettings.getUserPreferences();\n    }\n    resetProgram() {\n        this.languageService._reset();\n    }\n    createWriter() {\n        const indentationText = this.manipulationSettings.getIndentationText();\n        return new CodeBlockWriter__default[\"default\"]({\n            newLine: this.manipulationSettings.getNewLineKindAsString(),\n            indentNumberOfSpaces: indentationText === exports.IndentationText.Tab ? undefined : indentationText.length,\n            useTabs: indentationText === exports.IndentationText.Tab,\n            useSingleQuote: this.manipulationSettings.getQuoteKind() === exports.QuoteKind.Single,\n        });\n    }\n    getPreEmitDiagnostics(sourceFile) {\n        const compilerDiagnostics = common.ts.getPreEmitDiagnostics(this.program.compilerObject, sourceFile === null || sourceFile === void 0 ? void 0 : sourceFile.compilerNode);\n        return compilerDiagnostics.map(d => this.compilerFactory.getDiagnostic(d));\n    }\n    getSourceFileContainer() {\n        return {\n            addOrGetSourceFileFromFilePath: (filePath, opts) => {\n                var _a;\n                return Promise.resolve((_a = this.compilerFactory.addOrGetSourceFileFromFilePath(filePath, opts)) === null || _a === void 0 ? void 0 : _a.compilerNode);\n            },\n            addOrGetSourceFileFromFilePathSync: (filePath, opts) => {\n                var _a;\n                return (_a = this.compilerFactory.addOrGetSourceFileFromFilePath(filePath, opts)) === null || _a === void 0 ? void 0 : _a.compilerNode;\n            },\n            containsDirectoryAtPath: dirPath => this.compilerFactory.containsDirectoryAtPath(dirPath),\n            containsSourceFileAtPath: filePath => this.compilerFactory.containsSourceFileAtPath(filePath),\n            getSourceFileFromCacheFromFilePath: filePath => {\n                const sourceFile = this.compilerFactory.getSourceFileFromCacheFromFilePath(filePath);\n                return sourceFile === null || sourceFile === void 0 ? void 0 : sourceFile.compilerNode;\n            },\n            getSourceFilePaths: () => this.compilerFactory.getSourceFilePaths(),\n            getSourceFileVersion: sourceFile => this.compilerFactory.documentRegistry.getSourceFileVersion(sourceFile),\n            getChildDirectoriesOfDirectory: dirPath => {\n                const result = [];\n                for (const dir of this.compilerFactory.getChildDirectoriesOfDirectory(dirPath))\n                    result.push(dir.getPath());\n                return result;\n            },\n        };\n    }\n    getModuleResolutionHost() {\n        return common.createModuleResolutionHost({\n            transactionalFileSystem: this.fileSystemWrapper,\n            getEncoding: () => this.getEncoding(),\n            sourceFileContainer: this.getSourceFileContainer(),\n        });\n    }\n    getToolRequiredError(name) {\n        return new common.errors.InvalidOperationError(`A ${name} is required for this operation. `\n            + \"This might occur when manipulating or getting type information from a node that was not added \"\n            + `to a Project object and created via createWrappedNode. `\n            + `Please submit a bug report if you don't believe a ${name} should be required for this operation.`);\n    }\n}\n__decorate([\n    common.Memoize\n], ProjectContext.prototype, \"getSourceFileContainer\", null);\n__decorate([\n    common.Memoize\n], ProjectContext.prototype, \"getModuleResolutionHost\", null);\n\nclass Project {\n    constructor(options = {}) {\n        var _a;\n        verifyOptions();\n        const fileSystem = getFileSystem();\n        const fileSystemWrapper = new common.TransactionalFileSystem({\n            fileSystem,\n            skipLoadingLibFiles: options.skipLoadingLibFiles,\n            libFolderPath: options.libFolderPath,\n        });\n        const tsConfigResolver = options.tsConfigFilePath == null\n            ? undefined\n            : new common.TsConfigResolver(fileSystemWrapper, fileSystemWrapper.getStandardizedAbsolutePath(options.tsConfigFilePath), getEncoding());\n        const compilerOptions = getCompilerOptions();\n        const compilerOptionsContainer = new common.CompilerOptionsContainer();\n        compilerOptionsContainer.set(compilerOptions);\n        this._context = new ProjectContext({\n            project: this,\n            compilerOptionsContainer,\n            fileSystemWrapper,\n            createLanguageService: true,\n            resolutionHost: options.resolutionHost,\n            configFileParsingDiagnostics: (_a = tsConfigResolver === null || tsConfigResolver === void 0 ? void 0 : tsConfigResolver.getErrors()) !== null && _a !== void 0 ? _a : [],\n            skipLoadingLibFiles: options.skipLoadingLibFiles,\n            libFolderPath: options.libFolderPath,\n        });\n        if (options.manipulationSettings != null)\n            this._context.manipulationSettings.set(options.manipulationSettings);\n        if (tsConfigResolver != null && options.skipAddingFilesFromTsConfig !== true) {\n            this._addSourceFilesForTsConfigResolver(tsConfigResolver, compilerOptions);\n            if (!options.skipFileDependencyResolution)\n                this.resolveSourceFileDependencies();\n        }\n        function verifyOptions() {\n            if (options.fileSystem != null && options.useInMemoryFileSystem)\n                throw new common.errors.InvalidOperationError(\"Cannot provide a file system when specifying to use an in-memory file system.\");\n        }\n        function getFileSystem() {\n            var _a;\n            if (options.useInMemoryFileSystem)\n                return new common.InMemoryFileSystemHost();\n            return (_a = options.fileSystem) !== null && _a !== void 0 ? _a : new common.RealFileSystemHost();\n        }\n        function getCompilerOptions() {\n            var _a;\n            return {\n                ...getTsConfigCompilerOptions(),\n                ...((_a = options.compilerOptions) !== null && _a !== void 0 ? _a : {}),\n            };\n        }\n        function getTsConfigCompilerOptions() {\n            var _a;\n            return (_a = tsConfigResolver === null || tsConfigResolver === void 0 ? void 0 : tsConfigResolver.getCompilerOptions()) !== null && _a !== void 0 ? _a : {};\n        }\n        function getEncoding() {\n            var _a;\n            const defaultEncoding = \"utf-8\";\n            if (options.compilerOptions != null)\n                return (_a = options.compilerOptions.charset) !== null && _a !== void 0 ? _a : defaultEncoding;\n            return defaultEncoding;\n        }\n    }\n    get manipulationSettings() {\n        return this._context.manipulationSettings;\n    }\n    get compilerOptions() {\n        return this._context.compilerOptions;\n    }\n    resolveSourceFileDependencies() {\n        const sourceFiles = new Set();\n        const onSourceFileAdded = (sourceFile) => sourceFiles.add(sourceFile);\n        const { compilerFactory, inProjectCoordinator } = this._context;\n        compilerFactory.onSourceFileAdded(onSourceFileAdded);\n        try {\n            this.getProgram().compilerObject;\n        }\n        finally {\n            compilerFactory.onSourceFileAdded(onSourceFileAdded, false);\n        }\n        const result = inProjectCoordinator.markSourceFilesAsInProjectForResolution();\n        for (const sourceFile of result.changedSourceFiles)\n            sourceFiles.add(sourceFile);\n        for (const sourceFile of result.unchangedSourceFiles)\n            sourceFiles.delete(sourceFile);\n        return Array.from(sourceFiles.values());\n    }\n    addDirectoryAtPathIfExists(dirPath, options = {}) {\n        return this._context.directoryCoordinator.addDirectoryAtPathIfExists(this._context.fileSystemWrapper.getStandardizedAbsolutePath(dirPath), { ...options, markInProject: true });\n    }\n    addDirectoryAtPath(dirPath, options = {}) {\n        return this._context.directoryCoordinator.addDirectoryAtPath(this._context.fileSystemWrapper.getStandardizedAbsolutePath(dirPath), { ...options, markInProject: true });\n    }\n    createDirectory(dirPath) {\n        return this._context.directoryCoordinator.createDirectoryOrAddIfExists(this._context.fileSystemWrapper.getStandardizedAbsolutePath(dirPath), { markInProject: true });\n    }\n    getDirectoryOrThrow(dirPath) {\n        return common.errors.throwIfNullOrUndefined(this.getDirectory(dirPath), () => `Could not find a directory at the specified path: ${this._context.fileSystemWrapper.getStandardizedAbsolutePath(dirPath)}`);\n    }\n    getDirectory(dirPath) {\n        const { compilerFactory } = this._context;\n        return compilerFactory.getDirectoryFromCache(this._context.fileSystemWrapper.getStandardizedAbsolutePath(dirPath));\n    }\n    getDirectories() {\n        return Array.from(this._getProjectDirectoriesByDirectoryDepth());\n    }\n    getRootDirectories() {\n        const { inProjectCoordinator } = this._context;\n        const result = [];\n        for (const dir of this._context.compilerFactory.getOrphanDirectories()) {\n            for (const inProjectDir of findInProjectDirectories(dir))\n                result.push(inProjectDir);\n        }\n        return result;\n        function* findInProjectDirectories(dir) {\n            if (inProjectCoordinator.isDirectoryInProject(dir)) {\n                yield dir;\n                return;\n            }\n            for (const childDir of dir._getDirectoriesIterator())\n                yield* findInProjectDirectories(childDir);\n        }\n    }\n    addSourceFilesAtPaths(fileGlobs) {\n        return this._context.directoryCoordinator.addSourceFilesAtPaths(fileGlobs, { markInProject: true });\n    }\n    addSourceFileAtPathIfExists(filePath) {\n        return this._context.directoryCoordinator.addSourceFileAtPathIfExists(this._context.fileSystemWrapper.getStandardizedAbsolutePath(filePath), {\n            markInProject: true,\n        });\n    }\n    addSourceFileAtPath(filePath) {\n        return this._context.directoryCoordinator.addSourceFileAtPath(this._context.fileSystemWrapper.getStandardizedAbsolutePath(filePath), {\n            markInProject: true,\n        });\n    }\n    addSourceFilesFromTsConfig(tsConfigFilePath) {\n        const resolver = new common.TsConfigResolver(this._context.fileSystemWrapper, this._context.fileSystemWrapper.getStandardizedAbsolutePath(tsConfigFilePath), this._context.getEncoding());\n        return this._addSourceFilesForTsConfigResolver(resolver, resolver.getCompilerOptions());\n    }\n    _addSourceFilesForTsConfigResolver(tsConfigResolver, compilerOptions) {\n        const paths = tsConfigResolver.getPaths(compilerOptions);\n        const addedSourceFiles = paths.filePaths.map(p => this.addSourceFileAtPath(p));\n        for (const dirPath of paths.directoryPaths)\n            this.addDirectoryAtPathIfExists(dirPath);\n        return addedSourceFiles;\n    }\n    createSourceFile(filePath, sourceFileText, options) {\n        return this._context.compilerFactory.createSourceFile(this._context.fileSystemWrapper.getStandardizedAbsolutePath(filePath), sourceFileText !== null && sourceFileText !== void 0 ? sourceFileText : \"\", { ...(options !== null && options !== void 0 ? options : {}), markInProject: true });\n    }\n    removeSourceFile(sourceFile) {\n        const previouslyForgotten = sourceFile.wasForgotten();\n        sourceFile.forget();\n        return !previouslyForgotten;\n    }\n    getSourceFileOrThrow(fileNameOrSearchFunction) {\n        const sourceFile = this.getSourceFile(fileNameOrSearchFunction);\n        if (sourceFile != null)\n            return sourceFile;\n        if (typeof fileNameOrSearchFunction === \"string\") {\n            const fileNameOrPath = common.FileUtils.standardizeSlashes(fileNameOrSearchFunction);\n            if (common.FileUtils.pathIsAbsolute(fileNameOrPath) || fileNameOrPath.indexOf(\"/\") >= 0) {\n                const errorFileNameOrPath = this._context.fileSystemWrapper.getStandardizedAbsolutePath(fileNameOrPath);\n                throw new common.errors.InvalidOperationError(`Could not find source file in project at the provided path: ${errorFileNameOrPath}`);\n            }\n            else {\n                throw new common.errors.InvalidOperationError(`Could not find source file in project with the provided file name: ${fileNameOrSearchFunction}`);\n            }\n        }\n        else {\n            throw new common.errors.InvalidOperationError(`Could not find source file in project based on the provided condition.`);\n        }\n    }\n    getSourceFile(fileNameOrSearchFunction) {\n        const filePathOrSearchFunction = getFilePathOrSearchFunction(this._context.fileSystemWrapper);\n        if (isStandardizedFilePath(filePathOrSearchFunction)) {\n            return this._context.compilerFactory.getSourceFileFromCacheFromFilePath(filePathOrSearchFunction);\n        }\n        return common.IterableUtils.find(this._getProjectSourceFilesByDirectoryDepth(), filePathOrSearchFunction);\n        function getFilePathOrSearchFunction(fileSystemWrapper) {\n            if (fileNameOrSearchFunction instanceof Function)\n                return fileNameOrSearchFunction;\n            const fileNameOrPath = common.FileUtils.standardizeSlashes(fileNameOrSearchFunction);\n            if (common.FileUtils.pathIsAbsolute(fileNameOrPath) || fileNameOrPath.indexOf(\"/\") >= 0)\n                return fileSystemWrapper.getStandardizedAbsolutePath(fileNameOrPath);\n            else\n                return def => common.FileUtils.pathEndsWith(def.getFilePath(), fileNameOrPath);\n        }\n        function isStandardizedFilePath(obj) {\n            return typeof obj === \"string\";\n        }\n    }\n    getSourceFiles(globPatterns) {\n        const { compilerFactory, fileSystemWrapper } = this._context;\n        const sourceFiles = this._getProjectSourceFilesByDirectoryDepth();\n        if (typeof globPatterns === \"string\" || globPatterns instanceof Array)\n            return Array.from(getFilteredSourceFiles());\n        else\n            return Array.from(sourceFiles);\n        function* getFilteredSourceFiles() {\n            const sourceFilePaths = Array.from(getSourceFilePaths());\n            const matchedPaths = common.matchGlobs(sourceFilePaths, globPatterns, fileSystemWrapper.getCurrentDirectory());\n            for (const matchedPath of matchedPaths)\n                yield compilerFactory.getSourceFileFromCacheFromFilePath(fileSystemWrapper.getStandardizedAbsolutePath(matchedPath));\n            function* getSourceFilePaths() {\n                for (const sourceFile of sourceFiles)\n                    yield sourceFile.getFilePath();\n            }\n        }\n    }\n    *_getProjectSourceFilesByDirectoryDepth() {\n        const { compilerFactory, inProjectCoordinator } = this._context;\n        for (const sourceFile of compilerFactory.getSourceFilesByDirectoryDepth()) {\n            if (inProjectCoordinator.isSourceFileInProject(sourceFile))\n                yield sourceFile;\n        }\n    }\n    *_getProjectDirectoriesByDirectoryDepth() {\n        const { compilerFactory, inProjectCoordinator } = this._context;\n        for (const directory of compilerFactory.getDirectoriesByDepth()) {\n            if (inProjectCoordinator.isDirectoryInProject(directory))\n                yield directory;\n        }\n    }\n    getAmbientModule(moduleName) {\n        moduleName = normalizeAmbientModuleName(moduleName);\n        return this.getAmbientModules().find(s => s.getName() === moduleName);\n    }\n    getAmbientModuleOrThrow(moduleName) {\n        return common.errors.throwIfNullOrUndefined(this.getAmbientModule(moduleName), () => `Could not find ambient module with name: ${normalizeAmbientModuleName(moduleName)}`);\n    }\n    getAmbientModules() {\n        return this.getTypeChecker().getAmbientModules();\n    }\n    async save() {\n        await this._context.fileSystemWrapper.flush();\n        await Promise.all(this._getUnsavedSourceFiles().map(f => f.save()));\n    }\n    saveSync() {\n        this._context.fileSystemWrapper.flushSync();\n        for (const file of this._getUnsavedSourceFiles())\n            file.saveSync();\n    }\n    enableLogging(enabled = true) {\n        this._context.logger.setEnabled(enabled);\n    }\n    _getUnsavedSourceFiles() {\n        return Array.from(getUnsavedIterator(this._context.compilerFactory.getSourceFilesByDirectoryDepth()));\n        function* getUnsavedIterator(sourceFiles) {\n            for (const sourceFile of sourceFiles) {\n                if (!sourceFile.isSaved())\n                    yield sourceFile;\n            }\n        }\n    }\n    getPreEmitDiagnostics() {\n        return this._context.getPreEmitDiagnostics();\n    }\n    getLanguageService() {\n        return this._context.languageService;\n    }\n    getProgram() {\n        return this._context.program;\n    }\n    getTypeChecker() {\n        return this._context.typeChecker;\n    }\n    getFileSystem() {\n        return this._context.fileSystemWrapper.getFileSystem();\n    }\n    emit(emitOptions = {}) {\n        return this._context.program.emit(emitOptions);\n    }\n    emitSync(emitOptions = {}) {\n        return this._context.program.emitSync(emitOptions);\n    }\n    emitToMemory(emitOptions = {}) {\n        return this._context.program.emitToMemory(emitOptions);\n    }\n    getCompilerOptions() {\n        return this._context.compilerOptions.get();\n    }\n    getConfigFileParsingDiagnostics() {\n        return this.getProgram().getConfigFileParsingDiagnostics();\n    }\n    createWriter() {\n        return this._context.createWriter();\n    }\n    forgetNodesCreatedInBlock(block) {\n        return this._context.compilerFactory.forgetNodesCreatedInBlock(block);\n    }\n    formatDiagnosticsWithColorAndContext(diagnostics, opts = {}) {\n        return common.ts.formatDiagnosticsWithColorAndContext(diagnostics.map(d => d.compilerObject), {\n            getCurrentDirectory: () => this._context.fileSystemWrapper.getCurrentDirectory(),\n            getCanonicalFileName: fileName => fileName,\n            getNewLine: () => { var _a; return (_a = opts.newLineChar) !== null && _a !== void 0 ? _a : common.runtime.getEndOfLine(); },\n        });\n    }\n    getModuleResolutionHost() {\n        return this._context.getModuleResolutionHost();\n    }\n}\nfunction normalizeAmbientModuleName(moduleName) {\n    if (isQuote(moduleName[0]) && isQuote(moduleName[moduleName.length - 1]))\n        moduleName = moduleName.substring(1, moduleName.length - 1);\n    return `\"${moduleName}\"`;\n    function isQuote(char) {\n        return char === `\"` || char === \"'\";\n    }\n}\n\nfunction createWrappedNode(node, opts = {}) {\n    const { compilerOptions = {}, sourceFile, typeChecker } = opts;\n    const compilerOptionsContainer = new common.CompilerOptionsContainer();\n    compilerOptionsContainer.set(compilerOptions);\n    const projectContext = new ProjectContext({\n        project: undefined,\n        fileSystemWrapper: new common.TransactionalFileSystem({\n            fileSystem: new common.RealFileSystemHost(),\n            skipLoadingLibFiles: true,\n            libFolderPath: undefined,\n        }),\n        compilerOptionsContainer,\n        createLanguageService: false,\n        typeChecker,\n        configFileParsingDiagnostics: [],\n        skipLoadingLibFiles: true,\n        libFolderPath: undefined,\n    });\n    const wrappedSourceFile = projectContext.compilerFactory.getSourceFile(getSourceFileNode(), { markInProject: true });\n    return projectContext.compilerFactory.getNodeFromCompilerNode(node, wrappedSourceFile);\n    function getSourceFileNode() {\n        return sourceFile !== null && sourceFile !== void 0 ? sourceFile : getSourceFileFromNode(node);\n    }\n    function getSourceFileFromNode(compilerNode) {\n        if (compilerNode.kind === common.SyntaxKind.SourceFile)\n            return compilerNode;\n        if (compilerNode.parent == null)\n            throw new common.errors.InvalidOperationError(\"Please ensure the node was created from a source file with 'setParentNodes' set to 'true'.\");\n        let parent = compilerNode;\n        while (parent.parent != null)\n            parent = parent.parent;\n        if (parent.kind !== common.SyntaxKind.SourceFile)\n            throw new common.errors.NotImplementedError(\"For some reason the top parent was not a source file.\");\n        return parent;\n    }\n}\n\nconst structurePrinterFactory = new StructurePrinterFactory(() => {\n    throw new common.errors.NotImplementedError(\"Not implemented scenario for getting code format settings when using a writer function. Please open an issue.\");\n});\nclass Writers {\n    constructor() {\n    }\n    static object(obj) {\n        return (writer) => {\n            const keyNames = Object.keys(obj);\n            writer.write(\"{\");\n            if (keyNames.length > 0) {\n                writer.indent(() => {\n                    writeObject();\n                });\n            }\n            writer.write(\"}\");\n            function writeObject() {\n                for (let i = 0; i < keyNames.length; i++) {\n                    if (i > 0)\n                        writer.write(\",\").newLine();\n                    const keyName = keyNames[i];\n                    const value = obj[keyName];\n                    writer.write(keyName);\n                    if (value != null) {\n                        writer.write(\": \");\n                        writeValue(writer, value);\n                    }\n                }\n                writer.newLine();\n            }\n        };\n    }\n    static objectType(structure) {\n        return (writer) => {\n            writer.write(\"{\");\n            if (anyPropertyHasValue(structure)) {\n                writer.indent(() => {\n                    structurePrinterFactory.forTypeElementMemberedNode().printText(writer, structure);\n                });\n            }\n            writer.write(\"}\");\n        };\n    }\n    static unionType(firstType, secondType, ...additionalTypes) {\n        return getWriteFunctionForUnionOrIntersectionType(\"|\", [firstType, secondType, ...additionalTypes]);\n    }\n    static intersectionType(firstType, secondType, ...additionalTypes) {\n        return getWriteFunctionForUnionOrIntersectionType(\"&\", [firstType, secondType, ...additionalTypes]);\n    }\n    static assertion(type, assertionType) {\n        return (writer) => {\n            writeValue(writer, type);\n            writer.spaceIfLastNot().write(\"as \");\n            writeValue(writer, assertionType);\n        };\n    }\n    static returnStatement(value) {\n        return (writer) => {\n            writer.write(\"return \");\n            writer.hangingIndentUnlessBlock(() => {\n                writeValue(writer, value);\n                writer.write(\";\");\n            });\n        };\n    }\n}\nfunction getWriteFunctionForUnionOrIntersectionType(separator, args) {\n    return (writer) => {\n        writeSeparatedByString(writer, ` ${separator} `, args);\n    };\n}\nfunction anyPropertyHasValue(obj) {\n    for (const key of Object.keys(obj)) {\n        if (obj[key] == null)\n            continue;\n        if (obj[key] instanceof Array && obj[key].length === 0)\n            continue;\n        return true;\n    }\n    return false;\n}\nfunction writeSeparatedByString(writer, separator, values) {\n    for (let i = 0; i < values.length; i++) {\n        writer.conditionalWrite(i > 0, separator);\n        writeValue(writer, values[i]);\n    }\n}\nfunction writeValue(writer, value) {\n    if (value instanceof Function)\n        value(writer);\n    else\n        writer.write(value.toString());\n}\n\nconst { InvalidOperationError, FileNotFoundError, ArgumentError, ArgumentNullOrWhitespaceError, ArgumentOutOfRangeError, ArgumentTypeError, BaseError, DirectoryNotFoundError, NotImplementedError, NotSupportedError, PathNotFoundError, } = common.errors;\n\nObject.defineProperty(exports, 'CompilerOptionsContainer', {\n  enumerable: true,\n  get: function () { return common.CompilerOptionsContainer; }\n});\nObject.defineProperty(exports, 'DiagnosticCategory', {\n  enumerable: true,\n  get: function () { return common.DiagnosticCategory; }\n});\nObject.defineProperty(exports, 'EmitHint', {\n  enumerable: true,\n  get: function () { return common.EmitHint; }\n});\nObject.defineProperty(exports, 'InMemoryFileSystemHost', {\n  enumerable: true,\n  get: function () { return common.InMemoryFileSystemHost; }\n});\nObject.defineProperty(exports, 'LanguageVariant', {\n  enumerable: true,\n  get: function () { return common.LanguageVariant; }\n});\nObject.defineProperty(exports, 'ModuleKind', {\n  enumerable: true,\n  get: function () { return common.ModuleKind; }\n});\nObject.defineProperty(exports, 'ModuleResolutionKind', {\n  enumerable: true,\n  get: function () { return common.ModuleResolutionKind; }\n});\nObject.defineProperty(exports, 'NewLineKind', {\n  enumerable: true,\n  get: function () { return common.NewLineKind; }\n});\nObject.defineProperty(exports, 'NodeFlags', {\n  enumerable: true,\n  get: function () { return common.NodeFlags; }\n});\nObject.defineProperty(exports, 'ObjectFlags', {\n  enumerable: true,\n  get: function () { return common.ObjectFlags; }\n});\nObject.defineProperty(exports, 'ResolutionHosts', {\n  enumerable: true,\n  get: function () { return common.ResolutionHosts; }\n});\nObject.defineProperty(exports, 'ScriptKind', {\n  enumerable: true,\n  get: function () { return common.ScriptKind; }\n});\nObject.defineProperty(exports, 'ScriptTarget', {\n  enumerable: true,\n  get: function () { return common.ScriptTarget; }\n});\nObject.defineProperty(exports, 'SettingsContainer', {\n  enumerable: true,\n  get: function () { return common.SettingsContainer; }\n});\nObject.defineProperty(exports, 'SymbolFlags', {\n  enumerable: true,\n  get: function () { return common.SymbolFlags; }\n});\nObject.defineProperty(exports, 'SyntaxKind', {\n  enumerable: true,\n  get: function () { return common.SyntaxKind; }\n});\nObject.defineProperty(exports, 'TypeFlags', {\n  enumerable: true,\n  get: function () { return common.TypeFlags; }\n});\nObject.defineProperty(exports, 'TypeFormatFlags', {\n  enumerable: true,\n  get: function () { return common.TypeFormatFlags; }\n});\nObject.defineProperty(exports, 'ts', {\n  enumerable: true,\n  get: function () { return common.ts; }\n});\nObject.defineProperty(exports, 'CodeBlockWriter', {\n  enumerable: true,\n  get: function () { return CodeBlockWriter__default[\"default\"]; }\n});\nexports.AbstractableNode = AbstractableNode;\nexports.AmbientableNode = AmbientableNode;\nexports.ArgumentError = ArgumentError;\nexports.ArgumentNullOrWhitespaceError = ArgumentNullOrWhitespaceError;\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\nexports.ArgumentTypeError = ArgumentTypeError;\nexports.ArgumentedNode = ArgumentedNode;\nexports.ArrayBindingPattern = ArrayBindingPattern;\nexports.ArrayDestructuringAssignment = ArrayDestructuringAssignment;\nexports.ArrayDestructuringAssignmentBase = ArrayDestructuringAssignmentBase;\nexports.ArrayLiteralExpression = ArrayLiteralExpression;\nexports.ArrayTypeNode = ArrayTypeNode;\nexports.ArrowFunction = ArrowFunction;\nexports.ArrowFunctionBase = ArrowFunctionBase;\nexports.AsExpression = AsExpression;\nexports.AsExpressionBase = AsExpressionBase;\nexports.AssertClause = AssertClause;\nexports.AssertClauseBase = AssertClauseBase;\nexports.AssertEntry = AssertEntry;\nexports.AssertEntryBase = AssertEntryBase;\nexports.AssertionKeyNamedNode = AssertionKeyNamedNode;\nexports.AssignmentExpression = AssignmentExpression;\nexports.AssignmentExpressionBase = AssignmentExpressionBase;\nexports.AsyncableNode = AsyncableNode;\nexports.AwaitExpression = AwaitExpression;\nexports.AwaitExpressionBase = AwaitExpressionBase;\nexports.AwaitableNode = AwaitableNode;\nexports.BaseError = BaseError;\nexports.BaseExpressionedNode = BaseExpressionedNode;\nexports.BigIntLiteral = BigIntLiteral;\nexports.BigIntLiteralBase = BigIntLiteralBase;\nexports.BinaryExpression = BinaryExpression;\nexports.BinaryExpressionBase = BinaryExpressionBase;\nexports.BindingElement = BindingElement;\nexports.BindingElementBase = BindingElementBase;\nexports.BindingNamedNode = BindingNamedNode;\nexports.Block = Block;\nexports.BlockBase = BlockBase;\nexports.BodiedNode = BodiedNode;\nexports.BodyableNode = BodyableNode;\nexports.BreakStatement = BreakStatement;\nexports.CallExpression = CallExpression;\nexports.CallExpressionBase = CallExpressionBase;\nexports.CallSignatureDeclaration = CallSignatureDeclaration;\nexports.CallSignatureDeclarationBase = CallSignatureDeclarationBase;\nexports.CaseBlock = CaseBlock;\nexports.CaseBlockBase = CaseBlockBase;\nexports.CaseClause = CaseClause;\nexports.CaseClauseBase = CaseClauseBase;\nexports.CatchClause = CatchClause;\nexports.CatchClauseBase = CatchClauseBase;\nexports.ChildOrderableNode = ChildOrderableNode;\nexports.ClassDeclaration = ClassDeclaration;\nexports.ClassDeclarationBase = ClassDeclarationBase;\nexports.ClassElement = ClassElement;\nexports.ClassExpression = ClassExpression;\nexports.ClassExpressionBase = ClassExpressionBase;\nexports.ClassLikeDeclarationBase = ClassLikeDeclarationBase;\nexports.ClassLikeDeclarationBaseSpecific = ClassLikeDeclarationBaseSpecific;\nexports.ClassStaticBlockDeclaration = ClassStaticBlockDeclaration;\nexports.ClassStaticBlockDeclarationBase = ClassStaticBlockDeclarationBase;\nexports.CodeAction = CodeAction;\nexports.CodeFixAction = CodeFixAction;\nexports.CombinedCodeActions = CombinedCodeActions;\nexports.CommaListExpression = CommaListExpression;\nexports.CommaListExpressionBase = CommaListExpressionBase;\nexports.CommentClassElement = CommentClassElement;\nexports.CommentEnumMember = CommentEnumMember;\nexports.CommentObjectLiteralElement = CommentObjectLiteralElement;\nexports.CommentRange = CommentRange;\nexports.CommentStatement = CommentStatement;\nexports.CommentTypeElement = CommentTypeElement;\nexports.CommonIdentifierBase = CommonIdentifierBase;\nexports.CompilerCommentClassElement = CompilerCommentClassElement;\nexports.CompilerCommentEnumMember = CompilerCommentEnumMember;\nexports.CompilerCommentNode = CompilerCommentNode;\nexports.CompilerCommentObjectLiteralElement = CompilerCommentObjectLiteralElement;\nexports.CompilerCommentStatement = CompilerCommentStatement;\nexports.CompilerCommentTypeElement = CompilerCommentTypeElement;\nexports.ComputedPropertyName = ComputedPropertyName;\nexports.ComputedPropertyNameBase = ComputedPropertyNameBase;\nexports.ConditionalExpression = ConditionalExpression;\nexports.ConditionalExpressionBase = ConditionalExpressionBase;\nexports.ConditionalTypeNode = ConditionalTypeNode;\nexports.ConstructSignatureDeclaration = ConstructSignatureDeclaration;\nexports.ConstructSignatureDeclarationBase = ConstructSignatureDeclarationBase;\nexports.ConstructorDeclaration = ConstructorDeclaration;\nexports.ConstructorDeclarationBase = ConstructorDeclarationBase;\nexports.ConstructorDeclarationOverloadBase = ConstructorDeclarationOverloadBase;\nexports.ConstructorTypeNode = ConstructorTypeNode;\nexports.ConstructorTypeNodeBase = ConstructorTypeNodeBase;\nexports.ContinueStatement = ContinueStatement;\nexports.DebuggerStatement = DebuggerStatement;\nexports.DebuggerStatementBase = DebuggerStatementBase;\nexports.DecoratableNode = DecoratableNode;\nexports.Decorator = Decorator;\nexports.DecoratorBase = DecoratorBase;\nexports.DefaultClause = DefaultClause;\nexports.DefaultClauseBase = DefaultClauseBase;\nexports.DefinitionInfo = DefinitionInfo;\nexports.DeleteExpression = DeleteExpression;\nexports.DeleteExpressionBase = DeleteExpressionBase;\nexports.Diagnostic = Diagnostic;\nexports.DiagnosticMessageChain = DiagnosticMessageChain;\nexports.DiagnosticWithLocation = DiagnosticWithLocation;\nexports.Directory = Directory;\nexports.DirectoryEmitResult = DirectoryEmitResult;\nexports.DirectoryNotFoundError = DirectoryNotFoundError;\nexports.DoStatement = DoStatement;\nexports.DoStatementBase = DoStatementBase;\nexports.DocumentSpan = DocumentSpan;\nexports.DotDotDotTokenableNode = DotDotDotTokenableNode;\nexports.ElementAccessExpression = ElementAccessExpression;\nexports.ElementAccessExpressionBase = ElementAccessExpressionBase;\nexports.EmitOutput = EmitOutput;\nexports.EmitResult = EmitResult;\nexports.EmptyStatement = EmptyStatement;\nexports.EmptyStatementBase = EmptyStatementBase;\nexports.EnumDeclaration = EnumDeclaration;\nexports.EnumDeclarationBase = EnumDeclarationBase;\nexports.EnumMember = EnumMember;\nexports.EnumMemberBase = EnumMemberBase;\nexports.ExclamationTokenableNode = ExclamationTokenableNode;\nexports.ExportAssignment = ExportAssignment;\nexports.ExportAssignmentBase = ExportAssignmentBase;\nexports.ExportDeclaration = ExportDeclaration;\nexports.ExportDeclarationBase = ExportDeclarationBase;\nexports.ExportGetableNode = ExportGetableNode;\nexports.ExportSpecifier = ExportSpecifier;\nexports.ExportSpecifierBase = ExportSpecifierBase;\nexports.ExportableNode = ExportableNode;\nexports.Expression = Expression;\nexports.ExpressionStatement = ExpressionStatement;\nexports.ExpressionStatementBase = ExpressionStatementBase;\nexports.ExpressionWithTypeArguments = ExpressionWithTypeArguments;\nexports.ExpressionWithTypeArgumentsBase = ExpressionWithTypeArgumentsBase;\nexports.ExpressionableNode = ExpressionableNode;\nexports.ExpressionedNode = ExpressionedNode;\nexports.ExtendsClauseableNode = ExtendsClauseableNode;\nexports.ExternalModuleReference = ExternalModuleReference;\nexports.ExternalModuleReferenceBase = ExternalModuleReferenceBase;\nexports.FalseLiteral = FalseLiteral;\nexports.FalseLiteralBase = FalseLiteralBase;\nexports.FileNotFoundError = FileNotFoundError;\nexports.FileReference = FileReference;\nexports.FileTextChanges = FileTextChanges;\nexports.ForInStatement = ForInStatement;\nexports.ForInStatementBase = ForInStatementBase;\nexports.ForOfStatement = ForOfStatement;\nexports.ForOfStatementBase = ForOfStatementBase;\nexports.ForStatement = ForStatement;\nexports.ForStatementBase = ForStatementBase;\nexports.FunctionDeclaration = FunctionDeclaration;\nexports.FunctionDeclarationBase = FunctionDeclarationBase;\nexports.FunctionDeclarationOverloadBase = FunctionDeclarationOverloadBase;\nexports.FunctionExpression = FunctionExpression;\nexports.FunctionExpressionBase = FunctionExpressionBase;\nexports.FunctionLikeDeclaration = FunctionLikeDeclaration;\nexports.FunctionOrConstructorTypeNodeBase = FunctionOrConstructorTypeNodeBase;\nexports.FunctionOrConstructorTypeNodeBaseBase = FunctionOrConstructorTypeNodeBaseBase;\nexports.FunctionTypeNode = FunctionTypeNode;\nexports.FunctionTypeNodeBase = FunctionTypeNodeBase;\nexports.GeneratorableNode = GeneratorableNode;\nexports.GetAccessorDeclaration = GetAccessorDeclaration;\nexports.GetAccessorDeclarationBase = GetAccessorDeclarationBase;\nexports.HeritageClause = HeritageClause;\nexports.HeritageClauseableNode = HeritageClauseableNode;\nexports.Identifier = Identifier;\nexports.IdentifierBase = IdentifierBase;\nexports.IfStatement = IfStatement;\nexports.IfStatementBase = IfStatementBase;\nexports.ImplementationLocation = ImplementationLocation;\nexports.ImplementsClauseableNode = ImplementsClauseableNode;\nexports.ImportClause = ImportClause;\nexports.ImportClauseBase = ImportClauseBase;\nexports.ImportDeclaration = ImportDeclaration;\nexports.ImportDeclarationBase = ImportDeclarationBase;\nexports.ImportEqualsDeclaration = ImportEqualsDeclaration;\nexports.ImportEqualsDeclarationBase = ImportEqualsDeclarationBase;\nexports.ImportExpression = ImportExpression;\nexports.ImportExpressionBase = ImportExpressionBase;\nexports.ImportExpressionedNode = ImportExpressionedNode;\nexports.ImportSpecifier = ImportSpecifier;\nexports.ImportSpecifierBase = ImportSpecifierBase;\nexports.ImportTypeAssertionContainer = ImportTypeAssertionContainer;\nexports.ImportTypeNode = ImportTypeNode;\nexports.IndexSignatureDeclaration = IndexSignatureDeclaration;\nexports.IndexSignatureDeclarationBase = IndexSignatureDeclarationBase;\nexports.IndexedAccessTypeNode = IndexedAccessTypeNode;\nexports.InferTypeNode = InferTypeNode;\nexports.InitializerExpressionGetableNode = InitializerExpressionGetableNode;\nexports.InitializerExpressionableNode = InitializerExpressionableNode;\nexports.InterfaceDeclaration = InterfaceDeclaration;\nexports.InterfaceDeclarationBase = InterfaceDeclarationBase;\nexports.IntersectionTypeNode = IntersectionTypeNode;\nexports.InvalidOperationError = InvalidOperationError;\nexports.IterationStatement = IterationStatement;\nexports.JSDoc = JSDoc;\nexports.JSDocAllType = JSDocAllType;\nexports.JSDocAugmentsTag = JSDocAugmentsTag;\nexports.JSDocAuthorTag = JSDocAuthorTag;\nexports.JSDocBase = JSDocBase;\nexports.JSDocCallbackTag = JSDocCallbackTag;\nexports.JSDocClassTag = JSDocClassTag;\nexports.JSDocDeprecatedTag = JSDocDeprecatedTag;\nexports.JSDocEnumTag = JSDocEnumTag;\nexports.JSDocFunctionType = JSDocFunctionType;\nexports.JSDocFunctionTypeBase = JSDocFunctionTypeBase;\nexports.JSDocImplementsTag = JSDocImplementsTag;\nexports.JSDocLink = JSDocLink;\nexports.JSDocLinkCode = JSDocLinkCode;\nexports.JSDocLinkPlain = JSDocLinkPlain;\nexports.JSDocMemberName = JSDocMemberName;\nexports.JSDocNameReference = JSDocNameReference;\nexports.JSDocNamepathType = JSDocNamepathType;\nexports.JSDocNonNullableType = JSDocNonNullableType;\nexports.JSDocNullableType = JSDocNullableType;\nexports.JSDocOptionalType = JSDocOptionalType;\nexports.JSDocOverrideTag = JSDocOverrideTag;\nexports.JSDocParameterTag = JSDocParameterTag;\nexports.JSDocParameterTagBase = JSDocParameterTagBase;\nexports.JSDocPrivateTag = JSDocPrivateTag;\nexports.JSDocPropertyLikeTag = JSDocPropertyLikeTag;\nexports.JSDocPropertyTag = JSDocPropertyTag;\nexports.JSDocPropertyTagBase = JSDocPropertyTagBase;\nexports.JSDocProtectedTag = JSDocProtectedTag;\nexports.JSDocPublicTag = JSDocPublicTag;\nexports.JSDocReadonlyTag = JSDocReadonlyTag;\nexports.JSDocReturnTag = JSDocReturnTag;\nexports.JSDocReturnTagBase = JSDocReturnTagBase;\nexports.JSDocSeeTag = JSDocSeeTag;\nexports.JSDocSeeTagBase = JSDocSeeTagBase;\nexports.JSDocSignature = JSDocSignature;\nexports.JSDocTag = JSDocTag;\nexports.JSDocTagBase = JSDocTagBase;\nexports.JSDocTagInfo = JSDocTagInfo;\nexports.JSDocTemplateTag = JSDocTemplateTag;\nexports.JSDocTemplateTagBase = JSDocTemplateTagBase;\nexports.JSDocText = JSDocText;\nexports.JSDocThisTag = JSDocThisTag;\nexports.JSDocThisTagBase = JSDocThisTagBase;\nexports.JSDocType = JSDocType;\nexports.JSDocTypeExpression = JSDocTypeExpression;\nexports.JSDocTypeExpressionableTag = JSDocTypeExpressionableTag;\nexports.JSDocTypeLiteral = JSDocTypeLiteral;\nexports.JSDocTypeParameteredTag = JSDocTypeParameteredTag;\nexports.JSDocTypeTag = JSDocTypeTag;\nexports.JSDocTypedefTag = JSDocTypedefTag;\nexports.JSDocUnknownTag = JSDocUnknownTag;\nexports.JSDocUnknownType = JSDocUnknownType;\nexports.JSDocVariadicType = JSDocVariadicType;\nexports.JSDocableNode = JSDocableNode;\nexports.JsxAttribute = JsxAttribute;\nexports.JsxAttributeBase = JsxAttributeBase;\nexports.JsxAttributedNode = JsxAttributedNode;\nexports.JsxClosingElement = JsxClosingElement;\nexports.JsxClosingElementBase = JsxClosingElementBase;\nexports.JsxClosingFragment = JsxClosingFragment;\nexports.JsxElement = JsxElement;\nexports.JsxElementBase = JsxElementBase;\nexports.JsxExpression = JsxExpression;\nexports.JsxExpressionBase = JsxExpressionBase;\nexports.JsxFragment = JsxFragment;\nexports.JsxOpeningElement = JsxOpeningElement;\nexports.JsxOpeningElementBase = JsxOpeningElementBase;\nexports.JsxOpeningFragment = JsxOpeningFragment;\nexports.JsxSelfClosingElement = JsxSelfClosingElement;\nexports.JsxSelfClosingElementBase = JsxSelfClosingElementBase;\nexports.JsxSpreadAttribute = JsxSpreadAttribute;\nexports.JsxSpreadAttributeBase = JsxSpreadAttributeBase;\nexports.JsxTagNamedNode = JsxTagNamedNode;\nexports.JsxText = JsxText;\nexports.JsxTextBase = JsxTextBase;\nexports.LabeledStatement = LabeledStatement;\nexports.LabeledStatementBase = LabeledStatementBase;\nexports.LanguageService = LanguageService;\nexports.LeftHandSideExpression = LeftHandSideExpression;\nexports.LeftHandSideExpressionedNode = LeftHandSideExpressionedNode;\nexports.LiteralExpression = LiteralExpression;\nexports.LiteralExpressionBase = LiteralExpressionBase;\nexports.LiteralLikeNode = LiteralLikeNode;\nexports.LiteralTypeNode = LiteralTypeNode;\nexports.ManipulationError = ManipulationError;\nexports.ManipulationSettingsContainer = ManipulationSettingsContainer;\nexports.MappedTypeNode = MappedTypeNode;\nexports.MemberExpression = MemberExpression;\nexports.MemoryEmitResult = MemoryEmitResult;\nexports.MetaProperty = MetaProperty;\nexports.MetaPropertyBase = MetaPropertyBase;\nexports.MethodDeclaration = MethodDeclaration;\nexports.MethodDeclarationBase = MethodDeclarationBase;\nexports.MethodDeclarationOverloadBase = MethodDeclarationOverloadBase;\nexports.MethodSignature = MethodSignature;\nexports.MethodSignatureBase = MethodSignatureBase;\nexports.ModifierableNode = ModifierableNode;\nexports.ModuleBlock = ModuleBlock;\nexports.ModuleBlockBase = ModuleBlockBase;\nexports.ModuleChildableNode = ModuleChildableNode;\nexports.ModuleDeclaration = ModuleDeclaration;\nexports.ModuleDeclarationBase = ModuleDeclarationBase;\nexports.ModuleNamedNode = ModuleNamedNode;\nexports.ModuledNode = ModuledNode;\nexports.NameableNode = NameableNode;\nexports.NamedExports = NamedExports;\nexports.NamedExportsBase = NamedExportsBase;\nexports.NamedImports = NamedImports;\nexports.NamedImportsBase = NamedImportsBase;\nexports.NamedNode = NamedNode;\nexports.NamedNodeBase = NamedNodeBase;\nexports.NamedTupleMember = NamedTupleMember;\nexports.NamedTupleMemberBase = NamedTupleMemberBase;\nexports.NamespaceExport = NamespaceExport;\nexports.NamespaceExportBase = NamespaceExportBase;\nexports.NamespaceImport = NamespaceImport;\nexports.NamespaceImportBase = NamespaceImportBase;\nexports.NewExpression = NewExpression;\nexports.NewExpressionBase = NewExpressionBase;\nexports.NoSubstitutionTemplateLiteral = NoSubstitutionTemplateLiteral;\nexports.NoSubstitutionTemplateLiteralBase = NoSubstitutionTemplateLiteralBase;\nexports.Node = Node;\nexports.NodeWithTypeArguments = NodeWithTypeArguments;\nexports.NodeWithTypeArgumentsBase = NodeWithTypeArgumentsBase;\nexports.NonNullExpression = NonNullExpression;\nexports.NonNullExpressionBase = NonNullExpressionBase;\nexports.NotEmittedStatement = NotEmittedStatement;\nexports.NotEmittedStatementBase = NotEmittedStatementBase;\nexports.NotImplementedError = NotImplementedError;\nexports.NotSupportedError = NotSupportedError;\nexports.NullLiteral = NullLiteral;\nexports.NullLiteralBase = NullLiteralBase;\nexports.NumericLiteral = NumericLiteral;\nexports.NumericLiteralBase = NumericLiteralBase;\nexports.ObjectBindingPattern = ObjectBindingPattern;\nexports.ObjectDestructuringAssignment = ObjectDestructuringAssignment;\nexports.ObjectDestructuringAssignmentBase = ObjectDestructuringAssignmentBase;\nexports.ObjectLiteralElement = ObjectLiteralElement;\nexports.ObjectLiteralExpression = ObjectLiteralExpression;\nexports.ObjectLiteralExpressionBase = ObjectLiteralExpressionBase;\nexports.OmittedExpression = OmittedExpression;\nexports.OmittedExpressionBase = OmittedExpressionBase;\nexports.OutputFile = OutputFile;\nexports.OverloadableNode = OverloadableNode;\nexports.OverrideableNode = OverrideableNode;\nexports.ParameterDeclaration = ParameterDeclaration;\nexports.ParameterDeclarationBase = ParameterDeclarationBase;\nexports.ParameteredNode = ParameteredNode;\nexports.ParenthesizedExpression = ParenthesizedExpression;\nexports.ParenthesizedExpressionBase = ParenthesizedExpressionBase;\nexports.ParenthesizedTypeNode = ParenthesizedTypeNode;\nexports.PartiallyEmittedExpression = PartiallyEmittedExpression;\nexports.PartiallyEmittedExpressionBase = PartiallyEmittedExpressionBase;\nexports.PathNotFoundError = PathNotFoundError;\nexports.PostfixUnaryExpression = PostfixUnaryExpression;\nexports.PostfixUnaryExpressionBase = PostfixUnaryExpressionBase;\nexports.PrefixUnaryExpression = PrefixUnaryExpression;\nexports.PrefixUnaryExpressionBase = PrefixUnaryExpressionBase;\nexports.PrimaryExpression = PrimaryExpression;\nexports.PrivateIdentifier = PrivateIdentifier;\nexports.PrivateIdentifierBase = PrivateIdentifierBase;\nexports.Program = Program;\nexports.Project = Project;\nexports.PropertyAccessExpression = PropertyAccessExpression;\nexports.PropertyAccessExpressionBase = PropertyAccessExpressionBase;\nexports.PropertyAssignment = PropertyAssignment;\nexports.PropertyAssignmentBase = PropertyAssignmentBase;\nexports.PropertyDeclaration = PropertyDeclaration;\nexports.PropertyDeclarationBase = PropertyDeclarationBase;\nexports.PropertyNamedNode = PropertyNamedNode;\nexports.PropertySignature = PropertySignature;\nexports.PropertySignatureBase = PropertySignatureBase;\nexports.QualifiedName = QualifiedName;\nexports.QuestionDotTokenableNode = QuestionDotTokenableNode;\nexports.QuestionTokenableNode = QuestionTokenableNode;\nexports.ReadonlyableNode = ReadonlyableNode;\nexports.RefactorEditInfo = RefactorEditInfo;\nexports.ReferenceEntry = ReferenceEntry;\nexports.ReferenceFindableNode = ReferenceFindableNode;\nexports.ReferencedSymbol = ReferencedSymbol;\nexports.ReferencedSymbolDefinitionInfo = ReferencedSymbolDefinitionInfo;\nexports.ReferencedSymbolEntry = ReferencedSymbolEntry;\nexports.RegularExpressionLiteral = RegularExpressionLiteral;\nexports.RegularExpressionLiteralBase = RegularExpressionLiteralBase;\nexports.RenameLocation = RenameLocation;\nexports.RenameableNode = RenameableNode;\nexports.ReturnStatement = ReturnStatement;\nexports.ReturnStatementBase = ReturnStatementBase;\nexports.ReturnTypedNode = ReturnTypedNode;\nexports.ScopeableNode = ScopeableNode;\nexports.ScopedNode = ScopedNode;\nexports.SetAccessorDeclaration = SetAccessorDeclaration;\nexports.SetAccessorDeclarationBase = SetAccessorDeclarationBase;\nexports.ShorthandPropertyAssignment = ShorthandPropertyAssignment;\nexports.ShorthandPropertyAssignmentBase = ShorthandPropertyAssignmentBase;\nexports.Signature = Signature;\nexports.SignaturedDeclaration = SignaturedDeclaration;\nexports.SourceFile = SourceFile;\nexports.SourceFileBase = SourceFileBase;\nexports.SpreadAssignment = SpreadAssignment;\nexports.SpreadAssignmentBase = SpreadAssignmentBase;\nexports.SpreadElement = SpreadElement;\nexports.SpreadElementBase = SpreadElementBase;\nexports.Statement = Statement;\nexports.StatementBase = StatementBase;\nexports.StatementedNode = StatementedNode;\nexports.StaticableNode = StaticableNode;\nexports.StringLiteral = StringLiteral;\nexports.StringLiteralBase = StringLiteralBase;\nexports.Structure = Structure;\nexports.SuperElementAccessExpression = SuperElementAccessExpression;\nexports.SuperElementAccessExpressionBase = SuperElementAccessExpressionBase;\nexports.SuperExpression = SuperExpression;\nexports.SuperExpressionBase = SuperExpressionBase;\nexports.SuperExpressionedNode = SuperExpressionedNode;\nexports.SuperPropertyAccessExpression = SuperPropertyAccessExpression;\nexports.SuperPropertyAccessExpressionBase = SuperPropertyAccessExpressionBase;\nexports.SwitchStatement = SwitchStatement;\nexports.SwitchStatementBase = SwitchStatementBase;\nexports.Symbol = Symbol;\nexports.SymbolDisplayPart = SymbolDisplayPart;\nexports.SyntaxList = SyntaxList;\nexports.TaggedTemplateExpression = TaggedTemplateExpression;\nexports.TemplateExpression = TemplateExpression;\nexports.TemplateExpressionBase = TemplateExpressionBase;\nexports.TemplateHead = TemplateHead;\nexports.TemplateHeadBase = TemplateHeadBase;\nexports.TemplateLiteralTypeNode = TemplateLiteralTypeNode;\nexports.TemplateMiddle = TemplateMiddle;\nexports.TemplateMiddleBase = TemplateMiddleBase;\nexports.TemplateSpan = TemplateSpan;\nexports.TemplateSpanBase = TemplateSpanBase;\nexports.TemplateTail = TemplateTail;\nexports.TemplateTailBase = TemplateTailBase;\nexports.TextChange = TextChange;\nexports.TextInsertableNode = TextInsertableNode;\nexports.TextRange = TextRange;\nexports.TextSpan = TextSpan;\nexports.ThisExpression = ThisExpression;\nexports.ThisExpressionBase = ThisExpressionBase;\nexports.ThisTypeNode = ThisTypeNode;\nexports.ThrowStatement = ThrowStatement;\nexports.ThrowStatementBase = ThrowStatementBase;\nexports.TrueLiteral = TrueLiteral;\nexports.TrueLiteralBase = TrueLiteralBase;\nexports.TryStatement = TryStatement;\nexports.TryStatementBase = TryStatementBase;\nexports.TupleTypeNode = TupleTypeNode;\nexports.Type = Type;\nexports.TypeAliasDeclaration = TypeAliasDeclaration;\nexports.TypeAliasDeclarationBase = TypeAliasDeclarationBase;\nexports.TypeArgumentedNode = TypeArgumentedNode;\nexports.TypeAssertion = TypeAssertion;\nexports.TypeAssertionBase = TypeAssertionBase;\nexports.TypeChecker = TypeChecker;\nexports.TypeElement = TypeElement;\nexports.TypeElementMemberedNode = TypeElementMemberedNode;\nexports.TypeLiteralNode = TypeLiteralNode;\nexports.TypeLiteralNodeBase = TypeLiteralNodeBase;\nexports.TypeNode = TypeNode;\nexports.TypeOfExpression = TypeOfExpression;\nexports.TypeOfExpressionBase = TypeOfExpressionBase;\nexports.TypeOperatorTypeNode = TypeOperatorTypeNode;\nexports.TypeParameter = TypeParameter;\nexports.TypeParameterDeclaration = TypeParameterDeclaration;\nexports.TypeParameterDeclarationBase = TypeParameterDeclarationBase;\nexports.TypeParameteredNode = TypeParameteredNode;\nexports.TypePredicateNode = TypePredicateNode;\nexports.TypeQueryNode = TypeQueryNode;\nexports.TypeReferenceNode = TypeReferenceNode;\nexports.TypedNode = TypedNode;\nexports.UnaryExpression = UnaryExpression;\nexports.UnaryExpressionedNode = UnaryExpressionedNode;\nexports.UnionTypeNode = UnionTypeNode;\nexports.UnwrappableNode = UnwrappableNode;\nexports.UpdateExpression = UpdateExpression;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarationBase = VariableDeclarationBase;\nexports.VariableDeclarationList = VariableDeclarationList;\nexports.VariableDeclarationListBase = VariableDeclarationListBase;\nexports.VariableStatement = VariableStatement;\nexports.VariableStatementBase = VariableStatementBase;\nexports.VoidExpression = VoidExpression;\nexports.VoidExpressionBase = VoidExpressionBase;\nexports.WhileStatement = WhileStatement;\nexports.WhileStatementBase = WhileStatementBase;\nexports.WithStatement = WithStatement;\nexports.WithStatementBase = WithStatementBase;\nexports.Writers = Writers;\nexports.YieldExpression = YieldExpression;\nexports.YieldExpressionBase = YieldExpressionBase;\nexports.createWrappedNode = createWrappedNode;\nexports.forEachStructureChild = forEachStructureChild;\nexports.getCompilerOptionsFromTsConfig = getCompilerOptionsFromTsConfig;\nexports.getScopeForNode = getScopeForNode;\nexports.insertOverloads = insertOverloads;\nexports.printNode = printNode;\nexports.setScopeForNode = setScopeForNode;\n",null,"module.exports = require(\"buffer\");","module.exports = require(\"crypto\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"inspector\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"perf_hooks\");","module.exports = require(\"stream\");","module.exports = require(\"util\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst string_utils_js_1 = require(\"./utils/string_utils.js\");\n/** @internal */\nvar CommentChar;\n(function (CommentChar) {\n    CommentChar[CommentChar[\"Line\"] = 0] = \"Line\";\n    CommentChar[CommentChar[\"Star\"] = 1] = \"Star\";\n})(CommentChar || (CommentChar = {}));\n// Using the char codes is a performance improvement (about 5.5% faster when writing because it eliminates additional string allocations).\nconst CHARS = {\n    BACK_SLASH: \"\\\\\".charCodeAt(0),\n    FORWARD_SLASH: \"/\".charCodeAt(0),\n    NEW_LINE: \"\\n\".charCodeAt(0),\n    CARRIAGE_RETURN: \"\\r\".charCodeAt(0),\n    ASTERISK: \"*\".charCodeAt(0),\n    DOUBLE_QUOTE: \"\\\"\".charCodeAt(0),\n    SINGLE_QUOTE: \"'\".charCodeAt(0),\n    BACK_TICK: \"`\".charCodeAt(0),\n    OPEN_BRACE: \"{\".charCodeAt(0),\n    CLOSE_BRACE: \"}\".charCodeAt(0),\n    DOLLAR_SIGN: \"$\".charCodeAt(0),\n    SPACE: \" \".charCodeAt(0),\n    TAB: \"\\t\".charCodeAt(0),\n};\nconst isCharToHandle = new Set([\n    CHARS.BACK_SLASH,\n    CHARS.FORWARD_SLASH,\n    CHARS.NEW_LINE,\n    CHARS.CARRIAGE_RETURN,\n    CHARS.ASTERISK,\n    CHARS.DOUBLE_QUOTE,\n    CHARS.SINGLE_QUOTE,\n    CHARS.BACK_TICK,\n    CHARS.OPEN_BRACE,\n    CHARS.CLOSE_BRACE,\n]);\n/**\n * Code writer that assists with formatting and visualizing blocks of JavaScript or TypeScript code.\n */\nclass CodeBlockWriter {\n    /**\n     * Constructor.\n     * @param opts - Options for the writer.\n     */\n    constructor(opts = {}) {\n        /** @internal */\n        Object.defineProperty(this, \"_indentationText\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @internal */\n        Object.defineProperty(this, \"_newLine\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @internal */\n        Object.defineProperty(this, \"_useTabs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @internal */\n        Object.defineProperty(this, \"_quoteChar\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @internal */\n        Object.defineProperty(this, \"_indentNumberOfSpaces\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @internal */\n        Object.defineProperty(this, \"_currentIndentation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        /** @internal */\n        Object.defineProperty(this, \"_queuedIndentation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @internal */\n        Object.defineProperty(this, \"_queuedOnlyIfNotBlock\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @internal */\n        Object.defineProperty(this, \"_length\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        /** @internal */\n        Object.defineProperty(this, \"_newLineOnNextWrite\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        /** @internal */\n        Object.defineProperty(this, \"_currentCommentChar\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: undefined\n        });\n        /** @internal */\n        Object.defineProperty(this, \"_stringCharStack\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        /** @internal */\n        Object.defineProperty(this, \"_isInRegEx\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        /** @internal */\n        Object.defineProperty(this, \"_isOnFirstLineOfBlock\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        // An array of strings is used rather than a single string because it was\n        // found to be ~11x faster when printing a 10K line file (~11s to ~1s).\n        /** @internal */\n        Object.defineProperty(this, \"_texts\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        this._newLine = opts.newLine || \"\\n\";\n        this._useTabs = opts.useTabs || false;\n        this._indentNumberOfSpaces = opts.indentNumberOfSpaces || 4;\n        this._indentationText = getIndentationText(this._useTabs, this._indentNumberOfSpaces);\n        this._quoteChar = opts.useSingleQuote ? \"'\" : `\"`;\n    }\n    /**\n     * Gets the options.\n     */\n    getOptions() {\n        return {\n            indentNumberOfSpaces: this._indentNumberOfSpaces,\n            newLine: this._newLine,\n            useTabs: this._useTabs,\n            useSingleQuote: this._quoteChar === \"'\",\n        };\n    }\n    queueIndentationLevel(countOrText) {\n        this._queuedIndentation = this._getIndentationLevelFromArg(countOrText);\n        this._queuedOnlyIfNotBlock = undefined;\n        return this;\n    }\n    /**\n     * Writes the text within the provided action with hanging indentation.\n     * @param action - Action to perform with hanging indentation.\n     */\n    hangingIndent(action) {\n        return this._withResetIndentation(() => this.queueIndentationLevel(this.getIndentationLevel() + 1), action);\n    }\n    /**\n     * Writes the text within the provided action with hanging indentation unless writing a block.\n     * @param action - Action to perform with hanging indentation unless a block is written.\n     */\n    hangingIndentUnlessBlock(action) {\n        return this._withResetIndentation(() => {\n            this.queueIndentationLevel(this.getIndentationLevel() + 1);\n            this._queuedOnlyIfNotBlock = true;\n        }, action);\n    }\n    setIndentationLevel(countOrText) {\n        this._currentIndentation = this._getIndentationLevelFromArg(countOrText);\n        return this;\n    }\n    withIndentationLevel(countOrText, action) {\n        return this._withResetIndentation(() => this.setIndentationLevel(countOrText), action);\n    }\n    /** @internal */\n    _withResetIndentation(setStateAction, writeAction) {\n        const previousState = this._getIndentationState();\n        setStateAction();\n        try {\n            writeAction();\n        }\n        finally {\n            this._setIndentationState(previousState);\n        }\n        return this;\n    }\n    /**\n     * Gets the current indentation level.\n     */\n    getIndentationLevel() {\n        return this._currentIndentation;\n    }\n    /**\n     * Writes a block using braces.\n     * @param block - Write using the writer within this block.\n     */\n    block(block) {\n        this._newLineIfNewLineOnNextWrite();\n        if (this.getLength() > 0 && !this.isLastNewLine()) {\n            this.spaceIfLastNot();\n        }\n        this.inlineBlock(block);\n        this._newLineOnNextWrite = true;\n        return this;\n    }\n    /**\n     * Writes an inline block with braces.\n     * @param block - Write using the writer within this block.\n     */\n    inlineBlock(block) {\n        this._newLineIfNewLineOnNextWrite();\n        this.write(\"{\");\n        this._indentBlockInternal(block);\n        this.newLineIfLastNot().write(\"}\");\n        return this;\n    }\n    indent(timesOrBlock = 1) {\n        if (typeof timesOrBlock === \"number\") {\n            this._newLineIfNewLineOnNextWrite();\n            return this.write(this._indentationText.repeat(timesOrBlock));\n        }\n        else {\n            this._indentBlockInternal(timesOrBlock);\n            if (!this.isLastNewLine()) {\n                this._newLineOnNextWrite = true;\n            }\n            return this;\n        }\n    }\n    /** @internal */\n    _indentBlockInternal(block) {\n        if (this.getLastChar() != null) {\n            this.newLineIfLastNot();\n        }\n        this._currentIndentation++;\n        this._isOnFirstLineOfBlock = true;\n        if (block != null) {\n            block();\n        }\n        this._isOnFirstLineOfBlock = false;\n        this._currentIndentation = Math.max(0, this._currentIndentation - 1);\n    }\n    conditionalWriteLine(condition, strOrFunc) {\n        if (condition) {\n            this.writeLine((0, string_utils_js_1.getStringFromStrOrFunc)(strOrFunc));\n        }\n        return this;\n    }\n    /**\n     * Writes a line of text.\n     * @param text - String to write.\n     */\n    writeLine(text) {\n        this._newLineIfNewLineOnNextWrite();\n        if (this.getLastChar() != null) {\n            this.newLineIfLastNot();\n        }\n        this._writeIndentingNewLines(text);\n        this.newLine();\n        return this;\n    }\n    /**\n     * Writes a newline if the last line was not a newline.\n     */\n    newLineIfLastNot() {\n        this._newLineIfNewLineOnNextWrite();\n        if (!this.isLastNewLine()) {\n            this.newLine();\n        }\n        return this;\n    }\n    /**\n     * Writes a blank line if the last written text was not a blank line.\n     */\n    blankLineIfLastNot() {\n        if (!this.isLastBlankLine()) {\n            this.blankLine();\n        }\n        return this;\n    }\n    /**\n     * Writes a blank line if the condition is true.\n     * @param condition - Condition to evaluate.\n     */\n    conditionalBlankLine(condition) {\n        if (condition) {\n            this.blankLine();\n        }\n        return this;\n    }\n    /**\n     * Writes a blank line.\n     */\n    blankLine() {\n        return this.newLineIfLastNot().newLine();\n    }\n    /**\n     * Writes a newline if the condition is true.\n     * @param condition - Condition to evaluate.\n     */\n    conditionalNewLine(condition) {\n        if (condition) {\n            this.newLine();\n        }\n        return this;\n    }\n    /**\n     * Writes a newline.\n     */\n    newLine() {\n        this._newLineOnNextWrite = false;\n        this._baseWriteNewline();\n        return this;\n    }\n    quote(text) {\n        this._newLineIfNewLineOnNextWrite();\n        this._writeIndentingNewLines(text == null ? this._quoteChar : this._quoteChar + (0, string_utils_js_1.escapeForWithinString)(text, this._quoteChar) + this._quoteChar);\n        return this;\n    }\n    /**\n     * Writes a space if the last character was not a space.\n     */\n    spaceIfLastNot() {\n        this._newLineIfNewLineOnNextWrite();\n        if (!this.isLastSpace()) {\n            this._writeIndentingNewLines(\" \");\n        }\n        return this;\n    }\n    /**\n     * Writes a space.\n     * @param times - Number of times to write a space.\n     */\n    space(times = 1) {\n        this._newLineIfNewLineOnNextWrite();\n        this._writeIndentingNewLines(\" \".repeat(times));\n        return this;\n    }\n    /**\n     * Writes a tab if the last character was not a tab.\n     */\n    tabIfLastNot() {\n        this._newLineIfNewLineOnNextWrite();\n        if (!this.isLastTab()) {\n            this._writeIndentingNewLines(\"\\t\");\n        }\n        return this;\n    }\n    /**\n     * Writes a tab.\n     * @param times - Number of times to write a tab.\n     */\n    tab(times = 1) {\n        this._newLineIfNewLineOnNextWrite();\n        this._writeIndentingNewLines(\"\\t\".repeat(times));\n        return this;\n    }\n    conditionalWrite(condition, textOrFunc) {\n        if (condition) {\n            this.write((0, string_utils_js_1.getStringFromStrOrFunc)(textOrFunc));\n        }\n        return this;\n    }\n    /**\n     * Writes the provided text.\n     * @param text - Text to write.\n     */\n    write(text) {\n        this._newLineIfNewLineOnNextWrite();\n        this._writeIndentingNewLines(text);\n        return this;\n    }\n    /**\n     * Writes text to exit a comment if in a comment.\n     */\n    closeComment() {\n        const commentChar = this._currentCommentChar;\n        switch (commentChar) {\n            case CommentChar.Line:\n                this.newLine();\n                break;\n            case CommentChar.Star:\n                if (!this.isLastNewLine()) {\n                    this.spaceIfLastNot();\n                }\n                this.write(\"*/\");\n                break;\n            default: {\n                const _assertUndefined = commentChar;\n                break;\n            }\n        }\n        return this;\n    }\n    /**\n     * Inserts text at the provided position.\n     *\n     * This method is \"unsafe\" because it won't update the state of the writer unless\n     * inserting at the end position. It is biased towards being fast at inserting closer\n     * to the start or end, but slower to insert in the middle. Only use this if\n     * absolutely necessary.\n     * @param pos - Position to insert at.\n     * @param text - Text to insert.\n     */\n    unsafeInsert(pos, text) {\n        const textLength = this._length;\n        const texts = this._texts;\n        verifyInput();\n        if (pos === textLength) {\n            return this.write(text);\n        }\n        updateInternalArray();\n        this._length += text.length;\n        return this;\n        function verifyInput() {\n            if (pos < 0) {\n                throw new Error(`Provided position of '${pos}' was less than zero.`);\n            }\n            if (pos > textLength) {\n                throw new Error(`Provided position of '${pos}' was greater than the text length of '${textLength}'.`);\n            }\n        }\n        function updateInternalArray() {\n            const { index, localIndex } = getArrayIndexAndLocalIndex();\n            if (localIndex === 0) {\n                texts.splice(index, 0, text);\n            }\n            else if (localIndex === texts[index].length) {\n                texts.splice(index + 1, 0, text);\n            }\n            else {\n                const textItem = texts[index];\n                const startText = textItem.substring(0, localIndex);\n                const endText = textItem.substring(localIndex);\n                texts.splice(index, 1, startText, text, endText);\n            }\n        }\n        function getArrayIndexAndLocalIndex() {\n            if (pos < textLength / 2) {\n                // start searching from the front\n                let endPos = 0;\n                for (let i = 0; i < texts.length; i++) {\n                    const textItem = texts[i];\n                    const startPos = endPos;\n                    endPos += textItem.length;\n                    if (endPos >= pos) {\n                        return { index: i, localIndex: pos - startPos };\n                    }\n                }\n            }\n            else {\n                // start searching from the back\n                let startPos = textLength;\n                for (let i = texts.length - 1; i >= 0; i--) {\n                    const textItem = texts[i];\n                    startPos -= textItem.length;\n                    if (startPos <= pos) {\n                        return { index: i, localIndex: pos - startPos };\n                    }\n                }\n            }\n            throw new Error(\"Unhandled situation inserting. This should never happen.\");\n        }\n    }\n    /**\n     * Gets the length of the string in the writer.\n     */\n    getLength() {\n        return this._length;\n    }\n    /**\n     * Gets if the writer is currently in a comment.\n     */\n    isInComment() {\n        return this._currentCommentChar !== undefined;\n    }\n    /**\n     * Gets if the writer is currently at the start of the first line of the text, block, or indentation block.\n     */\n    isAtStartOfFirstLineOfBlock() {\n        return this.isOnFirstLineOfBlock() && (this.isLastNewLine() || this.getLastChar() == null);\n    }\n    /**\n     * Gets if the writer is currently on the first line of the text, block, or indentation block.\n     */\n    isOnFirstLineOfBlock() {\n        return this._isOnFirstLineOfBlock;\n    }\n    /**\n     * Gets if the writer is currently in a string.\n     */\n    isInString() {\n        return this._stringCharStack.length > 0 && this._stringCharStack[this._stringCharStack.length - 1] !== CHARS.OPEN_BRACE;\n    }\n    /**\n     * Gets if the last chars written were for a newline.\n     */\n    isLastNewLine() {\n        const lastChar = this.getLastChar();\n        return lastChar === \"\\n\" || lastChar === \"\\r\";\n    }\n    /**\n     * Gets if the last chars written were for a blank line.\n     */\n    isLastBlankLine() {\n        let foundCount = 0;\n        // todo: consider extracting out iterating over past characters, but don't use\n        // an iterator because it will be slow.\n        for (let i = this._texts.length - 1; i >= 0; i--) {\n            const currentText = this._texts[i];\n            for (let j = currentText.length - 1; j >= 0; j--) {\n                const currentChar = currentText.charCodeAt(j);\n                if (currentChar === CHARS.NEW_LINE) {\n                    foundCount++;\n                    if (foundCount === 2) {\n                        return true;\n                    }\n                }\n                else if (currentChar !== CHARS.CARRIAGE_RETURN) {\n                    return false;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Gets if the last char written was a space.\n     */\n    isLastSpace() {\n        return this.getLastChar() === \" \";\n    }\n    /**\n     * Gets if the last char written was a tab.\n     */\n    isLastTab() {\n        return this.getLastChar() === \"\\t\";\n    }\n    /**\n     * Gets the last char written.\n     */\n    getLastChar() {\n        const charCode = this._getLastCharCodeWithOffset(0);\n        return charCode == null ? undefined : String.fromCharCode(charCode);\n    }\n    /**\n     * Gets if the writer ends with the provided text.\n     * @param text - Text to check if the writer ends with the provided text.\n     */\n    endsWith(text) {\n        const length = this._length;\n        return this.iterateLastCharCodes((charCode, index) => {\n            const offset = length - index;\n            const textIndex = text.length - offset;\n            if (text.charCodeAt(textIndex) !== charCode) {\n                return false;\n            }\n            return textIndex === 0 ? true : undefined;\n        }) || false;\n    }\n    /**\n     * Iterates over the writer characters in reverse order. The iteration stops when a non-null or\n     * undefined value is returned from the action. The returned value is then returned by the method.\n     *\n     * @remarks It is much more efficient to use this method rather than `#toString()` since `#toString()`\n     * will combine the internal array into a string.\n     */\n    iterateLastChars(action) {\n        return this.iterateLastCharCodes((charCode, index) => action(String.fromCharCode(charCode), index));\n    }\n    /**\n     * Iterates over the writer character char codes in reverse order. The iteration stops when a non-null or\n     * undefined value is returned from the action. The returned value is then returned by the method.\n     *\n     * @remarks It is much more efficient to use this method rather than `#toString()` since `#toString()`\n     * will combine the internal array into a string. Additionally, this is slightly more efficient that\n     * `iterateLastChars` as this won't allocate a string per character.\n     */\n    iterateLastCharCodes(action) {\n        let index = this._length;\n        for (let i = this._texts.length - 1; i >= 0; i--) {\n            const currentText = this._texts[i];\n            for (let j = currentText.length - 1; j >= 0; j--) {\n                index--;\n                const result = action(currentText.charCodeAt(j), index);\n                if (result != null) {\n                    return result;\n                }\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Gets the writer's text.\n     */\n    toString() {\n        if (this._texts.length > 1) {\n            const text = this._texts.join(\"\");\n            this._texts.length = 0;\n            this._texts.push(text);\n        }\n        return this._texts[0] || \"\";\n    }\n    /** @internal */\n    _writeIndentingNewLines(text) {\n        text = text || \"\";\n        if (text.length === 0) {\n            writeIndividual(this, \"\");\n            return;\n        }\n        const items = text.split(CodeBlockWriter._newLineRegEx);\n        items.forEach((s, i) => {\n            if (i > 0) {\n                this._baseWriteNewline();\n            }\n            if (s.length === 0) {\n                return;\n            }\n            writeIndividual(this, s);\n        });\n        function writeIndividual(writer, s) {\n            if (!writer.isInString()) {\n                const isAtStartOfLine = writer.isLastNewLine() || writer.getLastChar() == null;\n                if (isAtStartOfLine) {\n                    writer._writeIndentation();\n                }\n            }\n            writer._updateInternalState(s);\n            writer._internalWrite(s);\n        }\n    }\n    /** @internal */\n    _baseWriteNewline() {\n        if (this._currentCommentChar === CommentChar.Line) {\n            this._currentCommentChar = undefined;\n        }\n        const lastStringCharOnStack = this._stringCharStack[this._stringCharStack.length - 1];\n        if ((lastStringCharOnStack === CHARS.DOUBLE_QUOTE || lastStringCharOnStack === CHARS.SINGLE_QUOTE) && this._getLastCharCodeWithOffset(0) !== CHARS.BACK_SLASH) {\n            this._stringCharStack.pop();\n        }\n        this._internalWrite(this._newLine);\n        this._isOnFirstLineOfBlock = false;\n        this._dequeueQueuedIndentation();\n    }\n    /** @internal */\n    _dequeueQueuedIndentation() {\n        if (this._queuedIndentation == null) {\n            return;\n        }\n        if (this._queuedOnlyIfNotBlock && wasLastBlock(this)) {\n            this._queuedIndentation = undefined;\n            this._queuedOnlyIfNotBlock = undefined;\n        }\n        else {\n            this._currentIndentation = this._queuedIndentation;\n            this._queuedIndentation = undefined;\n        }\n        function wasLastBlock(writer) {\n            let foundNewLine = false;\n            return writer.iterateLastCharCodes(charCode => {\n                switch (charCode) {\n                    case CHARS.NEW_LINE:\n                        if (foundNewLine) {\n                            return false;\n                        }\n                        else {\n                            foundNewLine = true;\n                        }\n                        break;\n                    case CHARS.CARRIAGE_RETURN:\n                        return undefined;\n                    case CHARS.OPEN_BRACE:\n                        return true;\n                    default:\n                        return false;\n                }\n            });\n        }\n    }\n    /** @internal */\n    _updateInternalState(str) {\n        for (let i = 0; i < str.length; i++) {\n            const currentChar = str.charCodeAt(i);\n            // This is a performance optimization to short circuit all the checks below. If the current char\n            // is not in this set then it won't change any internal state so no need to continue and do\n            // so many other checks (this made it 3x faster in one scenario I tested).\n            if (!isCharToHandle.has(currentChar)) {\n                continue;\n            }\n            const pastChar = i === 0 ? this._getLastCharCodeWithOffset(0) : str.charCodeAt(i - 1);\n            const pastPastChar = i === 0 ? this._getLastCharCodeWithOffset(1) : i === 1 ? this._getLastCharCodeWithOffset(0) : str.charCodeAt(i - 2);\n            // handle regex\n            if (this._isInRegEx) {\n                if (pastChar === CHARS.FORWARD_SLASH && pastPastChar !== CHARS.BACK_SLASH || pastChar === CHARS.NEW_LINE) {\n                    this._isInRegEx = false;\n                }\n                else {\n                    continue;\n                }\n            }\n            else if (!this.isInString() && !this.isInComment() && isRegExStart(currentChar, pastChar, pastPastChar)) {\n                this._isInRegEx = true;\n                continue;\n            }\n            // handle comments\n            if (this._currentCommentChar == null && pastChar === CHARS.FORWARD_SLASH && currentChar === CHARS.FORWARD_SLASH) {\n                this._currentCommentChar = CommentChar.Line;\n            }\n            else if (this._currentCommentChar == null && pastChar === CHARS.FORWARD_SLASH && currentChar === CHARS.ASTERISK) {\n                this._currentCommentChar = CommentChar.Star;\n            }\n            else if (this._currentCommentChar === CommentChar.Star && pastChar === CHARS.ASTERISK && currentChar === CHARS.FORWARD_SLASH) {\n                this._currentCommentChar = undefined;\n            }\n            if (this.isInComment()) {\n                continue;\n            }\n            // handle strings\n            const lastStringCharOnStack = this._stringCharStack.length === 0 ? undefined : this._stringCharStack[this._stringCharStack.length - 1];\n            if (pastChar !== CHARS.BACK_SLASH && (currentChar === CHARS.DOUBLE_QUOTE || currentChar === CHARS.SINGLE_QUOTE || currentChar === CHARS.BACK_TICK)) {\n                if (lastStringCharOnStack === currentChar) {\n                    this._stringCharStack.pop();\n                }\n                else if (lastStringCharOnStack === CHARS.OPEN_BRACE || lastStringCharOnStack === undefined) {\n                    this._stringCharStack.push(currentChar);\n                }\n            }\n            else if (pastPastChar !== CHARS.BACK_SLASH && pastChar === CHARS.DOLLAR_SIGN && currentChar === CHARS.OPEN_BRACE && lastStringCharOnStack === CHARS.BACK_TICK) {\n                this._stringCharStack.push(currentChar);\n            }\n            else if (currentChar === CHARS.CLOSE_BRACE && lastStringCharOnStack === CHARS.OPEN_BRACE) {\n                this._stringCharStack.pop();\n            }\n        }\n    }\n    /** @internal - This is private, but exposed for testing. */\n    _getLastCharCodeWithOffset(offset) {\n        if (offset >= this._length || offset < 0) {\n            return undefined;\n        }\n        for (let i = this._texts.length - 1; i >= 0; i--) {\n            const currentText = this._texts[i];\n            if (offset >= currentText.length) {\n                offset -= currentText.length;\n            }\n            else {\n                return currentText.charCodeAt(currentText.length - 1 - offset);\n            }\n        }\n        return undefined;\n    }\n    /** @internal */\n    _writeIndentation() {\n        const flooredIndentation = Math.floor(this._currentIndentation);\n        this._internalWrite(this._indentationText.repeat(flooredIndentation));\n        const overflow = this._currentIndentation - flooredIndentation;\n        if (this._useTabs) {\n            if (overflow > 0.5) {\n                this._internalWrite(this._indentationText);\n            }\n        }\n        else {\n            const portion = Math.round(this._indentationText.length * overflow);\n            // build up the string first, then append it for performance reasons\n            let text = \"\";\n            for (let i = 0; i < portion; i++) {\n                text += this._indentationText[i];\n            }\n            this._internalWrite(text);\n        }\n    }\n    /** @internal */\n    _newLineIfNewLineOnNextWrite() {\n        if (!this._newLineOnNextWrite) {\n            return;\n        }\n        this._newLineOnNextWrite = false;\n        this.newLine();\n    }\n    /** @internal */\n    _internalWrite(text) {\n        if (text.length === 0) {\n            return;\n        }\n        this._texts.push(text);\n        this._length += text.length;\n    }\n    /** @internal */\n    _getIndentationLevelFromArg(countOrText) {\n        if (typeof countOrText === \"number\") {\n            if (countOrText < 0) {\n                throw new Error(\"Passed in indentation level should be greater than or equal to 0.\");\n            }\n            return countOrText;\n        }\n        else if (typeof countOrText === \"string\") {\n            if (!CodeBlockWriter._spacesOrTabsRegEx.test(countOrText)) {\n                throw new Error(\"Provided string must be empty or only contain spaces or tabs.\");\n            }\n            const { spacesCount, tabsCount } = getSpacesAndTabsCount(countOrText);\n            return tabsCount + spacesCount / this._indentNumberOfSpaces;\n        }\n        else {\n            throw new Error(\"Argument provided must be a string or number.\");\n        }\n    }\n    /** @internal */\n    _setIndentationState(state) {\n        this._currentIndentation = state.current;\n        this._queuedIndentation = state.queued;\n        this._queuedOnlyIfNotBlock = state.queuedOnlyIfNotBlock;\n    }\n    /** @internal */\n    _getIndentationState() {\n        return {\n            current: this._currentIndentation,\n            queued: this._queuedIndentation,\n            queuedOnlyIfNotBlock: this._queuedOnlyIfNotBlock,\n        };\n    }\n}\nexports.default = CodeBlockWriter;\n/** @internal */\nObject.defineProperty(CodeBlockWriter, \"_newLineRegEx\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /\\r?\\n/\n});\n/** @internal */\nObject.defineProperty(CodeBlockWriter, \"_spacesOrTabsRegEx\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /^[ \\t]*$/\n});\nfunction isRegExStart(currentChar, pastChar, pastPastChar) {\n    return pastChar === CHARS.FORWARD_SLASH\n        && currentChar !== CHARS.FORWARD_SLASH\n        && currentChar !== CHARS.ASTERISK\n        && pastPastChar !== CHARS.ASTERISK\n        && pastPastChar !== CHARS.FORWARD_SLASH;\n}\nfunction getIndentationText(useTabs, numberSpaces) {\n    if (useTabs) {\n        return \"\\t\";\n    }\n    return Array(numberSpaces + 1).join(\" \");\n}\nfunction getSpacesAndTabsCount(str) {\n    let spacesCount = 0;\n    let tabsCount = 0;\n    for (let i = 0; i < str.length; i++) {\n        const charCode = str.charCodeAt(i);\n        if (charCode === CHARS.SPACE) {\n            spacesCount++;\n        }\n        else if (charCode === CHARS.TAB) {\n            tabsCount++;\n        }\n    }\n    return { spacesCount, tabsCount };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getStringFromStrOrFunc = exports.escapeChar = exports.escapeForWithinString = void 0;\nconst newlineRegex = /(\\r?\\n)/g;\n/** @internal */\nfunction escapeForWithinString(str, quoteKind) {\n    return escapeChar(str, quoteKind).replace(newlineRegex, \"\\\\$1\");\n}\nexports.escapeForWithinString = escapeForWithinString;\n/** @internal */\nfunction escapeChar(str, char) {\n    if (char.length !== 1) {\n        throw new Error(`Specified char must be one character long.`);\n    }\n    let result = \"\";\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === char) {\n            result += \"\\\\\";\n        }\n        result += str[i];\n    }\n    return result;\n}\nexports.escapeChar = escapeChar;\n/** @internal */\nfunction getStringFromStrOrFunc(strOrFunc) {\n    return strOrFunc instanceof Function ? strOrFunc() : strOrFunc;\n}\nexports.getStringFromStrOrFunc = getStringFromStrOrFunc;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","\"use strict\";\n\n// Production-ready embedded Node.js script using ts-morph\n// This script extracts:\n//   1. The service name from an adjacent `encore.service.ts` file by looking for a default export\n//      that instantiates a Service (e.g. new Service(\"greeter\")).\n//   2. All calls to Restate.addHandler in other .ts files in the directory, extracting the handler name\n//      and its function definition.\n// It then outputs a JSON manifest on stdout.\n\nconst { Project, SyntaxKind } = require(\"ts-morph\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\n/**\n * Extracts handler definitions from a given TypeScript file.\n * Looks for call expressions of the form:\n *    Restate.addHandler('handlerName', async (ctx, ...) => { ... })\n *\n * @param {string} filePath - The full path to the .ts file.\n * @returns {Array<{name: string, body: string}>} Array of handler entries.\n */\nfunction extractHandlersFromFile(filePath) {\n  try {\n    // Create a new ts-morph Project instance.\n    const project = new Project({\n      compilerOptions: {\n        allowJs: true,\n        target: 2, // ES6\n      },\n      // Optionally, you can specify tsconfig file path if available.\n    });\n    const sourceFile = project.addSourceFileAtPath(filePath);\n    if (!sourceFile) {\n      console.error(`Failed to load file: ${filePath}`);\n      return [];\n    }\n    const results = [];\n    const callExpressions = sourceFile.getDescendantsOfKind(SyntaxKind.CallExpression);\n    for (const call of callExpressions) {\n      try {\n        // Identify calls to Restate.addHandler\n        if (call.getExpression().getText() === \"Restate.addHandler\") {\n          const args = call.getArguments();\n          if (args.length >= 2) {\n            // Extract the handler name and strip surrounding quotes.\n            let handlerName = args[0].getText().trim();\n            if (\n              handlerName.startsWith(\"'\") ||\n              handlerName.startsWith(\"\\\"\") ||\n              handlerName.startsWith(\"`\")\n            ) {\n              handlerName = handlerName.slice(1, -1);\n            }\n            // Get the full text of the handler function expression.\n            const handlerBody = args[1].getText();\n            results.push({ name: handlerName, body: handlerBody });\n          } else {\n            console.warn(\n              `Warning: Restate.addHandler call in ${filePath} does not have at least 2 arguments.`\n            );\n          }\n        }\n      } catch (innerErr) {\n        console.error(`Error processing a call in file ${filePath}: ${innerErr}`);\n      }\n    }\n    return results;\n  } catch (err) {\n    console.error(`Error processing file ${filePath}: ${err}`);\n    return [];\n  }\n}\n\n/**\n * Extracts the service name from the specified encore.service.ts file.\n * Searches for the default export that creates a new Service instance.\n *\n * @param {string} serviceFilePath - The full path to encore.service.ts.\n * @returns {string|null} The extracted service name, or null if not found.\n */\nfunction extractServiceName(serviceFilePath) {\n  if (!fs.existsSync(serviceFilePath)) {\n    console.error(`Service file not found: ${serviceFilePath}`);\n    return null;\n  }\n  try {\n    const project = new Project({\n      compilerOptions: {\n        allowJs: true,\n        target: 2,\n      },\n    });\n    const sourceFile = project.addSourceFileAtPath(serviceFilePath);\n    if (!sourceFile) {\n      console.error(`Failed to load service file: ${serviceFilePath}`);\n      return null;\n    }\n    const defaultExportSymbol = sourceFile.getDefaultExportSymbol();\n    if (defaultExportSymbol) {\n      const declarations = defaultExportSymbol.getDeclarations();\n      for (const decl of declarations) {\n        const newExpr = decl.getFirstDescendantByKind(SyntaxKind.NewExpression);\n        if (newExpr) {\n          const args = newExpr.getArguments();\n          if (args.length > 0) {\n            let serviceName = args[0].getText().trim();\n            if (\n              serviceName.startsWith(\"'\") ||\n              serviceName.startsWith(\"\\\"\") ||\n              serviceName.startsWith(\"`\")\n            ) {\n              serviceName = serviceName.slice(1, -1);\n            }\n            return serviceName;\n          }\n        }\n      }\n    }\n    console.error(`Service name not found in ${serviceFilePath}`);\n    return null;\n  } catch (err) {\n    console.error(`Error processing service file ${serviceFilePath}: ${err}`);\n    return null;\n  }\n}\n\n/**\n * Main entry point.\n * Determines the target directory (from command line or cwd),\n * extracts the service name and handler definitions, and outputs a JSON manifest.\n */\nfunction main() {\n  try {\n    // Determine the target directory from the command-line arguments or default to the current working directory.\n    const targetDir = process.argv[2] || process.cwd();\n    if (!fs.existsSync(targetDir) || !fs.statSync(targetDir).isDirectory()) {\n      console.error(`Target directory does not exist or is not a directory: ${targetDir}`);\n      process.exit(1);\n    }\n\n    // Define the expected service file path.\n    const serviceFilePath = path.join(targetDir, \"encore.service.ts\");\n    const serviceName = extractServiceName(serviceFilePath);\n    if (!serviceName) {\n      console.error(\"Error: Service name extraction failed.\");\n      process.exit(1);\n    }\n\n    const manifest = {\n      serviceName: serviceName,\n      handlers: []\n    };\n\n    // Read and process each .ts file (except for encore.service.ts and any generated files).\n    const files = fs.readdirSync(targetDir);\n    for (const file of files) {\n      if (\n        file.endsWith(\".ts\") &&\n        file !== \"encore.service.ts\" &&\n        !file.startsWith(\"restate.\")\n      ) {\n        const filePath = path.join(targetDir, file);\n        if (fs.statSync(filePath).isFile()) {\n          const handlers = extractHandlersFromFile(filePath);\n          manifest.handlers.push(...handlers);\n        }\n      }\n    }\n\n    // Always output the manifest.\n    process.stdout.write(JSON.stringify(manifest, null, 2));\n\n  } catch (err) {\n    console.error(\"Unexpected error occurred: \" + err);\n    process.exit(1);\n  }\n}\n\nmain();\n"],"mappings":"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A7F,KAAA,2LACA,CACA6F,SAAA,eACA7F,KAAA,upggBACA,CACA6F,SAAA,wBACA7F,KAAA,6pYACA,CACA6F,SAAA,6BACA7F,KAAA,onDACA,CACA6F,SAAA,uBACA7F,KAAA,skGACA,CACA6F,SAAA,kBACA7F,KAAA,0bACA,CACA6F,SAAA,4BACA7F,KAAA,4sBACA,CACA6F,SAAA,2BACA7F,KAAA,kkLACA,CACA6F,SAAA,0BACA7F,KAAA,ihBACA,CACA6F,SAAA,wBACA7F,KAAA,q8BACA,CACA6F,SAAA,0BACA7F,KAAA,6+BACA,CACA6F,SAAA,yBACA7F,KAAA,uOACA,CACA6F,SAAA,mCACA7F,KAAA,22GACA,CACA6F,SAAA,gCACA7F,KAAA,u5BACA,CACA6F,SAAA,kBACA7F,KAAA,wHACA,CACA6F,SAAA,uBACA7F,KAAA,kOACA,CACA6F,SAAA,kBACA7F,KAAA,wRACA,CACA6F,SAAA,uBACA7F,KAAA,kOACA,CACA6F,SAAA,uBACA7F,KAAA,4VACA,CACA6F,SAAA,yBACA7F,KAAA,8UACA,CACA6F,SAAA,+BACA7F,KAAA,84DACA,CACA6F,SAAA,yBACA7F,KAAA,sKACA,CACA6F,SAAA,8BACA7F,KAAA,sgBACA,CACA6F,SAAA,iCACA7F,KAAA,6zBACA,CACA6F,SAAA,gCACA7F,KAAA,wmBACA,CACA6F,SAAA,kBACA7F,KAAA,6RACA,CACA6F,SAAA,uBACA7F,KAAA,kOACA,CACA6F,SAAA,uBACA7F,KAAA,olDACA,CACA6F,SAAA,0BACA7F,KAAA,0HACA,CACA6F,SAAA,yBACA7F,KAAA,uMACA,CACA6F,SAAA,wBACA7F,KAAA,iqBACA,CACA6F,SAAA,kBACA7F,KAAA,uOACA,CACA6F,SAAA,uBACA7F,KAAA,oOACA,CACA6F,SAAA,yBACA7F,KAAA,iPACA,CACA6F,SAAA,yBACA7F,KAAA,uIACA,CACA6F,SAAA,yBACA7F,KAAA,oGACA,CACA6F,SAAA,yBACA7F,KAAA,6oNACA,CACA6F,SAAA,kBACA7F,KAAA,iZACA,CACA6F,SAAA,uBACA7F,KAAA,oXACA,CACA6F,SAAA,uBACA7F,KAAA,oOACA,CACA6F,SAAA,uBACA7F,KAAA,0yHACA,CACA6F,SAAA,yBACA7F,KAAA,0LACA,CACA6F,SAAA,0BACA7F,KAAA,+eACA,CACA6F,SAAA,+BACA7F,KAAA,48BACA,CACA6F,SAAA,yBACA7F,KAAA,kKACA,CACA6F,SAAA,mCACA7F,KAAA,4QACA,CACA6F,SAAA,kBACA7F,KAAA,wOACA,CACA6F,SAAA,uBACA7F,KAAA,oOACA,CACA6F,SAAA,uBACA7F,KAAA,q+CACA,CACA6F,SAAA,0BACA7F,KAAA,ifACA,CACA6F,SAAA,yBACA7F,KAAA,8NACA,CACA6F,SAAA,0BACA7F,KAAA,yrBACA,CACA6F,SAAA,wBACA7F,KAAA,ixBACA,CACA6F,SAAA,kBACA7F,KAAA,2QACA,CACA6F,SAAA,wBACA7F,KAAA,yuCACA,CACA6F,SAAA,uBACA7F,KAAA,oOACA,CACA6F,SAAA,uBACA7F,KAAA,m0BACA,CACA6F,SAAA,yBACA7F,KAAA,gHACA,CACA6F,SAAA,yBACA7F,KAAA,gGACA,CACA6F,SAAA,eACA7F,KAAA,866CACA,CACA6F,SAAA,eACA7F,KAAA,oOACA,CACA6F,SAAA,kBACA7F,KAAA,iHACA,CACA6F,SAAA,uBACA7F,KAAA,kOACA,CACA6F,SAAA,uBACA7F,KAAA,mOACA,CACA6F,SAAA,0BACA7F,KAAA,kbACA,CACA6F,SAAA,yBACA7F,KAAA,8NACA,CACA6F,SAAA,0BACA7F,KAAA,grBACA,CACA6F,SAAA,sBACA7F,KAAA,giEACA,CACA6F,SAAA,qBACA7F,KAAA,g/1KACA,CACA6F,SAAA,mCACA7F,KAAA,kGACA,CACA6F,SAAA,8BACA7F,KAAA,04QAGA,SAAA0G,cACA,OAAAD,CACA,CACA,MAAAE,EAAA,+BACA,SAAAC,iBAAA3D,GACA,GAAAA,EAAA4D,eAAA,MACA,GAAA5D,EAAA6D,sBAAA,MACA,UAAAre,EAAAkU,OAAAkB,sBAAA,cAAAhD,OAAAoI,EAAA,uCAAApI,OAAAoI,EAAA,gCACA,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","ignoreList":[]}